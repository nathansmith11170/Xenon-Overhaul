<?xml version='1.0' encoding='utf-8'?>
<mdscript xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" name="GM_RetrieveItem" xsi:noNamespaceSchemaLocation="md.xsd">
  <cues>
    <!--Base Mission information-->
    <!--
      Generic Mission name:    Retrieve specified item - intended for Master Missions
      Primary 'missiontype':   missiontype.intelligence
      Page: 30148 
      Note:
        Based on GM_Clear_Explosives (which is not MM-compatible)
    -->
    <!--
      The Feedback Manager contains a table of feedback values related to this Generic Mission. 
		  This table is 'const' during the mission (the table itself doesn't change anymore after inialization)
	    There are several maintypes of feedback:
        event:    Something which happens during a mission but does not cause it to end e.g. the mission being accepted
        removed:  The mission offer was removed before acceptance
        success:  The mission was successfully completed by the player
        failure:  The player failed the mission
        error:    Something went wrong with the mission set-up or during the mission
    -->
    <cue name="FeedbackValueManager" namespace="this" version="4">
      <actions>
        <set_value name="$FeedbackValues" exact="table[                    $MISSION_GENERATED       = table[$type = 'event',    $text = 'Mission variation generated successfully'],                    $MISSION_ACCEPTED        = table[$type = 'event',    $text = 'Mission accepted'],                    $MISSION_NO_VARIANT      = table[$type = 'event',    $text = 'No mission variant currently possible'],                    $MISSION_NO_NPC_SCENE    = table[$type = 'event',    $text = 'No mission NPC scene could be set up'],                                        $OFFER_REMOVED           = table[$type = 'removed',  $text = 'Offer removed'],                    $DECLINED_OFFER          = table[$type = 'removed',  $text = 'Player declined Event Offer'],                    $EVENT_OFFER_TIMEOUT     = table[$type = 'removed',  $text = 'Event Offer timeout'],                    $SIGNAL_LEAK_REMOVED     = table[$type = 'removed',  $text = 'Signal leak offer removed'],                    $DELIVERYNPC_KILLED      = table[$type = 'removed',  $text = 'Delivery NPC was killed'],                    $DELIVERY_OBJECT_DESTROYED = table[$type = 'removed',  $text = 'Deliver object destroyed'],                                        $MISSION_SUCCEEDED       = table[$type = 'success',  $text = 'Mission succeeded'],                                        $MISSION_ABORTED         = table[$type = 'failure',  $text = 'Mission aborted by player'],                    $FORCED_CLEANUP          = table[$type = 'failure',  $text = 'Forced to end from outside'],                    $MISSION_TIMEOUT         = table[$type = 'failure',  $text = 'Mission timeout'],                    $RML_FAILED            = table[$type = 'failure',  $text = 'RML failure'],                                        $NO_VALID_CLIENT_OWNER   = table[$type = 'error',    $text = 'No valid ClientOwner parameter provided'],                    $INVALID_OFFER_TYPE      = table[$type = 'error',    $text = 'No offer parameters were valid'],                    $NO_TEXT_OFFSET          = table[$type = 'error',    $text = 'No TextOffset set'],                    $INVALID_FORCE_CLEANUP   = table[$type = 'error',    $text = 'ForceCleanup cue invalid'],                    $INVALID_TARGET_PARAM    = table[$type = 'error',    $text = 'Invalid TargetShip param'],                    $INVALID_WARE_PARAM      = table[$type = 'error',    $text = 'Invalid ItemWare param'],                    $WARE_PARAM_NOT_INVENTORY = table[$type = 'error',   $text = '$ItemWare param is not a deliverable inventory ware'],                    $RML_ERROR             = table[$type = 'error',    $text = 'RML error']                    ]"/>
      </actions>
      <patch sinceversion="4">
        <!--To patch new feedback values, increment 'version' and 'sinceversion' number-->
        <force_cue cue="FeedbackValueManager"/>
      </patch>
    </cue>
    <!--Required variables: $Page & $TextOffset (and any below substitute_text values)
    If text is to be substituted for a new text variant, people should feel free to add the substitution below. Alternatively, pass in an overriding text in the $TextTable param-->
    <library name="GenerateTextTable">
      <actions>
        <!--Text page indexes $TextOffset + #
        1 = $TextTable.$missionname
        2 = $TextTable.$description (male target)
        3 = $TextTable.$description (female target)
        4 = $TextTable.$conversationoption  Used to substitute current amount and warename. Table value only used for substitution. example: "Deliver: $AMOUNT$x $WARE$"
        5 = $TextTable.$tooltip (Hardcoded Page=30148 Offset=1)     Conversation option tooltip if not selectable-->
        <set_value name="$TextTable.$missionname" exact="readtext.{$Page}.{$TextOffset + 1}" chance="if $TextTable.$missionname? then 0 else 100"/>
        <do_if value="not $TextTable.$description?">
          <do_if value="@$TargetShip.pilot.isfemale and readtext.{$Page}.{$TextOffset + 3}?">
            <set_value name="$TextTable.$description" exact="readtext.{$Page}.{$TextOffset + 3}"/>
          </do_if>
          <do_else>
            <set_value name="$TextTable.$description" exact="readtext.{$Page}.{$TextOffset + 2}"/>
          </do_else>
          <set_value name="$TextTable.$description" exact="$TextTable.$description + '\n\n' + readtext.{$Page}.{100}"/>
        </do_if>
        <run_actions ref="md.LIB_Generic.GenerateTextTable_BriefingWarning_Call" result="$TextTable.$description">
          <param name="BriefingText" value="$TextTable.$description"/>
          <param name="TargetSpace" value="$TargetShip.sector"/>
        </run_actions>
        <set_value name="$TextTable.$conversationoption" exact="readtext.{$Page}.{$TextOffset + 4}" chance="if $TextTable.$conversationoption? then 0 else 100"/>
        <set_value name="$TextTable.$tooltip" exact="readtext.{30148}.{1}" chance="if $TextTable.$tooltip? then 0 else 100"/>
      </actions>
    </library>
    <library name="GenerateVoiceTable">
      <actions>
        <run_actions ref="md.LIB_Generic.GenerateGenericVoiceTable" result="$VoiceTable">
          <param name="VoiceTable" value="$VoiceTable"/>
        </run_actions>
      </actions>
    </library>
    <library name="Start" version="5">
      <params>
        <!-- required parameters -->
        <param name="OfferObject" default="null" comment="The object on which this mission is based e.g. A Ship / Station / Signal Leak. Only needed for missions with a physical location."/>
        <param name="Client" default="null" comment="Pre-existing client"/>
        <param name="ClientOwner" default="null" comment="Overriding owner for reward calculation or creation of $Client if not provided. Defaults to $OfferObject owner if able"/>
        <param name="MissionCue" default="null" comment="Cue the mission is attached to. Defaults to Start (this)."/>
        <param name="MissionThread" default="null" comment="Mission thread for the offer and mission"/>
        <param name="GenerateReward" default="true" comment="If RewardCr or RewardNotoriety are invalid, generate them?"/>
        <param name="RewardCr" default="null" comment="If the reward for this mission is credits, the number of credits should be set to this variable."/>
        <param name="RewardObj" default="null" comment="If the reward for this mission is not credits, and is an object, it should be set to this variable."/>
        <param name="RewardNotoriety" default="null"/>
        <param name="RewardText" default="null" comment="Any text needed to define the reward for this mission - may be used in conjunction with $RewardCr and $RewardObj."/>
        <param name="MissionDuration" default="null"/>
        <param name="MissionType" default="missiontype.intelligence" comment="Variations can override mission type if required"/>
        <param name="MissionLevel"/>
        <param name="Difficulty"/>
        <!--Offer location and conversation-->
        <param name="WithoutOffer" default="false" comment="Do not create a mission offer. Either run immediatly or wait for WithoutOfferWaitCue"/>
        <param name="WithoutOfferWaitCue" default="null" comment="Do not create a mission offer but wait for this cue to be completed before running the mission"/>
        <param name="DeclineButton" default="true" comment="Have a decline button instead of a back button in the offer conversation"/>
        <param name="EventOffer" default="false" comment="Is the mission offered directly to the player with an interactive event"/>
        <param name="ConversationOffer" default="false" comment="When $EventOffer is false, should this offer be through a conversation with the $Client. Otherwise, offer at mission location"/>
        <param name="ConversationTriggerCue" default="null" comment="If provided, when this cue is signalled, start the mission offer conversation."/>
        <param name="OfferMaxDistance" default="null"/>
        <param name="HideFromBBS" default="false" comment="Hide this offer from the BBS? Show only through locations or special conversation handling."/>
        <param name="RemoveOnSectorChange" default="true"/>
        <param name="OfferDistance" default="50km" comment="Distance to the offer location before it becomes visible on the map or BBS (unless otherwise hidden)"/>
        <!--BBS only params-->
        <param name="BBSObject" default="null"/>
        <param name="BBSDistance" default="null"/>
        <param name="BBSTimeoutMin" default="null"/>
        <param name="BBSTimeoutMax" default="null"/>
        <param name="BBSSpace" default="null"/>
        <!--Mission text-->
        <param name="Page" comment="Allows a different text page to be used instead of the generic one. Text IDs must be mapped similarly."/>
        <param name="TextOffset" comment="The text offset for this variant's text on the page. Each variant starts at a different offset, but the entries[] within that offset have to match for all variants."/>
        <param name="TextTable" default="table[]" comment="Table, usually populated by the mission, to store the texts by an identifier key e.g. $missionname = 'Kill Bala Gi' Check library 'GenerateTextTable' for identifier keys. Pass in a table with such an entry to override the text usually generated from the $Page and $TextOffset"/>
        <param name="VoiceTable" default="table[]" comment="Table, usually populated by the mission, keys can have a value of 0 (=stay silent)"/>
        <!--Mission specific params-->
        <param name="TargetShip" comment="Specific ship that contains the item"/>
        <param name="TargetShieldPercent" default="5" comment="Maximal shield percentage required to drop item"/>
        <param name="TargetHullPercent" default="75" comment="Maximal hull percentage required to drop item"/>
        <param name="ItemWare" comment="Ware that should be dropped by TargetShip"/>
        <!--Delivery params-->
        <param name="DeliveryNPC" default="null" comment="The NPC to which the items should be delivered. If null, the mission ends on collecting the ware (primarily for legacy mission support)"/>
        <!-- ************************************************************************************************************************************************************************ -->
        <!-- If the mission is to manage placing the delivery NPC, DeliveryObject must be set.-->
        <param name="PlaceNPC" default="false" comment="Does the mission handle the placement and removal of the delivery NPC? If false, some other system must be in charge of doing so."/>
        <param name="PlacementTable" default="table[$cue = namespace, $priority = 50]" comment="Table containing the owning cue and priority of placing the NPC vs other missions"/>
        <param name="DeliveryObject" default="null" comment="The object on which to create the interior"/>
        <param name="DeliveryNPCSlotTags" default="[tag.npc_generic]" comment="NPC slot tags to help position the DeliveryNPC"/>
        <!-- Interior parameters. If either is provided, all must be valid. -->
        <param name="DeliveryRoomMacro" default="null" comment="The dynamic interior room the DeliveryNPC should be placed in, if not placed already"/>
        <param name="DeliveryCorridorMacro" default="null" comment="The dynamic interior corridor leading to DeliveryRoomMacro"/>
        <param name="DeliveryDoors" default="null" comment="The possible dynamic interior doors used to connect the room and corridor. When defining a room or corridor macro, this is is the variable saved in the doors parameter"/>
        <param name="DeliveryInteriorName" default="null" comment="The name of the dynamic interior the DeliveryNPC should used, if not placed already"/>
        <!-- ************************************************************************************************************************************************************************ -->
        <param name="ReportSignalCue" default="null" comment="Cue to be signalled when something happens which could be of interest to the calling cue. Saves values to ReportSignalCue.$FeedbackValue and ReportSignalCue.$EndFeedbackValue"/>
        <param name="CancelOfferCue" default="null" comment="Cue which when completed will force this missions offer to be removed and cleaned up. No effect if mission has been accepted."/>
        <param name="ForceCleanup" default="null" comment="Cue to force a cleanup from outside when completed"/>
        <param name="DebugChance" default="0"/>
      </params>
      <actions>
        <!--Feedback value setup-->
        <set_value name="$Feedback" exact="null"/>
        <set_value name="$FeedbackManager" exact="md.GM_RetrieveItem.FeedbackValueManager"/>
        <assert value="$WithoutOffer or not $MissionCue or (not $MissionCue.hasmission and not $MissionCue.hasmissionoffer)" text="'Mission is set to create an offer but provided MissionCue: ' + $MissionCue + ' already has an offer or is a running mission [Owen]'"/>
        <!--Param validation-->
        <do_if value="not $WithoutOffer">
          <!--Optional variables (at least one should exist): $OfferObject, (bool)$HideFromBBS, (bool)$ConversationOffer, (bool)$EventOffer
          Result variables:
          $OfferType = 'signalleak' OR 'objectbased' OR 'eventoffer' OR 'conversationoffer'
          $AllowOfferEvent = Will an event offering this event be also fired immediatly?-->
          <include_actions ref="md.GenericMissions.GetOfferType"/>
          <do_if value="not $OfferType">
            <set_value name="$Feedback" exact="'$INVALID_OFFER_TYPE'"/>
          </do_if>
        </do_if>
        <do_if value="not $Feedback">
          <do_if value="not $TextOffset">
            <set_value name="$Feedback" exact="'$NO_TEXT_OFFSET'"/>
          </do_if>
          <do_else>
            <do_if value="$Client">
              <set_value name="$PreexistingClient"/>
            </do_if>
            <do_if value="not $ClientOwner">
              <set_value name="$ClientOwner" exact="if $Client then $Client.owner else @$OfferObject.owner"/>
              <assert value="$ClientOwner" text="'No valid $ClientOwner [Owen]'"/>
            </do_if>
            <do_if value="not $ClientOwner">
              <set_value name="$Feedback" exact="'$NO_VALID_CLIENT_OWNER'"/>
            </do_if>
            <do_else>
              <!--Mission specific param checks-->
              <do_if value="not $TargetShip.exists or $TargetShip.ismasstraffic">
                <set_value name="$Feedback" exact="'$INVALID_TARGET_PARAM'"/>
              </do_if>
              <do_elseif value="not $ItemWare">
                <set_value name="$Feedback" exact="'$INVALID_WARE_PARAM'"/>
              </do_elseif>
              <do_elseif value="$DeliveryNPC and not $ItemWare.isinventory">
                <set_value name="$Feedback" exact="'$WARE_PARAM_NOT_INVENTORY'"/>
              </do_elseif>
            </do_else>
          </do_else>
        </do_if>
      </actions>
      <patch sinceversion="2" state="complete">
        <set_value name="$DeliveryNPC" exact="null"/>
        <set_value name="$DeliveryObject" exact="null"/>
      </patch>
      <patch sinceversion="3" state="complete">
        <set_value name="$PlacementTable" exact="table[$cue = namespace, $priority = 50]"/>
        <set_value name="$DeliveryNPCSlotTags" exact="[tag.npc_generic]"/>
        <remove_value name="$DeliveryNPCSlot"/>
      </patch>
      <patch sinceversion="4">
        <set_value name="$VoiceTable" exact="table[]"/>
        <run_actions ref="md.LIB_Generic.GenerateGenericVoiceTable" result="$VoiceTable">
          <param name="VoiceTable" value="$VoiceTable"/>
        </run_actions>
      </patch>
      <patch sinceversion="5">
        <do_if value="not $TargetShip.exists or $TargetShip.ismasstraffic">
          <debug_text text="'Target is now invalid. Aborting mission.'" filter="savegame"/>
          <set_value name="$Feedback" exact="'$INVALID_TARGET_PARAM'"/>
          <signal_cue cue="CleanUp"/>
        </do_if>
      </patch>
      <cues>
        <cue name="Do_Not_Start_Mission" onfail="cancel">
          <conditions>
            <check_value value="$Feedback"/>
          </conditions>
          <actions>
            <signal_cue cue="CleanUp"/>
          </actions>
        </cue>
        <cue name="Do_Start_Mission" onfail="cancel">
          <conditions>
            <check_value value="not $Feedback"/>
          </conditions>
          <actions>
            <do_if value="not $MissionCue">
              <set_value name="$MissionCue" exact="Start"/>
            </do_if>
            <do_if value="not $PreexistingClient?">
              <!-- No pre-existing client, create a temporary client for this mission -->
              <!-- This auto-assigns a 'matching' text-page using the metadata (id=0) specified in the text-files. Speak commands for this actor will then refer to the selected text-page-->
              <!-- Possibly we'll need to add additional filters (in case some topics aren't supported by all generic text-pages) -->
              <create_cue_actor cue="Start" name="$Client" comment="temporary cue-actor will be cleaned up in the Cleanup-cue, see destroy_object on $Client">
                <select faction="$ClientOwner"/>
                <owner exact="$ClientOwner"/>
              </create_cue_actor>
            </do_if>
            <!-- Determine the reward (credits/object/notoriety) -->
            <do_if value="$GenerateReward">
              <include_actions ref="md.LIB_Reward_Balancing.Allocate_RewardWeight" comment="input: $Difficulty, $ClientOwner; output: $RewardCreditsWeight, $RewardModWeight, $RewardSeminarWeight"/>
              <do_if value="not $RewardCr" weight="$RewardCreditsWeight">
                <signal_cue_instantly cue="md.LIB_Reward_Balancing.Reward_Money" param="[Start, $Difficulty, $MissionLevel, $ClientOwner]"/>
                <include_actions ref="md.LIB_Reward_Balancing.Apply_RewardMultiplier" comment="signal leak and mission thread bonus"/>
                <set_value name="$RewardCr" exact="$Reward_Money__Result_Multiplied"/>
              </do_if>
              <do_if value="not $RewardObj">
                <run_actions ref="md.LIB_Reward_Balancing.DetermineAdditionalReward" result="$AdditionalReward">
                  <param name="RewardModWeight" value="$RewardModWeight"/>
                  <param name="RewardSeminarWeight" value="$RewardSeminarWeight"/>
                </run_actions>
                <do_if value="$AdditionalReward != null">
                  <set_value name="$RewardObj" exact="$AdditionalReward"/>
                  <set_value name="$RewardText" exact="$RewardObj.name"/>
                </do_if>
              </do_if>
              <do_if value="not $RewardNotoriety">
                <signal_cue_instantly cue="md.LIB_Reward_Balancing.Reward_Notoriety" param="[Start, $Difficulty, $MissionLevel, $ClientOwner]"/>
                <set_value name="$RewardNotoriety" exact="$Reward_Notoriety__Result"/>
              </do_if>
            </do_if>
            <include_actions ref="GenerateTextTable"/>
            <include_actions ref="GenerateVoiceTable"/>
            <do_if value="$ReportSignalCue">
              <!--Signal the $ReportSignalCue that the mission has been successfully generated-->
              <set_value name="$FeedbackData" exact="$FeedbackManager.$FeedbackValues.$MISSION_GENERATED.clone"/>
              <set_value name="$FeedbackData.$ID" exact="'$MISSION_GENERATED'"/>
              <set_value name="$ReportSignalCue.$FeedbackValue" exact="$FeedbackData.clone" comment="Mission variation generated successfully"/>
              <signal_cue_instantly cue="$ReportSignalCue" param="table[$Name = $TextTable.$missionname, $Cue = $MissionCue, $Reward = $RewardCr, $RewardText = $RewardText]"/>
            </do_if>
          </actions>
          <cues>
            <!--***MISSION OFFER***-->
            <cue name="With_Offer" onfail="cancel">
              <conditions>
                <check_value value="$WithoutOffer" exact="false"/>
              </conditions>
              <cues>
                <!--Cue which creates the offer, when signalled. To be signalled from the GenericMissions.OfferMission library, referenced below-->
                <cue name="CreateOffer" instantiate="true" comment="instanced to prevent cleanup">
                  <conditions>
                    <event_cue_signalled/>
                    <check_value value="not @$OfferCreated"/>
                  </conditions>
                  <actions>
                    <do_if value="not @$OfferCreated">
                      <!-- Briefing details -->
                      <create_offer cue="$MissionCue" location="$OfferObject" distance="$OfferDistance" name="$TextTable.$missionname" description="$TextTable.$description" difficulty="$Difficulty" actor="$Client" faction="$ClientOwner" type="$MissionType" reward="$RewardCr" rewardtext="$RewardText" duration="$MissionDuration" hidden="$HideFromBBS" space="$BBSSpace">
                        <briefing>
                          <objective step="1" action="objective.attack" object="$TargetShip"/>
                          <objective step="2" action="objective.collect" text="$ItemWare.name"/>
                          <objective step="3" action="objective.deliver" text="$ItemWare.name"/>
                        </briefing>
                      </create_offer>
                    </do_if>
                    <set_value name="$OfferCreated" exact="true"/>
                  </actions>
                </cue>
                <!--The majority of the offer logic is within this library. The parameters we pass down below, specify in which way this mission is going to be offered to the player (i.e. BBS, Signal-Leak, ...)
                Some of the mission specific handling is still contained in this file but triggered via the library via a signal e.g. setting up the briefing details via the 'CreateOffer' cue above.-->
                <cue name="Offer_Management" ref="md.GenericMissions.OfferMission">
                  <param name="OfferType" value="$OfferType"/>
                  <param name="OfferCue" value="$MissionCue"/>
                  <param name="CleanupCue" value="Offer_End"/>
                  <param name="BriefingSetupCue" value="CreateOffer"/>
                  <param name="MissionName" value="$TextTable.$missionname"/>
                  <param name="CancelOfferCue" value="$CancelOfferCue"/>
                  <!--Object based params (offered by Station/Ship/Signal-leak)-->
                  <param name="TimeoutMin" value="8min" comment="Minimum time the offer remains valid"/>
                  <param name="TimeoutMax" value="12min"/>
                  <param name="MaxDistance" value="$OfferMaxDistance"/>
                  <param name="RemoveOnSectorChange" value="$RemoveOnSectorChange"/>
                  <!--Object and Signal Leak based params-->
                  <param name="OfferObject" value="$OfferObject"/>
                  <!--BBS based offers-->
                  <param name="BBSObject" value="@$BBSObject"/>
                  <param name="BBSDistance" value="@$BBSDistance"/>
                  <param name="BBSTimeoutMin" value="@$BBSTimeoutMin"/>
                  <param name="BBSTimeoutMax" value="@$BBSTimeoutMax"/>
                  <!--Conversation event offers-->
                  <param name="AllowOfferEvent" value="$AllowOfferEvent"/>
                  <param name="ConversationTriggerCue" value="$ConversationTriggerCue"/>
                  <!--Client-->
                  <param name="Client" value="$Client"/>
                  <param name="Line_EventOffer" value="1000101" comment="Client speaks this line from his generic-npc-page"/>
                  <param name="Line_StartConversation" value="null" comment="Client speaks this line from his generic-npc-page"/>
                  <param name="Line_Goodbye" value="null" comment="Client speaks this line from his generic-npc-page"/>
                  <param name="DebugChance" value="$DebugChance"/>
                </cue>
                <!--Cue signalled when the offer library is finished-->
                <cue name="Offer_End">
                  <conditions>
                    <event_cue_signalled/>
                  </conditions>
                  <actions>
                    <do_if value="this.$Feedback.$ID == '$accepted_offer'">
                      <signal_cue cue="MissionAccepted"/>
                    </do_if>
                    <do_elseif value="this.$Feedback.$ID == '$DECLINED_OFFER'">
                      <set_value name="$Feedback" exact="'$DECLINED_OFFER'"/>
                      <signal_cue cue="CleanUp"/>
                    </do_elseif>
                    <do_elseif value="this.$Feedback.$ID == '$OFFER_REMOVED'">
                      <set_value name="$Feedback" exact="'$OFFER_REMOVED'"/>
                      <signal_cue cue="CleanUp"/>
                    </do_elseif>
                    <do_elseif value="this.$Feedback.$ID == '$SIGNAL_LEAK_REMOVED'">
                      <set_value name="$Feedback" exact="'$SIGNAL_LEAK_REMOVED'"/>
                      <signal_cue cue="CleanUp"/>
                    </do_elseif>
                    <do_elseif value="this.$Feedback.$ID == '$EVENT_OFFER_TIMEOUT'">
                      <set_value name="$Feedback" exact="'$EVENT_OFFER_TIMEOUT'"/>
                      <signal_cue cue="CleanUp"/>
                    </do_elseif>
                  </actions>
                </cue>
              </cues>
            </cue>
            <!--These cues handle the cases where a mission is automatically accepted on creation-->
            <cue name="Without_Offer" onfail="cancel">
              <conditions>
                <check_value value="$WithoutOffer"/>
                <check_value value="not $WithoutOfferWaitCue"/>
              </conditions>
              <actions>
                <signal_cue cue="MissionAccepted"/>
              </actions>
            </cue>
            <cue name="Without_Offer_Wait_Cue" onfail="cancel">
              <conditions>
                <check_value value="$WithoutOffer"/>
                <check_value value="$WithoutOfferWaitCue"/>
              </conditions>
              <cues>
                <cue name="Without_Offer_Wait_Cue_Completed">
                  <conditions>
                    <check_any>
                      <event_cue_completed cue="$WithoutOfferWaitCue"/>
                      <check_all>
                        <event_cue_signalled cue="$WithoutOfferWaitCue"/>
                        <check_value value="event.param == $MissionCue"/>
                      </check_all>
                    </check_any>
                  </conditions>
                  <actions>
                    <signal_cue_instantly cue="MissionAccepted"/>
                  </actions>
                </cue>
              </cues>
            </cue>
            <cue name="DeliverNPCDestroyed_Early_Check" onfail="cancel">
              <conditions>
                <check_value value="$DeliveryNPC"/>
              </conditions>
              <cues>
                <cue name="DeliverNPCDestroyed_Early">
                  <conditions>
                    <event_object_destroyed object="$DeliveryNPC"/>
                  </conditions>
                  <actions>
                    <!--TODO @Owen - log message-->
                    <set_value name="$Feedback" exact="'$DELIVERYNPC_KILLED'"/>
                    <signal_cue cue="CleanUp"/>
                  </actions>
                </cue>
              </cues>
            </cue>
            <cue name="DeliverStationDestroyed_Early_Check" onfail="cancel">
              <conditions>
                <check_value value="$DeliveryObject"/>
              </conditions>
              <cues>
                <cue name="DeliverStationDestroyed_Early">
                  <conditions>
                    <event_object_destroyed object="$DeliveryObject"/>
                  </conditions>
                  <actions>
                    <set_value name="$Feedback" exact="'$DELIVERY_OBJECT_DESTROYED'"/>
                    <signal_cue cue="CleanUp"/>
                  </actions>
                </cue>
              </cues>
            </cue>
            <!--This cue creates the mission itself, either from scratch or via an existing mission offer-->
            <cue name="MissionAccepted">
              <conditions>
                <event_cue_signalled/>
              </conditions>
              <actions>
                <do_if value="not $WithoutOffer">
                  <speak actor="$Client" line="$VoiceTable.$MissionAccepted" comment="(player accepted mission offer)" chance="if $VoiceTable.$MissionAccepted == 0 then 0 else 100"/>
                  <signal_cue_instantly cue="md.GenericMissions.PlotMissionInterrupted" param="table[$client = $Client, $line = $VoiceTable.$MissionAccepted]"/>
                </do_if>
                <debug_text text="'Mission accepted!'" chance="$DebugChance"/>
                <set_value name="stat.missions_accepted" operation="add"/>
                <do_if value="$WithoutOffer">
                  <!--$MissionCue may already be a mission cue passed in as a parameter-->
                  <do_if value="not $MissionCue.hasmission">
                    <do_if value="$MissionThread">
                      <create_mission cue="$MissionCue" missionthread="$MissionThread" name="$TextTable.$missionname" description="$TextTable.$description" difficulty="$Difficulty" faction="$ClientOwner" type="$MissionType" reward="$RewardCr" rewardtext="$RewardText"/>
                    </do_if>
                    <do_else>
                      <create_mission cue="$MissionCue" name="$TextTable.$missionname" description="$TextTable.$description" difficulty="$Difficulty" faction="$ClientOwner" type="$MissionType" reward="$RewardCr" rewardtext="$RewardText"/>
                    </do_else>
                  </do_if>
                  <update_mission cue="$MissionCue">
                    <briefing>
                      <objective step="1" action="objective.attack" object="$TargetShip"/>
                      <objective step="2" action="objective.collect" text="$ItemWare.name"/>
                    </briefing>
                  </update_mission>
                </do_if>
                <do_else>
                  <!--Copy data from the offer, then remove it-->
                  <do_if value="$MissionThread">
                    <create_mission cue="$MissionCue" offercue="$MissionCue" missionthread="$MissionThread"/>
                  </do_if>
                  <do_else>
                    <create_mission cue="$MissionCue" offercue="$MissionCue"/>
                  </do_else>
                  <remove_offer cue="$MissionCue"/>
                  <cancel_cue cue="With_Offer"/>
                </do_else>
                <do_if value="$ReportSignalCue">
                  <set_value name="$FeedbackData" exact="$FeedbackManager.$FeedbackValues.$MISSION_ACCEPTED.clone"/>
                  <set_value name="$FeedbackData.$ID" exact="'$MISSION_ACCEPTED'"/>
                  <set_value name="$ReportSignalCue.$FeedbackValue" exact="$FeedbackData.clone" comment="Mission accepted"/>
                  <signal_cue_instantly cue="$ReportSignalCue"/>
                </do_if>
                <signal_cue_instantly cue="md.GenericMissions.GenericAcceptLogbookEntry" param="[$TextTable.$missionname, $Client, $ClientOwner]"/>
              </actions>
              <cues>
                <cue name="ActivateImmediately" onfail="cancel">
                  <conditions>
                    <check_value value="not $MissionThread"/>
                  </conditions>
                  <actions>
                    <signal_cue cue="ActivateMission"/>
                  </actions>
                </cue>
                <cue name="ActivateOnCondition" onfail="cancel">
                  <conditions>
                    <check_value value="$MissionThread"/>
                  </conditions>
                  <actions>
                    <do_if value="$MissionThread.canactivatesubmission.{$MissionCue}">
                      <signal_cue cue="ActivateMission"/>
                      <cancel_cue cue="ActivateOnCondition"/>
                    </do_if>
                  </actions>
                  <cues>
                    <!--TODO @Owen add an event for when a submission has been removed from the thread-->
                    <cue name="CheckMissionThreadState" checkinterval="1s">
                      <conditions>
                        <check_value value="$MissionThread.canactivatesubmission.{$MissionCue}"/>
                      </conditions>
                      <actions>
                        <signal_cue cue="ActivateMission"/>
                        <cancel_cue cue="ActivateOnCondition"/>
                      </actions>
                    </cue>
                  </cues>
                </cue>
                <cue name="ActivateMission">
                  <conditions>
                    <event_cue_signalled/>
                  </conditions>
                  <actions>
                    <do_if value="$MissionDuration">
                      <update_mission cue="$MissionCue" endtime="player.age + $MissionDuration"/>
                    </do_if>
                    <set_value name="$StartStep" exact="1"/>
                    <set_value name="$DeliverStep" exact="3"/>
                  </actions>
                  <cues>
                    <!-- Trigger the RML, which will check the win/lose conditions and report back -->
                    <cue name="RetrieveItem_Ref" ref="md.RML_RetrieveItem.RetrieveItem">
                      <!-- always pass these -->
                      <param name="EndSignalCue" value="MissionEnded"/>
                      <param name="MissionCue" value="$MissionCue"/>
                      <param name="StartStep" value="$StartStep" comment="Briefing step to start the mission on"/>
                      <param name="UpdateBriefing" value="true" comment="Update the briefing objective step when the objective is updated"/>
                      <param name="DebugChance" value="$DebugChance"/>
                      <!-- mission-related parameters -->
                      <param name="TargetShip" value="$TargetShip"/>
                      <param name="TargetShieldPercent" value="$TargetShieldPercent"/>
                      <param name="TargetHullPercent" value="$TargetHullPercent"/>
                      <param name="ItemWare" value="$ItemWare"/>
                    </cue>
                    <cue name="Aborted">
                      <conditions>
                        <event_mission_aborted cue="$MissionCue"/>
                      </conditions>
                      <actions>
                        <signal_cue_instantly cue="md.GenericMissions.GenericAbortLogbookEntry" param="[$TextTable.$missionname, $Client]"/>
                        <set_value name="$Feedback" exact="'$MISSION_ABORTED'"/>
                        <remove_mission cue="$MissionCue" type="aborted"/>
                        <signal_cue cue="CleanUp"/>
                      </actions>
                    </cue>
                    <cue name="MissionTimeout" onfail="cancel">
                      <conditions>
                        <check_value value="typeof $MissionDuration == datatype.time"/>
                        <check_value value="$MissionDuration" min="1s"/>
                      </conditions>
                      <delay exact="$MissionDuration"/>
                      <actions>
                        <signal_cue_instantly cue="md.GenericMissions.GenericTimeoutLogbookEntry" param="[$TextTable.$missionname, $Client]"/>
                        <remove_mission cue="$MissionCue" type="failed"/>
                        <set_value name="$Feedback" exact="'$MISSION_TIMEOUT'"/>
                        <signal_cue_instantly cue="CleanUp"/>
                      </actions>
                    </cue>
                    <!--In the case of RML_RetrieveItem ending, this may lead to calling RML_Deliver_Inventory instead of the mission actually ending-->
                    <cue name="MissionEnded">
                      <!-- Handle the end-feedback (usually originating from the RML used above) -->
                      <conditions>
                        <event_cue_signalled/>
                      </conditions>
                      <actions>
                        <!-- Failure case -->
                        <do_if value="MissionEnded.$EndFeedbackValue" max="0">
                          <debug_text text="'This mission has failed. RML Feedback: ' + MissionEnded.$EndFeedbackValue" chance="$DebugChance"/>
                          <set_value name="$Feedback" exact="'$RML_FAILED'"/>
                          <speak actor="$Client" line="$VoiceTable.$MissionFailed" comment="(failed mission)" chance="if $VoiceTable.$MissionFailed == 0 then 0 else 100"/>
                          <signal_cue_instantly cue="md.GenericMissions.GenericFailLogbookEntry" param="[$TextTable.$missionname, $Client, @MissionEnded.$EndFeedbackText]"/>
                          <remove_mission cue="$MissionCue" type="failed" reason="@MissionEnded.$EndFeedbackText"/>
                          <signal_cue cue="CleanUp"/>
                        </do_if>
                        <!-- Success case -->
                        <do_else>
                          <!--TODO: Partial success-->
                          <do_if value="$DeliveryNPC">
                            <signal_cue cue="DeliverItem"/>
                          </do_if>
                          <do_else>
                            <debug_text text="'This mission has ended. RML Feedback: ' + MissionEnded.$EndFeedbackValue" chance="$DebugChance"/>
                            <include_actions ref="MissionSuccessful"/>
                            <signal_cue cue="CleanUp"/>
                          </do_else>
                        </do_else>
                      </actions>
                    </cue>
                    <cue name="DeliverItem">
                      <conditions>
                        <event_cue_signalled/>
                      </conditions>
                      <actions>
                        <cancel_cue cue="DeliverNPCDestroyed_Early_Check"/>
                        <cancel_cue cue="DeliverStationDestroyed_Early_Check"/>
                        <set_value name="$WaresTable" exact="table[]"/>
                        <set_value name="$WaresTable.{$ItemWare}" exact="[1, 1]"/>
                      </actions>
                      <cues>
                        <cue name="DeliverInventory_RML_Ref" ref="md.RML_Deliver_Inventory.Deliver_Inventory">
                          <param name="EndSignalCue" value="Deliver_RML_Ended"/>
                          <param name="MissionCue" value="$MissionCue"/>
                          <param name="StartStep" value="$DeliverStep" comment="Briefing step to start the mission on"/>
                          <param name="UpdateBriefing" value="true" comment="Update the briefing objective step when the objective is updated"/>
                          <!--Delivery params-->
                          <param name="WaresTableParam" value="$WaresTable" comment="Table of ware amounts. Key = ware. Value = [$maxamount, $remainingamount]. Inventory wares only."/>
                          <param name="DeliveryNPC" value="$DeliveryNPC" comment="The NPC to which the items should be delivered."/>
                          <param name="DeliveryObject" value="$DeliveryObject" comment="The object on which to point to before the NPC is placed. Also used to create the interior with the below parameters"/>
                          <param name="ProgressBarText" value="{30004,1054}" comment="Text to be displayed next to the ware delivery progress bar e.g. ('Delivered')"/>
                          <param name="ConversationOptionText" value="$TextTable.$conversationoption"/>
                          <param name="ConversationTipText" value="$TextTable.$tooltip"/>
                          <!-- ************************************************************************************************************************************************************************ -->
                          <!-- NPC Placement and interior creation - See library for parameter details-->
                          <param name="PlaceNPC" value="$PlaceNPC"/>
                          <param name="PlacementTable" value="$PlacementTable"/>
                          <param name="DeliveryNPCSlotTags" value="$DeliveryNPCSlotTags"/>
                          <!-- Interior parameters. If either is provided, all must be valid. -->
                          <param name="DeliveryRoomMacro" value="$DeliveryRoomMacro" comment="The dynamic interior room the DeliveryNPC should be placed in, if not placed already"/>
                          <param name="DeliveryCorridorMacro" value="$DeliveryCorridorMacro" comment="The dynamic interior corridor leading to DeliveryRoomMacro"/>
                          <param name="DeliveryDoor" value="if $DeliveryDoors then $DeliveryDoors.random else null" comment="The possible dynamic interior doors used to connect the room and corridor. When defining a room or corridor macro, this is is the variable saved in the doors parameter"/>
                          <param name="DeliveryInteriorName" value="$DeliveryInteriorName" comment="The name of the dynamic interior the DeliveryNPC should use, if not placed already"/>
                          <!-- ************************************************************************************************************************************************************************ -->
                          <param name="DebugChance" value="$DebugChance"/>
                        </cue>
                      </cues>
                    </cue>
                    <cue name="Deliver_RML_Ended">
                      <conditions>
                        <event_cue_signalled/>
                      </conditions>
                      <actions>
                        <!-- Failure case -->
                        <do_if value="this.$EndFeedbackValue" max="0">
                          <debug_text text="'This mission has failed. RML Feedback: ' + this.$EndFeedbackValue" chance="$DebugChance"/>
                          <set_value name="$Feedback" exact="'$RML_FAILED'"/>
                          <speak actor="$Client" line="$VoiceTable.$MissionFailed" comment="(failed mission)" chance="if $VoiceTable.$MissionFailed == 0 then 0 else 100"/>
                          <signal_cue_instantly cue="md.GenericMissions.GenericFailLogbookEntry" param="[$TextTable.$missionname, $Client, @this.$EndFeedbackText]"/>
                          <remove_mission cue="$MissionCue" type="failed" reason="@this.$EndFeedbackText"/>
                          <signal_cue cue="CleanUp"/>
                        </do_if>
                        <!-- Success case -->
                        <do_else>
                          <debug_text text="'This mission has ended. RML Feedback: ' + this.$EndFeedbackValue" chance="$DebugChance"/>
                          <include_actions ref="MissionSuccessful"/>
                          <signal_cue cue="CleanUp"/>
                        </do_else>
                      </actions>
                    </cue>
                    <library name="MissionSuccessful">
                      <actions>
                        <do_if value="$RewardNotoriety and $ClientOwner">
                          <debug_text text="'Relation was: ' + player.entity.relationto.{$ClientOwner}" chance="$DebugChance"/>
                          <add_faction_relation faction="faction.player" otherfaction="$ClientOwner" value="$RewardNotoriety" reason="relationchangereason.missioncompleted"/>
                          <debug_text text="'Relation is now: ' + player.entity.relationto.{$ClientOwner}" chance="$DebugChance"/>
                        </do_if>
                        <do_if value="$RewardCr">
                          <reward_player money="$RewardCr"/>
                        </do_if>
                        <do_if value="$RewardObj">
                          <do_if value="$RewardObj.isinventory">
                            <add_inventory entity="player.entity" ware="$RewardObj"/>
                            <show_notification text="[{1015,100}, '', $RewardText]" sound="notification_achievement" comment="Item received"/>
                          </do_if>
                        </do_if>
                        <set_value name="stat.missions_completed" operation="add"/>
                        <set_value name="$Feedback" exact="'$MISSION_SUCCEEDED'"/>
                        <speak actor="$Client" line="$VoiceTable.$MissionSuccess" comment="(successful mission)" chance="if $VoiceTable.$MissionSuccess == 0 then 0 else 100"/>
                        <signal_cue_instantly cue="md.GenericMissions.GenericCompleteLogbookEntry" param="[$TextTable.$missionname, $Client, null, $RewardCr]"/>
                        <remove_mission cue="$MissionCue" type="completed" activate="next"/>
                      </actions>
                    </library>
                  </cues>
                </cue>
              </cues>
            </cue>
          </cues>
        </cue>
        <cue name="ForceCleanup" onfail="cancel">
          <conditions>
            <check_value value="$ForceCleanup"/>
          </conditions>
          <actions>
            <do_if value="not $ForceCleanup.exists">
              <set_value name="$Feedback" exact="'$INVALID_FORCE_CLEANUP'"/>
              <signal_cue_instantly cue="CleanUp"/>
            </do_if>
          </actions>
          <cues>
            <cue name="ForceCleanup_Wait">
              <conditions>
                <check_any>
                  <event_cue_completed cue="$ForceCleanup"/>
                  <check_all>
                    <event_cue_signalled cue="$ForceCleanup"/>
                    <check_value value="event.param == $MissionCue"/>
                  </check_all>
                </check_any>
              </conditions>
              <actions>
                <set_value name="$Feedback" exact="'$FORCED_CLEANUP'"/>
                <signal_cue_instantly cue="CleanUp"/>
              </actions>
            </cue>
          </cues>
        </cue>
        <cue name="CleanUp">
          <conditions>
            <event_cue_signalled/>
          </conditions>
          <actions>
            <!--Temp value. This is used to identify if a cutscene for this mission is still playing.-->
            <do_if value="$BriefingCutsceneStarted?">
              <remove_value name="$BriefingCutsceneStarted"/>
              <stop_cutscene key="$CutsceneKey"/>
            </do_if>
            <do_if value="$HoloMap?">
              <remove_holomap/>
              <remove_value name="$HoloMap"/>
            </do_if>
            <do_if value="md.GM_RetrieveItem.RetrieveItemGM.$ActiveInstances.{$ItemWare}?">
              <remove_value name="md.GM_RetrieveItem.RetrieveItemGM.$ActiveInstances.{$ItemWare}"/>
              <debug_text text="'Removing instance with %s this=%s (remaining=%s)'.[$ItemWare, this, md.GM_RetrieveItem.RetrieveItemGM.$ActiveInstances]" chance="0"/>
            </do_if>
            <!--***Cleanup objects***-->
            <do_if value="$TargetShip.isoperational">
              <release_commandeered_object object="$TargetShip"/>
            </do_if>
            <!--No .exists check here as $Client may not be connected to gamegraph-->
            <do_if value="$Client.isclass.npc and (not $PreexistingClient?)">
              <destroy_object object="$Client" comment="cleanup the client we created with create_cue_actor"/>
            </do_if>
            <!--***Evaluate result***-->
            <do_if value="$DebugChance or $ReportSignalCue">
              <set_value name="$FeedbackData" exact="$FeedbackManager.$FeedbackValues.{$Feedback}.clone"/>
              <do_if value="$FeedbackData">
                <set_value name="$FeedbackData.$ID" exact="$Feedback"/>
                <debug_text text="'Mission ended with reason: ' + $FeedbackData.$type + ' - ' + $FeedbackData.$text" chance="$DebugChance"/>
              </do_if>
              <do_else>
                <set_value name="$FeedbackData" exact="table[$ID = 'error_unknown', $type = 'error', $text = 'This is an unknown error']" comment="feedback = id, type and error-text from the above FeedbackValues-table"/>
                <assert value="false" text="'Mission ended with unknown case: ' + $Feedback + ' [Owen]'" break="1"/>
              </do_else>
              <do_if value="$ReportSignalCue" comment="The cue which called us">
                <set_value name="$ReportSignalCue.$EndFeedbackValue" exact="$FeedbackData" comment="return feedback-data to calling cue"/>
                <signal_cue cue="$ReportSignalCue"/>
              </do_if>
            </do_if>
            <cancel_cue cue="Start"/>
          </actions>
        </cue>
      </cues>
    </library>
    <!-- MISSION SETUP HELPERS -->
    <!-- Requires: $Faction(optional), Result: $TargetShip -->
    <library name="Setup_FindTargetShip" purpose="run_actions">
      <params>
        <param name="Faction" default="null"/>
        <param name="Origin" default="player.zone"/>
        <param name="MaxDistance" default="5"/>
      </params>
      <actions>
        <!-- Find $TargetShip if not provided by GM user -->
        <set_value name="$TargetShip" exact="null"/>
        <!-- Find targetship of specified faction -->
        <find_cluster_in_range name="$LocalClusters" object="$Origin" maxdistance="2" multiple="true"/>
        <shuffle_list list="$LocalClusters"/>
        <do_for_each name="$LocalCluster" in="$LocalClusters">
          <do_if value="$Faction">
            <find_ship name="$TargetShip" space="$LocalCluster" owner="$Faction" masstraffic="false" class="[class.ship_s, class.ship_m]" commandeerable="true"/>
          </do_if>
          <do_else>
            <!-- Find a targetship which is NOT player/Xenon/Kha'ak -->
            <find_ship name="$TargetShip" space="$LocalCluster" masstraffic="false" class="[class.ship_s, class.ship_m]" commandeerable="true">
              <match owner="[faction.player, faction.xenon, faction.xenon1, faction.xenon2, faction.xenon3, faction.xenon4, faction.xenon5, faction.xenon6, faction.khaak]" negate="true"/>
            </find_ship>
          </do_else>
          <do_if value="$TargetShip.isoperational">
            <break/>
          </do_if>
        </do_for_each>
        <return value="$TargetShip"/>
      </actions>
    </library>
    <!-- input: $MissionLevel; output: $MissionLevel, $TargetShieldPercent, $TargetHullPercent -->
    <library name="ConfigureDifficulty">
      <actions>
        <set_value name="$MissionLevel" exact="if not $MissionLevel? then 1 else $MissionLevel"/>
        <debug_text text="'Missing $MissionLevel input. Set to: ' + $MissionLevel" chance="$DebugChance"/>
        <!-- Figure out how much you have to damage the target, based on $MissionLevel-->
        <set_value name="$LevelVsResilience" exact="table[             { 1 } = [  15, 90 ],             { 2 } = [  10, 75 ],             { 3 } = [   5, 50 ],             { 4 } = [   3, 25 ],             { 5 } = [   3, 10 ],           ]"/>
        <set_value name="$Level" exact="$LevelVsResilience.keys.random"/>
        <set_value name="$TargetShieldPercent" exact="$LevelVsResilience.{$Level}.{1}" comment="Maximal shield percentage required to drop item"/>
        <set_value name="$TargetHullPercent" exact="$LevelVsResilience.{$Level}.{2}" comment="Maximal hull percentage required to drop item"/>
        <set_value name="$MissionLevel" exact="$MissionLevel + $Level - 1"/>
      </actions>
    </library>
    <!--param name="TargetShip"    default="null" comment="Specific ship that contains the item" />
    <param name="TargetShieldPercent" default="5" comment="Maximal shield percentage required to drop item"/>
    <param name="TargetHullPercent" default="75" comment="Maximal hull percentage required to drop item"/>
    <param name="ItemWare"      comment="Ware that should be dropped by TargetShip" />
    <param name="ItemWareName"  default="null" comment="Ware that should be dropped by TargetShip" /-->
    <!--GENERIC MISSION VARIANTS-->
    <cue name="Force_Generic_Var_1" instantiate="true">
      <conditions>
        <event_cue_signalled/>
      </conditions>
      <actions>
        <signal_cue cue="md.GenericMissions.RemoveAllOffers"/>
        <do_all exact="30">
          <signal_cue_instantly cue="GenerateGenericMission" param="table[$Sector = player.sector, $MissionVariant = 1, $DebugChance = 100]"/>
        </do_all>
      </actions>
      <force name="GM_RetrieveItem_Var_1"/>
    </cue>
    <cue name="RetrieveItemGM">
      <actions>
        <set_value name="$ActiveInstances" exact="table[]" comment="only 1 instance of a mission for a specific ware (irrelevant if offered as normal GM or npc-GM"/>
      </actions>
    </cue>
    <!--event.param = table[
    $Sector,
    $ReportSignalCue (Optional. Cue to be signalled when something happens which could be of interest to the calling cue. Saves values to ReportSignalCue.$FeedbackValue and ReportSignalCue.$EndFeedbackValue)
    $MissionVariant (Optional),
    $RemoveOnSectorChange (Optional, defaults to true)
    $DebugChance (Optional)]-->
    <cue name="GenerateGenericMission" instantiate="true" namespace="this" version="2">
      <conditions>
        <event_cue_signalled/>
      </conditions>
      <actions>
        <set_value name="$Sector" exact="event.param.$Sector"/>
        <set_value name="$ReportSignalCue" exact="@event.param.$ReportSignalCue"/>
        <set_value name="$MissionVariant" exact="@event.param.$MissionVariant"/>
        <do_if value="event.param.$RemoveOnSectorChange?">
          <set_value name="$RemoveOnSectorChange" exact="event.param.$RemoveOnSectorChange"/>
        </do_if>
        <do_else>
          <set_value name="$RemoveOnSectorChange" exact="true"/>
        </do_else>
        <set_value name="$DebugChance" exact="@event.param.$DebugChance"/>
        <set_value name="$ReportSignalCue.$GM_Wrapper" exact="this"/>
        <set_value name="$FeedbackManager" exact="FeedbackValueManager"/>
        <assert value="$FeedbackManager.$FeedbackValues.$MISSION_NO_VARIANT?" text="'Required error code does not exist. Was the FeedbackValueManager not updated for stand-alone missions? [Owen/Roger]'"/>
        <debug_text text="'Attempting to generate a generic mission'" chance="$DebugChance"/>
      </actions>
      <patch sinceversion="2" state="complete">
        <do_if value="$ReportSignalCue.exists">
          <set_value name="$ReportSignalCue.$GM_Wrapper" exact="this"/>
        </do_if>
        <do_else>
          <debug_text text="'cancelling dead GM instance'" filter="savegame"/>
          <cancel_cue cue="this"/>
        </do_else>
      </patch>
      <cues>
        <cue name="GenerateGenericMission_SelectVariant">
          <actions>
            <set_value name="$ValidVariants" exact="[]"/>
            <!--Set up some common variables first so that the variants don't have to do things multiple times-->
            <!--Find potential offer stations in the sector-->
            <find_station name="$PotentialOfferStations" excluded="md.GenericMissions.Manager.$ExcludedOfferObjects" space="$Sector" multiple="true">
              <match owner="md.GenericMissions.Manager.$DefaultExcludedOfferFactions" negate="true"/>
              <match_relation_to object="player.entity" comparison="not" relation="enemy"/>
            </find_station>
            <do_if value="$PotentialOfferStations.count">
              <do_if value="$MissionVariant">
                <!--A specific MissionVariant ID was requested-->
                <debug_text text="'Checking if requested ' + $MissionVariant + ' can be spawned'" chance="$DebugChance"/>
                <do_if value="$MissionVariant == 1">
                  <signal_cue_instantly cue="GenerateGenericMission_Variant_1"/>
                </do_if>
                <do_else>
                  <assert value="false" text="'Unknown $MissionVariant ID ' + $MissionVariant + ' [Owen]'"/>
                </do_else>
              </do_if>
              <do_else>
                <!--Attempt to a mission variant at random-->
                <signal_cue_instantly cue="GenerateGenericMission_Variant_1"/>
              </do_else>
            </do_if>
            <do_if value="$ValidVariants.count">
              <signal_cue cue="$ValidVariants.random"/>
            </do_if>
            <do_else>
              <do_if value="$ReportSignalCue">
                <set_value name="$FeedbackData" exact="$FeedbackManager.$FeedbackValues.$MISSION_NO_VARIANT.clone"/>
                <set_value name="$FeedbackData.$ID" exact="'$MISSION_NO_VARIANT'"/>
                <set_value name="$ReportSignalCue.$FeedbackValue" exact="$FeedbackData.clone" comment="No mission variant possible"/>
                <signal_cue_instantly cue="$ReportSignalCue"/>
              </do_if>
              <cancel_cue cue="GenerateGenericMission"/>
            </do_else>
          </actions>
        </cue>
        <cue name="GenerateGenericMission_Variant_1" namespace="this">
          <conditions>
            <event_cue_signalled/>
          </conditions>
          <actions>
            <!--this uses its own namespace so grab the shared data from GenerateGenericMission-->
            <set_value name="$Sector" exact="GenerateGenericMission.$Sector"/>
            <set_value name="$DebugChance" exact="GenerateGenericMission.$DebugChance"/>
            <set_value name="$OfferStations" exact="GenerateGenericMission.$PotentialOfferStations.clone"/>
            <shuffle_list list="$OfferStations"/>
            <set_value name="$Station" exact="$OfferStations.random"/>
            <set_value name="$Faction" exact="$Station.owner"/>
            <run_actions ref="Setup_FindTargetShip" result="$TargetShip">
              <param name="Faction" value="$Faction"/>
              <param name="Origin" value="$Station"/>
              <param name="MaxDistance" value="2"/>
            </run_actions>
            <set_value name="$Difficulty" exact="level.medium"/>
            <set_value name="$MissionLevel" exact="1"/>
            <include_actions ref="ConfigureDifficulty" comment="input: $MissionLevel; output: $MissionLevel, $TargetShieldPercent, $TargetHullPercent"/>
            <set_value name="$Valid" exact="false"/>
            <do_if value="$TargetShip">
              <set_value name="$DeliveryStation" exact="$Station"/>
              <do_any>
                <do_all weight="if $Faction.primaryrace == race.paranid then 0 else 1">
                  <set_value name="$TextOffset" exact="1000"/>
                  <set_value name="$ItemWare" exact="ware.inv_preciousring"/>
                </do_all>
                <do_all>
                  <set_value name="$TextOffset" exact="1100"/>
                  <set_value name="$ItemWare" exact="ware.inv_pricelessart"/>
                </do_all>
                <do_all weight="if $Faction.primaryrace == race.paranid then 0 else 1">
                  <set_value name="$TextOffset" exact="1200"/>
                  <set_value name="$ItemWare" exact="ware.inv_familyheirloom"/>
                </do_all>
                <do_all>
                  <set_value name="$TextOffset" exact="1300"/>
                  <set_value name="$ItemWare" exact="ware.inv_sensitivedatapacket"/>
                </do_all>
              </do_any>
              <do_if value="$DeliveryStation and $ItemWare">
                <do_any>
                  <get_room_definition macro="$DeliveryRoomMacro" tags="tag.bar" race="$DeliveryStation.owner.primaryrace"/>
                  <get_room_definition macro="$DeliveryRoomMacro" tags="tag.crewquarters" race="$DeliveryStation.owner.primaryrace"/>
                  <get_room_definition macro="$DeliveryRoomMacro" tags="[tag.livingroom, tag.generic]" race="$DeliveryStation.owner.primaryrace"/>
                </do_any>
                <run_actions ref="md.LIB_Generic.DetermineCorridorForRoom" result="$CorridorDefinition">
                  <param name="RoomMacro" value="$DeliveryRoomMacro"/>
                  <param name="Race" value="$DeliveryStation.owner.primaryrace"/>
                </run_actions>
                <set_value name="$DeliveryCorridorMacro" exact="$CorridorDefinition.{1}"/>
                <set_value name="$DeliveryDoors" exact="$CorridorDefinition.{2}"/>
                <do_if value="$DeliveryCorridorMacro and $DeliveryRoomMacro">
                  <set_value name="$Valid" exact="true"/>
                  <set_value name="$DeliveryInteriorName" exact="$DeliveryRoomMacro.name"/>
                </do_if>
              </do_if>
            </do_if>
            <do_if value="$Valid and not RetrieveItemGM.$ActiveInstances.{$ItemWare}?">
              <commandeer_object object="$TargetShip"/>
              <append_to_list name="GenerateGenericMission.$ValidVariants" exact="this"/>
              <set_value name="RetrieveItemGM.$ActiveInstances.{$ItemWare}" exact="1"/>
              <debug_text text="'Start offering %s this=%s (1st instance)'.[$ItemWare, this]" chance="0"/>
            </do_if>
            <do_else>
              <debug_text text="'Already offering %s (skipping)'.[$ItemWare]" chance="0 and $ItemWare?"/>
              <cancel_cue cue="this"/>
            </do_else>
          </actions>
          <cues>
            <cue name="GenerateGenericMission_Variant_1_Trigger">
              <conditions>
                <event_cue_signalled cue="parent"/>
              </conditions>
              <actions>
                <create_cue_actor cue="GenerateGenericMission_Variant_1_Trigger" name="$MissionActor">
                  <select faction="$Faction"/>
                  <owner exact="$Faction"/>
                </create_cue_actor>
                <set_entity_traits entity="$MissionActor" missionactor="true" customhandler="true"/>
                <set_entity_type entity="$MissionActor" type="entitytype.crowd"/>
              </actions>
              <cues>
                <cue name="GenerateGenericMission_Variant_1_Ref" ref="Start">
                  <param name="OfferObject" value="$Station"/>
                  <param name="Client" value="$MissionActor"/>
                  <param name="MissionLevel" value="$MissionLevel"/>
                  <param name="Difficulty" value="$Difficulty"/>
                  <!--Mission offer-->
                  <param name="RemoveOnSectorChange" value="@GenerateGenericMission.$RemoveOnSectorChange"/>
                  <param name="BBSSpace" value="$Sector"/>
                  <!--Mission text-->
                  <param name="Page" value="30148"/>
                  <param name="TextOffset" value="$TextOffset"/>
                  <!--Mission specific params-->
                  <param name="TargetShip" value="$TargetShip"/>
                  <param name="TargetShieldPercent" value="$TargetShieldPercent"/>
                  <param name="TargetHullPercent" value="$TargetHullPercent"/>
                  <param name="ItemWare" value="$ItemWare"/>
                  <param name="DeliveryNPC" value="$MissionActor" comment="The NPC to which the items should be delivered. If null, the mission ends on collecting the ware (primarily for legacy mission support)"/>
                  <!--See library for parameter details-->
                  <param name="PlaceNPC" value="true" comment="Does the mission handle the placement and removal of the delivery NPC? If false, some other system must be in charge of doing so."/>
                  <param name="DeliveryObject" value="$DeliveryStation" comment="The object on which to create the interior"/>
                  <param name="DeliveryRoomMacro" value="$DeliveryRoomMacro"/>
                  <param name="DeliveryCorridorMacro" value="$DeliveryCorridorMacro"/>
                  <param name="DeliveryDoors" value="$DeliveryDoors"/>
                  <param name="DeliveryInteriorName" value="$DeliveryInteriorName"/>
                  <param name="ReportSignalCue" value="@GenerateGenericMission.$ReportSignalCue"/>
                  <param name="DebugChance" value="@GenerateGenericMission.$DebugChance"/>
                </cue>
              </cues>
            </cue>
          </cues>
        </cue>
      </cues>
    </cue>
    <!--event.param = table[
    $Sector,
    $ReportSignalCue (Optional. Cue to be signalled when something happens which could be of interest to the calling cue. Saves values to ReportSignalCue.$FeedbackValue and ReportSignalCue.$EndFeedbackValue)
    $MissionVariant (Optional),
    $RemoveOnSectorChange (Optional, defaults to true)
    $DebugChance (Optional)]-->
    <cue name="GenerateNPCMission" instantiate="true" namespace="this" version="2">
      <conditions>
        <event_cue_signalled/>
      </conditions>
      <actions>
        <set_value name="$Location" exact="event.param.$Location"/>
        <set_value name="$ReportSignalCue" exact="@event.param.$ReportSignalCue"/>
        <set_value name="$MissionVariant" exact="@event.param.$MissionVariant"/>
        <do_if value="event.param.$RemoveOnDespawn?">
          <set_value name="$RemoveOnDespawn" exact="event.param.$RemoveOnDespawn"/>
        </do_if>
        <do_else>
          <set_value name="$RemoveOnDespawn" exact="true"/>
        </do_else>
        <set_value name="$DebugChance" exact="@event.param.$DebugChance"/>
        <set_value name="$ReportSignalCue.$GM_Wrapper" exact="this"/>
        <set_value name="$FeedbackManager" exact="FeedbackValueManager"/>
        <assert value="$FeedbackManager.$FeedbackValues.$MISSION_NO_VARIANT?" text="'Required error code does not exist. Was the FeedbackValueManager not updated for stand-alone missions? [Owen/Roger]'"/>
        <signal_cue_instantly cue="md.GenericMissions.Validate_NPC_Mission_GM_Feedback_Table" param="FeedbackValueManager"/>
        <debug_text text="'Attempting to generate a NPC mission'" chance="$DebugChance"/>
      </actions>
      <patch sinceversion="2" state="complete">
        <do_if value="$ReportSignalCue.exists">
          <set_value name="$ReportSignalCue.$GM_Wrapper" exact="this"/>
        </do_if>
        <do_else>
          <debug_text text="'cancelling dead GM instance'" filter="savegame"/>
          <cancel_cue cue="this"/>
        </do_else>
      </patch>
      <cues>
        <cue name="GenerateNPCMission_SelectVariant">
          <actions>
            <set_value name="$ValidVariants" exact="[]"/>
            <set_value name="$LocationOwner" exact="$Location.owner"/>
            <!--Set up some common variables first so that the variants don't have to do things multiple times-->
            <do_if value="$MissionVariant">
              <!--A specific MissionVariant ID was requested-->
              <debug_text text="'Checking if requested ' + $MissionVariant + ' can be spawned'" chance="$DebugChance"/>
              <do_if value="$MissionVariant == 1">
                <signal_cue_instantly cue="GenerateNPCMission_Variant_1"/>
              </do_if>
              <do_else>
                <assert value="false" text="'Unknown $MissionVariant ID ' + $MissionVariant + ' [Owen]'"/>
              </do_else>
            </do_if>
            <do_else>
              <!--Attempt to a mission variant at random-->
              <signal_cue_instantly cue="GenerateNPCMission_Variant_1"/>
            </do_else>
            <do_if value="$ValidVariants.count">
              <signal_cue cue="$ValidVariants.random"/>
            </do_if>
            <do_else>
              <do_if value="$ReportSignalCue">
                <set_value name="$FeedbackData" exact="$FeedbackManager.$FeedbackValues.$MISSION_NO_VARIANT.clone"/>
                <set_value name="$FeedbackData.$ID" exact="'$MISSION_NO_VARIANT'"/>
                <set_value name="$ReportSignalCue.$FeedbackValue" exact="$FeedbackData.clone" comment="No mission variant possible"/>
                <signal_cue_instantly cue="$ReportSignalCue"/>
              </do_if>
              <cancel_cue cue="GenerateNPCMission"/>
            </do_else>
          </actions>
        </cue>
        <cue name="GenerateNPCMission_Variant_1" namespace="this">
          <conditions>
            <event_cue_signalled/>
          </conditions>
          <actions>
            <!--this uses its own namespace so grab the shared data from GenerateNPCMission-->
            <set_value name="$Location" exact="GenerateNPCMission.$Location"/>
            <set_value name="$DebugChance" exact="GenerateNPCMission.$DebugChance"/>
            <set_value name="$Station" exact="$Location"/>
            <set_value name="$Faction" exact="$Station.owner"/>
            <set_value name="$Sector" exact="$Station.sector"/>
            <run_actions ref="Setup_FindTargetShip" result="$TargetShip">
              <param name="Faction" value="$Faction"/>
              <param name="Origin" value="$Station"/>
              <param name="MaxDistance" value="2"/>
            </run_actions>
            <set_value name="$Difficulty" exact="level.medium"/>
            <set_value name="$MissionLevel" exact="10"/>
            <include_actions ref="ConfigureDifficulty" comment="input: $MissionLevel; output: $MissionLevel, $TargetShieldPercent, $TargetHullPercent"/>
            <set_value name="$Valid" exact="false"/>
            <do_if value="$TargetShip">
              <set_value name="$DeliveryStation" exact="$Station"/>
              <do_any>
                <do_all weight="if $Faction.primaryrace == race.paranid then 0 else 1">
                  <set_value name="$TextOffset" exact="1000"/>
                  <set_value name="$ItemWare" exact="ware.inv_preciousring"/>
                </do_all>
                <do_all>
                  <set_value name="$TextOffset" exact="1100"/>
                  <set_value name="$ItemWare" exact="ware.inv_pricelessart"/>
                </do_all>
                <do_all weight="if $Faction.primaryrace == race.paranid then 0 else 1">
                  <set_value name="$TextOffset" exact="1200"/>
                  <set_value name="$ItemWare" exact="ware.inv_familyheirloom"/>
                </do_all>
                <do_all>
                  <set_value name="$TextOffset" exact="1300"/>
                  <set_value name="$ItemWare" exact="ware.inv_sensitivedatapacket"/>
                </do_all>
              </do_any>
              <do_if value="$DeliveryStation and $ItemWare">
                <get_room_definition macro="$DeliveryCorridorMacro" doors="$DeliveryDoors" race="$DeliveryStation.owner.primaryrace" tags="tag.corridor"/>
                <do_any>
                  <get_room_definition macro="$DeliveryRoomMacro" tags="tag.bar"/>
                  <get_room_definition macro="$DeliveryRoomMacro" tags="tag.crewquarters"/>
                  <get_room_definition macro="$DeliveryRoomMacro" tags="[tag.livingroom, tag.generic]"/>
                </do_any>
                <do_if value="$DeliveryCorridorMacro and $DeliveryRoomMacro">
                  <set_value name="$Valid" exact="true"/>
                  <set_value name="$DeliveryInteriorName" exact="$DeliveryRoomMacro.name"/>
                </do_if>
              </do_if>
            </do_if>
            <do_if value="$Valid and not RetrieveItemGM.$ActiveInstances.{$ItemWare}?">
              <commandeer_object object="$TargetShip"/>
              <append_to_list name="GenerateNPCMission.$ValidVariants" exact="this"/>
              <set_value name="RetrieveItemGM.$ActiveInstances.{$ItemWare}" exact="1"/>
              <debug_text text="'Start offering %s this=%s (1st instance)'.[$ItemWare, this]" chance="0"/>
            </do_if>
            <do_else>
              <debug_text text="'Already offering %s (skipping)'.[$ItemWare]" chance="0 and $ItemWare?"/>
              <cancel_cue cue="this"/>
            </do_else>
          </actions>
          <cues>
            <cue name="GenerateNPCMission_Variant_1_Selected">
              <conditions>
                <event_cue_signalled cue="parent"/>
              </conditions>
              <actions>
                <set_value name="$Client" exact="null"/>
                <set_value name="$SceneInstance" exact="null"/>
              </actions>
              <cues>
                <cue name="GenerateNPCMission_Variant_1_Select_Scene">
                  <actions>
                    <!--Attempt to create the NPC scene-->
                    <!--TODO @Owen selection of scene-->
                    <set_value name="$Scenes" exact="[md.NPC_Missions.Scene__Friendly_Client_Via_Comm_1]"/>
                    <shuffle_list list="$Scenes"/>
                    <do_all exact="$Scenes.count" counter="$i">
                      <do_if value="$Scenes.{$i} == md.NPC_Missions.Scene__Friendly_Client_Via_Comm_1">
                        <set_value name="$Scene_Definition" exact="table[                                               $CallerCue = namespace,                                               $Location = $Location,                                               $Client = $Client,                                               $ClientOwner = $Location.owner,                                               $CallerEventCue = GenerateNPCMission_Variant_1_GM_Signal]"/>
                        <signal_cue_instantly cue="$Scenes.{$i}" param="$Scene_Definition"/>
                        <do_if value="@$Scene_Definition.$Result == 'SUCCESS'">
                          <set_value name="$SceneInstance" exact="$Scene_Definition.$SceneInstance"/>
                          <set_value name="$Client" exact="$Scene_Definition.$Client"/>
                          <set_entity_role entity="$Client" role="entityrole.service"/>
                          <set_entity_role_object entity="$Client" object="$Location"/>
                          <signal_cue cue="GenerateNPCMission_Variant_1_Trigger"/>
                          <break/>
                        </do_if>
                      </do_if>
                    </do_all>
                    <do_if value="not $Client or not $SceneInstance">
                      <set_value name="$FeedbackData" exact="FeedbackValueManager.$FeedbackValues.$MISSION_NO_NPC_SCENE.clone"/>
                      <set_value name="$FeedbackData.$ID" exact="'$MISSION_NO_NPC_SCENE'"/>
                      <set_value name="GenerateNPCMission.$ReportSignalCue.$FeedbackValue" exact="$FeedbackData" comment="Can't set up NPC scene"/>
                      <signal_cue_instantly cue="GenerateNPCMission.$ReportSignalCue"/>
                      <cancel_cue cue="this"/>
                    </do_if>
                  </actions>
                  <cues>
                    <cue name="GenerateNPCMission_Variant_1_Scene_Ended">
                      <conditions>
                        <event_cue_cancelled cue="$SceneInstance"/>
                      </conditions>
                      <actions>
                        <do_if value="@$MissionAccepted">
                          <debug_text text="'Scene ended due to mission being accepted'" chance="$DebugChance"/>
                        </do_if>
                        <do_else>
                          <set_value name="$FeedbackData" exact="FeedbackValueManager.$FeedbackValues.$OFFER_REMOVED.clone"/>
                          <set_value name="$FeedbackData.$ID" exact="'$OFFER_REMOVED'"/>
                          <set_value name="GenerateNPCMission.$ReportSignalCue.$FeedbackValue" exact="$FeedbackData"/>
                          <signal_cue_instantly cue="GenerateNPCMission.$ReportSignalCue"/>
                        </do_else>
                      </actions>
                    </cue>
                  </cues>
                </cue>
                <!--Cue which the scene is listening to. There are several standard -->
                <!--This cue is to be signalled by the GM when certain events happen e.g. mission accepted / mission failed / error
                A feedback table is saved to either:
                static.$FeedbackValue
                or 
                static.$EndFeedbackValue (in the event that the GM will end)
                This cue will pass the feedback table onto the caller of the GM (GenerateNPCMission.$ReportSignalCue), so the GM can be managed
                The scene can also listen to this cue to react to certain events e.g. mission accepted-->
                <cue name="GenerateNPCMission_Variant_1_GM_Signal" instantiate="true">
                  <conditions>
                    <event_cue_signalled/>
                  </conditions>
                  <actions>
                    <do_if value="@static.$EndFeedbackValue" comment="Evaluate return-value of GM (success/failure)">
                      <debug_text text="'Mission ended. feedback' + static.$EndFeedbackValue" chance="$DebugChance"/>
                      <do_if value="$Client.isclass.npc">
                        <do_if value="$Client.parent">
                          <!--Set entity to temporary so they are cleaned up-->
                          <set_entity_traits entity="$Client" temporary="true"/>
                          <signal_cue_instantly cue="md.NPC_Instantiation.NPC_Placement_Manager" param="['remove_request', $Client, namespace]"/>
                        </do_if>
                        <do_else>
                          <destroy_object object="$Client"/>
                        </do_else>
                      </do_if>
                      <!--This will cause this instance to end-->
                      <set_value name="GenerateNPCMission.$ReportSignalCue.$EndFeedbackValue" exact="static.$EndFeedbackValue"/>
                      <signal_cue_instantly cue="GenerateNPCMission.$ReportSignalCue" param="@event.param"/>
                    </do_if>
                    <do_elseif value="@static.$FeedbackValue">
                      <debug_text text="'Mission signalled with feedback' + static.$FeedbackValue" chance="$DebugChance"/>
                      <set_value name="GenerateNPCMission.$ReportSignalCue.$FeedbackValue" exact="static.$FeedbackValue"/>
                      <signal_cue_instantly cue="GenerateNPCMission.$ReportSignalCue" param="@event.param"/>
                    </do_elseif>
                  </actions>
                </cue>
                <cue name="GenerateNPCMission_Variant_1_Trigger">
                  <conditions>
                    <event_cue_signalled/>
                  </conditions>
                  <actions>
                    <create_cue_actor cue="GenerateGenericMission_Variant_1_Trigger" name="$MissionActor">
                      <select faction="$Faction"/>
                      <owner exact="$Faction"/>
                    </create_cue_actor>
                    <set_entity_traits entity="$MissionActor" missionactor="true" customhandler="true"/>
                    <set_entity_type entity="$MissionActor" type="entitytype.crowd"/>
                    <set_value name="$SpokeToClient" exact="false"/>
                    <set_value name="$Client.$MissionOfferState" exact="'offering'"/>
                  </actions>
                  <cues>
                    <cue name="GenerateNPCMission_Variant_1_Ref" ref="Start">
                      <param name="Client" value="$Client"/>
                      <param name="MissionLevel" value="$MissionLevel"/>
                      <param name="Difficulty" value="$Difficulty"/>
                      <!--Mission offer-->
                      <param name="ConversationOffer" value="true"/>
                      <param name="ConversationTriggerCue" value="GenerateNPCMission_Variant_1_Show_Briefing"/>
                      <param name="HideFromBBS" value="true"/>
                      <param name="OfferDistance" value="null"/>
                      <!--Mission text-->
                      <param name="Page" value="30148"/>
                      <param name="TextOffset" value="$TextOffset"/>
                      <!--Mission specific params-->
                      <param name="TargetShip" value="$TargetShip"/>
                      <param name="TargetShieldPercent" value="$TargetShieldPercent"/>
                      <param name="TargetHullPercent" value="$TargetHullPercent"/>
                      <param name="ItemWare" value="$ItemWare"/>
                      <param name="DeliveryNPC" value="$Client" comment="The NPC to which the items should be delivered. If null, the mission ends on collecting the ware (primarily for legacy mission support)"/>
                      <!--See library for parameter details-->
                      <param name="PlaceNPC" value="true" comment="Does the mission handle the placement and removal of the delivery NPC? If false, some other system must be in charge of doing so."/>
                      <param name="DeliveryObject" value="$DeliveryStation" comment="The object on which to create the interior"/>
                      <param name="DeliveryRoomMacro" value="$DeliveryRoomMacro"/>
                      <param name="DeliveryCorridorMacro" value="$DeliveryCorridorMacro"/>
                      <param name="DeliveryDoors" value="$DeliveryDoors"/>
                      <param name="DeliveryInteriorName" value="$DeliveryInteriorName"/>
                      <param name="ReportSignalCue" value="GenerateNPCMission_Variant_1_GM_Signal"/>
                      <param name="DebugChance" value="@GenerateNPCMission.$DebugChance"/>
                    </cue>
                    <cue name="GenerateNPCMission_Variant_1_Debug_Guidance" onfail="cancel">
                      <conditions>
                        <check_value value="$DebugChance == 100"/>
                      </conditions>
                      <actions>
                        <create_mission cue="this" name="'Guidance to mission'" description="'Helper guidance to mission NPC'" difficulty="level.trivial" faction="faction.player" type="missiontype.destroy">
                          <briefing>
                            <objective step="1" action="objective.talkto" object="$Client"/>
                          </briefing>
                          <objective step="1" action="objective.talkto" object="$Client"/>
                        </create_mission>
                      </actions>
                      <cues>
                        <cue name="GenerateNPCMission_Variant_1_Debug_Guidance_Abort">
                          <conditions>
                            <event_mission_aborted cue="parent"/>
                          </conditions>
                          <actions>
                            <remove_mission cue="parent"/>
                          </actions>
                        </cue>
                      </cues>
                    </cue>
                    <!--Conversation handlers-->
                    <cue name="GenerateNPCMission_Variant_1_Next_Section" instantiate="true">
                      <conditions>
                        <event_conversation_next_section actor="$Client" section="g_askformission"/>
                      </conditions>
                      <actions>
                        <add_npc_line speaker="$Client" line="1000103" comment="You'll need your wits about you for this."/>
                        <set_conversation_return_section section="g_goodbye"/>
                        <signal_cue_instantly cue="GenerateNPCMission_Variant_1_Show_Briefing"/>
                      </actions>
                    </cue>
                    <cue name="GenerateNPCMission_Variant_1_Show_Briefing" instantiate="true">
                      <conditions>
                        <event_cue_signalled/>
                      </conditions>
                    </cue>
                    <!--We need this cue here reacting to this event to set the blackboard variable as soon as possible-->
                    <cue name="GenerateNPCMission_Variant_1_Mission_Accepted">
                      <conditions>
                        <event_object_signalled object="$Client" param="'accept'"/>
                      </conditions>
                      <actions>
                        <set_value name="$Client.$MissionOfferState" exact="'accepted'"/>
                      </actions>
                    </cue>
                    <!--This cue will trigger slightly later than the one setting the $Client.$MissionOfferState blackboard variable to 'accepted'-->
                    <cue name="GenerateNPCMission_Variant_1_Mission_Accepted_2">
                      <conditions>
                        <event_cue_signalled cue="GenerateNPCMission_Variant_1_GM_Signal"/>
                        <check_value value="@GenerateNPCMission_Variant_1_GM_Signal.$FeedbackValue.$ID == '$MISSION_ACCEPTED'"/>
                      </conditions>
                      <actions>
                        <assert value="$Client.$MissionOfferState == 'accepted'" text="'The mission offer state of the client is not - accepted -. State: ' + $Client.$MissionOfferState"/>
                        <set_value name="$MissionAccepted" exact="true"/>
                        <!--Set actor to not-temporary so that it will not automatically be destroyed in low attention-->
                        <set_entity_traits entity="$Client" missionactor="true" temporary="false"/>
                      </actions>
                      <cues>
                      </cues>
                    </cue>
                  </cues>
                </cue>
              </cues>
            </cue>
          </cues>
        </cue>
      </cues>
    </cue>
  </cues>
</mdscript>
