<?xml version='1.0' encoding='utf-8'?>
<mdscript xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" name="GM_Destroy_Objects" xsi:noNamespaceSchemaLocation="md.xsd">
  <cues>
    <!--Base Mission information-->
    <!--
      Generic Mission: Destroy Objects - intended for Master Missions
      Primary 'missiontype':  missiontype.destroy
      Page: 30137
      Notes:
        To start the mission, reference the library md.GM_Destroy_Objects.Start
        To attempt to trigger the Generic Mission, signal md.GM_Destroy_Objects.StartGeneric
    -->
    <!--
      The Feedback Manager contains a table of feedback values related to this Generic Mission. 
		  This table is 'const' during the mission (the table itself doesn't change anymore after inialization)
	    There are several maintypes of feedback:
        event:    Something which happens during a mission but does not cause it to end e.g. the mission being accepted
        removed:  The mission offer was removed before acceptance
        success:  The mission was successfully completed by the player
        failure:  The player failed the mission
        error:    Something went wrong with the mission set-up or during the mission
    -->
    <cue name="FeedbackValueManager" namespace="this" version="6">
      <actions>
        <set_value name="$FeedbackValues" exact="table[                    $MISSION_GENERATED       = table[$type = 'event',    $text = 'Mission variation generated successfully'],                    $MISSION_ACCEPTED        = table[$type = 'event',    $text = 'Mission accepted'],                    $MISSION_NO_VARIANT      = table[$type = 'event',    $text = 'No mission variant currently possible'],                    $MISSION_NO_NPC_SCENE    = table[$type = 'event',    $text = 'No mission NPC scene could be set up'],                                        $OFFER_REMOVED           = table[$type = 'removed',  $text = 'Offer removed'],                    $DECLINED_OFFER          = table[$type = 'removed',  $text = 'Player declined Event Offer'],                    $EVENT_OFFER_TIMEOUT     = table[$type = 'removed',  $text = 'Event Offer timeout'],                    $SIGNAL_LEAK_REMOVED     = table[$type = 'removed',  $text = 'Signal leak offer removed'],                    $TARGET_KILLED_EARLY     = table[$type = 'removed',  $text = 'Object was destroyed during the offer'],                                        $MISSION_SUCCEEDED       = table[$type = 'success',  $text = 'Mission succeeded'],                                        $MISSION_ABORTED         = table[$type = 'failure',  $text = 'Mission aborted by player'],                    $FORCED_CLEANUP          = table[$type = 'failure',  $text = 'Forced to end from outside'],                    $MISSION_TIMEOUT         = table[$type = 'failure',  $text = 'Mission timeout'],                    $RML_FAILED              = table[$type = 'failure',  $text = 'RML failure'],                    $TARGET_PLAYER_OWNED     = table[$type = 'failure',  $text = 'Object became player owned during offer'],                                        $NO_VALID_CLIENT_OWNER   = table[$type = 'error',    $text = 'No valid ClientOwner parameter provided'],                    $INVALID_OFFER_TYPE      = table[$type = 'error',    $text = 'No offer parameters were valid'],                    $NO_TEXT_OFFSET          = table[$type = 'error',    $text = 'No TextOffset set'],                    $INVALID_FORCE_CLEANUP   = table[$type = 'error',    $text = 'ForceCleanup cue invalid'],                    $INVALID_TARGETS_PARAM   = table[$type = 'error',    $text = 'No objects found to destroy'],                    $NO_VALID_TARGETS        = table[$type = 'error',    $text = 'No objects existed on the acceptance of the mission'],                    $RML_ERROR               = table[$type = 'error',    $text = 'RML error']                    ]"/>
      </actions>
      <patch sinceversion="6">
        <!--To patch new feedback values, increment 'version' and 'sinceversion' number-->
        <force_cue cue="FeedbackValueManager"/>
      </patch>
    </cue>
    <!--Required variables: $Page & $TextOffset (and any below substitute_text values)
    If text is to be substituted for a new text variant, people should feel free to add the substitution below. Alternativly, pass in an overriding text in the $TextTable param-->
    <library name="GenerateTextTable">
      <actions>
        <!--Text page indexes $TextOffset + #
        1 = $TextTable.$missionname
        2 = $TextTable.$description
        3 = $TextTable.$objective-->
        <!--$TextTable.$missionname + 1-->
        <set_value name="$TextTable.$missionname" exact="readtext.{$Page}.{$TextOffset + 1}" chance="if $TextTable.$missionname? then 0 else 100"/>
        <!--$TextTable.$description + 2-->
        <do_if value="not $TextTable.$description?">
          <substitute_text text="$TextTable.$description" source="readtext.{$Page}.{$TextOffset + 2}">
            <replace string="'$SECTOR$'" with="$TargetSector.knownname"/>
          </substitute_text>
          <do_if value="$Targets.count and $Targets.{1}.macro == macro.env_ast_ore_m_explosive_03_macro and readtext.{$Page}.{$TextOffset + 11}?">
            <set_value name="$TextTable.$description" exact="$TextTable.$description + '\n' + readtext.{$Page}.{$TextOffset + 11}"/>
          </do_if>
          <do_if value="$Targets.count">
            <!-- Note: In this case $TargetSector is the NAME of the sector, not the sector itself, so we can't pass that as TargetSpace -->
            <run_actions ref="md.LIB_Generic.GenerateTextTable_BriefingWarning_Call" result="$TextTable.$description">
              <param name="BriefingText" value="$TextTable.$description"/>
              <param name="TargetSpace" value="$Targets.{1}.sector"/>
            </run_actions>
          </do_if>
        </do_if>
        <do_if value="$TurretLimit">
          <substitute_text text="$TextTable.$description" source="readtext.{$Page}.{$TextOffset + 2}">
            <replace string="'$TURRETS$'" with="$TurretLimit"/>
            <replace string="'$STATION$'" with="$TargetStation.knownname"/>
          </substitute_text>
        </do_if>
        <!--$TextTable.$objective + 3 e.g (Destroy: )Ad Signs / Enemy Ship-->
        <set_value name="$TextTable.$objective" exact="readtext.{$Page}.{$TextOffset + 3}" chance="if $TextTable.$objective? then 0 else 100"/>
      </actions>
    </library>
    <!--
    ####################
    TARGET TRACKING
    ####################
    -->
    <!--event.param: [$ResultCue, $Target, $OfferFaction, $AddToList]
    
    Result saved to $ResultCue.$CheckTarget__Result
    Result is bool - true: Object can be used, false: Object already used by another mission-->
    <cue name="CheckTarget" instantiate="true" namespace="static">
      <conditions>
        <event_cue_signalled/>
      </conditions>
      <actions>
        <set_value name="$DebugChance" exact="0"/>
        <set_value name="$ResultCue" exact="event.param.{1}"/>
        <do_if value="not $TrackedTargets?">
          <create_list name="$TrackedTargets"/>
        </do_if>
        <set_value name="$Target" exact="[event.param.{2}, event.param.{3}]"/>
        <do_if value="$TrackedTargets.indexof.{$Target}">
          <debug_text text="'Return false: ' + $Target" chance="$DebugChance"/>
          <!--Return false-->
          <set_value name="$ResultCue.$CheckTarget__Result" exact="false"/>
        </do_if>
        <do_else>
          <do_if value="event.param.{4}">
            <append_to_list name="$TrackedTargets" exact="$Target"/>
          </do_if>
          <!--Only keep the 100 most recent targets-->
          <do_if value="$TrackedTargets.count" min="100">
            <remove_value name="$TrackedTargets.{1}"/>
          </do_if>
          <!--Return true-->
          <debug_text text="'***Return true: ' + $Target" chance="$DebugChance"/>
          <set_value name="$ResultCue.$CheckTarget__Result" exact="true"/>
        </do_else>
      </actions>
    </cue>
    <cue name="RemoveTarget" instantiate="true" namespace="static">
      <conditions>
        <event_cue_signalled/>
      </conditions>
      <actions>
        <set_value name="$DebugChance" exact="0"/>
        <do_if value="not CheckTarget.$TrackedTargets?">
          <create_list name="CheckTarget.$TrackedTargets"/>
        </do_if>
        <set_value name="$Target" exact="[event.param.{1}, event.param.{2}]"/>
        <set_value name="$Index" exact="CheckTarget.$TrackedTargets.indexof.{$Target}"/>
        <do_if value="$Index">
          <remove_value name="CheckTarget.$TrackedTargets.{$Index}"/>
          <debug_text text="'Removed ' + $Target + ' from target list ' + CheckTarget.$TrackedTargets" chance="$DebugChance"/>
        </do_if>
      </actions>
    </cue>
    <library name="GenerateVoiceTable">
      <actions>
        <run_actions ref="md.LIB_Generic.GenerateGenericVoiceTable" result="$VoiceTable">
          <param name="VoiceTable" value="$VoiceTable"/>
        </run_actions>
        <set_value name="$VoiceTable.$MissionAcceptedReluctant" exact="1000205" comment="(accepted mission reluctantly)" chance="if $VoiceTable.$MissionAcceptedReluctant? then 0 else 100"/>
        <set_value name="$VoiceTable.$MissionAborted" exact="1000406" comment="(mission aborted by NPC / script error)" chance="if $VoiceTable.$MissionAborted? then 0 else 100"/>
      </actions>
    </library>
    <library name="Start" version="5">
      <params>
        <param name="OfferObject" default="null" comment="The object on which this mission is based e.g. A Ship / Station / Signal Leak. Only needed for missions with a physical location."/>
        <param name="Client" default="null" comment="Pre-existing client"/>
        <param name="ClientOwner" default="null" comment="Overriding owner for reward calculation or creation of $Client if not provided. Defaults to $OfferObject owner if able"/>
        <param name="MissionCue" default="null" comment="Cue the mission is attached to. Defaults to Start (this)."/>
        <param name="MissionThread" default="null" comment="Mission thread for the offer and mission"/>
        <param name="GenerateReward" default="true" comment="If RewardCr or RewardNotoriety are invalid, generate them?"/>
        <param name="RewardCr" default="null" comment="If the reward for this mission is credits, the number of credits should be set to this variable."/>
        <param name="RewardObj" default="null" comment="If the reward for this mission is not credits, and is an object, it should be set to this variable."/>
        <param name="RewardNotoriety" default="null"/>
        <param name="RewardText" default="null" comment="Any text needed to define the reward for this mission - can be used in conjunction with $RewardCr and $RewardObj"/>
        <param name="MissionDuration" default="null"/>
        <param name="MissionType" default="missiontype.destroy" comment="Variations can override mission type if required"/>
        <param name="MissionLevel"/>
        <param name="Difficulty"/>
        <!--Offer params-->
        <param name="WithoutOffer" default="false" comment="Do not create a mission offer. Either run immediatly or wait for WithoutOfferWaitCue"/>
        <param name="WithoutOfferWaitCue" default="null" comment="Do not create a mission offer but wait for this cue to be completed before running the mission (if event.param is passed, it must match 'Start' cue)"/>
        <param name="DeclineButton" default="true" comment="Have a decline button instead of a back button in the offer conversation"/>
        <param name="EventOffer" default="false" comment="Is the mission offered directly to the player with an interactive event"/>
        <param name="ConversationOffer" default="false" comment="When $EventOffer is false, should this offer be through a conversation with the $Client. Otherwise, offer at mission location"/>
        <param name="ConversationTriggerCue" default="null" comment="If provided, when this cue is signalled, start the mission offer conversation."/>
        <param name="OfferMaxDistance" default="null" comment="Maximum distance to OfferObject before it is cleaned up. null = do not check"/>
        <param name="HideFromBBS" default="false" comment="Hide this offer from the BBS? Show only through locations or special conversation handling."/>
        <param name="RemoveOnSectorChange" default="true"/>
        <param name="OfferDistance" default="50km" comment="Distance to the offer location before it becomes visible on the map or BBS (unless otherwise hidden)"/>
        <!--BBS only params-->
        <param name="BBSObject" default="null"/>
        <param name="BBSDistance" default="null"/>
        <param name="BBSTimeoutMin" default="null"/>
        <param name="BBSTimeoutMax" default="null"/>
        <param name="BBSSpace" default="null"/>
        <!--Mission text-->
        <param name="Page" comment="Text page. Text IDs must be correctly with a text offset (see GenerateTextTable)."/>
        <param name="TextOffset" comment="The text offset for this variant's text on the page"/>
        <param name="TextTable" default="table[]" comment="Table, usually populated by the mission, to store the texts by an identifier key e.g. $missionname = 'Kill Bala Gi'                Check library 'GenerateTextTable' for identifier keys. Pass in a table with such an entry to override the text usually generated from the $Page and $TextOffset"/>
        <param name="VoiceTable" default="table[]" comment="Table, usually populated by the mission, keys can have a value of 0 (=stay silent)"/>
        <!--Mission specific params-->
        <param name="TargetSector" comment="TargetSector, needed for mission-briefing"/>
        <param name="Targets" comment="Group of objects that should be destroyed during this mission"/>
        <param name="TargetRequestCue" default="null" comment="Cue to signal to request new targets if the current group is invalid when the mission starts. Cue passed as event.param. Result saved to event.param.$Targets. Mission fails if no targets provided."/>
        <param name="ExplosionRange" default="0" comment="Set to non-zero for 'rigged asteroids'-case, where they explode on specified proximity"/>
        <param name="AllowDestroy" default="true" comment="Allow destruction of parent object (Variant 4)"/>
        <param name="TurretLimit" default="null" comment="Amount of Turrets the player has to destroy (Variant 5)"/>
        <param name="TargetStation" default="false" comment="Station to which the turrets belong to (Variant 5)"/>
        <param name="OpposingFaction" default="null"/>
        <param name="ReportSignalCue" default="null" comment="Cue to be signalled when something happens which could be of interest to the calling cue. Saves values to ReportSignalCue.$FeedbackValue and ReportSignalCue.$EndFeedbackValue"/>
        <param name="CancelOfferCue" default="null" comment="Cue which when completed will force this missions offer to be removed and cleaned up. No effect if mission has been accepted."/>
        <param name="ForceCleanup" default="null" comment="Cue to force a cleanup from outside when completed"/>
        <param name="DebugChance" default="0"/>
      </params>
      <actions>
        <set_value name="$Feedback" exact="null"/>
        <set_value name="$FeedbackManager" exact="md.GM_Destroy_Objects.FeedbackValueManager"/>
        <assert value="$WithoutOffer or not $MissionCue or (not $MissionCue.hasmission and not $MissionCue.hasmissionoffer)" text="'Mission is set to create an offer but provided MissionCue: ' + $MissionCue + ' already has an offer or is a running mission [Owen]'"/>
        <!--Param validation-->
        <do_if value="not $WithoutOffer">
          <!--Optional variables (at least one should exist): $OfferObject, (bool)$HideFromBBS, (bool)$ConversationOffer, (bool)$EventOffer
          Result variables:
          $OfferType = 'signalleak' OR 'objectbased' OR 'eventoffer' OR 'conversationoffer'
          $AllowOfferEvent = Will an event offering this event be also fired immediatly?-->
          <include_actions ref="md.GenericMissions.GetOfferType"/>
          <do_if value="not $OfferType">
            <set_value name="$Feedback" exact="'$INVALID_OFFER_TYPE'"/>
          </do_if>
        </do_if>
        <do_if value="not $Feedback">
          <do_if value="not $TextOffset">
            <set_value name="$Feedback" exact="'$NO_TEXT_OFFSET'"/>
          </do_if>
          <do_else>
            <do_if value="$Client">
              <set_value name="$PreexistingClient"/>
            </do_if>
            <do_if value="not $ClientOwner">
              <set_value name="$ClientOwner" exact="if $Client then $Client.owner else @$OfferObject.owner"/>
              <assert value="$ClientOwner" text="'No valid $ClientOwner [Owen]'"/>
            </do_if>
            <do_if value="not $ClientOwner">
              <set_value name="$Feedback" exact="'$NO_VALID_CLIENT_OWNER'"/>
            </do_if>
            <do_else>
              <!--Mission specific param checks-->
              <do_if value="not $TargetRequestCue" comment="If TargetRequestCue is set, then the mission will initialize $Targets in the callback">
                <do_if value="typeof $Targets != datatype.group or $Targets.count == 0">
                  <set_value name="$Feedback" exact="'$INVALID_TARGETS_PARAM'"/>
                </do_if>
              </do_if>
            </do_else>
          </do_else>
        </do_if>
      </actions>
      <patch sinceversion="2" state="complete">
        <set_value name="$AllowDestroy" exact="true"/>
      </patch>
      <patch sinceversion="3" state="complete">
        <set_value name="$TurretLimit" exact="null"/>
        <set_value name="$TargetStation" exact="false"/>
      </patch>
      <patch sinceversion="4" state="complete">
        <set_value name="$OpposingFaction" exact="null"/>
      </patch>
      <patch sinceversion="5">
        <set_value name="$VoiceTable" exact="table[]"/>
        <run_actions ref="md.LIB_Generic.GenerateGenericVoiceTable" result="$VoiceTable">
          <param name="VoiceTable" value="$VoiceTable"/>
        </run_actions>
        <set_value name="$VoiceTable.$MissionAcceptedReluctant" exact="1000205" comment="(accepted mission reluctantly)"/>
        <set_value name="$VoiceTable.$MissionAborted" exact="1000406" comment="(mission aborted by NPC / script error)"/>
      </patch>
      <cues>
        <cue name="Do_Not_Start_Mission" onfail="cancel">
          <conditions>
            <check_value value="$Feedback"/>
          </conditions>
          <actions>
            <signal_cue cue="CleanUp"/>
          </actions>
        </cue>
        <cue name="Do_Start_Mission" onfail="cancel">
          <conditions>
            <check_value value="not $Feedback"/>
          </conditions>
          <actions>
            <do_if value="not $MissionCue">
              <set_value name="$MissionCue" exact="Start"/>
            </do_if>
            <do_if value="not $PreexistingClient?">
              <create_cue_actor cue="Start" name="$Client">
                <select faction="$ClientOwner"/>
                <owner exact="$ClientOwner"/>
              </create_cue_actor>
            </do_if>
            <!-- Determine the reward (credits/object/notoriety) -->
            <do_if value="$GenerateReward">
              <include_actions ref="md.LIB_Reward_Balancing.Allocate_RewardWeight" comment="input: $Difficulty, $ClientOwner; output: $RewardCreditsWeight, $RewardModWeight, $RewardSeminarWeight"/>
              <do_if value="not $RewardCr" weight="$RewardCreditsWeight">
                <signal_cue_instantly cue="md.LIB_Reward_Balancing.Reward_Money" param="[Start, $Difficulty, $MissionLevel, $ClientOwner]" comment="basic reward credits"/>
                <include_actions ref="md.LIB_Reward_Balancing.Apply_RewardMultiplier" comment="signal leak and mission thread bonus"/>
                <set_value name="$RewardCr" exact="$Reward_Money__Result_Multiplied"/>
              </do_if>
              <do_if value="not $RewardObj">
                <run_actions ref="md.LIB_Reward_Balancing.DetermineAdditionalReward" result="$AdditionalReward">
                  <param name="RewardModWeight" value="$RewardModWeight"/>
                  <param name="RewardSeminarWeight" value="$RewardSeminarWeight"/>
                </run_actions>
                <do_if value="$AdditionalReward != null">
                  <set_value name="$RewardObj" exact="$AdditionalReward"/>
                  <set_value name="$RewardText" exact="$RewardObj.name"/>
                </do_if>
              </do_if>
              <do_if value="not $RewardNotoriety">
                <signal_cue_instantly cue="md.LIB_Reward_Balancing.Reward_Notoriety" param="[Start, $Difficulty, $MissionLevel, $ClientOwner]"/>
                <set_value name="$RewardNotoriety" exact="$Reward_Notoriety__Result"/>
              </do_if>
            </do_if>
            <include_actions ref="GenerateTextTable"/>
            <include_actions ref="GenerateVoiceTable"/>
            <!--Mission has passed checks - start preparing things for the offer-->
            <do_if value="$ReportSignalCue">
              <set_value name="$FeedbackData" exact="$FeedbackManager.$FeedbackValues.$MISSION_GENERATED.clone"/>
              <set_value name="$FeedbackData.$ID" exact="'$MISSION_GENERATED'"/>
              <set_value name="$ReportSignalCue.$FeedbackValue" exact="$FeedbackData.clone" comment="Mission variation generated successfully"/>
              <signal_cue_instantly cue="$ReportSignalCue" param="table[$Name = $TextTable.$missionname, $Cue = $MissionCue, $Reward = $RewardCr, $RewardText = $RewardText]"/>
            </do_if>
          </actions>
          <cues>
            <cue name="With_Offer" onfail="cancel">
              <conditions>
                <check_value value="$WithoutOffer" exact="false"/>
              </conditions>
              <actions>
                <do_if value="$Difficulty" max="level.easy">
                  <set_value name="$ConversationStartLine" exact="1000102" comment="Client says that the mission is relatively easy."/>
                </do_if>
                <do_elseif value="$Difficulty" min="level.medium">
                  <set_value name="$ConversationStartLine" exact="1000103" comment="Client says that the mission is relatively difficult."/>
                </do_elseif>
                <do_else>
                  <set_value name="$ConversationStartLine" exact="1000101" comment="other"/>
                </do_else>
              </actions>
              <cues>
                <cue name="CreateOffer" instantiate="true" comment="instanced to prevent cleanup">
                  <conditions>
                    <event_cue_signalled/>
                    <check_value value="not @$OfferCreated"/>
                  </conditions>
                  <actions>
                    <do_if value="not @$OfferCreated">
                      <create_offer cue="$MissionCue" location="$OfferObject" distance="$OfferDistance" name="$TextTable.$missionname" description="$TextTable.$description" difficulty="$Difficulty" actor="$Client" faction="$ClientOwner" opposingfaction="$OpposingFaction" type="$MissionType" reward="$RewardCr" rewardtext="$RewardText" duration="$MissionDuration" hidden="$HideFromBBS" space="$BBSSpace">
                        <briefing>
                          <objective step="1" action="objective.destroy" text="$TextTable.$objective" encyclopedia="if $Targets.count then $Targets.{1} else null"/>
                        </briefing>
                      </create_offer>
                    </do_if>
                    <set_value name="$OfferCreated" exact="true"/>
                  </actions>
                </cue>
                <cue name="Offer_Management" ref="md.GenericMissions.OfferMission">
                  <param name="OfferType" value="$OfferType"/>
                  <param name="OfferCue" value="$MissionCue"/>
                  <param name="CleanupCue" value="Offer_End"/>
                  <param name="BriefingSetupCue" value="CreateOffer"/>
                  <param name="MissionName" value="$TextTable.$missionname"/>
                  <param name="CancelOfferCue" value="$CancelOfferCue"/>
                  <!--Object based params-->
                  <param name="TimeoutMin" value="8min"/>
                  <param name="TimeoutMax" value="12min"/>
                  <param name="MaxDistance" value="$OfferMaxDistance"/>
                  <param name="RemoveOnSectorChange" value="$RemoveOnSectorChange"/>
                  <!--Object and Signal Leak based params-->
                  <param name="OfferObject" value="$OfferObject"/>
                  <!--BBS based offers-->
                  <param name="BBSObject" value="@$BBSObject"/>
                  <param name="BBSDistance" value="@$BBSDistance"/>
                  <param name="BBSTimeoutMin" value="@$BBSTimeoutMin"/>
                  <param name="BBSTimeoutMax" value="@$BBSTimeoutMax"/>
                  <!--Conversation event offers-->
                  <param name="AllowOfferEvent" value="$AllowOfferEvent"/>
                  <param name="ConversationTriggerCue" value="$ConversationTriggerCue"/>
                  <!--Client-->
                  <param name="Client" value="$Client"/>
                  <param name="Line_EventOffer" value="1000101"/>
                  <param name="Line_StartConversation" value="$ConversationStartLine"/>
                  <param name="Line_Goodbye" value="2008"/>
                  <param name="DebugChance" value="$DebugChance"/>
                </cue>
                <cue name="Offer_End">
                  <conditions>
                    <event_cue_signalled/>
                  </conditions>
                  <actions>
                    <do_if value="this.$Feedback.$ID == '$accepted_offer'">
                      <signal_cue cue="MissionAccepted"/>
                    </do_if>
                    <do_elseif value="this.$Feedback.$ID == '$DECLINED_OFFER'">
                      <set_value name="$Feedback" exact="'$DECLINED_OFFER'"/>
                      <signal_cue cue="CleanUp"/>
                    </do_elseif>
                    <do_elseif value="this.$Feedback.$ID == '$OFFER_REMOVED'">
                      <set_value name="$Feedback" exact="'$OFFER_REMOVED'"/>
                      <signal_cue cue="CleanUp"/>
                    </do_elseif>
                    <do_elseif value="this.$Feedback.$ID == '$SIGNAL_LEAK_REMOVED'">
                      <set_value name="$Feedback" exact="'$SIGNAL_LEAK_REMOVED'"/>
                      <signal_cue cue="CleanUp"/>
                    </do_elseif>
                    <do_elseif value="this.$Feedback.$ID == '$EVENT_OFFER_TIMEOUT'">
                      <set_value name="$Feedback" exact="'$EVENT_OFFER_TIMEOUT'"/>
                      <signal_cue cue="CleanUp"/>
                    </do_elseif>
                  </actions>
                </cue>
              </cues>
            </cue>
            <cue name="Without_Offer" onfail="cancel">
              <conditions>
                <check_value value="$WithoutOffer"/>
                <check_value value="not $WithoutOfferWaitCue"/>
              </conditions>
              <actions>
                <signal_cue cue="MissionAccepted"/>
              </actions>
            </cue>
            <cue name="Without_Offer_Wait_Cue" onfail="cancel">
              <conditions>
                <check_value value="$WithoutOffer"/>
                <check_value value="$WithoutOfferWaitCue"/>
              </conditions>
              <cues>
                <cue name="Without_Offer_Wait_Cue_Completed">
                  <conditions>
                    <check_any>
                      <event_cue_completed cue="$WithoutOfferWaitCue"/>
                      <check_all>
                        <event_cue_signalled cue="$WithoutOfferWaitCue"/>
                        <check_value value="event.param == $MissionCue"/>
                      </check_all>
                    </check_any>
                  </conditions>
                  <actions>
                    <signal_cue_instantly cue="MissionAccepted"/>
                  </actions>
                </cue>
              </cues>
            </cue>
            <!--These cues handle the briefing presentations e.g. Holomap or cutscene render targets (depending on the mission)
            note: play_cutscene action should not be in the actions of the cue with a event_briefing_submission_selected condition. It must be delayed-->
            <cue name="BriefingStarted">
              <conditions>
                <check_any>
                  <event_briefing_started cue="$MissionCue"/>
                  <event_briefing_submission_selected cue="$MissionCue"/>
                </check_any>
              </conditions>
              <actions>
                <set_value name="$RenderTarget" exact="event.param.{1}"/>
                <set_value name="$OpenHolomap"/>
                <set_value name="$HolomapReplay" exact="false"/>
                <do_if value="$Targets.count" min="1">
                  <set_value name="$MapTarget" exact="$Targets.{1}"/>
                </do_if>
                <do_else>
                  <set_value name="$MapTarget" exact="player.zone"/>
                </do_else>
                <debug_text text="'Briefing started'" chance="$DebugChance"/>
              </actions>
              <cues>
                <cue name="DisplayHolomap" onfail="cancel">
                  <conditions>
                    <check_value value="$OpenHolomap?"/>
                  </conditions>
                  <actions>
                    <do_if value="not $HoloMap?">
                      <add_holomap name="$HoloMap" rendertarget="$RenderTarget"/>
                    </do_if>
                    <remove_value name="$OpenHolomap"/>
                  </actions>
                  <cues>
                    <cue name="HolomapRef" ref="md.LIB_HolomapTarget.Start">
                      <param name="EndSignalCue" value="HolomapEnd"/>
                      <param name="HoloMap" value="$HoloMap"/>
                      <param name="Components" value="[player.entity, $MapTarget]"/>
                      <param name="ShowUnknown" value="false"/>
                      <param name="IsReplay" value="$HolomapReplay"/>
                      <param name="verbosedebugchance" value="$DebugChance"/>
                    </cue>
                    <cue name="HolomapEnd">
                      <conditions>
                        <event_cue_signalled/>
                      </conditions>
                      <actions>
                        <debug_text text="'Holomap animation end'" chance="$DebugChance"/>
                      </actions>
                      <cues>
                        <cue name="PlayBriefingCutscene" onfail="cancel">
                          <conditions>
                            <check_value value="$MapTarget.isclass.ship"/>
                          </conditions>
                          <actions>
                            <do_if value="$HoloMap?">
                              <remove_holomap/>
                              <remove_value name="$HoloMap"/>
                            </do_if>
                            <!--<create_presentation_cluster name="$CutsceneCluster" background="macro.cluster_black_wlight_bg_macro"/>-->
                            <create_presentation_cluster name="$CutsceneCluster"/>
                            <find_zone name="$CutsceneZone" space="$CutsceneCluster"/>
                            <create_ship name="$CutsceneShip" macro="$MapTarget.macro" zone="$CutsceneZone">
                              <pilot actor="null"/>
                              <position x="0" y="0" z="0"/>
                            </create_ship>
                            <set_value name="$BriefingCutsceneStarted"/>
                            <set_value name="$CutsceneKey" exact="'OrbitIndefinitely'"/>
                            <play_cutscene key="$CutsceneKey" rendertarget="$RenderTarget">
                              <param name="targetobject" object="$CutsceneShip"/>
                            </play_cutscene>
                          </actions>
                          <cues>
                            <cue name="ReplayHoloMap">
                              <delay exact="10s"/>
                              <actions>
                                <!--Temp value. This is used to identify if a cutscene for this mission is still playing.-->
                                <remove_value name="$BriefingCutsceneStarted"/>
                                <stop_cutscene key="$CutsceneKey"/>
                                <do_if value="$CutsceneCluster.exists">
                                  <destroy_object object="$CutsceneCluster"/>
                                </do_if>
                                <do_if value="$CutsceneShip.exists">
                                  <destroy_object object="$CutsceneShip"/>
                                </do_if>
                                <set_value name="$HolomapReplay" exact="true"/>
                                <set_value name="$OpenHolomap"/>
                                <reset_cue cue="DisplayHolomap"/>
                              </actions>
                            </cue>
                          </cues>
                        </cue>
                      </cues>
                    </cue>
                  </cues>
                </cue>
                <cue name="BriefingStopped">
                  <conditions>
                    <check_any>
                      <event_briefing_cancelled cue="$MissionCue"/>
                      <event_briefing_submission_unselected cue="$MissionCue"/>
                    </check_any>
                  </conditions>
                  <actions>
                    <do_if value="$HoloMap?">
                      <remove_holomap/>
                      <remove_value name="$HoloMap"/>
                    </do_if>
                    <do_if value="$BriefingCutsceneStarted?">
                      <!--Temp value. This is used to identify if a cutscene for this mission is still playing.-->
                      <remove_value name="$BriefingCutsceneStarted"/>
                      <stop_cutscene key="$CutsceneKey"/>
                      <do_if value="$CutsceneCluster.exists">
                        <destroy_object object="$CutsceneCluster"/>
                      </do_if>
                      <do_if value="$CutsceneShip.exists">
                        <destroy_object object="$CutsceneShip"/>
                      </do_if>
                    </do_if>
                    <debug_text text="'Briefing canceled'" chance="$DebugChance"/>
                    <reset_cue cue="BriefingStarted"/>
                  </actions>
                </cue>
              </cues>
            </cue>
            <!--TODO @Owen - parameters to allow some losses from the group instead of failing when one is lost?-->
            <cue name="TargetBecamePlayerOwned" instantiate="true">
              <conditions>
                <event_object_changed_true_owner group="$Targets" owner="faction.player"/>
              </conditions>
              <actions>
                <do_if value="not $TargetRequestCue">
                  <set_value name="$Feedback" exact="'$TARGET_PLAYER_OWNED'"/>
                  <signal_cue cue="CleanUp"/>
                </do_if>
              </actions>
            </cue>
            <cue name="TargetDestroyedPrematurely" instantiate="true">
              <conditions>
                <event_object_destroyed group="$Targets"/>
              </conditions>
              <actions>
                <do_if value="not $TargetRequestCue">
                  <do_if value="MissionAccepted.state == cuestate.complete">
                    <signal_cue_instantly cue="md.GenericMissions.GenericFailLogbookEntry" param="[$TextTable.$missionname, $Client, {30004,6027}]"/>
                  </do_if>
                  <set_value name="$Feedback" exact="'$TARGET_KILLED_EARLY'"/>
                  <signal_cue cue="CleanUp"/>
                </do_if>
              </actions>
            </cue>
            <cue name="MissionAccepted">
              <conditions>
                <event_cue_signalled/>
              </conditions>
              <actions>
                <debug_text text="'Mission accepted!'" chance="$DebugChance"/>
                <set_value name="stat.missions_accepted" operation="add"/>
                <do_if value="$Difficulty" min="level.medium">
                  <speak actor="$Client" line="$VoiceTable.$MissionAcceptedReluctant" comment="(player accepted mission offer)" chance="if $VoiceTable.$MissionAccepted == 0 then 0 else 100"/>
                  <signal_cue_instantly cue="md.GenericMissions.PlotMissionInterrupted" param="table[$client = $Client, $line = $VoiceTable.$MissionAcceptedReluctant]"/>
                </do_if>
                <do_else>
                  <speak actor="$Client" line="$VoiceTable.$MissionAccepted" comment="(player accepted mission offer)" chance="if $VoiceTable.$MissionAccepted == 0 then 0 else 100"/>
                  <signal_cue_instantly cue="md.GenericMissions.PlotMissionInterrupted" param="table[$client = $Client, $line = $VoiceTable.$MissionAccepted]"/>
                </do_else>
                <do_if value="$WithoutOffer">
                  <!--$MissionCue may already be a mission cue passed in as a parameter-->
                  <do_if value="not $MissionCue.hasmission">
                    <do_if value="$MissionThread">
                      <create_mission cue="$MissionCue" missionthread="$MissionThread" name="$TextTable.$missionname" description="$TextTable.$description" difficulty="$Difficulty" faction="$ClientOwner" type="$MissionType" reward="$RewardCr" rewardtext="$RewardText"/>
                    </do_if>
                    <do_else>
                      <create_mission cue="$MissionCue" name="$TextTable.$missionname" description="$TextTable.$description" difficulty="$Difficulty" faction="$ClientOwner" type="$MissionType" reward="$RewardCr" rewardtext="$RewardText"/>
                    </do_else>
                  </do_if>
                  <update_mission cue="$MissionCue">
                    <briefing>
                      <objective step="1" action="objective.destroy" text="$TextTable.$objective" encyclopedia="if $Targets.count then $Targets.{1} else null"/>
                    </briefing>
                  </update_mission>
                </do_if>
                <do_else>
                  <!--Copy data from the offer, then remove it-->
                  <do_if value="$MissionThread">
                    <create_mission cue="$MissionCue" offercue="$MissionCue" missionthread="$MissionThread">
                      <briefing>
                        <objective step="1" action="objective.destroy" text="$TextTable.$objective" encyclopedia="if $Targets.count then $Targets.{1} else null" comment="force-update, $Targets might have changed in case of $TargetRequestCue!"/>
                      </briefing>
                    </create_mission>
                  </do_if>
                  <do_else>
                    <create_mission cue="$MissionCue" offercue="$MissionCue"/>
                  </do_else>
                  <remove_offer cue="$MissionCue"/>
                  <cancel_cue cue="With_Offer"/>
                </do_else>
                <do_if value="$ReportSignalCue">
                  <set_value name="$FeedbackData" exact="$FeedbackManager.$FeedbackValues.$MISSION_ACCEPTED.clone"/>
                  <set_value name="$FeedbackData.$ID" exact="'$MISSION_ACCEPTED'"/>
                  <set_value name="$ReportSignalCue.$FeedbackValue" exact="$FeedbackData.clone" comment="Mission accepted"/>
                  <signal_cue_instantly cue="$ReportSignalCue"/>
                </do_if>
                <signal_cue_instantly cue="md.GenericMissions.GenericAcceptLogbookEntry" param="[$TextTable.$missionname, $Client, $ClientOwner]"/>
              </actions>
              <cues>
                <cue name="ActivateImmediately" onfail="cancel">
                  <conditions>
                    <check_value value="not $MissionThread and not $Feedback"/>
                  </conditions>
                  <actions>
                    <signal_cue cue="ActivateMission"/>
                  </actions>
                </cue>
                <cue name="ActivateOnCondition" onfail="cancel">
                  <conditions>
                    <check_value value="$MissionThread and not $Feedback"/>
                  </conditions>
                  <actions>
                    <do_if value="$MissionThread.canactivatesubmission.{$MissionCue}">
                      <signal_cue cue="ActivateMission"/>
                      <cancel_cue cue="ActivateOnCondition"/>
                    </do_if>
                  </actions>
                  <cues>
                    <!--TODO @Owen add an event for when a submission has been removed from the thread-->
                    <cue name="CheckMissionThreadState" checkinterval="1s">
                      <conditions>
                        <check_value value="$MissionThread.canactivatesubmission.{$MissionCue}"/>
                      </conditions>
                      <actions>
                        <signal_cue cue="ActivateMission"/>
                        <cancel_cue cue="ActivateOnCondition"/>
                      </actions>
                    </cue>
                  </cues>
                </cue>
                <cue name="ActivateMission">
                  <conditions>
                    <event_cue_signalled/>
                  </conditions>
                  <actions>
                    <set_value name="$StartStep" exact="1"/>
                    <cancel_cue cue="TargetBecamePlayerOwned"/>
                    <cancel_cue cue="TargetDestroyedPrematurely"/>
                    <do_if value="not $Targets.count">
                      <do_if value="$TargetRequestCue">
                        <signal_cue_instantly cue="$TargetRequestCue" param="this"/>
                        <add_to_group groupname="$Targets" group="this.$Targets"/>
                      </do_if>
                      <do_if value="not $Targets.count">
                        <set_value name="$Feedback" exact="'$NO_VALID_TARGETS'"/>
                        <signal_cue cue="CleanUp"/>
                      </do_if>
                    </do_if>
                  </actions>
                  <cues>
                    <cue name="DestroyComponentsRef" ref="md.RML_Destroy_Components.DestroyComponents">
                      <param name="EndSignalCue" value="ObjectsDestroyed"/>
                      <param name="MissionCue" value="$MissionCue"/>
                      <param name="Targets_Param" value="$Targets"/>
                      <param name="AllowCapture" value="true"/>
                      <param name="AllowDestroy" value="$AllowDestroy"/>
                      <param name="ObjectiveIsGroup" value="true"/>
                      <param name="ObjectiveText" value="readtext.{$Page}.{$TextOffset + 3}"/>
                      <param name="DebugChance" value="$DebugChance"/>
                    </cue>
                    <cue name="MissionTimeout" onfail="cancel">
                      <conditions>
                        <check_value value="typeof $MissionDuration == datatype.time"/>
                        <check_value value="$MissionDuration" min="1s"/>
                      </conditions>
                      <delay exact="$MissionDuration"/>
                      <actions>
                        <signal_cue_instantly cue="md.GenericMissions.GenericTimeoutLogbookEntry" param="[$TextTable.$missionname, $Client]"/>
                        <remove_mission cue="$MissionCue" type="failed"/>
                        <set_value name="$Feedback" exact="'$MISSION_TIMEOUT'"/>
                        <signal_cue_instantly cue="CleanUp"/>
                      </actions>
                    </cue>
                    <cue name="ObjectsDestroyed">
                      <conditions>
                        <event_cue_signalled/>
                      </conditions>
                      <actions>
                        <do_if value="ObjectsDestroyed.$EndFeedbackValue" max="-100">
                          <debug_text text="'GM_Destroy_Objects: There was a script or code error in RML - aborting mission: ' + ObjectsDestroyed.$EndFeedbackValue" chance="$DebugChance"/>
                          <set_value name="$Feedback" exact="'$RML_ERROR'"/>
                          <signal_cue cue="MissionAborted"/>
                        </do_if>
                        <do_else>
                          <set_value name="MissionEnded.$EndFeedbackValue" exact="ObjectsDestroyed.$EndFeedbackValue"/>
                          <set_value name="MissionEnded.$EndFeedbackText" exact="@ObjectsDestroyed.$EndFeedbackText"/>
                          <signal_cue cue="MissionEnded"/>
                        </do_else>
                      </actions>
                    </cue>
                    <cue name="ExplosionManager" onfail="cancel">
                      <conditions>
                        <check_all>
                          <check_value value="$ExplosionRange gt 0"/>
                        </check_all>
                      </conditions>
                      <actions>
                        <debug_text text="'Explosion Manager Activated + $Targer.count:' + $Targets.count"/>
                      </actions>
                      <cues>
                        <cue name="ExplosionTicker" checkinterval="1s" instantiate="true">
                          <conditions>
                            <check_value value="$Targets.count"/>
                          </conditions>
                          <actions>
                            <set_value name="$NearObject" exact="null"/>
                            <do_all exact="$Targets.count" counter="$i" reverse="true">
                              <find_object name="$NearObject" class="class.controllable" space="$Targets.{$i}.sector">
                                <match_distance object="$Targets.{$i}" max="$ExplosionRange"/>
                              </find_object>
                              <do_if value="$NearObject">
                                <destroy_object object="$Targets.{$i}" explosion="true"/>
                              </do_if>
                            </do_all>
                          </actions>
                        </cue>
                      </cues>
                    </cue>
                  </cues>
                </cue>
              </cues>
            </cue>
            <cue name="MissionAborted">
              <conditions>
                <check_any>
                  <event_mission_aborted cue="$MissionCue"/>
                  <event_cue_signalled/>
                </check_any>
              </conditions>
              <actions>
                <!-- Player aborted mission -->
                <do_if value="event.object" exact="$MissionCue">
                  <set_value name="$Feedback" exact="'$MISSION_ABORTED'"/>
                  <debug_text text="'GM_Destroy_Objects: Mission was aborted by the player.'" chance="$DebugChance"/>
                  <signal_cue_instantly cue="md.GenericMissions.GenericAbortLogbookEntry" param="[$TextTable.$missionname, $Client]"/>
                </do_if>
                <!-- Script / code error aborted mission -->
                <do_else>
                  <!-- Leave $FeedbackValue as it is because it has already been set in the part of the script that went wrong -->
                  <debug_text text="'GM_Destroy_Objects: Mission was aborted by script or code error.'" chance="$DebugChance"/>
                  <speak actor="$Client" line="$VoiceTable.$MissionAborted" chance="if $VoiceTable.$MissionAborted == 0 then 0 else 100" comment="(mission aborted by NPC / script error)"/>
                </do_else>
                <remove_mission cue="$MissionCue" type="aborted"/>
                <signal_cue cue="CleanUp"/>
              </actions>
            </cue>
            <cue name="MissionEnded">
              <conditions>
                <event_cue_signalled/>
              </conditions>
              <actions>
                <!-- Failure case -->
                <do_if value="MissionEnded.$EndFeedbackValue" max="0">
                  <debug_text text="'This mission has failed. RML Feedback: ' + MissionEnded.$EndFeedbackValue" chance="$DebugChance"/>
                  <set_value name="$Feedback" exact="'$RML_FAILED'"/>
                  <speak actor="$Client" line="$VoiceTable.$MissionFailed" comment="(failed mission)" chance="if $VoiceTable.$MissionFailed == 0 then 0 else 100"/>
                  <signal_cue_instantly cue="md.GenericMissions.GenericFailLogbookEntry" param="[$TextTable.$missionname, $Client, @MissionEnded.$EndFeedbackText]"/>
                  <remove_mission cue="$MissionCue" type="failed" reason="@MissionEnded.$EndFeedbackText"/>
                </do_if>
                <!-- Success case -->
                <do_else>
                  <!--TODO: Partial success-->
                  <debug_text text="'This mission has ended. RML Feedback: ' + MissionEnded.$EndFeedbackValue" chance="$DebugChance"/>
                  <do_if value="$RewardNotoriety and $ClientOwner">
                    <debug_text text="'Relation was: ' + player.entity.relationto.{$ClientOwner}" chance="$DebugChance"/>
                    <add_faction_relation faction="faction.player" otherfaction="$ClientOwner" value="$RewardNotoriety" reason="relationchangereason.missioncompleted"/>
                    <debug_text text="'Relation is now: ' + player.entity.relationto.{$ClientOwner}" chance="$DebugChance"/>
                  </do_if>
                  <do_if value="$RewardCr">
                    <reward_player money="$RewardCr"/>
                  </do_if>
                  <do_if value="$RewardObj">
                    <do_if value="$RewardObj.isinventory">
                      <add_inventory entity="player.entity" ware="$RewardObj"/>
                      <show_notification text="[{1015,100}, '', $RewardText]" sound="notification_achievement" comment="Item received"/>
                    </do_if>
                  </do_if>
                  <set_value name="stat.missions_completed" operation="add"/>
                  <set_value name="$Feedback" exact="'$MISSION_SUCCEEDED'"/>
                  <speak actor="$Client" line="$VoiceTable.$MissionSuccess" comment="(successful mission)" chance="if $VoiceTable.$MissionSuccess == 0 then 0 else 100"/>
                  <signal_cue_instantly cue="md.GenericMissions.GenericCompleteLogbookEntry" param="[$TextTable.$missionname, $Client, null, $RewardCr]"/>
                  <remove_mission cue="$MissionCue" type="completed" activate="next"/>
                </do_else>
                <signal_cue cue="CleanUp"/>
              </actions>
            </cue>
          </cues>
        </cue>
        <cue name="ForceCleanup" onfail="cancel" version="2">
          <conditions>
            <check_value value="$ForceCleanup"/>
          </conditions>
          <actions>
            <do_if value="not $ForceCleanup.exists">
              <set_value name="$Feedback" exact="'$INVALID_FORCE_CLEANUP'"/>
              <signal_cue_instantly cue="CleanUp"/>
            </do_if>
          </actions>
          <cues>
            <cue name="ForceCleanup_Wait">
              <conditions>
                <check_any>
                  <event_cue_completed cue="$ForceCleanup"/>
                  <check_all>
                    <event_cue_signalled cue="$ForceCleanup"/>
                    <check_value value="event.param == $MissionCue"/>
                  </check_all>
                </check_any>
              </conditions>
              <actions>
                <set_value name="$Feedback" exact="'$FORCED_CLEANUP'"/>
                <signal_cue_instantly cue="CleanUp"/>
              </actions>
            </cue>
          </cues>
        </cue>
        <cue name="CleanUp">
          <conditions>
            <event_cue_signalled/>
          </conditions>
          <actions>
            <do_if value="$HoloMap?">
              <remove_holomap/>
              <remove_value name="$HoloMap"/>
            </do_if>
            <do_if value="$BriefingCutsceneStarted?">
              <!--Temp value. This is used to identify if a cutscene for this mission is still playing.-->
              <remove_value name="$BriefingCutsceneStarted"/>
              <stop_cutscene key="$CutsceneKey"/>
              <do_if value="$CutsceneCluster.exists">
                <destroy_object object="$CutsceneCluster"/>
              </do_if>
              <do_if value="$CutsceneShip.exists">
                <destroy_object object="$CutsceneShip"/>
              </do_if>
            </do_if>
            <!--***Cleanup objects***-->
            <!--No .exists check here as $Client may not be connected to gamegraph-->
            <do_if value="$Client.isclass.npc and (not $PreexistingClient?)">
              <destroy_object object="$Client"/>
            </do_if>
            <do_if value="$Target?">
              <signal_cue_instantly cue="md.GM_Destroy_Objects.RemoveTarget" param="[$Target, $ClientOwner]"/>
            </do_if>
            <!--***Evaluate result***-->
            <do_if value="$DebugChance or $ReportSignalCue">
              <set_value name="$FeedbackData" exact="$FeedbackManager.$FeedbackValues.{$Feedback}.clone"/>
              <do_if value="$FeedbackData">
                <set_value name="$FeedbackData.$ID" exact="$Feedback"/>
                <debug_text text="'Mission ended with reason: ' + $FeedbackData.$type + ' - ' + $FeedbackData.$text" chance="$DebugChance"/>
              </do_if>
              <do_else>
                <set_value name="$FeedbackData" exact="table[$ID = 'error_unknown', $type = 'error', $text = 'This is an unknown error']"/>
                <assert value="false" text="'Mission ended with unknown case: ' + $Feedback + ' [Owen]'" break="1"/>
              </do_else>
              <do_if value="$ReportSignalCue">
                <set_value name="$ReportSignalCue.$EndFeedbackValue" exact="$FeedbackData"/>
                <signal_cue cue="$ReportSignalCue"/>
              </do_if>
            </do_if>
            <cancel_cue cue="Start"/>
          </actions>
        </cue>
      </cues>
    </library>
    <!--GENERIC MISSION VARIANTS-->
    <cue name="Force_Generic_Var_1" instantiate="true">
      <conditions>
        <event_cue_signalled/>
      </conditions>
      <actions>
        <signal_cue cue="md.GenericMissions.RemoveAllOffers"/>
        <do_all exact="30">
          <signal_cue_instantly cue="GenerateGenericMission" param="table[$Sector = player.sector, $MissionVariant = 1, $DebugChance = 100]"/>
        </do_all>
      </actions>
      <force name="GM_Destroy_Object_Var_1"/>
    </cue>
    <cue name="Force_Generic_Var_2" instantiate="true">
      <conditions>
        <event_cue_signalled/>
      </conditions>
      <actions>
        <signal_cue cue="md.GenericMissions.RemoveAllOffers"/>
        <do_all exact="30">
          <signal_cue_instantly cue="GenerateGenericMission" param="table[$Sector = player.sector, $MissionVariant = 2, $DebugChance = 100]"/>
        </do_all>
      </actions>
      <force name="GM_Destroy_Object_Var_2"/>
    </cue>
    <!-- MISSION SETUP HELPERS -->
    <!-- input: $MissionLevel, output: $MissionLevel, $MinSpawn, $MaxSpawn -->
    <library name="ConfigureDifficulty">
      <actions>
        <set_value name="$MissionLevel" exact="if not $MissionLevel? then 1 else $MissionLevel"/>
        <debug_text text="'Missing $MissionLevel input. Set to: ' + $MissionLevel" chance="$DebugChance"/>
        <!-- Figure out how many to spawn within what distance, based on the $MissionLevel -->
        <set_value name="$LevelVsSpawn" exact="table[                     { 1 }   =  [  3, 6],                     { 4 }   =  [  6,12],                     { 7 }   =  [ 12,20],                   ]"/>
        <set_value name="$Level" exact="$LevelVsSpawn.keys.random"/>
        <set_value name="$MinSpawn" exact="$LevelVsSpawn.{$Level}.{1}"/>
        <set_value name="$MaxSpawn" exact="$LevelVsSpawn.{$Level}.{2}"/>
        <set_value name="$MissionLevel" exact="$MissionLevel + $Level - 1"/>
      </actions>
    </library>
    <!-- input: -, output: NearbyZones -->
    <library name="FindNearbyZones">
      <actions>
        <do_if value="player.exists">
          <find_cluster_in_range name="$LocalClusters" object="player.entity" maxdistance="1" multiple="true"/>
          <find_zone name="$NearbyZones" normalzone="true" space="$LocalClusters" multiple="true"/>
        </do_if>
      </actions>
    </library>
    <!-- input: -, Output: $TargetStations stations friendly to player (no player, xenon or ownerless stations) -->
    <library name="FindStationFriendly">
      <actions>
        <do_if value="player.exists">
          <find_cluster_in_range name="$LocalClusters" object="player.entity" maxdistance="1" multiple="true"/>
          <find_station name="$TargetStations" space="$LocalClusters" multiple="true">
            <match owner="[faction.player, faction.xenon, faction.xenon1, faction.xenon2, faction.xenon3, faction.xenon4, faction.xenon5, faction.xenon6, faction.ownerless]" negate="true"/>
            <match_relation_to faction="$Faction" comparison="gt" relation="neutral"/>
          </find_station>
        </do_if>
      </actions>
    </library>
    <!-- input: -, Output: $TargetStations stations friendly to player (no player, xenon, ownerless, scaleplate or hatikvah stations)-->
    <library name="FindStationFriendlyNonPirate">
      <actions>
        <do_if value="player.exists">
          <find_cluster_in_range name="$LocalClusters" object="player.entity" maxdistance="1" multiple="true"/>
          <find_station name="$TargetStations" space="$LocalClusters" multiple="true">
            <match owner="[faction.player, faction.xenon, faction.xenon1, faction.xenon2, faction.xenon3, faction.xenon4, faction.xenon5, faction.xenon6, faction.ownerless, faction.scaleplate, faction.hatikvah]" negate="true"/>
            <match_relation_to faction="$Faction" comparison="gt" relation="neutral"/>
          </find_station>
        </do_if>
      </actions>
    </library>
    <!-- input: $Sector, $ExplosiveOwner, output: $Explosives (group, can be multiple!)-->
    <library name="FindLasertowers">
      <actions>
        <!-- find relevant satellites -->
        <find_object name="$ExplosivesList" macro="[macro.ship_gen_xs_lasertower_01_a_macro, macro.ship_gen_s_lasertower_01_a_macro]" owner="$ExplosiveOwner" space="$Sector" multiple="true"/>
        <shuffle_list list="$ExplosivesList"/>
        <debug_text text="'Searching lasertowers: \'' + $Sector.knownname + '\' explosiveowner:\''  + $ExplosiveOwner + '\' - found: ' + $ExplosivesList.count" chance="$DebugChance"/>
        <!-- try to filter down to groups, i.e. everything within x km of the first one!-->
        <do_all exact="@$ExplosivesList.count" counter="$i" reverse="true">
          <do_if value="$ExplosivesList.{1}.distanceto.{$ExplosivesList.{$i}} gt 15km">
            <remove_value name="$ExplosivesList.{$i} "/>
          </do_if>
        </do_all>
        <add_to_group groupname="$Explosives" list="$ExplosivesList" comment="GM wants a group"/>
        <remove_value name="$ExplosivesList"/>
      </actions>
    </library>
    <!-- input: $Sector, $ExplosiveOwner, output: $Explosives (group, can be multiple!)-->
    <library name="FindMinefield">
      <actions>
        <!-- find relevant satellites -->
        <find_object name="$ExplosivesList" macro="[macro.weapon_gen_mine_01_macro, macro.weapon_gen_mine_02_macro, macro.weapon_gen_mine_02_a_macro, macro.weapon_gen_mine_03_macro]" owner="$ExplosiveOwner" space="$Sector" multiple="true"/>
        <shuffle_list list="$ExplosivesList"/>
        <debug_text text="'Searching minefields: \'' + $Sector.knownname + '\' explosiveowner:\''  + $ExplosiveOwner + '\' - found: ' + $ExplosivesList.count" chance="$DebugChance"/>
        <!-- try to filter down to groups, i.e. everything within x km of the first one!-->
        <do_all exact="@$ExplosivesList.count" counter="$i" reverse="true">
          <do_if value="$ExplosivesList.{1}.distanceto.{$ExplosivesList.{$i}} gt 15km">
            <remove_value name="$ExplosivesList.{$i} "/>
          </do_if>
        </do_all>
        <add_to_group groupname="$Explosives" list="$ExplosivesList" comment="GM wants a group"/>
        <remove_value name="$ExplosivesList"/>
      </actions>
    </library>
    <!-- input: $Sector, $ExplosiveOwner, output: $Explosives (group, can be multiple!)-->
    <library name="FindRiggedAsteroids">
      <actions>
        <!-- find relevant satellites -->
        <find_object name="$ExplosivesList" macro="macro.env_ast_ore_m_explosive_03_macro" owner="$ExplosiveOwner" space="$Sector" multiple="true"/>
        <shuffle_list list="$ExplosivesList"/>
        <debug_text text="'Searching rigged-asteroids: \'' + $Sector.knownname + '\' explosiveowner:\''  + $ExplosiveOwner + '\' - found: ' + $ExplosivesList.count" chance="$DebugChance"/>
        <!-- try to filter down to groups, i.e. everything within x km of the first one!-->
        <do_all exact="@$ExplosivesList.count" counter="$i" reverse="true">
          <do_if value="$ExplosivesList.{1}.distanceto.{$ExplosivesList.{$i}} gt 15km">
            <remove_value name="$ExplosivesList.{$i} "/>
          </do_if>
        </do_all>
        <add_to_group groupname="$Explosives" list="$ExplosivesList" comment="GM wants a group"/>
        <remove_value name="$ExplosivesList"/>
      </actions>
    </library>
    <!-- input: $Sector, $ExplosiveOwner, output: $Explosives (either a minefield, rigged asteroids or nothing)-->
    <library name="FindMinefieldOrRiggedAsteroids">
      <actions>
        <include_actions ref="md.GM_Destroy_Objects.FindMinefield" comment="input:                           , $ExplosiveOwner output: $Explosives"/>
        <do_if value="$Explosives.count == 0">
          <include_actions ref="md.GM_Destroy_Objects.FindRiggedAsteroids" comment="input: $Sector, $ExplosiveOwner output: $Explosives"/>
        </do_if>
      </actions>
    </library>
    <!--event.param = table[
    $Sector,
    $ReportSignalCue (Optional. Cue to be signalled when something happens which could be of interest to the calling cue. Saves values to ReportSignalCue.$FeedbackValue and ReportSignalCue.$EndFeedbackValue)
    $MissionVariant (Optional),
    $RemoveOnSectorChange (Optional, defaults to true)
    $DebugChance (Optional)]-->
    <cue name="GenerateGenericMission" instantiate="true" namespace="this" version="2">
      <conditions>
        <event_cue_signalled/>
      </conditions>
      <actions>
        <set_value name="$Sector" exact="event.param.$Sector"/>
        <set_value name="$ReportSignalCue" exact="@event.param.$ReportSignalCue"/>
        <set_value name="$MissionVariant" exact="@event.param.$MissionVariant"/>
        <do_if value="event.param.$RemoveOnSectorChange?">
          <set_value name="$RemoveOnSectorChange" exact="event.param.$RemoveOnSectorChange"/>
        </do_if>
        <do_else>
          <set_value name="$RemoveOnSectorChange" exact="true"/>
        </do_else>
        <set_value name="$DebugChance" exact="@event.param.$DebugChance"/>
        <set_value name="$ReportSignalCue.$GM_Wrapper" exact="this"/>
        <set_value name="$FeedbackManager" exact="FeedbackValueManager"/>
        <assert value="$FeedbackManager.$FeedbackValues.$MISSION_NO_VARIANT?" text="'Required error code does not exist. Was the FeedbackValueManager not updated for stand-alone missions? [Owen/Roger]'"/>
        <debug_text text="'Attempting to generate a generic mission'" chance="$DebugChance"/>
      </actions>
      <patch sinceversion="2" state="complete">
        <do_if value="$ReportSignalCue.exists">
          <set_value name="$ReportSignalCue.$GM_Wrapper" exact="this"/>
        </do_if>
        <do_else>
          <debug_text text="'cancelling dead GM instance'" filter="savegame"/>
          <cancel_cue cue="this"/>
        </do_else>
      </patch>
      <cues>
        <cue name="GenerateGenericMission_SelectVariant">
          <actions>
            <set_value name="$ValidVariants" exact="[]"/>
            <!--Set up some common variables first so that the variants don't have to do things multiple times-->
            <!--Find potential offer stations in the sector-->
            <do_if value="player.exists">
              <find_station name="$PotentialOfferStations" excluded="md.GenericMissions.Manager.$ExcludedOfferObjects" space="$Sector" multiple="true">
                <match owner="md.GenericMissions.Manager.$DefaultExcludedOfferFactions" negate="true"/>
                <match_relation_to object="player.entity" comparison="not" relation="killmilitary"/>
              </find_station>
            </do_if>
            <do_if value="$PotentialOfferStations.count">
              <!--Populate a table with all enemy factions of the offer stations-->
              <set_value name="$EnemyFactionTable" exact="table[]"/>
              <do_all exact="$PotentialOfferStations.count" counter="$i">
                <set_value name="$StationOwner" exact="$PotentialOfferStations.{$i}.owner"/>
                <do_if value="not $EnemyFactionTable.{$StationOwner}?">
                  <get_factions_by_relation result="$EnemyFactionTable.{$StationOwner}" faction="$StationOwner" relation="killmilitary"/>
                  <!--Can't assassinate Xenon-->
                  <remove_from_list name="$EnemyFactionTable.{$StationOwner}" exact="[faction.xenon, faction.xenon1, faction.xenon2, faction.xenon3, faction.xenon4, faction.xenon5, faction.xenon6]" multiple="false"/>
                  <debug_text text="'enemies of ' + $StationOwner + ' ' + $EnemyFactionTable.{$StationOwner}" chance="$DebugChance"/>
                </do_if>
              </do_all>
              <do_if value="$MissionVariant">
                <!--A specific MissionVariant ID was requested-->
                <debug_text text="'Checking if requested ' + $MissionVariant + ' can be spawned'" chance="$DebugChance"/>
                <do_if value="$MissionVariant == 1">
                  <signal_cue_instantly cue="GenerateGenericMission_Variant_1"/>
                </do_if>
                <do_elseif value="$MissionVariant == 2">
                  <signal_cue_instantly cue="GenerateGenericMission_Variant_2"/>
                </do_elseif>
                <do_elseif value="$MissionVariant == 3">
                  <signal_cue_instantly cue="GenerateGenericMission_Variant_3"/>
                </do_elseif>
                <do_elseif value="$MissionVariant == 4">
                  <signal_cue_instantly cue="GenerateGenericMission_Variant_4"/>
                </do_elseif>
                <do_elseif value="$MissionVariant == 5">
                  <signal_cue_instantly cue="GenerateGenericMission_Variant_5"/>
                </do_elseif>
                <do_elseif value="$MissionVariant == 6">
                  <signal_cue_instantly cue="GenerateGenericMission_Variant_6"/>
                </do_elseif>
                <do_else>
                  <assert value="false" text="'Unknown $MissionVariant ID ' + $MissionVariant + ' [Owen]'"/>
                </do_else>
              </do_if>
              <do_else>
                <!--Attempt to a mission variant at random-->
                <signal_cue_instantly cue="GenerateGenericMission_Variant_1"/>
                <signal_cue_instantly cue="GenerateGenericMission_Variant_2"/>
                <signal_cue_instantly cue="GenerateGenericMission_Variant_3"/>
                <signal_cue_instantly cue="GenerateGenericMission_Variant_4"/>
                <signal_cue_instantly cue="GenerateGenericMission_Variant_5"/>
                <signal_cue_instantly cue="GenerateGenericMission_Variant_6"/>
              </do_else>
            </do_if>
            <do_if value="$ValidVariants.count">
              <signal_cue cue="$ValidVariants.random"/>
            </do_if>
            <do_else>
              <do_if value="$ReportSignalCue">
                <set_value name="$FeedbackData" exact="$FeedbackManager.$FeedbackValues.$MISSION_NO_VARIANT.clone"/>
                <set_value name="$FeedbackData.$ID" exact="'$MISSION_NO_VARIANT'"/>
                <set_value name="$ReportSignalCue.$FeedbackValue" exact="$FeedbackData.clone" comment="No mission variant possible"/>
                <signal_cue_instantly cue="$ReportSignalCue"/>
              </do_if>
              <cancel_cue cue="GenerateGenericMission"/>
            </do_else>
          </actions>
        </cue>
        <cue name="GenerateGenericMission_Variant_1" namespace="this" comment="Minefield around station/gate (manually spawned for this mission)">
          <conditions>
            <event_cue_signalled/>
          </conditions>
          <actions>
            <!--this uses its own namespace so grab the shared data from GenerateGenericMission-->
            <set_value name="$Sector" exact="GenerateGenericMission.$Sector"/>
            <do_if value="player.sector">
              <set_value name="$Sector" exact="player.sector"/>
            </do_if>
            <set_value name="$DebugChance" exact="GenerateGenericMission.$DebugChance"/>
            <set_value name="$OfferStations" exact="GenerateGenericMission.$PotentialOfferStations.clone"/>
            <shuffle_list list="$OfferStations"/>
            <set_value name="$Valid" exact="false"/>
            <create_group groupname="$Explosives"/>
            <set_value name="$SelectedTarget" exact="null"/>
            <set_value name="$Difficulty" exact="level.easy"/>
            <include_actions ref="ConfigureDifficulty" comment="input: $MissionLevel, output: $MissionLevel, $MinSpawn, $MaxSpawn"/>
            <do_all exact="$OfferStations.count" counter="$i">
              <set_value name="$Station" exact="$OfferStations.{$i}"/>
              <set_value name="$Faction" exact="$Station.owner"/>
              <include_actions ref="FindStationFriendly"/>
              <run_actions ref="md.LIB_Generic.FindSectorEntryPoints" result="$LocalEntryPoints">
                <param name="Sector" value="$Sector"/>
              </run_actions>
              <include_actions ref="FindNearbyZones"/>
              <do_if value="$TargetStations.count or $LocalEntryPoints.count or $NearbyZones.count">
                <do_any>
                  <do_all>
                    <do_any>
                      <set_value name="$TextOffset" exact="1000" comment="~suspect main competitor mined supplier stations"/>
                      <set_value name="$TextOffset" exact="1100" comment="~main competitor mined supplier stations"/>
                    </do_any>
                    <set_value name="$SelectedTarget" exact="@$TargetStations.random"/>
                    <run_actions ref="md.LIB_Generic.DetermineEnemyFaction" result="$ExplosiveOwner">
                      <param name="Faction" value="$Faction"/>
                      <param name="ExemptFactions" value="[faction.khaak, faction.xenon, faction.xenon1, faction.xenon2, faction.xenon3, faction.xenon4, faction.xenon5, faction.xenon6, faction.holyorderfanatic]"/>
                    </run_actions>
                  </do_all>
                  <do_all>
                    <do_any>
                      <set_value name="$TextOffset" exact="1200" comment="~enemy territory invasion, but they mined the area"/>
                      <set_value name="$TextOffset" exact="1300" comment="~enemy territory invasion, but they mined the area"/>
                    </do_any>
                    <set_value name="$SelectedTarget" exact="@$LocalEntryPoints.random"/>
                    <run_actions ref="md.LIB_Generic.DetermineEnemyFaction" result="$ExplosiveOwner">
                      <param name="Faction" value="$Faction"/>
                      <param name="ExemptFactions" value="[faction.khaak, faction.holyorderfanatic]"/>
                    </run_actions>
                  </do_all>
                </do_any>
                <!-- actual explosives are created in GenerateGenericMission_Variant_1_PostInit (to prevent spamming universe with objects) -->
                <do_if value="$SelectedTarget and $ExplosiveOwner">
                  <run_actions ref="md.LIB_Generic.SectorDifficultyBalance" result="$Difficulty">
                    <param name="MissionTargetSector" value="$SelectedTarget.sector"/>
                    <param name="Difficulty" value="$Difficulty"/>
                  </run_actions>
                  <set_value name="$Valid" exact="true"/>
                  <break/>
                </do_if>
              </do_if>
            </do_all>
            <do_if value="$Valid">
              <append_to_list name="GenerateGenericMission.$ValidVariants" exact="this"/>
            </do_if>
            <do_else>
              <cancel_cue cue="this"/>
            </do_else>
          </actions>
          <cues>
            <cue name="GenerateGenericMission_Variant_1_Trigger">
              <conditions>
                <event_cue_signalled cue="parent"/>
              </conditions>
              <cues>
                <cue name="GenerateGenericMission_Variant_1_Ref" ref="Start">
                  <param name="OfferObject" value="$Station"/>
                  <param name="MissionLevel" value="$MissionLevel"/>
                  <param name="Difficulty" value="$Difficulty"/>
                  <!--Mission offer-->
                  <param name="RemoveOnSectorChange" value="@GenerateGenericMission.$RemoveOnSectorChange"/>
                  <param name="BBSSpace" value="$Sector"/>
                  <!--Mission text-->
                  <param name="Page" value="30137"/>
                  <param name="TextOffset" value="$TextOffset"/>
                  <!--Mission specific params, see GenerateGenericMission_Variant_1_PostInit-->
                  <param name="TargetSector" value="$SelectedTarget.sector"/>
                  <param name="Targets" value="$Explosives" comment="empty"/>
                  <param name="OpposingFaction" value="$ExplosiveOwner"/>
                  <param name="TargetRequestCue" value="GenerateGenericMission_Variant_1_PostInit"/>
                  <param name="ReportSignalCue" value="@GenerateGenericMission.$ReportSignalCue"/>
                  <param name="DebugChance" value="@GenerateGenericMission.$DebugChance"/>
                </cue>
                <!-- Use a callback, so we don't spam the entire universe with loads of objects -->
                <cue name="GenerateGenericMission_Variant_1_PostInit" instantiate="true">
                  <conditions>
                    <event_cue_signalled/>
                  </conditions>
                  <actions>
                    <run_actions ref="md.LIB_Generic.PlaceMinefield" result="$Explosives">
                      <param name="SelectedTarget" value="$SelectedTarget"/>
                      <param name="MinSpawn" value="$MinSpawn"/>
                      <param name="MaxSpawn" value="$MaxSpawn"/>
                      <param name="ExplosiveOwner" value="$ExplosiveOwner"/>
                    </run_actions>
                    <do_if value="$Explosives.count">
                      <add_to_group groupname="event.param.$Targets" group="$Explosives"/>
                    </do_if>
                  </actions>
                </cue>
              </cues>
            </cue>
          </cues>
        </cue>
        <cue name="GenerateGenericMission_Variant_2" namespace="this" comment="Lasertowers around station/gate (manually spawned for this mission)">
          <conditions>
            <event_cue_signalled/>
          </conditions>
          <actions>
            <!--this uses its own namespace so grab the shared data from GenerateGenericMission-->
            <set_value name="$Sector" exact="GenerateGenericMission.$Sector"/>
            <do_if value="player.sector">
              <set_value name="$Sector" exact="player.sector"/>
            </do_if>
            <set_value name="$DebugChance" exact="GenerateGenericMission.$DebugChance"/>
            <set_value name="$OfferStations" exact="GenerateGenericMission.$PotentialOfferStations.clone"/>
            <shuffle_list list="$OfferStations"/>
            <set_value name="$Valid" exact="false"/>
            <create_group groupname="$Explosives"/>
            <set_value name="$SelectedTarget" exact="null"/>
            <set_value name="$Difficulty" exact="level.medium"/>
            <set_value name="$MissionLevel" exact="1"/>
            <include_actions ref="ConfigureDifficulty" comment="input: $MissionLevel, output: $MissionLevel, $MinSpawn, $MaxSpawn"/>
            <do_all exact="$OfferStations.count" counter="$i">
              <set_value name="$Station" exact="$OfferStations.{$i}"/>
              <set_value name="$Faction" exact="$Station.owner"/>
              <include_actions ref="FindStationFriendlyNonPirate"/>
              <do_if value="$TargetStations.count">
                <do_any>
                  <do_all>
                    <set_value name="$TextOffset" exact="2000" comment="specific mission about lasertowers around a station"/>
                    <set_value name="$SelectedTarget" exact="@$TargetStations.random"/>
                    <set_value name="$ExplosiveOwner" exact="faction.scaleplate" comment="Pirates"/>
                  </do_all>
                </do_any>
                <run_actions ref="md.LIB_Generic.SectorDifficultyBalance" result="$Difficulty">
                  <param name="MissionTargetSector" value="$SelectedTarget.sector"/>
                  <param name="Difficulty" value="$Difficulty"/>
                </run_actions>
                <!-- actual explosives are created in GenerateGenericMission_Variant_x_PostInit (to prevent spamming universe with objects) -->
                <do_if value="$SelectedTarget and $ExplosiveOwner">
                  <set_value name="$Valid" exact="true"/>
                  <break/>
                </do_if>
              </do_if>
            </do_all>
            <do_if value="$Valid">
              <append_to_list name="GenerateGenericMission.$ValidVariants" exact="this"/>
            </do_if>
            <do_else>
              <cancel_cue cue="this"/>
            </do_else>
          </actions>
          <cues>
            <cue name="GenerateGenericMission_Variant_2_Trigger" version="2">
              <conditions>
                <event_cue_signalled cue="parent"/>
              </conditions>
              <patch sinceversion="2" state="complete">
                <do_for_each name="$Explosive_Obj" in="$Explosives">
                  <debug_text text="'Setting explosive owner of ' + $Explosive_Obj + ' ' + $Explosive_Obj.knownname + ' from ' + $Explosive_Obj.owner + ' to ' + $ExplosiveOwner" filter="savegame"/>
                  <set_owner object="$Explosive_Obj" faction="$ExplosiveOwner"/>
                </do_for_each>
              </patch>
              <cues>
                <cue name="GenerateGenericMission_Variant_2_Ref" ref="Start">
                  <param name="OfferObject" value="$Station"/>
                  <param name="MissionLevel" value="$MissionLevel"/>
                  <param name="Difficulty" value="$Difficulty"/>
                  <!--Mission offer-->
                  <param name="RemoveOnSectorChange" value="@GenerateGenericMission.$RemoveOnSectorChange"/>
                  <param name="BBSSpace" value="$Sector"/>
                  <!--Mission text-->
                  <param name="Page" value="30137"/>
                  <param name="TextOffset" value="$TextOffset"/>
                  <!--Mission specific params, see GenerateGenericMission_Variant_2_PostInit-->
                  <param name="TargetSector" value="$SelectedTarget.sector"/>
                  <param name="Targets" value="$Explosives" comment="empty"/>
                  <param name="OpposingFaction" value="$ExplosiveOwner"/>
                  <param name="TargetRequestCue" value="GenerateGenericMission_Variant_2_PostInit"/>
                  <param name="ReportSignalCue" value="@GenerateGenericMission.$ReportSignalCue"/>
                  <param name="DebugChance" value="@GenerateGenericMission.$DebugChance"/>
                </cue>
                <!-- Use a callback, so we don't spam the entire universe with loads of objects -->
                <cue name="GenerateGenericMission_Variant_2_PostInit" instantiate="true">
                  <conditions>
                    <event_cue_signalled/>
                  </conditions>
                  <actions>
                    <run_actions ref="md.LIB_Generic.PlaceLasertowerfield" result="$Explosives">
                      <param name="SelectedTarget" value="$SelectedTarget"/>
                      <param name="MinSpawn" value="$MinSpawn"/>
                      <param name="MaxSpawn" value="$MaxSpawn"/>
                      <param name="ExplosiveOwner" value="$ExplosiveOwner"/>
                    </run_actions>
                    <do_if value="$Explosives.count">
                      <add_to_group groupname="event.param.$Targets" group="$Explosives"/>
                    </do_if>
                  </actions>
                </cue>
              </cues>
            </cue>
          </cues>
        </cue>
        <cue name="GenerateGenericMission_Variant_3" namespace="this" comment="Pirate Mines / Rigged Asteroids variant (using pre-existing objects)">
          <conditions>
            <event_cue_signalled/>
          </conditions>
          <actions>
            <!--this uses its own namespace so grab the shared data from GenerateGenericMission-->
            <set_value name="$Sector" exact="GenerateGenericMission.$Sector"/>
            <set_value name="$DebugChance" exact="GenerateGenericMission.$DebugChance"/>
            <set_value name="$OfferStations" exact="GenerateGenericMission.$PotentialOfferStations.clone"/>
            <shuffle_list list="$OfferStations"/>
            <set_value name="$Valid" exact="false"/>
            <create_group groupname="$Explosives"/>
            <set_value name="$Difficulty" exact="level.easy"/>
            <set_value name="$MissionLevel" exact="1"/>
            <include_actions ref="ConfigureDifficulty" comment="input: $MissionLevel, output: $MissionLevel, $MinSpawn, $MaxSpawn"/>
            <do_all exact="$OfferStations.count" counter="$i">
              <set_value name="$Station" exact="$OfferStations.{$i}"/>
              <set_value name="$Faction" exact="$Station.owner"/>
              <set_value name="$Sector" exact="$Station.sector"/>
              <do_any>
                <do_all>
                  <set_value name="$TextOffset" exact="1400" comment="~pirates mined nearby"/>
                  <set_value name="$ExplosiveOwner" exact="[faction.scaleplate, faction.hatikvah].random" comment="Pirates"/>
                  <set_value name="$ExplosionRange" exact="0m" comment="ignore"/>
                  <include_actions ref="FindMinefield" comment="input: $Sector, output: $TargetObjects"/>
                </do_all>
                <do_all>
                  <set_value name="$TextOffset" exact="1500" comment="~unknown who/why mined area"/>
                  <set_value name="$ExplosiveOwner" exact="[faction.scaleplate, faction.hatikvah].random" comment="Pirates"/>
                  <include_actions ref="FindMinefield" comment="input: $Sector, output: $TargetObjects"/>
                  <set_value name="$ExplosionRange" exact="0m" comment="ignore"/>
                </do_all>
                <do_all>
                  <set_value name="$TextOffset" exact="3000" comment="Rigged asteroids"/>
                  <set_value name="$ExplosiveOwner" exact="faction.scaleplate" comment="Pirates"/>
                  <set_value name="$ExplosionRange" exact="1km" comment="needed for rigged asteroids case"/>
                  <include_actions ref="FindRiggedAsteroids" comment="input: $Sector, output: $TargetObjects"/>
                </do_all>
                <do_all>
                  <set_value name="$TextOffset" exact="3100" comment="Rigged asteroids"/>
                  <set_value name="$ExplosiveOwner" exact="faction.scaleplate" comment="Pirates"/>
                  <set_value name="$ExplosionRange" exact="1km" comment="needed for rigged asteroids case"/>
                  <include_actions ref="FindRiggedAsteroids" comment="input: $Sector, output: $TargetObjects"/>
                </do_all>
              </do_any>
              <run_actions ref="md.LIB_Generic.SectorDifficultyBalance" result="$Difficulty">
                <param name="MissionTargetSector" value="$Sector"/>
                <param name="Difficulty" value="$Difficulty"/>
              </run_actions>
              <do_if value="$Explosives.count">
                <set_value name="$Valid" exact="true"/>
                <break/>
              </do_if>
            </do_all>
            <do_if value="$Valid">
              <append_to_list name="GenerateGenericMission.$ValidVariants" exact="this"/>
            </do_if>
            <do_else>
              <cancel_cue cue="this"/>
            </do_else>
          </actions>
          <cues>
            <cue name="GenerateGenericMission_Variant_3_Trigger">
              <conditions>
                <event_cue_signalled cue="parent"/>
              </conditions>
              <cues>
                <cue name="GenerateGenericMission_Variant_3_Ref" ref="Start">
                  <param name="OfferObject" value="$Station"/>
                  <param name="MissionLevel" value="$MissionLevel"/>
                  <param name="Difficulty" value="$Difficulty"/>
                  <!--Mission offer-->
                  <param name="RemoveOnSectorChange" value="@GenerateGenericMission.$RemoveOnSectorChange"/>
                  <param name="BBSSpace" value="$Sector"/>
                  <!--Mission text-->
                  <param name="Page" value="30137"/>
                  <param name="TextOffset" value="$TextOffset"/>
                  <!--Mission specific params-->
                  <param name="Targets" value="$Explosives"/>
                  <param name="TargetSector" value="$Sector"/>
                  <param name="ExplosionRange" value="$ExplosionRange"/>
                  <param name="OpposingFaction" value="$ExplosiveOwner"/>
                  <param name="ReportSignalCue" value="@GenerateGenericMission.$ReportSignalCue"/>
                  <param name="DebugChance" value="@GenerateGenericMission.$DebugChance"/>
                </cue>
              </cues>
            </cue>
          </cues>
        </cue>
        <cue name="GenerateGenericMission_Variant_4" namespace="this" comment="Destroy specific ship parts (using pre-existing objects)">
          <conditions>
            <event_cue_signalled/>
          </conditions>
          <actions>
            <!--this uses its own namespace so grab the shared data from GenerateGenericMission-->
            <set_value name="$Sector" exact="GenerateGenericMission.$Sector"/>
            <set_value name="$DebugChance" exact="GenerateGenericMission.$DebugChance"/>
            <set_value name="$OfferStations" exact="GenerateGenericMission.$PotentialOfferStations.clone"/>
            <shuffle_list list="$OfferStations"/>
            <set_value name="$Valid" exact="false"/>
            <do_all exact="$OfferStations.count" counter="$StationCounter" reverse="true">
              <do_if value="($OfferStations.{$StationCounter}.owner   != faction.scaleplate     )                          and ($OfferStations.{$StationCounter}.owner  != faction.hatikvah       )                          and (not md.$SplitPatriarchyFactions.indexof.{$OfferStations.{$StationCounter}.owner})                           and (not md.$DLCPirateFactions.indexof.{$OfferStations.{$StationCounter}.owner})">
                <remove_value name="$OfferStations.{$StationCounter}"/>
              </do_if>
            </do_all>
            <find_cluster_in_range name="$LocalClusters" object="player.entity" maxdistance="2" multiple="true"/>
            <shuffle_list list="$LocalClusters"/>
            <create_list name="$CheckedFactions"/>
            <do_all exact="$OfferStations.count" counter="$s">
              <set_value name="$Station" exact="$OfferStations.{$s}"/>
              <do_if value="$CheckedFactions.indexof.{$Station.owner}">
                <continue/>
              </do_if>
              <append_to_list name="$CheckedFactions" exact="$Station.owner"/>
              <set_value name="$OtherPirateTargetFaction" exact="faction.scaleplate"/>
              <do_if value="$Station.owner == faction.scaleplate">
                <set_value name="$OtherPirateTargetFaction" exact="faction.hatikvah"/>
              </do_if>
              <do_if value="md.$SplitPatriarchyFactions.indexof.{$Station.owner}">
                <set_value name="$Faction" exact="$Station.owner"/>
                <run_actions ref="md.LIB_Generic.DetermineEnemyFaction" result="$EnemyFaction">
                  <param name="Faction" value="faction.teladi"/>
                  <param name="ExemptFactions" value="[faction.xenon, faction.xenon1, faction.xenon2, faction.xenon3, faction.xenon4, faction.xenon5, faction.xenon6, faction.holyorderfanatic]"/>
                </run_actions>
              </do_if>
              <do_else>
                <set_value name="$EnemyFaction" exact="[faction.alliance, faction.antigone, faction.argon, faction.holyorder, faction.paranid, faction.teladi, faction.ministry, $OtherPirateTargetFaction]"/>
              </do_else>
              <do_all exact="$LocalClusters.count" counter="$cluster_i">
                <find_ship name="$EnemyShip" space="$LocalClusters.{$cluster_i}" multiple="false" docked="false" capturable="true" masstraffic="false" deployable="false" class="[class.ship_xl, class.ship_l]">
                  <match_content class="[class.engine, class.turret]" state="componentstate.operational"/>
                  <match_any>
                    <match primarypurpose="purpose.trade"/>
                    <match primarypurpose="purpose.build"/>
                  </match_any>
                  <match owner="$EnemyFaction"/>
                </find_ship>
                <do_if value="$EnemyShip">
                  <break/>
                </do_if>
              </do_all>
              <do_if value="$EnemyShip.exists">
                <set_value name="$Difficulty" exact="level.medium"/>
                <set_value name="$MissionLevel" exact="1"/>
                <set_value name="$Faction" exact="$Station.owner"/>
                <do_if value="$EnemyShip.isclass.{class.ship_l}">
                  <!-- Use base MissionLevel -->
                </do_if>
                <do_elseif value="$EnemyShip.isclass.{class.ship_xl}">
                  <set_value name="$MissionLevel" operation="add" exact="3"/>
                </do_elseif>
                <do_if value="md.$SplitPatriarchyFactions.indexof.{$Faction}" chance="50">
                  <set_value name="$ValidOffsets" exact="[5300]" comment="Split Patriarchy Version of Destroy Engine Missions"/>
                  <set_value name="$TargetClass" exact="[class.engine]"/>
                </do_if>
                <do_elseif value="md.$SplitFactions.indexof.{$Faction}">
                  <set_value name="$ValidOffsets" exact="[5400]" comment="Split Version of Destroy Engine Missions"/>
                  <set_value name="$TargetClass" exact="[class.engine]"/>
                </do_elseif>
                <do_else>
                  <do_any>
                    <do_all>
                      <set_value name="$ValidOffsets" exact="[4000, 4100]" comment="Destroy Engine Missions"/>
                      <set_value name="$TargetClass" exact="[class.engine]"/>
                    </do_all>
                    <do_all>
                      <set_value name="$ValidOffsets" exact="[5100, 5200]" comment="Destroy Turret Missions"/>
                      <set_value name="$TargetClass" exact="[class.turret]"/>
                    </do_all>
                  </do_any>
                </do_else>
                <set_value name="$ExplosionRange" exact="0m" comment="ignore"/>
                <do_if value="$ValidOffsets.count">
                  <set_value name="$TextOffset" exact="$ValidOffsets.random"/>
                  <set_value name="$Valid" exact="true"/>
                  <break/>
                </do_if>
              </do_if>
              <do_if value="$Valid">
                <break/>
              </do_if>
            </do_all>
            <do_if value="$Valid">
              <append_to_list name="GenerateGenericMission.$ValidVariants" exact="this"/>
            </do_if>
            <do_else>
              <cancel_cue cue="this"/>
            </do_else>
          </actions>
          <cues>
            <cue name="GenerateGenericMission_Variant_4_Trigger">
              <conditions>
                <event_cue_signalled cue="parent"/>
              </conditions>
              <actions>
                <do_if value="$EnemyShip.exists">
                  <find_object_component groupname="$TargetComponents" object="$EnemyShip" class="$TargetClass" multiple="true"/>
                </do_if>
              </actions>
              <cues>
                <cue name="GenerateGenericMission_Variant_4_Ref" ref="Start">
                  <param name="OfferObject" value="$Station"/>
                  <param name="MissionLevel" value="$MissionLevel"/>
                  <param name="Difficulty" value="$Difficulty"/>
                  <!--Mission offer-->
                  <param name="RemoveOnSectorChange" value="@GenerateGenericMission.$RemoveOnSectorChange"/>
                  <param name="BBSSpace" value="$Sector"/>
                  <!--Mission text-->
                  <param name="Page" value="30137"/>
                  <param name="TextOffset" value="$TextOffset"/>
                  <!--Mission specific params-->
                  <param name="Targets" value="$TargetComponents"/>
                  <param name="TargetSector" value="$Sector"/>
                  <param name="ExplosionRange" value="$ExplosionRange"/>
                  <param name="AllowDestroy" value="false"/>
                  <param name="OpposingFaction" value="$EnemyShip.owner"/>
                  <param name="ReportSignalCue" value="@GenerateGenericMission.$ReportSignalCue"/>
                  <param name="DebugChance" value="@GenerateGenericMission.$DebugChance"/>
                </cue>
              </cues>
            </cue>
          </cues>
        </cue>
        <cue name="GenerateGenericMission_Variant_5" namespace="this" comment="Destroy station turrets">
          <conditions>
            <event_cue_signalled/>
          </conditions>
          <actions>
            <!--this uses its own namespace so grab the shared data from GenerateGenericMission-->
            <set_value name="$Sector" exact="GenerateGenericMission.$Sector"/>
            <set_value name="$DebugChance" exact="GenerateGenericMission.$DebugChance"/>
            <set_value name="$OfferStations" exact="GenerateGenericMission.$PotentialOfferStations.clone"/>
            <shuffle_list list="$OfferStations"/>
            <set_value name="$Valid" exact="false"/>
            <set_value name="$TurretAmount" exact="0"/>
            <set_value name="$EnemyStation" exact="null"/>
            <do_all exact="$OfferStations.count" counter="$StationCounter" reverse="true">
              <do_if value="($OfferStations.{$StationCounter}.owner   != faction.scaleplate     )                          and ($OfferStations.{$StationCounter}.owner  != faction.hatikvah       )                          and (not md.$SplitFactions.indexof.{$OfferStations.{$StationCounter}.owner})                          and (not md.$DLCPirateFactions.indexof.{$OfferStations.{$StationCounter}.owner})">
                <remove_value name="$OfferStations.{$StationCounter}"/>
              </do_if>
            </do_all>
            <find_cluster_in_range name="$LocalClusters" object="player.entity" maxdistance="1" multiple="true"/>
            <shuffle_list list="$LocalClusters"/>
            <shuffle_list list="$OfferStations"/>
            <create_list name="$CheckedFactions"/>
            <do_all exact="$OfferStations.count" counter="$s">
              <set_value name="$Station" exact="$OfferStations.{$s}"/>
              <set_value name="$Faction" exact="$Station.owner"/>
              <run_actions ref="md.LIB_Generic.DetermineEnemyFaction" result="$EnemyFaction">
                <param name="Faction" value="$Faction"/>
                <param name="ExemptFactions" value="[faction.khaak, faction.xenon, faction.xenon1, faction.xenon2, faction.xenon3, faction.xenon4, faction.xenon5, faction.xenon6, faction.holyorderfanatic]"/>
                <!-- 6000 and 6100 talk about a great score and the victim being aware of extralegal entrepreneurs, so KHA and XEN don't fit. -->
              </run_actions>
              <do_if value="$EnemyFaction">
                <do_all exact="$LocalClusters.count" counter="$cluster_i">
                  <find_station_by_true_owner name="$EnemyStation" faction="$EnemyFaction" space="$LocalClusters.{$cluster_i}">
                    <match_content class="class.turret" state="componentstate.operational" min="20" max="70"/>
                  </find_station_by_true_owner>
                  <do_if value="$EnemyStation">
                    <set_value name="$TurretAmount" exact="$EnemyStation.turrets.operational.count"/>
                    <break/>
                  </do_if>
                </do_all>
              </do_if>
              <do_if value="$EnemyStation and $TurretAmount">
                <set_value name="$Difficulty" exact="level.hard"/>
                <set_value name="$MissionLevel" exact="1"/>
                <set_value name="$Faction" exact="$Station.owner"/>
                <do_if value="md.$SplitFactions.indexof.{$Faction}">
                  <set_value name="$TextOffset" exact="[6200, 6300].random" comment="Split Specific Destroy Turret on Station Missions"/>
                </do_if>
                <do_else>
                  <set_value name="$TextOffset" exact="[6000, 6100].random" comment="Destroy Turret on Station Missions"/>
                </do_else>
                <set_value name="$TargetClass" exact="[class.turret]"/>
                <do_if value="$TurretAmount ge 20 and $TurretAmount le 30">
                  <set_value name="$Limit" exact="15"/>
                </do_if>
                <do_elseif value="$TurretAmount gt 30 and $TurretAmount le 50">
                  <set_value name="$Limit" exact="25"/>
                  <set_value name="$Missionlevel" operation="add" exact="3"/>
                </do_elseif>
                <do_elseif value="$TurretAmount gt 50">
                  <set_value name="$Limit" exact="40"/>
                  <set_value name="$Missionlevel" operation="add" exact="6"/>
                </do_elseif>
                <set_value name="$ExplosionRange" exact="0m" comment="ignore"/>
                <do_if value="$TextOffset">
                  <set_value name="$Valid" exact="true"/>
                </do_if>
              </do_if>
              <do_if value="$Valid">
                <break/>
              </do_if>
            </do_all>
            <do_if value="$Valid">
              <append_to_list name="GenerateGenericMission.$ValidVariants" exact="this"/>
            </do_if>
            <do_else>
              <cancel_cue cue="this"/>
            </do_else>
          </actions>
          <cues>
            <cue name="GenerateGenericMission_Variant_5_Trigger">
              <conditions>
                <event_cue_signalled cue="parent"/>
              </conditions>
              <actions>
                <do_if value="$EnemyStation.exists">
                  <find_object_component groupname="$TargetComponents" object="$EnemyStation" class="$TargetClass" multiple="true"/>
                  <shuffle_group group="$TargetComponents"/>
                  <do_all exact="$TargetComponents.count" counter="$i" reverse="true">
                    <remove_from_group group="$TargetComponents" object="$TargetComponents.{$i}"/>
                    <do_if value="$TargetComponents.count le $Limit">
                      <break/>
                    </do_if>
                  </do_all>
                </do_if>
              </actions>
              <cues>
                <cue name="GenerateGenericMission_Variant_5_Ref" ref="Start">
                  <param name="OfferObject" value="$Station"/>
                  <param name="MissionLevel" value="$MissionLevel"/>
                  <param name="Difficulty" value="$Difficulty"/>
                  <!--Mission offer-->
                  <param name="RemoveOnSectorChange" value="@GenerateGenericMission.$RemoveOnSectorChange"/>
                  <param name="BBSSpace" value="$Sector"/>
                  <!--Mission text-->
                  <param name="Page" value="30137"/>
                  <param name="TextOffset" value="$TextOffset"/>
                  <!--Mission specific params-->
                  <param name="Targets" value="$TargetComponents"/>
                  <param name="TargetSector" value="$EnemyStation.sector"/>
                  <param name="ExplosionRange" value="$ExplosionRange"/>
                  <param name="AllowDestroy" value="false"/>
                  <param name="TurretLimit" value="$Limit"/>
                  <param name="TargetStation" value="$EnemyStation"/>
                  <param name="OpposingFaction" value="$EnemyStation.owner"/>
                  <param name="ReportSignalCue" value="@GenerateGenericMission.$ReportSignalCue"/>
                  <param name="DebugChance" value="@GenerateGenericMission.$DebugChance"/>
                </cue>
              </cues>
            </cue>
          </cues>
        </cue>
        <cue name="GenerateGenericMission_Variant_6" namespace="this" comment="Destroy Khaak Station">
          <conditions>
            <event_cue_signalled/>
          </conditions>
          <actions>
            <!--this uses its own namespace so grab the shared data from GenerateGenericMission-->
            <set_value name="$Sector" exact="GenerateGenericMission.$Sector"/>
            <set_value name="$DebugChance" exact="GenerateGenericMission.$DebugChance"/>
            <set_value name="$OfferStations" exact="GenerateGenericMission.$PotentialOfferStations.clone"/>
            <shuffle_list list="$OfferStations"/>
            <set_value name="$Valid" exact="false"/>
            <set_value name="$EnemyStation" exact="false"/>
            <find_cluster_in_range name="$LocalClusters" object="player.entity" maxdistance="1" multiple="true"/>
            <shuffle_list list="$LocalClusters"/>
            <shuffle_list list="$OfferStations"/>
            <create_group groupname="$Targets"/>
            <do_all exact="$OfferStations.count" counter="$s">
              <set_value name="$Station" exact="$OfferStations.{$s}"/>
              <set_value name="$Faction" exact="$Station.owner"/>
              <set_value name="$EnemyFaction" exact="faction.khaak"/>
              <do_all exact="$LocalClusters.count" counter="$cluster_i">
                <find_station_by_true_owner name="$EnemyStation" faction="$EnemyFaction" space="$LocalClusters.{$cluster_i}" macro="macro.landmarks_kha_hive_01_macro"/>
                <do_if value="$EnemyStation">
                  <add_to_group groupname="$Targets" object="$EnemyStation"/>
                  <break/>
                </do_if>
              </do_all>
              <do_if value="$Targets.count">
                <set_value name="$Difficulty" exact="level.veryhard"/>
                <set_value name="$MissionLevel" exact="3"/>
                <set_value name="$Faction" exact="$Station.owner"/>
                <set_value name="$TextOffset" exact="6500" comment="Khaak Station Specific Text"/>
                <set_value name="$Valid" exact="true"/>
                <break/>
              </do_if>
            </do_all>
            <do_if value="$Valid">
              <append_to_list name="GenerateGenericMission.$ValidVariants" exact="this"/>
            </do_if>
            <do_else>
              <cancel_cue cue="this"/>
            </do_else>
          </actions>
          <cues>
            <cue name="GenerateGenericMission_Variant_6_Trigger">
              <conditions>
                <event_cue_signalled cue="parent"/>
              </conditions>
              <cues>
                <cue name="GenerateGenericMission_Variant_6_Ref" ref="Start">
                  <param name="OfferObject" value="$Station"/>
                  <param name="MissionLevel" value="$MissionLevel"/>
                  <param name="Difficulty" value="$Difficulty"/>
                  <!--Mission offer-->
                  <param name="RemoveOnSectorChange" value="@GenerateGenericMission.$RemoveOnSectorChange"/>
                  <param name="BBSSpace" value="$Sector"/>
                  <!--Mission text-->
                  <param name="Page" value="30137"/>
                  <param name="TextOffset" value="$TextOffset"/>
                  <!--Mission specific params-->
                  <param name="Targets" value="$Targets"/>
                  <param name="TargetSector" value="$EnemyStation.sector"/>
                  <param name="OpposingFaction" value="$EnemyStation.owner"/>
                  <param name="ReportSignalCue" value="@GenerateGenericMission.$ReportSignalCue"/>
                  <param name="DebugChance" value="@GenerateGenericMission.$DebugChance"/>
                </cue>
              </cues>
            </cue>
          </cues>
        </cue>
      </cues>
    </cue>
    <!--event.param = table[
    $Location,
    $ReportSignalCue (Optional. Cue to be signalled when something happens which could be of interest to the calling cue. Saves values to ReportSignalCue.$FeedbackValue and ReportSignalCue.$EndFeedbackValue)
    $MissionVariant (Optional),
    $RemoveOnDespawn (Optional, defaults to true. Remove the mission when the object has changed to low attention and NPCs are usually cleaned up)
    $DebugChance (Optional)]-->
    <cue name="GenerateNPCMission" instantiate="true" namespace="this">
      <conditions>
        <event_cue_signalled/>
      </conditions>
      <actions>
        <set_value name="$Location" exact="event.param.$Location"/>
        <set_value name="$ReportSignalCue" exact="@event.param.$ReportSignalCue"/>
        <set_value name="$MissionVariant" exact="@event.param.$MissionVariant"/>
        <do_if value="event.param.$RemoveOnDespawn?">
          <set_value name="$RemoveOnDespawn" exact="event.param.$RemoveOnDespawn"/>
        </do_if>
        <do_else>
          <set_value name="$RemoveOnDespawn" exact="true"/>
        </do_else>
        <set_value name="$DebugChance" exact="@event.param.$DebugChance"/>
        <set_value name="$ReportSignalCue.$GM_Wrapper" exact="this"/>
        <signal_cue_instantly cue="md.GenericMissions.Validate_NPC_Mission_GM_Feedback_Table" param="FeedbackValueManager"/>
        <debug_text text="'Attempting to generate a generic NPC mission'" chance="$DebugChance"/>
      </actions>
      <cues>
        <cue name="GenerateNPCMission_SelectVariant">
          <actions>
            <set_value name="$ValidVariants" exact="[]"/>
            <set_value name="$LocationOwner" exact="$Location.owner"/>
            <do_if value="$MissionVariant">
              <!--A specific MissionVariant ID was requested-->
              <debug_text text="'Checking if requested ' + $MissionVariant + ' can be spawned'" chance="$DebugChance"/>
              <do_if value="$MissionVariant == 1">
                <signal_cue_instantly cue="GenerateNPCMission_Variant_1"/>
              </do_if>
              <do_else>
                <assert value="false" text="'Unknown $MissionVariant ID ' + $MissionVariant + ' [Owen]'"/>
              </do_else>
            </do_if>
            <do_else>
              <signal_cue_instantly cue="GenerateNPCMission_Variant_1"/>
            </do_else>
            <do_if value="$ValidVariants.count">
              <signal_cue cue="$ValidVariants.random"/>
            </do_if>
            <do_else>
              <do_if value="$ReportSignalCue">
                <set_value name="$FeedbackData" exact="FeedbackValueManager.$FeedbackValues.$MISSION_NO_VARIANT.clone"/>
                <set_value name="$FeedbackData.$ID" exact="'$MISSION_NO_VARIANT'"/>
                <set_value name="$ReportSignalCue.$FeedbackValue" exact="$FeedbackData.clone" comment="No mission variant possible"/>
                <signal_cue_instantly cue="$ReportSignalCue"/>
              </do_if>
              <cancel_cue cue="GenerateNPCMission"/>
            </do_else>
          </actions>
        </cue>
        <cue name="GenerateNPCMission_Variant_1" namespace="this">
          <conditions>
            <event_cue_signalled/>
          </conditions>
          <actions>
            <!--this uses its own namespace so grab the shared data from GenerateNPCMission-->
            <set_value name="$Location" exact="GenerateNPCMission.$Location"/>
            <set_value name="$DebugChance" exact="GenerateNPCMission.$DebugChance"/>
            <set_value name="$Station" exact="$Location"/>
            <set_value name="$Faction" exact="$Station.owner"/>
            <set_value name="$Sector" exact="player.sector"/>
            <set_value name="$Valid" exact="false"/>
            <do_if value="not $Location.isplayerowned">
              <!--TODO @Owen this is just a test variant-->
              <do_if value="[0,1].random" comment="Variant1">
                <create_group groupname="$Explosives"/>
                <set_value name="$EnemyInvolved" exact="0"/>
                <set_value name="$AllowDestroy" exact="true"/>
                <set_value name="$Difficulty" exact="level.easy"/>
                <set_value name="$MissionLevel" exact="10"/>
                <include_actions ref="ConfigureDifficulty" comment="input: $MissionLevel, output: $MissionLevel, $MinSpawn, $MaxSpawn"/>
                <do_any>
                  <do_all>
                    <set_value name="$TextOffset" exact="1400"/>
                    <set_value name="$ExplosiveOwner" exact="[faction.scaleplate, faction.hatikvah].random" comment="Pirates"/>
                    <set_value name="$ExplosionRange" exact="0m" comment="ignore"/>
                    <include_actions ref="FindMinefield" comment="input: $Sector, output: $TargetObjects"/>
                  </do_all>
                  <do_all>
                    <set_value name="$TextOffset" exact="1500"/>
                    <set_value name="$ExplosiveOwner" exact="[faction.scaleplate, faction.hatikvah].random" comment="Pirates"/>
                    <set_value name="$ExplosionRange" exact="0m" comment="ignore"/>
                    <include_actions ref="FindMinefield" comment="input: $Sector, output: $TargetObjects"/>
                  </do_all>
                  <do_all>
                    <set_value name="$TextOffset" exact="3000" comment="Rigged asteroids"/>
                    <set_value name="$ExplosiveOwner" exact="faction.scaleplate" comment="Pirates"/>
                    <set_value name="$ExplosionRange" exact="1km" comment="needed for rigged asteroids case"/>
                    <include_actions ref="FindRiggedAsteroids" comment="input: $Sector, output: $TargetObjects"/>
                  </do_all>
                  <do_all>
                    <set_value name="$TextOffset" exact="3100" comment="Rigged asteroids"/>
                    <set_value name="$ExplosiveOwner" exact="faction.scaleplate" comment="Pirates"/>
                    <set_value name="$ExplosionRange" exact="1km" comment="needed for rigged asteroids case"/>
                    <include_actions ref="FindRiggedAsteroids" comment="input: $Sector, output: $TargetObjects"/>
                  </do_all>
                </do_any>
                <set_value name="$EnemyFaction" exact="$ExplosiveOwner"/>
                <run_actions ref="md.LIB_Generic.SectorDifficultyBalance" result="$Difficulty">
                  <param name="MissionTargetSector" value="$Sector"/>
                  <param name="Difficulty" value="$Difficulty"/>
                </run_actions>
                <set_value name="$Targets" exact="$Explosives"/>
                <do_if value="$Explosives.count">
                  <set_value name="$Valid" exact="true"/>
                  <break/>
                </do_if>
              </do_if>
              <do_elseif value="$Faction == faction.scaleplate or $Faction == faction.hatikvah" comment="Pirate Variant 2">
                <set_value name="$Difficulty" exact="level.medium"/>
                <set_value name="$MissionLevel" exact="1"/>
                <set_value name="$AllowDestroy" exact="false"/>
                <set_value name="$EnemyInvolved" exact="1"/>
                <find_cluster_in_range name="$LocalClusters" object="player.entity" maxdistance="2" multiple="true"/>
                <shuffle_list list="$LocalClusters"/>
                <do_all exact="$LocalClusters.count" counter="$cluster_i">
                  <find_ship name="$EnemyShip" space="$LocalClusters.{$cluster_i}" multiple="false" docked="false" capturable="true" masstraffic="false" deployable="false" class="[class.ship_xl, class.ship_l]">
                    <match_content class="[class.engine, class.turret]" state="componentstate.operational"/>
                    <match_any>
                      <match primarypurpose="purpose.trade"/>
                      <match primarypurpose="purpose.build"/>
                    </match_any>
                    <match owner="[faction.alliance, faction.antigone, faction.argon, faction.holyorder, faction.paranid, faction.teladi, faction.ministry]"/>
                  </find_ship>
                  <do_if value="$EnemyShip">
                    <break/>
                  </do_if>
                </do_all>
                <do_if value="$EnemyShip.exists">
                  <set_value name="$EnemyFaction" exact="$EnemyShip.owner"/>
                  <do_if value="$EnemyShip.isclass.{class.ship_l}">
                    <!-- Use base MissionLevel -->
                  </do_if>
                  <do_elseif value="$EnemyShip.isclass.{class.ship_xl}">
                    <set_value name="$MissionLevel" operation="add" exact="3"/>
                  </do_elseif>
                  <do_any>
                    <do_all>
                      <set_value name="$ValidOffsets" exact="[4000, 4100]" comment="Destroy Engine Missions"/>
                      <set_value name="$TargetClass" exact="[class.engine]"/>
                    </do_all>
                    <do_all>
                      <set_value name="$ValidOffsets" exact="[5000, 5100, 5200]" comment="Destroy Turret Missions"/>
                      <set_value name="$TargetClass" exact="[class.turret]"/>
                    </do_all>
                  </do_any>
                  <set_value name="$ExplosionRange" exact="0m" comment="ignore"/>
                  <do_if value="$ValidOffsets.count">
                    <set_value name="$TextOffset" exact="$ValidOffsets.random"/>
                    <set_value name="$Valid" exact="true"/>
                  </do_if>
                </do_if>
              </do_elseif>
            </do_if>
            <do_if value="$Valid">
              <append_to_list name="GenerateNPCMission.$ValidVariants" exact="this"/>
            </do_if>
            <do_else>
              <cancel_cue cue="this"/>
            </do_else>
          </actions>
          <cues>
            <cue name="GenerateNPCMission_Variant_1_Selected">
              <conditions>
                <event_cue_signalled cue="parent"/>
              </conditions>
              <actions>
                <set_value name="$Client" exact="null"/>
                <set_value name="$SceneInstance" exact="null"/>
              </actions>
              <cues>
                <cue name="GenerateNPCMission_Variant_1_Select_Scene">
                  <actions>
                    <!--Attempt to create the NPC scene-->
                    <!--TODO @Owen selection of scene-->
                    <do_if value="$EnemyInvolved == 1">
                      <set_value name="$Scenes" exact="[md.NPC_Missions.Scene__Enemy_Taunts_Client_Via_Comm_1]"/>
                      <shuffle_list list="$Scenes"/>
                      <do_all exact="$Scenes.count" counter="$i">
                        <do_if value="$Scenes.{$i} == md.NPC_Missions.Scene__Enemy_Taunts_Client_Via_Comm_1">
                          <set_value name="$Scene_Definition" exact="table[                                               $CallerCue = namespace,                                               $Location = $Location,                                               $ClientOwner = $Location.owner,                                               $Enemy = $EnemyShip.pilot,                                               $CallerEventCue = GenerateNPCMission_Variant_1_GM_Signal]"/>
                          <signal_cue_instantly cue="$Scenes.{$i}" param="$Scene_Definition"/>
                          <do_if value="@$Scene_Definition.$Result == 'SUCCESS'">
                            <set_value name="$SceneInstance" exact="$Scene_Definition.$SceneInstance"/>
                            <set_value name="$Client" exact="$Scene_Definition.$Client"/>
                            <set_entity_role entity="$Client" role="entityrole.service"/>
                            <set_entity_role_object entity="$Client" object="$Location"/>
                            <signal_cue cue="GenerateNPCMission_Variant_1_Trigger"/>
                            <break/>
                          </do_if>
                        </do_if>
                      </do_all>
                    </do_if>
                    <do_else>
                      <set_value name="$Scenes" exact="[md.NPC_Missions.Scene__Friendly_Client_Via_Comm_1]"/>
                      <shuffle_list list="$Scenes"/>
                      <do_all exact="$Scenes.count" counter="$i">
                        <do_if value="$Scenes.{$i} == md.NPC_Missions.Scene__Friendly_Client_Via_Comm_1">
                          <set_value name="$Scene_Definition" exact="table[                                               $CallerCue = namespace,                                               $Location = $Location,                                               $Client = $Client,                                               $ClientOwner = $Location.owner,                                               $CallerEventCue = GenerateNPCMission_Variant_1_GM_Signal]"/>
                          <signal_cue_instantly cue="$Scenes.{$i}" param="$Scene_Definition"/>
                          <do_if value="@$Scene_Definition.$Result == 'SUCCESS'">
                            <set_value name="$SceneInstance" exact="$Scene_Definition.$SceneInstance"/>
                            <set_value name="$Client" exact="$Scene_Definition.$Client"/>
                            <set_entity_role entity="$Client" role="entityrole.service"/>
                            <set_entity_role_object entity="$Client" object="$Location"/>
                            <signal_cue cue="GenerateNPCMission_Variant_1_Trigger"/>
                            <break/>
                          </do_if>
                        </do_if>
                      </do_all>
                    </do_else>
                    <do_if value="not $Client or not $SceneInstance">
                      <set_value name="$FeedbackData" exact="FeedbackValueManager.$FeedbackValues.$MISSION_NO_NPC_SCENE.clone"/>
                      <set_value name="$FeedbackData.$ID" exact="'$MISSION_NO_NPC_SCENE'"/>
                      <set_value name="GenerateNPCMission.$ReportSignalCue.$FeedbackValue" exact="$FeedbackData" comment="Can't set up NPC scene"/>
                      <signal_cue_instantly cue="GenerateNPCMission.$ReportSignalCue"/>
                      <cancel_cue cue="this"/>
                    </do_if>
                  </actions>
                  <cues>
                    <cue name="GenerateNPCMission_Variant_1_Scene_Ended">
                      <conditions>
                        <event_cue_cancelled cue="$SceneInstance"/>
                      </conditions>
                      <actions>
                        <do_if value="@$MissionAccepted">
                          <debug_text text="'Scene ended due to mission being accepted'" chance="$DebugChance"/>
                        </do_if>
                        <do_else>
                          <set_value name="$FeedbackData" exact="FeedbackValueManager.$FeedbackValues.$OFFER_REMOVED.clone"/>
                          <set_value name="$FeedbackData.$ID" exact="'$OFFER_REMOVED'"/>
                          <set_value name="GenerateNPCMission.$ReportSignalCue.$FeedbackValue" exact="$FeedbackData"/>
                          <signal_cue_instantly cue="GenerateNPCMission.$ReportSignalCue"/>
                        </do_else>
                      </actions>
                    </cue>
                  </cues>
                </cue>
                <!--Cue which the scene is listening to. There are several standard -->
                <!--This cue is to be signalled by the GM when certain events happen e.g. mission accepted / mission failed / error
                A feedback table is saved to either:
                static.$FeedbackValue
                or 
                static.$EndFeedbackValue (in the event that the GM will end)
                This cue will pass the feedback table onto the caller of the GM (GenerateNPCMission.$ReportSignalCue), so the GM can be managed
                The scene can also listen to this cue to react to certain events e.g. mission accepted-->
                <cue name="GenerateNPCMission_Variant_1_GM_Signal" instantiate="true">
                  <conditions>
                    <event_cue_signalled/>
                  </conditions>
                  <actions>
                    <do_if value="@static.$EndFeedbackValue" comment="Evaluate return-value of GM (success/failure)">
                      <debug_text text="'Mission ended. feedback' + static.$EndFeedbackValue" chance="$DebugChance"/>
                      <do_if value="$Client.isclass.npc">
                        <do_if value="$Client.parent">
                          <!--Set entity to temporary so they are cleaned up-->
                          <set_entity_traits entity="$Client" temporary="true"/>
                          <signal_cue_instantly cue="md.NPC_Instantiation.NPC_Placement_Manager" param="['remove_request', $Client, namespace]"/>
                        </do_if>
                        <do_else>
                          <destroy_object object="$Client"/>
                        </do_else>
                      </do_if>
                      <!--This will cause this instance to end-->
                      <set_value name="GenerateNPCMission.$ReportSignalCue.$EndFeedbackValue" exact="static.$EndFeedbackValue"/>
                      <signal_cue_instantly cue="GenerateNPCMission.$ReportSignalCue" param="@event.param"/>
                    </do_if>
                    <do_elseif value="@static.$FeedbackValue">
                      <debug_text text="'Mission signalled with feedback' + static.$FeedbackValue" chance="$DebugChance"/>
                      <set_value name="GenerateNPCMission.$ReportSignalCue.$FeedbackValue" exact="static.$FeedbackValue"/>
                      <signal_cue_instantly cue="GenerateNPCMission.$ReportSignalCue" param="@event.param"/>
                    </do_elseif>
                  </actions>
                </cue>
                <cue name="GenerateNPCMission_Variant_1_Trigger">
                  <conditions>
                    <event_cue_signalled/>
                  </conditions>
                  <actions>
                    <do_if value="$EnemyInvolved == 1">
                      <find_object_component groupname="$TargetComponents" object="$EnemyShip" class="$TargetClass" multiple="true"/>
                      <set_value name="$Targets" exact="$TargetComponents"/>
                    </do_if>
                    <set_value name="$SpokeToClient" exact="false"/>
                    <set_value name="$Client.$MissionOfferState" exact="'offering'"/>
                  </actions>
                  <cues>
                    <cue name="GenerateNPCMission_Variant_1_Ref" ref="Start">
                      <param name="Client" value="$Client"/>
                      <param name="MissionLevel" value="$MissionLevel"/>
                      <param name="Difficulty" value="$Difficulty"/>
                      <!--Mission offer-->
                      <param name="ConversationOffer" value="true"/>
                      <param name="ConversationTriggerCue" value="GenerateNPCMission_Variant_1_Show_Briefing"/>
                      <param name="HideFromBBS" value="true"/>
                      <param name="OfferDistance" value="null"/>
                      <!--Mission text-->
                      <param name="Page" value="30137"/>
                      <param name="TextOffset" value="$TextOffset"/>
                      <!--Mission specific params-->
                      <param name="Targets" value="$Targets"/>
                      <param name="TargetSector" value="$Sector"/>
                      <param name="ExplosionRange" value="$ExplosionRange"/>
                      <param name="AllowDestroy" value="$AllowDestroy"/>
                      <param name="ReportSignalCue" value="GenerateNPCMission_Variant_1_GM_Signal"/>
                      <param name="DebugChance" value="@GenerateNPCMission.$DebugChance"/>
                    </cue>
                    <cue name="GenerateNPCMission_Variant_1_Debug_Guidance" onfail="cancel">
                      <conditions>
                        <check_value value="$DebugChance == 100"/>
                      </conditions>
                      <actions>
                        <create_mission cue="this" name="'Guidance to mission'" description="'Helper guidance to mission NPC'" difficulty="level.trivial" faction="faction.player" type="missiontype.destroy">
                          <briefing>
                            <objective step="1" action="objective.talkto" object="$Client"/>
                          </briefing>
                          <objective step="1" action="objective.talkto" object="$Client"/>
                        </create_mission>
                      </actions>
                      <cues>
                        <cue name="GenerateNPCMission_Variant_1_Debug_Guidance_Abort">
                          <conditions>
                            <event_mission_aborted cue="parent"/>
                          </conditions>
                          <actions>
                            <remove_mission cue="parent"/>
                          </actions>
                        </cue>
                      </cues>
                    </cue>
                    <!--Conversation handlers-->
                    <cue name="GenerateNPCMission_Variant_1_Next_Section" instantiate="true">
                      <conditions>
                        <event_conversation_next_section actor="$Client" section="g_askformission"/>
                      </conditions>
                      <actions>
                        <add_npc_line speaker="$Client" line="1000103" comment="You'll need your wits about you for this."/>
                        <set_conversation_return_section section="g_goodbye"/>
                        <signal_cue_instantly cue="GenerateNPCMission_Variant_1_Show_Briefing"/>
                      </actions>
                    </cue>
                    <cue name="GenerateNPCMission_Variant_1_Show_Briefing" instantiate="true">
                      <conditions>
                        <event_cue_signalled/>
                      </conditions>
                    </cue>
                    <!--We need this cue here reacting to this event to set the blackboard variable as soon as possible-->
                    <cue name="GenerateNPCMission_Variant_1_Mission_Accepted">
                      <conditions>
                        <event_object_signalled object="$Client" param="'accept'"/>
                      </conditions>
                      <actions>
                        <set_value name="$Client.$MissionOfferState" exact="'accepted'"/>
                      </actions>
                    </cue>
                    <!--This cue will trigger slightly later than the one setting the $Client.$MissionOfferState blackboard variable to 'accepted'-->
                    <cue name="GenerateNPCMission_Variant_1_Mission_Accepted_2">
                      <conditions>
                        <event_cue_signalled cue="GenerateNPCMission_Variant_1_GM_Signal"/>
                        <check_value value="@GenerateNPCMission_Variant_1_GM_Signal.$FeedbackValue.$ID == '$MISSION_ACCEPTED'"/>
                      </conditions>
                      <actions>
                        <assert value="$Client.$MissionOfferState == 'accepted'" text="'The mission offer state of the client is not - accepted -. State: ' + $Client.$MissionOfferState"/>
                        <set_value name="$MissionAccepted" exact="true"/>
                        <!--Set actor to not-temporary so that it will not automatically be destroyed in low attention-->
                        <set_entity_traits entity="$Client" missionactor="true" temporary="false"/>
                      </actions>
                    </cue>
                  </cues>
                </cue>
              </cues>
            </cue>
          </cues>
        </cue>
      </cues>
    </cue>
  </cues>
</mdscript>
