<?xml version='1.0' encoding='utf-8'?>
<mdscript xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" name="X4Ep1_Pirates_Subscriptions" xsi:noNamespaceSchemaLocation="md.xsd">
  <cues>
    <!--event.param = mission group-->
    <cue name="Player_Subscribed_To_Guild" instantiate="true" namespace="this">
      <conditions>
        <event_cue_signalled/>
      </conditions>
      <actions>
        <set_userdata relationstate="'relation_pirateguild'" value="1"/>
      </actions>
    </cue>
    <cue name="Patch_Userdata_Player_Subscribed_To_Guild_V2" namespace="this" instantiate="true">
      <conditions>
        <event_cue_signalled cue="md.Setup.Start"/>
        <check_value value="Start.$MissionGroupCues?"/>
      </conditions>
      <actions>
        <do_for_each valuename="$GuildCue" in="Start.$MissionGroupCues">
          <do_if value="$GuildCue.$SubscriptionStatus == 'subscribed'">
            <set_userdata relationstate="'relation_pirateguild'" value="1"/>
            <debug_text text="'Player is subscribed to pirate guild : ' + $GuildCue + ' - setting user data'" filter="savegame"/>
            <break/>
          </do_if>
        </do_for_each>
      </actions>
    </cue>
    <cue name="Start" namespace="this">
      <conditions>
        <event_cue_completed cue="md.Setup.Start"/>
        <check_value value="player.galaxy.macro == macro.xu_ep2_universe_macro" comment="only in main-galaxy"/>
      </conditions>
      <actions>
        <set_value name="$DebugChance" exact="0"/>
        <set_value name="$DebugChance2" exact="0"/>
        <set_value name="$MissionGroupCues" exact="table[]"/>
        <set_value name="$Threads" exact="[]"/>
        <set_value name="$ThreadDefinitions" exact="table[]"/>
        <set_value name="$ActiveThreads" exact="[]" comment="List of instanced thread cues of md.MC_Management.Thread_Manager"/>
        <set_value name="$Areas" exact="[]"/>
      </actions>
      <cues>
        <library name="Remove_Dynamic_Interior">
          <actions>
            <do_if value="$DynamicInterior">
              <debug_text text="event.name + ' Destroying interior ' + $DynamicInterior" chance="$DebugChance"/>
              <destroy_object object="$DynamicInterior"/>
            </do_if>
            <remove_value name="$DynamicInterior"/>
            <remove_value name="$DynamicCorridor"/>
            <remove_value name="$DynamicRoom"/>
          </actions>
        </library>
        <!--
        ############################
        SCALE PLACE PACT PIRATES
        ############################-->
        <cue name="SCALEPLATE_PIRATES" namespace="this" version="2">
          <actions>
            <!--Common values-->
            <set_value name="$ManagerCue" exact="parent.namespace"/>
            <set_value name="$Faction" exact="faction.scaleplate"/>
            <set_value name="$MissionGroup" exact="missiongroup.scaleplate_pirates"/>
            <set_value name="$Mission_Contact" exact="null"/>
            <set_value name="$Page" exact="30207" comment="Scaleplate pirates page"/>
            <set_value name="$ManagerCue.$MissionGroupCues.{$MissionGroup}" exact="this"/>
            <set_value name="$JoinFee" exact="50000Cr"/>
            <!--TODO @Owen @Roger - what should be the conditions to trigger the intro mission?-->
            <set_value name="$DebugChance" exact="$ManagerCue.$DebugChance"/>
            <!--Status-->
            <set_value name="$SubscriptionStatus" exact="null"/>
            <set_value name="$Invited" exact="false"/>
            <set_value name="$IntroducedToContact" exact="false"/>
            <set_value name="$JobsDescribed" exact="false"/>
            <set_value name="$ConflictDescribed" exact="false"/>
            <set_value name="$CooldownTime" exact="-1s"/>
            <!--Stats-->
            <set_value name="$ThreadsCompleted" exact="0"/>
            <set_value name="$ThreadsFailed" exact="0"/>
            <set_value name="$MissionsCompleted" exact="0"/>
            <set_value name="$MissionsFailed" exact="0"/>
          </actions>
          <patch sinceversion="2" state="complete">
            <do_if value="not md.$SubscribedMissionGroups?">
              <create_list name="md.$SubscribedMissionGroups"/>
            </do_if>
            <do_if value="$SubscriptionStatus == 'subscribed'">
              <append_to_list name="md.$SubscribedMissionGroups" exact="$MissionGroup"/>
            </do_if>
          </patch>
          <cues>
            <cue name="SCALEPLATE_PIRATES_Init">
              <actions>
                <set_value name="$ContactCreatorCue" exact="SCALEPLATE_PIRATES_Create_Contact"/>
                <set_value name="$IntroMissionCue" exact="SCALEPLATE_PIRATES_Introduction"/>
                <!--$SubscriptionStatus:
                - 'unsubscribed'
                - 'probation'
                - 'subscribed'
                - 'cooldown'-->
                <signal_cue_instantly cue="SCALEPLATE_PIRATES_Set_Subscription_Status" param="'unsubscribed'"/>
              </actions>
            </cue>
            <!--
            ####################
            DEBUG
            ####################-->
            <cue name="SCALEPLATE_PIRATES_Debug_Reset">
              <conditions>
                <event_cue_signalled/>
              </conditions>
              <actions>
                <do_all exact="$ManagerCue.$Threads.count" counter="$i" reverse="true">
                  <do_if value="$ManagerCue.$Threads.{$i}.$ThreadCue.$Definition.$MissionGroup == $MissionGroup">
                    <signal_cue_instantly cue="$ManagerCue.$Threads.{$i}.$CleanupCue"/>
                  </do_if>
                </do_all>
                <set_value name="$DefinitionKeys" exact="$ManagerCue.$ThreadDefinitions.keys.list"/>
                <do_all exact="$DefinitionKeys.count" counter="$i" reverse="true">
                  <do_if value="$ManagerCue.$ThreadDefinitions.{$DefinitionKeys.{$i}}.$MissionGroup == $MissionGroup">
                    <remove_value name="$ManagerCue.$ThreadDefinitions.{$DefinitionKeys.{$i}}"/>
                  </do_if>
                </do_all>
                <do_if value="@$Mission_Contact.isclass.npc">
                  <destroy_object object="$Mission_Contact"/>
                </do_if>
                <set_value name="$Mission_Contact" exact="null"/>
                <reset_cue cue="namespace"/>
                <reset_cue cue="Gamestart" comment="Trigger CalculateThreads again"/>
              </actions>
            </cue>
            <cue name="SCALEPLATE_PIRATES_Debug_Subscribe" instantiate="true">
              <conditions>
                <event_cue_signalled/>
              </conditions>
              <actions>
                <signal_cue_instantly cue="SCALEPLATE_PIRATES_Set_Subscription_Status" param="'subscribed'"/>
              </actions>
            </cue>
            <!--
            ####################
            SUBSCRIPTION
            ####################-->
            <!--event.param == new status-->
            <cue name="SCALEPLATE_PIRATES_Set_Subscription_Status" instantiate="true">
              <conditions>
                <event_cue_signalled/>
              </conditions>
              <actions>
                <do_if value="                        event.param == 'unsubscribed' or                        event.param == 'probation' or                        event.param == 'subscribed' or                        event.param == 'cooldown'">
                  <debug_text text="'Changing subscription status from ' + $SubscriptionStatus + ' to ' + event.param" chance="$DebugChance"/>
                  <set_value name="$SubscriptionStatus" exact="event.param"/>
                  <!--Be careful with state change handlers here if the requested state was the same as the previous one-->
                  <do_if value="event.param == 'subscribed' and Gamestart.state == cuestate.complete">
                    <signal_cue_instantly cue="Player_Subscribed_To_Guild" param="$MissionGroup"/>
                    <unlock_achievement name="JOIN_SCALEPLATE"/>
                    <signal_cue cue="CalculateThreads"/>
                  </do_if>
                  <do_elseif value="event.param == 'cooldown'">
                    <!--TODO @Owen balance cooldown. Have a harsher cooldown in certain situations?-->
                    <set_value name="$CooldownTime" exact="player.age + 5min"/>
                  </do_elseif>
                  <!-- update global missiongroup-registry -->
                  <do_if value="$SubscriptionStatus == 'subscribed'">
                    <assert value="not md.$SubscribedMissionGroups.indexof.{$MissionGroup}"/>
                    <do_if value="not md.$SubscribedMissionGroups.indexof.{$MissionGroup}">
                      <append_to_list name="md.$SubscribedMissionGroups" exact="$MissionGroup"/>
                    </do_if>
                  </do_if>
                  <do_else>
                    <remove_from_list name="md.$SubscribedMissionGroups" exact="$MissionGroup"/>
                  </do_else>
                </do_if>
                <do_else>
                  <assert value="false" text="'Unknown subscription status: ' + event.param + ' [Owen]'"/>
                </do_else>
              </actions>
            </cue>
            <cue name="SCALEPLATE_PIRATES_Check_Cooldown" instantiate="true" checkinterval="5s">
              <conditions>
                <check_value value="$SubscriptionStatus == 'cooldown' and player.age gt $CooldownTime"/>
              </conditions>
              <actions>
                <debug_text text="player.age + ' Ending  cooldown'" chance="$DebugChance"/>
                <signal_cue_instantly cue="SCALEPLATE_PIRATES_Set_Subscription_Status" param="'subscribed'"/>
              </actions>
            </cue>
            <!--
            ####################
            CONTACT
            ####################-->
            <!--Attempt to place the contact. Their HQ is preferred, otherwise a suitable station in the player's sector-->
            <cue name="SCALEPLATE_PIRATES_Create_Contact">
              <conditions>
                <event_cue_signalled/>
                <check_value value="$Faction.isactive"/>
              </conditions>
              <actions>
                <set_value name="$PlacementObject" exact="$Faction.headquarters"/>
                <do_if value="$PlacementObject">
                  <check_object result="this.$Result" object="$PlacementObject">
                    <match_content class="class.walkablemodule" checkoperational="true"/>
                  </check_object>
                  <do_if value="not this.$Result">
                    <set_value name="$PlacementObject" exact="null"/>
                  </do_if>
                </do_if>
                <do_if value="not $PlacementObject.exists">
                  <!--TODO @Owen hint to the player about this station or re-run this to find better stations if they are created-->
                  <find_station name="$PlacementObject" owner="$Faction" space="player.sector">
                    <match_content class="class.walkablemodule" checkoperational="true"/>
                  </find_station>
                </do_if>
                <do_if value="$PlacementObject">
                  <do_if value="not $Mission_Contact.isclass.npc">
                    <create_cue_actor name="$Mission_Contact" cue="namespace" group="teladi.factionrepresentative">
                      <page exact="10504"/>
                      <owner exact="$Faction"/>
                      <skills>
                        <skill type="management" min="12" max="15"/>
                        <skill type="morale" min="12" max="15"/>
                        <skill type="piloting" min="6" max="15"/>
                        <skill type="engineering" min="6" max="15"/>
                        <skill type="boarding" min="6" max="15"/>
                      </skills>
                    </create_cue_actor>
                    <do_if value="$Mission_Contact">
                      <set_entity_type entity="$Mission_Contact" type="entitytype.crowd"/>
                      <set_entity_traits entity="$Mission_Contact" missionactor="true" remote="false" customhandler="true"/>
                      <debug_text text="'Created mission contact ' + $Mission_Contact + ' ' + $Mission_Contact.knownname + ' for placement on ' + $PlacementObject + ' ' + $PlacementObject.knownname" chance="$DebugChance"/>
                      <set_value name="$HQ" exact="$PlacementObject"/>
                      <set_value name="$Mission_Contact.$HQ" exact="$PlacementObject"/>
                    </do_if>
                  </do_if>
                </do_if>
                <do_if value="not $Mission_Contact.isclass.npc or not $PlacementObject.exists">
                  <reset_cue cue="this"/>
                </do_if>
              </actions>
              <cues>
                <cue name="SCALEPLATE_PIRATES_Place_Contact_Init" version="2">
                  <actions>
                    <do_if value="$PlacementObject.attention ge attention.nearby">
                      <signal_cue cue="SCALEPLATE_PIRATES_Place_Contact_Create_Interior"/>
                    </do_if>
                  </actions>
                  <patch sinceversion="2" state="complete">
                    <do_if value="not $PlacementObject.isoperational">
                      <set_value name="$PlacementObject" exact="null"/>
                      <reset_cue cue="$ContactCreatorCue"/>
                    </do_if>
                  </patch>
                </cue>
                <cue name="SCALEPLATE_PIRATES_Place_Contact_Create_Interior">
                  <conditions>
                    <check_any>
                      <event_cue_signalled/>
                      <check_all>
                        <event_object_changed_attention object="$PlacementObject"/>
                        <check_value value="event.param ge attention.nearby"/>
                      </check_all>
                    </check_any>
                  </conditions>
                  <actions>
                    <debug_text text="'Attempting to create dynamic interior to place NPC'" chance="$DebugChance"/>
                    <get_room_definition macro="$StartCorridorMacro" tags="tag.corridor" race="$Faction.primaryrace"/>
                    <get_room_definition macro="$StartRoomMacro" doors="$RoomDoors" tags="tag.bar"/>
                    <!--TODO @Owen - always create a bar or find an existing one?-->
                    <create_dynamic_interior object="$PlacementObject" corridor="$StartCorridorMacro" room="$StartRoomMacro" name="'{20007,1031}'" interiorname="$DynamicInterior" corridorname="$DynamicCorridor" roomname="$DynamicRoom"/>
                    <assert value="$DynamicInterior" text="'Unable to create dynamic interior for contact ' + $Mission_Contact + ' ' + $Mission_Contact.knownname + ' [Owen]'"/>
                    <do_if value="$DynamicInterior">
                      <find_npc_slot name="$NPC_Slot" object="$DynamicRoom"/>
                      <assert value="$NPC_Slot" text="'Can not find slot for mission contact in ' + $DynamicInterior + ' ' + $DynamicInterior.knownname + ' [Owen]'"/>
                      <do_if value="$NPC_Slot">
                        <add_actor_to_room actor="$Mission_Contact" slot="$NPC_Slot"/>
                        <debug_text text="'Added mission contact ' + $Mission_Contact + ' ' + $Mission_Contact.knownname + ' to ' + $PlacementObject + ' ' + $PlacementObject.knownname" chance="$DebugChance"/>
                      </do_if>
                    </do_if>
                  </actions>
                  <cues>
                    <cue name="SCALEPLATE_PIRATES_Place_Contact_WithinDynamicInterior_Destroy">
                      <conditions>
                        <event_object_interiors_despawning object="$PlacementObject"/>
                      </conditions>
                      <actions>
                        <remove_actor_from_room actor="$Mission_Contact"/>
                        <include_actions ref="Remove_Dynamic_Interior"/>
                        <do_if value="$Faction.isactive">
                          <reset_cue cue="SCALEPLATE_PIRATES_Place_Contact_Create_Interior"/>
                        </do_if>
                        <do_else>
                          <debug_text text="'Faction is now inactive. Deactivating contact handling.'"/>
                          <reset_cue cue="$ContactCreatorCue"/>
                        </do_else>
                      </actions>
                    </cue>
                  </cues>
                </cue>
                <cue name="SCALEPLATE_PIRATES_Contact_Killed">
                  <conditions>
                    <event_object_destroyed object="$Mission_Contact"/>
                  </conditions>
                  <actions>
                    <set_value name="$Mission_Contact" exact="null"/>
                    <reset_cue cue="$ContactCreatorCue"/>
                  </actions>
                </cue>
                <cue name="SCALEPLATE_PIRATES_Placement_Object_Destroyed">
                  <conditions>
                    <event_object_destroyed object="$PlacementObject"/>
                  </conditions>
                  <actions>
                    <include_actions ref="Remove_Dynamic_Interior"/>
                    <set_value name="$PlacementObject" exact="null"/>
                    <reset_cue cue="$ContactCreatorCue"/>
                  </actions>
                </cue>
                <cue name="SCALEPLATE_PIRATES_Contact__Faction_Deactivated">
                  <conditions>
                    <event_faction_deactivated faction="$Faction"/>
                  </conditions>
                  <actions>
                    <do_if value="SCALEPLATE_PIRATES_Place_Contact_Create_Interior.state == cuestate.waiting">
                      <debug_text text="'Faction is now inactive. Deactivating contact handling.'"/>
                      <reset_cue cue="$ContactCreatorCue"/>
                    </do_if>
                    <!--else, the depawning of the interior must happen-->
                  </actions>
                </cue>
                <cue name="SCALEPLATE_PIRATES_Contact_Conversation_Started" instantiate="true">
                  <conditions>
                    <check_any>
                      <event_conversation_started actor="$Mission_Contact"/>
                      <event_conversation_returned_to_section actor="$Mission_Contact"/>
                    </check_any>
                    <check_value value="event.param == 'default' and $Faction.isactive"/>
                  </conditions>
                  <actions>
                    <do_if value="event.name == 'event_conversation_started'">
                      <substitute_text text="$JoinPlayerChoiceText" source="{1002,3020704}" comment="Join... \($CREDITS${1001,101}\)">
                        <replace string="'$CREDITS$'" with="$JoinFee.formatted.default"/>
                      </substitute_text>
                      <do_if value="SCALEPLATE_PIRATES_Introduction.hasmission">
                        <remove_mission cue="SCALEPLATE_PIRATES_Introduction" type="completed"/>
                        <signal_cue cue="SCALEPLATE_PIRATES_Cancel_Intro_Talkto"/>
                        <reset_cue cue="SCALEPLATE_PIRATES_Introduction"/>
                      </do_if>
                      <do_if value="$SubscriptionStatus == 'unsubscribed' or $SubscriptionStatus == 'cooldown'">
                        <do_if value="player.entity.isfemale">
                          <add_npc_line speaker="$Mission_Contact" line="3007" comment="Pilot. (female)"/>
                        </do_if>
                        <do_else>
                          <add_npc_line speaker="$Mission_Contact" line="3006" comment="Pilot. (male)"/>
                        </do_else>
                      </do_if>
                      <do_else>
                        <!--More familiar greeting-->
                        <add_npc_line speaker="$Mission_Contact" line="3003" comment="Captain."/>
                      </do_else>
                    </do_if>
                    <include_actions ref="SCALEPLATE_PIRATES_Contact_Player_Lines"/>
                  </actions>
                </cue>
                <library name="SCALEPLATE_PIRATES_Contact_Player_Lines">
                  <actions>
                    <!--Specific sections-->
                    <do_if value="event.name == 'event_conversation_next_section' and (event.param == 'subscribe_request' or event.param == 'subscribe_request_2')">
                      <add_player_choice text="{1002,3020701}" section="subscribe_ask_info" comment="What kind of jobs can I expect?"/>
                      <add_player_choice text="$JoinPlayerChoiceText" section="subscribe_start" position="top_right" comment="Let's get started."/>
                    </do_if>
                    <do_elseif value="event.name == 'event_conversation_next_section' and event.param == 'subscribe_ask_info'">
                      <add_player_choice text="$JoinPlayerChoiceText" section="subscribe_start" position="top_right" comment="Let's get started."/>
                    </do_elseif>
                    <!--Start or other sections-->
                    <do_else>
                      <do_if value="$SubscriptionStatus == 'unsubscribed'">
                        <do_if value="not $Invited">
                          <!--Intro mission is not in a state where the player was told to come.-->
                          <add_player_choice text="{1002,3020702}" section="subscribe_request_2" comment="Is there some work going?"/>
                        </do_if>
                        <do_elseif value="$IntroducedToContact">
                          <add_player_choice text="{1002,3000403}" section="subscribe_start" position="top_right" comment="Shall I get started?"/>
                          <do_if value="not $JobsDescribed">
                            <add_player_choice text="{1002,3000401}" section="subscribe_ask_info" comment="What kind of jobs can I expect?"/>
                          </do_if>
                        </do_elseif>
                        <do_else>
                          <add_player_choice text="{1002,3020703}" section="subscribe_request" comment="I hear you have some work."/>
                        </do_else>
                      </do_if>
                      <do_elseif value="$SubscriptionStatus == 'probation'">
                        <add_player_choice text="{1002,3000405}" section="abort_intro" comment="I would like to stop."/>
                      </do_elseif>
                    </do_else>
                  </actions>
                </library>
                <cue name="SCALEPLATE_PIRATES_Contact_NextSection" instantiate="true">
                  <conditions>
                    <event_conversation_next_section actor="$Mission_Contact"/>
                  </conditions>
                  <actions>
                    <set_value name="$AddPlayerChoices" exact="true"/>
                    <do_if value="event.param == 'subscribe_request'">
                      <set_value name="$IntroducedToContact" exact="true"/>
                      <add_npc_line speaker="$Mission_Contact" line="30207003" hidechoices="true" comment="I see you know a good opportunity when you see one."/>
                      <add_npc_line speaker="$Mission_Contact" line="30207004" hidechoices="true" comment="We'll give you access to our job listings, for a fair price of course."/>
                    </do_if>
                    <do_elseif value="event.param == 'subscribe_ask_info'">
                      <set_value name="$JobsDescribed" exact="true"/>
                      <add_npc_line speaker="$Mission_Contact" line="30207005" hidechoices="true" comment="Given our reputation, I'm sure you can guess what some of the jobs will be. You'll find something worth doing."/>
                      <add_npc_line speaker="$Mission_Contact" line="30207006" hidechoices="true" comment="Just don't expect to make too many friends along the way, besides us of course."/>
                    </do_elseif>
                    <do_elseif value="event.param == 'subscribe_request_2'">
                      <!--This section is for when the intro mission is not currently active for the player to accept it. Either reject the player or signal the intro mission to activate.-->
                      <include_actions ref="SCALEPLATE_PIRATES_Can_Join_Subscription"/>
                      <do_if value="$CanJoin">
                        <add_npc_line speaker="$Mission_Contact" line="30207007" hidechoices="true" comment="(response to 'any jobs for me?')There's always stuff to be done. Of course, we can't simply trust important tasks to just anyone though."/>
                        <add_npc_line speaker="$Mission_Contact" line="30207004" hidechoices="true" comment="We'll give you access to our job listings, for a fair price of course."/>
                      </do_if>
                      <do_else>
                        <set_value name="$AddPlayerChoices" exact="false"/>
                        <add_npc_line speaker="$Mission_Contact" line="30207008" hidechoices="true" comment="(reject)It is bad for business to hire people out of pity. Perhaps some other time."/>
                      </do_else>
                    </do_elseif>
                    <do_elseif value="event.param == 'subscribe_start'">
                      <set_value name="$AddPlayerChoices" exact="false"/>
                      <signal_cue cue="SCALEPLATE_PIRATES_Player_Requested_Subscription"/>
                      <do_if value="player.money ge $JoinFee">
                        <reward_player money="-$JoinFee"/>
                        <signal_cue_instantly cue="SCALEPLATE_PIRATES_Set_Subscription_Status" param="'subscribed'"/>
                        <add_npc_line speaker="$Mission_Contact" line="30207009" hidechoices="true" comment="Good choice. You will now be able to see jobs on offer in certain areas where we operate."/>
                        <add_npc_line speaker="$Mission_Contact" line="30207010" hidechoices="true" comment="We expect good things from you."/>
                      </do_if>
                      <do_else>
                        <add_npc_line speaker="$Mission_Contact" line="30207011" hidechoices="true" comment="It appears you don't have the necessary funds available. Please don't waste our time."/>
                      </do_else>
                    </do_elseif>
                    <do_elseif value="event.param == 'abort_intro'">
                      <set_value name="$AddPlayerChoices" exact="false"/>
                      <signal_cue cue="SCALEPLATE_PIRATES_Player_Requests_Intro_Abort"/>
                    </do_elseif>
                    <do_else>
                      <set_value name="$AddPlayerChoices" exact="false"/>
                    </do_else>
                    <do_if value="$AddPlayerChoices">
                      <include_actions ref="SCALEPLATE_PIRATES_Contact_Player_Lines"/>
                    </do_if>
                  </actions>
                </cue>
              </cues>
            </cue>
            <!--event.param = table[
            $cue                = thread cue namespace,
            $completedmissions  = number of completed missions,
            $failedmissions     = number of failed missions]-->
            <cue name="SCALEPLATE_PIRATES_Thread_Finished" instantiate="true">
              <conditions>
                <event_cue_signalled cue="Cleanup_Thread"/>
                <check_value value="event.param.$cue.$Definition.$MissionGroup == $MissionGroup"/>
                <check_value value="$ManagerCue.$ActiveThreads.indexof.{event.param.$cue}"/>
              </conditions>
              <actions>
                <!--TODO @Owen spoken feedback?-->
                <debug_text text="'player finished ' + event.param.$cue + ' for ' + $MissionGroup + '. Completed missions: ' + event.param.$completedmissions + ' - Failed missions: ' + event.param.$failedmissions" chance="$DebugChance"/>
                <set_value name="$MissionsCompleted" operation="add" exact="event.param.$completedmissions"/>
                <set_value name="$MissionsFailed" operation="add" exact="event.param.$completedmissions"/>
                <do_if value="event.param.$failed">
                  <set_value name="$ThreadsFailed" operation="add"/>
                  <do_if value="not event.param.$interrupted">
                    <signal_cue_instantly cue="SCALEPLATE_PIRATES_Set_Subscription_Status" param="'cooldown'"/>
                  </do_if>
                </do_if>
                <do_else>
                  <set_value name="$ThreadsCompleted" operation="add"/>
                  <signal_cue cue="CalculateThreads"/>
                </do_else>
              </actions>
            </cue>
            <!--
            ####################
            INTRODUCTION
            ####################-->
            <cue name="SCALEPLATE_PIRATES_Player_Requested_Subscription" instantiate="true">
              <conditions>
                <event_cue_signalled/>
              </conditions>
            </cue>
            <cue name="SCALEPLATE_PIRATES_Player_Requests_Intro_Abort" instantiate="true">
              <conditions>
                <event_cue_signalled/>
              </conditions>
            </cue>
            <library name="SCALEPLATE_PIRATES_Can_Join_Subscription">
              <actions>
                <!--TODO @Owen other conditions based on if they failed a previous intro mission and need a cooldown-->
                <set_value name="$CanJoin" exact="true"/>
              </actions>
            </library>
            <cue name="SCALEPLATE_PIRATES_Introduction" version="2">
              <conditions>
                <event_cue_signalled/>
                <check_value value="$Faction.isactive"/>
              </conditions>
              <actions>
                <set_value name="$Invited" exact="false"/>
                <do_if value="not $Mission_Contact.isclass.npc or not $PlacementObject.isoperational">
                  <debug_text text="'Mission contact was not yet created for ' + $MissionGroup + '. Triggering creation now. [Owen]'" filter="error"/>
                  <signal_cue_instantly cue="$ContactCreatorCue"/>
                </do_if>
                <do_if value="$Mission_Contact.isclass.npc and $PlacementObject.isoperational">
                  <debug_text text="'Starting intro mission handling for ' + $MissionGroup" chance="$DebugChance"/>
                  <set_value name="$MissionIntroCue" exact="this"/>
                  <signal_cue_instantly cue="SCALEPLATE_PIRATES_Set_Subscription_Status" param="'unsubscribed'"/>
                </do_if>
                <do_else>
                  <debug_text text="'Unable to start intro mission as there is no placement object'"/>
                  <reset_cue cue="SCALEPLATE_PIRATES_Introduction"/>
                </do_else>
              </actions>
              <patch sinceversion="2" state="complete">
                <do_if value="$SubscriptionStatus == 'cooldown'">
                  <debug_text text="'Fixing pirate mission which is still of state cooldown when it should be unsubscribed'" filter="savegame"/>
                  <signal_cue_instantly cue="SCALEPLATE_PIRATES_Set_Subscription_Status" param="'unsubscribed'"/>
                </do_if>
              </patch>
              <cues>
                <cue name="SCALEPLATE_PIRATES_Introduction_Station_Destroyed">
                  <conditions>
                    <event_object_destroyed object="$PlacementObject"/>
                    <!--Once landed, the DisconnectedActorObjectiveLibrary will handle the station being destroyed-->
                    <check_value value="SCALEPLATE_PIRATES_Introduction_Player_Landed.state == cuestate.waiting"/>
                  </conditions>
                  <actions>
                    <reset_cue cue="$MissionIntroCue"/>
                  </actions>
                </cue>
                <cue name="SCALEPLATE_PIRATES_Introduction_Player_Landed">
                  <conditions>
                    <check_any>
                      <check_all>
                        <event_player_teleport_successful comment="with level 27+ you can teleport to npc-owned stations"/>
                        <check_value value="player.entity.hascontext.{$PlacementObject}"/>
                      </check_all>
                      <check_all>
                        <event_object_docked_at container="$PlacementObject"/>
                        <check_value value="player.ship == event.param"/>
                      </check_all>
                    </check_any>
                    <check_value value="not md.$Disable_SCA_Invite?"/>
                  </conditions>
                  <delay exact="5s"/>
                  <actions>
                    <do_if value="player.entity.hascontext.{$PlacementObject} and $Mission_Contact.hascontext.{$PlacementObject}" comment="check if player didn't undock/teleport-away within the delay, check if MissionContact is on the station (which is not yet the case yet when teleport triggered)">
                      <speak actor="$Mission_Contact" priority="90">
                        <text line="30207001" comment="Greetings pilot. How would you like an opportunity for some extra profit? We're always looking for new blood to help us with some of our operations."/>
                        <text line="30207002" comment="If you're interested, come find me."/>
                      </speak>
                    </do_if>
                    <do_else>
                      <reset_cue cue="SCALEPLATE_PIRATES_Introduction_Player_Landed"/>
                    </do_else>
                  </actions>
                  <cues>
                    <!--TODO @Owen - remove when player flies away? Put on cooldown?-->
                    <cue name="SCALEPLATE_PIRATES_Introduction_Offer">
                      <conditions>
                        <event_speak_finished actor="$Mission_Contact" line="30207001" comment="the line passed as the event.param2 is always the first spoken line"/>
                      </conditions>
                      <actions>
                        <debug_text text="'Player has passed the conditions for the intro mission to be available for group: ' + $MissionGroup" chance="$DebugChance"/>
                        <set_value name="$Invited" exact="true"/>
                        <create_mission cue="$MissionIntroCue" type="missiontype.fight" name="{30207,1}" description="{30207,2}" difficulty="level.easy" faction="$Faction" group="$MissionGroup">
                          <briefing>
                            <objective step="1" action="objective.talkto" object="$Mission_Contact"/>
                          </briefing>
                        </create_mission>
                        <signal_cue_instantly cue="md.GenericMissions.DisconnectedActorObjectiveLibrary" param="table[                                               $actor = $Mission_Contact,                                               $object = $PlacementObject,                                               $missioncue = $MissionIntroCue,                                               $cancelcue = SCALEPLATE_PIRATES_Cancel_Intro_Talkto,                                               $libfailedcue = SCALEPLATE_PIRATES_Intro_Abort,                                               $objective = objective.talkto,                                               $debugchance = $DebugChance]"/>
                      </actions>
                    </cue>
                    <cue name="SCALEPLATE_PIRATES_Intro_Abort" version="2">
                      <conditions>
                        <check_any>
                          <event_mission_aborted cue="$MissionIntroCue"/>
                          <event_cue_signalled cue="SCALEPLATE_PIRATES_Player_Requests_Intro_Abort"/>
                          <event_cue_signalled/>
                          <event_object_destroyed object="$Mission_Contact"/>
                          <event_object_destroyed object="$PlacementObject"/>
                          <event_faction_deactivated faction="$Faction"/>
                        </check_any>
                      </conditions>
                      <actions>
                        <debug_text text="'Aborting due to ' + event.name" chance="$DebugChance"/>
                        <set_value name="$Invited" exact="false"/>
                        <do_if value="$MissionIntroCue.hasmission">
                          <remove_mission cue="$MissionIntroCue" type="aborted"/>
                        </do_if>
                        <signal_cue_instantly cue="SCALEPLATE_PIRATES_Set_Subscription_Status" param="'unsubscribed'"/>
                        <reset_cue cue="SCALEPLATE_PIRATES_Introduction"/>
                      </actions>
                      <patch sinceversion="2" state="waiting">
                        <set_value name="$Patch_CheckLibraryInstance" exact="true"/>
                      </patch>
                    </cue>
                    <cue name="SCALEPLATE_PIRATES_Patch_Check_Talkto_Lib" onfail="cancel">
                      <conditions>
                        <check_value value="@$Patch_CheckLibraryInstance"/>
                      </conditions>
                      <actions>
                        <do_if value="not @md.GenericMissions.DisconnectedActorObjectiveLibrary.$Patch_ActiveMissionCues.indexof.{$MissionIntroCue}">
                          <debug_text text="'Talkto helper instance no longer exists for ' + $MissionIntroCue + ' - aborting intro mission'" filter="savegame"/>
                          <signal_cue cue="SCALEPLATE_PIRATES_Intro_Abort"/>
                        </do_if>
                        <remove_value name="$Patch_CheckLibraryInstance"/>
                      </actions>
                    </cue>
                    <cue name="SCALEPLATE_PIRATES_Cancel_Intro_Talkto" instantiate="true">
                      <conditions>
                        <event_cue_signalled/>
                      </conditions>
                    </cue>
                  </cues>
                </cue>
              </cues>
            </cue>
            <!--
            ####################
            THREADS
            ####################-->
            <cue name="SCALEPLATE_PIRATES_Targetted_Individual">
              <cues>
                <cue name="SCALEPLATE_PIRATES_Targetted_Individual_Register" version="4">
                  <actions>
                    <!--Scaleplate - Participate in Raid-->
                    <set_value name="$ThreadID" exact="'$SCALEPLATE_PIRATES_Targetted_Individual'"/>
                    <set_value name="$Thread" exact="table[                            $ID = $ThreadID,                            $Faction = $Faction,                            $MissionGroup = $MissionGroup,                            $ThreadConditionLibs = [Situation__Always],                            $ThreadType = 'sequential',                            $MissionType = missiontype.trade,                            $Difficulty = level.medium,                            $SubMissionLib = SCALEPLATE_PIRATES_Targetted_Individual_Get_Submissions,                            $NameLib = SCALEPLATE_PIRATES_Targetted_Individual_Construct_Name,                            $DescriptionLib = SCALEPLATE_PIRATES_Targetted_Individual_Construct_Description,                            $RewardLib = SCALEPLATE_PIRATES_Targetted_Individual_Construct_Reward,                            $MinMissions = 3,                            $MaxMissions = 4]"/>
                    <assert value="not $ManagerCue.$ThreadDefinitions.{$ThreadID}?" text="'Thread definition ' + $ThreadID + ' already exists in this table [Owen]'"/>
                    <set_value name="$ManagerCue.$ThreadDefinitions.{$ThreadID}" exact="$Thread"/>
                  </actions>
                  <patch sinceversion="3" state="complete">
                    <set_value name="$ManagerCue.$ThreadDefinitions.$SCALEPLATE_PIRATES_Targetted_Individual.$RewardLib" exact="SCALEPLATE_PIRATES_Targetted_Individual_Construct_Reward"/>
                  </patch>
                  <patch sinceversion="4" state="complete">
                    <set_value name="$ManagerCue.$ThreadDefinitions.$SCALEPLATE_PIRATES_Targetted_Individual.$MinMissions" exact="3"/>
                  </patch>
                </cue>
                <!--Called from CalculateThreads. Result saved to $New_Thread. Namespace is not this parent.-->
                <library name="SCALEPLATE_PIRATES_Targetted_Individual_Get_Submissions">
                  <actions>
                    <set_value name="$Submissions" exact="table[]"/>
                    <!--TODO @Owen - These missions are sequential but not implemented as follow-up missions, so the target may change.
                    The assassinate mission is the last one, just in case the same target is selected for a previous mission. Would be better as a follow-up mission.-->
                    <set_value name="$Submissions.$track_ship" exact="table[$Cue = md.X4Ep1_Pirates_Subscriptions.TrackShip,        $MissionType = missiontype.destroy,   $Page = 30207, $TextOffset = [113000], $Sequence = 1 ]"/>
                    <set_value name="$Submissions.$retrieve_item" exact="table[$Cue = md.X4Ep1_Pirates_Subscriptions.RetrieveItem,   $MissionType = missiontype.transport, $Page = 30207, $TextOffset = [114000], $Sequence = 2 ]"/>
                    <set_value name="$Submissions.$assassinate" exact="table[$Cue = md.X4Ep1_Pirates_Subscriptions.Assassinate,      $MissionType = missiontype.kill,      $Page = 30207, $TextOffset = [107000], $Sequence = 3 ]"/>
                    <set_value name="$New_Thread.$Submissions" exact="$Submissions"/>
                  </actions>
                </library>
                <!--Called from CalculateThreads. Result saved to $New_Thread. Namespace is not this parent.-->
                <library name="SCALEPLATE_PIRATES_Targetted_Individual_Construct_Name">
                  <actions>
                    <do_any>
                      <set_value name="this.$Name" exact="{30207, 10}"/>
                    </do_any>
                  </actions>
                </library>
                <!--Called from CalculateThreads where several values are set to help decide the briefing text. Result saved to $New_Thread. Namespace is not this parent.-->
                <library name="SCALEPLATE_PIRATES_Targetted_Individual_Construct_Description">
                  <actions>
                    <do_if value="$ThreadMood == 'negative'">
                      <do_any>
                        <set_value name="this.$Description" exact="{30207, 11}"/>
                      </do_any>
                    </do_if>
                    <do_elseif value="$ThreadMood == 'positive'">
                      <do_any>
                        <set_value name="this.$Description" exact="{30207, 11}"/>
                      </do_any>
                    </do_elseif>
                  </actions>
                </library>
                <library name="SCALEPLATE_PIRATES_Targetted_Individual_Construct_Reward">
                  <actions>
                    <do_any>
                      <set_value name="this.$RewardObject" exact="[]" weight="40"/>
                      <set_value name="this.$RewardObject" exact="[[ware.modpart_extendedfuelcontainer, ware.modpart_nividiumoxide, ware.modpart_enginefuelinjector_t1, ware.modpart_enginefuelinjector_t2].random]" weight="10" comment="modpart"/>
                      <set_value name="this.$RewardObject" exact="[ware.modpart_extendedfuelcontainer, ware.modpart_nividiumoxide, [ware.modpart_enginefuelinjector_t1, ware.modpart_enginefuelinjector_t2].random]" weight="10" comment="complete mod"/>
                      <set_value name="this.$RewardObject" exact="[[ware.modpart_highenergycatalyst, ware.modpart_tuningsoftware, ware.modpart_weaponchamber_t1, ware.modpart_weaponchamber_t2].random]" weight="10"/>
                      <set_value name="this.$RewardObject" exact="[ware.modpart_highenergycatalyst, ware.modpart_tuningsoftware, [ware.modpart_weaponchamber_t1, ware.modpart_weaponchamber_t2].random]" weight="10"/>
                      <set_value name="this.$RewardObject" exact="[[ware.inv_seminar_piloting_2, ware.inv_seminar_management_2].random]" weight="6"/>
                      <set_value name="this.$RewardObject" exact="[[ware.inv_seminar_piloting_3, ware.inv_seminar_management_3].random]" weight="3"/>
                    </do_any>
                    <append_to_list name="this.$RewardObject" exact="ware.paintmod_0075" chance="15"/>
                    <run_actions ref="md.LIB_Generic.GenerateRewardText" result="this.$RewardText">
                      <param name="RewardObject" value="this.$RewardObject"/>
                    </run_actions>
                  </actions>
                </library>
              </cues>
            </cue>
            <cue name="SCALEPLATE_PIRATES_Boarding_Operations">
              <cues>
                <cue name="SCALEPLATE_PIRATES_Boarding_Operations_Register" version="3">
                  <actions>
                    <!--Scaleplate - Boarding Operation-->
                    <set_value name="$ThreadID" exact="'$SCALEPLATE_PIRATES_Boarding_Operations'"/>
                    <set_value name="$Thread" exact="table[                            $ID = $ThreadID,                            $Faction = $Faction,                            $MissionGroup = $MissionGroup,                            $ThreadConditionLibs = [Situation__Always],                            $ThreadType = 'sequential',                            $MissionType = missiontype.trade,                            $Difficulty = level.medium,                            $SubMissionLib = SCALEPLATE_PIRATES_Boarding_Operations_Get_Submissions,                            $NameLib = SCALEPLATE_PIRATES_Boarding_Operations_Construct_Name,                            $DescriptionLib = SCALEPLATE_PIRATES_Boarding_Operations_Construct_Description,                            $RewardLib = SCALEPLATE_PIRATES_Boarding_Operations_Construct_Reward,                            $MinMissions = 2,                            $MaxMissions = 2]"/>
                    <assert value="not $ManagerCue.$ThreadDefinitions.{$ThreadID}?" text="'Thread definition ' + $ThreadID + ' already exists in this table [Owen]'"/>
                    <set_value name="$ManagerCue.$ThreadDefinitions.{$ThreadID}" exact="$Thread"/>
                  </actions>
                  <patch sinceversion="3" state="complete">
                    <set_value name="$ManagerCue.$ThreadDefinitions.$SCALEPLATE_PIRATES_Boarding_Operations.$RewardLib" exact="SCALEPLATE_PIRATES_Boarding_Operations_Construct_Reward"/>
                  </patch>
                </cue>
                <!--Called from CalculateThreads. Result saved to $New_Thread. Namespace is not this parent.-->
                <library name="SCALEPLATE_PIRATES_Boarding_Operations_Get_Submissions">
                  <actions>
                    <set_value name="$Submissions" exact="table[]"/>
                    <set_value name="$Submissions.$get_exact_crew" exact="table[$Cue = md.X4Ep1_Pirates_Subscriptions.Get_Exact_Crew,  $MissionType = missiontype.deliver, $Page = 30207, $TextOffset = [104000], $Sequence = 1 ]"/>
                    <set_value name="$Submissions.$board_ship" exact="table[$Cue = md.X4Ep1_Pirates_Subscriptions.BoardShip,       $MissionType = missiontype.board,   $Page = 30207, $TextOffset = [103000], $Sequence = 2 ]"/>
                    <set_value name="$New_Thread.$Submissions" exact="$Submissions"/>
                  </actions>
                </library>
                <!--Called from CalculateThreads. Result saved to $New_Thread. Namespace is not this parent.-->
                <library name="SCALEPLATE_PIRATES_Boarding_Operations_Construct_Name">
                  <actions>
                    <do_any>
                      <set_value name="this.$Name" exact="{30207, 20}"/>
                    </do_any>
                  </actions>
                </library>
                <!--Called from CalculateThreads where several values are set to help decide the briefing text. Result saved to $New_Thread. Namespace is not this parent.-->
                <library name="SCALEPLATE_PIRATES_Boarding_Operations_Construct_Description">
                  <actions>
                    <do_if value="$ThreadMood == 'negative'">
                      <do_any>
                        <set_value name="this.$Description" exact="{30207, 21}"/>
                      </do_any>
                    </do_if>
                    <do_elseif value="$ThreadMood == 'positive'">
                      <do_any>
                        <set_value name="this.$Description" exact="{30207, 21}"/>
                      </do_any>
                    </do_elseif>
                  </actions>
                </library>
                <library name="SCALEPLATE_PIRATES_Boarding_Operations_Construct_Reward">
                  <actions>
                    <do_any>
                      <set_value name="this.$RewardObject" exact="[]" weight="40"/>
                      <set_value name="this.$RewardObject" exact="[[ware.modpart_highenergycatalyst, ware.modpart_tuningsoftware, ware.modpart_weaponchamber_t1, ware.modpart_weaponchamber_t2].random]" weight="20"/>
                      <set_value name="this.$RewardObject" exact="[ware.modpart_highenergycatalyst, ware.modpart_tuningsoftware, [ware.modpart_weaponchamber_t1, ware.modpart_weaponchamber_t2].random]" weight="20"/>
                      <set_value name="this.$RewardObject" exact="[[ware.modpart_weaponchamber_t3].random]" weight="10"/>
                      <set_value name="this.$RewardObject" exact="[[ware.inv_seminar_piloting_4, ware.inv_seminar_management_4].random]" weight="10"/>
                    </do_any>
                    <append_to_list name="this.$RewardObject" exact="ware.paintmod_0075" chance="15"/>
                    <run_actions ref="md.LIB_Generic.GenerateRewardText" result="this.$RewardText">
                      <param name="RewardObject" value="this.$RewardObject"/>
                    </run_actions>
                  </actions>
                </library>
              </cues>
            </cue>
            <cue name="SCALEPLATE_PIRATES_Undermine_Opponent">
              <cues>
                <cue name="SCALEPLATE_PIRATES_Undermine_Opponent_Register" version="3">
                  <actions>
                    <!--Scaleplate - Undermind Opponent-->
                    <set_value name="$ThreadID" exact="'$SCALEPLATE_PIRATES_Undermine_Opponent'"/>
                    <set_value name="$Thread" exact="table[                            $ID = $ThreadID,                            $Faction = $Faction,                            $MissionGroup = $MissionGroup,                            $ThreadConditionLibs = [Situation__Always],                            $ThreadType = 'sequential',                            $MissionType = missiontype.trade,                            $Difficulty = level.medium,                            $SubMissionLib = SCALEPLATE_PIRATES_Undermine_Opponent_Get_Submissions,                            $NameLib = SCALEPLATE_PIRATES_Undermine_Opponent_Construct_Name,                            $DescriptionLib = SCALEPLATE_PIRATES_Undermine_Opponent_Construct_Description,                            $RewardLib = SCALEPLATE_PIRATES_Undermine_Opponent_Construct_Reward,                            $MinMissions = 2,                            $MaxMissions = 4]"/>
                    <assert value="not $ManagerCue.$ThreadDefinitions.{$ThreadID}?" text="'Thread definition ' + $ThreadID + ' already exists in this table [Owen]'"/>
                    <set_value name="$ManagerCue.$ThreadDefinitions.{$ThreadID}" exact="$Thread"/>
                  </actions>
                  <patch sinceversion="3" state="complete">
                    <set_value name="$ManagerCue.$ThreadDefinitions.$SCALEPLATE_PIRATES_Undermine_Opponent.$RewardLib" exact="SCALEPLATE_PIRATES_Undermine_Opponent_Construct_Reward"/>
                  </patch>
                </cue>
                <!--Called from CalculateThreads. Result saved to $New_Thread. Namespace is not this parent.-->
                <library name="SCALEPLATE_PIRATES_Undermine_Opponent_Get_Submissions">
                  <actions>
                    <set_value name="$Submissions" exact="table[]"/>
                    <set_value name="$Submissions.$destroy_satellites" exact="table[$Cue = md.X4Ep1_Pirates_Subscriptions.DestroyObject,      $MissionType = missiontype.destroy,       $Page = 30207, $TextOffset = [100000], $Sequence = -1 ]"/>
                    <set_value name="$Submissions.$destroy_mines" exact="table[$Cue = md.X4Ep1_Pirates_Subscriptions.DestroyObject,      $MissionType = missiontype.destroy,       $Page = 30207, $TextOffset = [100100], $Sequence = -1 ]"/>
                    <set_value name="$Submissions.$disrupt_station" exact="table[$Cue = md.X4Ep1_Pirates_Subscriptions.DestroyObject,      $MissionType = missiontype.destroy,       $Page = 30207, $TextOffset = [100200], $Sequence = -1 ]"/>
                    <set_value name="$Submissions.$kill_masstraffic" exact="table[$Cue = md.X4Ep1_Pirates_Subscriptions.KillMasstraffic,    $MissionType = missiontype.destroy,       $Page = 30207, $TextOffset = [101000], $Sequence = -1 ]"/>
                    <set_value name="$Submissions.$taxi__saboteur" exact="table[$Cue = md.X4Ep1_Pirates_Subscriptions.Passenger_Transport,  $MissionType = missiontype.transport, $Page = 30207, $TextOffset = [102000], $Sequence = -1 ]"/>
                    <set_value name="$Submissions.$hack_panel" exact="table[$Cue = md.X4Ep1_Pirates_Subscriptions.HackPanel,          $MissionType = missiontype.trade,         $Page = 30207, $TextOffset = [115000], $Sequence = -1 ]"/>
                    <set_value name="$New_Thread.$Submissions" exact="$Submissions"/>
                  </actions>
                </library>
                <!--Called from CalculateThreads. Result saved to $New_Thread. Namespace is not this parent.-->
                <library name="SCALEPLATE_PIRATES_Undermine_Opponent_Construct_Name">
                  <actions>
                    <do_any>
                      <set_value name="this.$Name" exact="{30207, 30}"/>
                    </do_any>
                  </actions>
                </library>
                <!--Called from CalculateThreads where several values are set to help decide the briefing text. Result saved to $New_Thread. Namespace is not this parent.-->
                <library name="SCALEPLATE_PIRATES_Undermine_Opponent_Construct_Description">
                  <actions>
                    <do_if value="$ThreadMood == 'negative'">
                      <do_any>
                        <set_value name="this.$Description" exact="{30207, 31}"/>
                      </do_any>
                    </do_if>
                    <do_elseif value="$ThreadMood == 'positive'">
                      <do_any>
                        <set_value name="this.$Description" exact="{30207, 31}"/>
                      </do_any>
                    </do_elseif>
                  </actions>
                </library>
                <library name="SCALEPLATE_PIRATES_Undermine_Opponent_Construct_Reward">
                  <actions>
                    <do_any>
                      <set_value name="this.$RewardObject" exact="[]" weight="40"/>
                      <set_value name="this.$RewardObject" exact="[[ware.modpart_extendedfuelcontainer, ware.modpart_nividiumoxide, ware.modpart_enginefuelinjector_t1, ware.modpart_enginefuelinjector_t2].random]" weight="10" comment="modpart"/>
                      <set_value name="this.$RewardObject" exact="[ware.modpart_extendedfuelcontainer, ware.modpart_nividiumoxide, [ware.modpart_enginefuelinjector_t1].random]" weight="10" comment="complete mod"/>
                      <set_value name="this.$RewardObject" exact="[[ware.modpart_highenergycatalyst, ware.modpart_tuningsoftware, ware.modpart_weaponchamber_t1, ware.modpart_weaponchamber_t2].random]" weight="10"/>
                      <set_value name="this.$RewardObject" exact="[ware.modpart_highenergycatalyst, ware.modpart_tuningsoftware, [ware.modpart_weaponchamber_t1].random]" weight="10"/>
                      <set_value name="this.$RewardObject" exact="[[ware.inv_seminar_piloting_2, ware.inv_seminar_management_2].random]" weight="6"/>
                      <set_value name="this.$RewardObject" exact="[[ware.inv_seminar_piloting_3, ware.inv_seminar_management_3].random]" weight="3"/>
                    </do_any>
                    <append_to_list name="this.$RewardObject" exact="ware.paintmod_0075" chance="15"/>
                    <run_actions ref="md.LIB_Generic.GenerateRewardText" result="this.$RewardText">
                      <param name="RewardObject" value="this.$RewardObject"/>
                    </run_actions>
                  </actions>
                </library>
              </cues>
            </cue>
            <cue name="SCALEPLATE_PIRATES_Danger_Area">
              <cues>
                <cue name="SCALEPLATE_PIRATES_Danger_Area_Register" version="3">
                  <actions>
                    <!--Scaleplate - Danger Area-->
                    <set_value name="$ThreadID" exact="'$SCALEPLATE_PIRATES_Danger_Area'"/>
                    <set_value name="$Thread" exact="table[                            $ID = $ThreadID,                            $Faction = $Faction,                            $MissionGroup = $MissionGroup,                            $ThreadConditionLibs = [Situation__Always],                            $ThreadType = 'sequential',                            $MissionType = missiontype.trade,                            $Difficulty = level.medium,                            $SubMissionLib = SCALEPLATE_PIRATES_Danger_Area_Get_Submissions,                            $NameLib = SCALEPLATE_PIRATES_Danger_Area_Construct_Name,                            $DescriptionLib = SCALEPLATE_PIRATES_Danger_Area_Construct_Description,                            $RewardLib = SCALEPLATE_PIRATES_Danger_Area_Construct_Reward,                            $MinMissions = 2,                            $MaxMissions = 4]"/>
                    <assert value="not $ManagerCue.$ThreadDefinitions.{$ThreadID}?" text="'Thread definition ' + $ThreadID + ' already exists in this table [Owen]'"/>
                    <set_value name="$ManagerCue.$ThreadDefinitions.{$ThreadID}" exact="$Thread"/>
                  </actions>
                  <patch sinceversion="3" state="complete">
                    <set_value name="$ManagerCue.$ThreadDefinitions.$SCALEPLATE_PIRATES_Danger_Area.$RewardLib" exact="SCALEPLATE_PIRATES_Danger_Area_Construct_Reward"/>
                  </patch>
                </cue>
                <!--Called from CalculateThreads. Result saved to $New_Thread. Namespace is not this parent.-->
                <library name="SCALEPLATE_PIRATES_Danger_Area_Get_Submissions">
                  <actions>
                    <set_value name="$Submissions" exact="table[]"/>
                    <set_value name="$Submissions.$destroy_mines" exact="table[$Cue = md.X4Ep1_Pirates_Subscriptions.DestroyObject,  $MissionType = missiontype.destroy, $Page = 30207, $TextOffset = [100100], $Sequence = -1 ]"/>
                    <!-- TODO @Owen 106200 (blockage to prevent someone frome escaping sector) could be followed up with a killmission -->
                    <set_value name="$Submissions.$deploy_in_place_disrupt_trade" exact="table[$Cue = md.X4Ep1_Pirates_Subscriptions.DeployInPlace,  $MissionType = missiontype.drop,    $Page = 30207, $TextOffset = [106000,106100,106200], $Sequence = -1 ]"/>
                    <set_value name="$Submissions.$assassinate" exact="table[$Cue = md.X4Ep1_Pirates_Subscriptions.Assassinate,    $MissionType = missiontype.drop,    $Page = 30207, $TextOffset = [107100], $Sequence = -1 ]"/>
                    <set_value name="$New_Thread.$Submissions" exact="$Submissions"/>
                  </actions>
                </library>
                <!--Called from CalculateThreads. Result saved to $New_Thread. Namespace is not this parent.-->
                <library name="SCALEPLATE_PIRATES_Danger_Area_Construct_Name">
                  <actions>
                    <do_any>
                      <set_value name="this.$Name" exact="{30207, 40}"/>
                    </do_any>
                  </actions>
                </library>
                <!--Called from CalculateThreads where several values are set to help decide the briefing text. Result saved to $New_Thread. Namespace is not this parent.-->
                <library name="SCALEPLATE_PIRATES_Danger_Area_Construct_Description">
                  <actions>
                    <do_if value="$ThreadMood == 'negative'">
                      <do_any>
                        <set_value name="this.$Description" exact="{30207, 41}"/>
                      </do_any>
                    </do_if>
                    <do_elseif value="$ThreadMood == 'positive'">
                      <do_any>
                        <set_value name="this.$Description" exact="{30207, 41}"/>
                      </do_any>
                    </do_elseif>
                  </actions>
                </library>
                <library name="SCALEPLATE_PIRATES_Danger_Area_Construct_Reward">
                  <actions>
                    <do_any>
                      <set_value name="this.$RewardObject" exact="[]" weight="40"/>
                      <set_value name="this.$RewardObject" exact="[[ware.modpart_highenergycatalyst, ware.modpart_tuningsoftware, ware.modpart_weaponchamber_t1, ware.modpart_weaponchamber_t2].random]" weight="10"/>
                      <set_value name="this.$RewardObject" exact="[ware.modpart_highenergycatalyst, ware.modpart_tuningsoftware, [ware.modpart_weaponchamber_t1, ware.modpart_weaponchamber_t2].random]" weight="10"/>
                      <set_value name="this.$RewardObject" exact="[[ware.modpart_tuningsoftware, ware.modpart_shieldgeneratorcoil_t1, ware.modpart_shieldgeneratorcoil_t2].random]" weight="10" comment="modpart"/>
                      <set_value name="this.$RewardObject" exact="[ware.modpart_tuningsoftware, [ware.modpart_shieldgeneratorcoil_t1, ware.modpart_shieldgeneratorcoil_t2].random]" weight="10" comment="complete mod"/>
                      <set_value name="this.$RewardObject" exact="[[ware.inv_seminar_piloting_2, ware.inv_seminar_management_2].random]" weight="6"/>
                      <set_value name="this.$RewardObject" exact="[[ware.inv_seminar_piloting_3, ware.inv_seminar_management_3].random]" weight="3"/>
                    </do_any>
                    <append_to_list name="this.$RewardObject" exact="ware.paintmod_0075" chance="15"/>
                    <run_actions ref="md.LIB_Generic.GenerateRewardText" result="this.$RewardText">
                      <param name="RewardObject" value="this.$RewardObject"/>
                    </run_actions>
                  </actions>
                </library>
              </cues>
            </cue>
            <cue name="SCALEPLATE_PIRATES_Drug_Cartel">
              <cues>
                <cue name="SCALEPLATE_PIRATES_Drug_Cartel_Register" version="3">
                  <actions>
                    <!--Scaleplate - Drug Cartel-->
                    <set_value name="$ThreadID" exact="'$SCALEPLATE_PIRATES_Drug_Cartel'"/>
                    <set_value name="$Thread" exact="table[                            $ID = $ThreadID,                            $Faction = $Faction,                            $MissionGroup = $MissionGroup,                            $ThreadConditionLibs = [Situation__Always],                            $ThreadType = 'sequential',                            $MissionType = missiontype.trade,                            $Difficulty = level.medium,                            $SubMissionLib = SCALEPLATE_PIRATES_Drug_Cartel_Get_Submissions,                            $NameLib = SCALEPLATE_PIRATES_Drug_Cartel_Construct_Name,                            $DescriptionLib = SCALEPLATE_PIRATES_Drug_Cartel_Construct_Description,                            $RewardLib = SCALEPLATE_PIRATES_Drug_Cartel_Construct_Reward,                            $MinMissions = 2,                            $MaxMissions = 4]"/>
                    <assert value="not $ManagerCue.$ThreadDefinitions.{$ThreadID}?" text="'Thread definition ' + $ThreadID + ' already exists in this table [Owen]'"/>
                    <set_value name="$ManagerCue.$ThreadDefinitions.{$ThreadID}" exact="$Thread"/>
                  </actions>
                  <patch sinceversion="3" state="complete">
                    <set_value name="$ManagerCue.$ThreadDefinitions.$SCALEPLATE_PIRATES_Drug_Cartel.$RewardLib" exact="SCALEPLATE_PIRATES_Drug_Cartel_Construct_Reward"/>
                  </patch>
                </cue>
                <!--Called from CalculateThreads. Result saved to $New_Thread. Namespace is not this parent.-->
                <library name="SCALEPLATE_PIRATES_Drug_Cartel_Get_Submissions">
                  <actions>
                    <set_value name="$Submissions" exact="table[]"/>
                    <set_value name="$Submissions.$smuggle_item" exact="table[$Cue = md.X4Ep1_Pirates_Subscriptions.SmuggleItem,        $MissionType = missiontype.deliver,   $Page = 30207, $TextOffset = [109000], $Sequence = -1 ]"/>
                    <set_value name="$Submissions.$supply_factory" exact="table[$Cue = md.X4Ep1_Pirates_Subscriptions.Supply_Factory,   $MissionType = missiontype.trade,     $Page = 30207, $TextOffset = [110000], $Sequence = -1 ]"/>
                    <set_value name="$New_Thread.$Submissions" exact="$Submissions"/>
                  </actions>
                </library>
                <!--Called from CalculateThreads. Result saved to $New_Thread. Namespace is not this parent.-->
                <library name="SCALEPLATE_PIRATES_Drug_Cartel_Construct_Name">
                  <actions>
                    <do_any>
                      <set_value name="this.$Name" exact="{30207, 50}"/>
                    </do_any>
                  </actions>
                </library>
                <!--Called from CalculateThreads where several values are set to help decide the briefing text. Result saved to $New_Thread. Namespace is not this parent.-->
                <library name="SCALEPLATE_PIRATES_Drug_Cartel_Construct_Description">
                  <actions>
                    <do_if value="$ThreadMood == 'negative'">
                      <do_any>
                        <set_value name="this.$Description" exact="{30207, 51}"/>
                      </do_any>
                    </do_if>
                    <do_elseif value="$ThreadMood == 'positive'">
                      <do_any>
                        <set_value name="this.$Description" exact="{30207, 51}"/>
                      </do_any>
                    </do_elseif>
                  </actions>
                </library>
                <library name="SCALEPLATE_PIRATES_Drug_Cartel_Construct_Reward">
                  <actions>
                    <do_any>
                      <set_value name="this.$RewardObject" exact="[]" weight="30"/>
                      <set_value name="this.$RewardObject" exact="[[ware.modpart_extendedfuelcontainer, ware.modpart_nividiumoxide, ware.modpart_enginefuelinjector_t1, ware.modpart_enginefuelinjector_t2].random]" weight="25" comment="modpart"/>
                      <set_value name="this.$RewardObject" exact="[ware.modpart_extendedfuelcontainer, ware.modpart_nividiumoxide, [ware.modpart_enginefuelinjector_t1].random]" weight="25" comment="complete mod"/>
                      <set_value name="this.$RewardObject" exact="[[ware.inv_seminar_piloting_2, ware.inv_seminar_management_2].random]" weight="6"/>
                      <set_value name="this.$RewardObject" exact="[[ware.inv_seminar_piloting_3, ware.inv_seminar_management_3].random]" weight="3"/>
                    </do_any>
                    <append_to_list name="this.$RewardObject" exact="ware.paintmod_0075" chance="15"/>
                    <run_actions ref="md.LIB_Generic.GenerateRewardText" result="this.$RewardText">
                      <param name="RewardObject" value="this.$RewardObject"/>
                    </run_actions>
                  </actions>
                </library>
              </cues>
            </cue>
          </cues>
        </cue>
        <!--
        ############################
        Mission Thread Condition Libraries
        ############################-->
        <!-- For debugging, to always enable a specific subscription -->
        <library name="Situation__Always">
          <actions>
            <set_value name="$SituationValid" exact="true"/>
          </actions>
        </library>
        <cue name="GenerateAreaTables" instantiate="true">
          <conditions>
            <event_cue_signalled/>
          </conditions>
          <actions>
            <clear_list list="$Areas"/>
            <!--
            $Areas = [
              table[
                $Faction = Host faction of the mission threads
                $Clusters = All clusters related to this area (used for mission thread visibility)
                $Sectors = All sectors in the related clusters
                $HostSectors = All sectors owned or contested by the host faction
                $EnemyContestedSectors = All host faction sectors which are also contested by an enemy faction
                $EnemySectors = All related sectors which are primarily owned by an enemy faction
                $OtherSectors = All related sectors which do not involve the host faction or an enemy faction
                $ActiveSituations = list of situation libraries which currently pass for this warfront e.g. Situation__Invading. Populated when iterating over potential threads
                ]
            ]-->
            <set_value name="$ThreadRelatedFactions" exact="[]"/>
            <set_value name="$ThreadDefinitionIDs" exact="$ThreadDefinitions.keys.list"/>
            <do_all exact="$ThreadDefinitionIDs.count" counter="$i">
              <do_if value="$ThreadDefinitions.{$ThreadDefinitionIDs.{$i}}.$Faction.isactive and not $ThreadRelatedFactions.indexof.{$ThreadDefinitions.{$ThreadDefinitionIDs.{$i}}.$Faction}">
                <append_to_list name="$ThreadRelatedFactions" exact="$ThreadDefinitions.{$ThreadDefinitionIDs.{$i}}.$Faction"/>
              </do_if>
            </do_all>
            <do_all exact="$ThreadRelatedFactions.count" counter="$i">
              <set_value name="$Faction" exact="$ThreadRelatedFactions.{$i}"/>
              <find_station_by_true_owner name="$PirateStations" space="player.galaxy" faction="$Faction" multiple="true"/>
              <!--Add all clusters of the faction related sectors to a list-->
              <set_value name="$Clusters" exact="[]"/>
              <do_for_each name="$PirateStation" in="$PirateStations">
                <do_if value="not $Clusters.indexof.{$PirateStation.cluster}">
                  <append_to_list name="$Clusters" exact="$PirateStation.cluster"/>
                </do_if>
              </do_for_each>
              <remove_value name="$PirateStations"/>
              <shuffle_list list="$Clusters"/>
              <set_value name="$ProcessedClusters" exact="[]"/>
              <!--Loop over the faction related clusters-->
              <do_all exact="$Clusters.count" counter="$j">
                <set_value name="$AnchorCluster" exact="$Clusters.{$j}"/>
                <do_if value="not $ProcessedClusters.indexof.{$AnchorCluster}">
                  <set_value name="$NewArea" exact="table[                      $Faction = $Faction,                      $Clusters = [],                      $Sectors = [],                      $HostSectors = [],                      $EnemyContestedSectors = [],                      $EnemySectors = [],                      $OtherSectors = [],                      $ActiveSituations = [],                      ]"/>
                  <append_to_list name="$Areas" exact="$NewArea"/>
                  <debug_text text="'** Processing anchor cluster: ' + $AnchorCluster + ' ' + $AnchorCluster.knownname" chance="$DebugChance2"/>
                  <append_to_list name="$ProcessedClusters" exact="$AnchorCluster"/>
                  <append_to_list name="$NewArea.$Clusters" exact="$AnchorCluster"/>
                  <!--Find adjacent clusters-->
                  <find_cluster_in_range name="$AdjacentClusters" mindistance="1" maxdistance="1" object="$AnchorCluster" multiple="true"/>
                  <do_all exact="$AdjacentClusters.count" counter="$k" reverse="true">
                    <!--Check if any of these clusters have already been processed, meaning already part of another mission thread 'Area'-->
                    <do_if value="$ProcessedClusters.indexof.{$AdjacentClusters.{$k}}">
                      <debug_text text="'Removing processed adjacent cluster: ' + $AdjacentClusters.{$k} + ' ' + $AdjacentClusters.{$k}.knownname" chance="$DebugChance2"/>
                      <remove_value name="$AdjacentClusters.{$k}"/>
                    </do_if>
                    <do_else>
                      <!--Cluster has not been processed. Add to this area.-->
                      <debug_text text="'Adding adjacent cluster: ' + $AdjacentClusters.{$k} + ' ' + $AdjacentClusters.{$k}.knownname" chance="$DebugChance2"/>
                      <append_to_list name="$NewArea.$Clusters" exact="$AdjacentClusters.{$k}"/>
                      <append_to_list name="$ProcessedClusters" exact="$AdjacentClusters.{$k}"/>
                    </do_else>
                  </do_all>
                  <!--TODO @Owen - improve finding adjacent enemy sectors. They may be 2 jump from the AnchorCluster-->
                  <!--The anchor cluster and any remaining adjacent clusters are now part of a new 'Area'-->
                  <debug_text text="'New Area: '" chance="$DebugChance"/>
                  <do_all exact="$NewArea.$Clusters.count" counter="$k">
                    <debug_text text="$NewArea.$Clusters.{$k} + ' ' + $NewArea.$Clusters.{$k}.knownname" chance="$DebugChance"/>
                    <!--Find all sectors within the cluster and add them to the relevant lists in $NewArea-->
                    <find_sector name="$ClusterSectors" space="$NewArea.$Clusters.{$k}" multiple="true"/>
                    <do_all exact="$ClusterSectors.count" counter="$m">
                      <append_to_list name="$NewArea.$Sectors" exact="$ClusterSectors.{$m}"/>
                      <find_station_by_true_owner name="$OwnerStation" faction="$Faction" space="$ClusterSectors.{$m}"/>
                      <do_if value="$OwnerStation">
                        <append_to_list name="$NewArea.$HostSectors" exact="$ClusterSectors.{$m}"/>
                      </do_if>
                      <!-- TODO: @Owen take a closer look -->
                      <!--do_if value="$ClusterSectors.{$m}.owner == $Faction">
                        <debug_text text="'Has host sector: ' + $ClusterSectors.{$m} + ' ' + $ClusterSectors.{$m}.knownname" chance="$DebugChance2"/>
                        <append_to_list name="$NewArea.$HostSectors" exact="$ClusterSectors.{$m}"/>
                      </do_if>
                      <do_elseif value="$ClusterSectors.{$m}.iscontestedby.{$Faction}">
                        <debug_text text="'Has host sector: ' + $ClusterSectors.{$m} + ' ' + $ClusterSectors.{$m}.knownname" chance="$DebugChance2"/>
                        <append_to_list name="$NewArea.$HostSectors" exact="$ClusterSectors.{$m}"/>
                        <set_value name="this.$ContestingFactions" exact="$ClusterSectors.{$m}.contestingfactions "/>
                        <do_all exact="this.$ContestingFactions.count" counter="$n">
                          <do_if value="$Faction.hasrelation.enemy.{this.$ContestingFactions.{$n}}">
                            <debug_text text="'Which is also an enemy contested sector for ' + this.$ContestingFactions.{$n}.id" chance="$DebugChance2"/>
                            <append_to_list name="$NewArea.$EnemyContestedSectors" exact="$ClusterSectors.{$m}"/>
                            <break/>
                          </do_if>
                        </do_all>
                      </do_elseif>
                      <do_elseif value="$Faction.hasrelation.enemy.{$ClusterSectors.{$m}.owner}">
                        <debug_text text="'Has enemy sector: ' + $ClusterSectors.{$m} + ' ' + $ClusterSectors.{$m}.knownname + ' for ' + $ClusterSectors.{$m}.owner.id" chance="$DebugChance2"/>
                        <append_to_list name="$NewArea.$EnemySectors" exact="$ClusterSectors.{$m}"/>
                      </do_elseif>
                      <do_else>
                        <debug_text text="'Has unrelated sector: ' + $ClusterSectors.{$m} + ' ' + $ClusterSectors.{$m}.knownname + ' for ' + $ClusterSectors.{$m}.owner.id" chance="$DebugChance2"/>
                        <append_to_list name="$NewArea.$OtherSectors" exact="$ClusterSectors.{$m}"/>
                      </do_else-->
                    </do_all>
                  </do_all>
                </do_if>
              </do_all>
            </do_all>
            <remove_value name="$Clusters"/>
          </actions>
        </cue>
        <cue name="Gamestart">
          <delay exact="2s"/>
          <actions>
            <signal_cue cue="CalculateThreads"/>
          </actions>
        </cue>
        <cue name="RegenerateAreaTable" instantiate="true" checktime="60s" checkinterval="15min">
          <actions>
            <signal_cue_instantly cue="GenerateAreaTables"/>
          </actions>
        </cue>
        <cue name="ThreadOfferTimeout" instantiate="true" checktime="60s" checkinterval="15min">
          <delay min="2s" max="5s"/>
          <actions>
            <do_all exact="$Threads.count" counter="$i" reverse="true">
              <do_if value="player.age - $Threads.{$i}.$ThreadCue.time gt 1h and $ActiveThreads.indexof.{$Threads.{$i}.$ThreadCue} == 0">
                <signal_cue_instantly cue="$Threads.{$i}.$CleanupCue"/>
              </do_if>
            </do_all>
          </actions>
        </cue>
        <cue name="CalculateThreads" instantiate="true">
          <conditions>
            <check_any>
              <event_object_changed_sector object="player.entity"/>
              <event_cue_signalled/>
            </check_any>
            <check_value value="player.sector"/>
          </conditions>
          <actions>
            <do_if value="not $ThreadList?">
              <set_value name="$ThreadList" exact="[]"/>
            </do_if>
            <set_value name="$SignalledContactCreationCues" exact="[]"/>
            <set_value name="$SignalledIntroMissions" exact="[]"/>
            <debug_text text="'Player is now in ' + player.sector + ' ' + player.sector.knownname" chance="$DebugChance"/>
            <!--TODO @Owen update areas if something changes e.g. owner-->
            <do_if value="not $Areas.count">
              <signal_cue_instantly cue="GenerateAreaTables"/>
            </do_if>
            <!--Check if the player is in an 'Area' which may be suitable to have a mission thread spawn-->
            <do_all exact="$Areas.count" counter="$i">
              <do_if value="$Areas.{$i}.$Sectors.indexof.{player.sector}">
                <debug_text text="'Player is in area which may be suitable for a mission-thread spawn'" chance="$DebugChance"/>
                <set_value name="$Area" exact="$Areas.{$i}"/>
                <set_value name="$Faction" exact="$Areas.{$i}.$Faction"/>
                <set_value name="$ThreadDefinitionIDs" exact="$ThreadDefinitions.keys.list"/>
                <do_all exact="$ThreadDefinitionIDs.count" counter="$j">
                  <set_value name="$Potential_Thread" exact="$ThreadDefinitions.{$ThreadDefinitionIDs.{$j}}"/>
                  <debug_text text="'Checking if mission thread ' + $ThreadDefinitionIDs.{$j} + ' should be spawned in the area containing sector ' + player.sector.knownname + ' for faction ' + $Faction" chance="$DebugChance2"/>
                  <do_if value="$Faction == $Potential_Thread.$Faction">
                    <set_value name="$ThreadValid" exact="true"/>
                    <!--First, check that there isn't already the same thread already running for this area-->
                    <do_all exact="$Threads.count" counter="$tc_k">
                      <do_if value="$Threads.{$tc_k}.$ThreadCue.$Definition.$ID == $Potential_Thread.$ID">
                        <set_value name="$ThreadInstanceDefinition" exact="$Threads.{$tc_k}.$ThreadCue.$Definition"/>
                        <do_if value="$ThreadInstanceDefinition.$Area.$Sectors.indexof.{$Area.$Sectors.{1}}">
                          <set_value name="$ThreadValid" exact="false"/>
                          <break/>
                        </do_if>
                      </do_if>
                    </do_all>
                    <do_if value="$ThreadValid">
                      <set_value name="$ThreadValid" exact="false"/>
                      <do_if value="@$Potential_Thread.$ThreadConditionLibs.count">
                        <do_all exact="$Potential_Thread.$ThreadConditionLibs.count" counter="$o">
                          <do_if value="$Area.$ActiveSituations.indexof.{$Potential_Thread.$ThreadConditionLibs.{$o}}">
                            <set_value name="$ThreadValid" exact="true"/>
                          </do_if>
                          <do_else>
                            <include_actions ref="$Potential_Thread.$ThreadConditionLibs.{$o}"/>
                            <do_if value="$SituationValid">
                              <append_to_list name="$Area.$ActiveSituations" exact="$Potential_Thread.$ThreadConditionLibs.{$o}"/>
                              <set_value name="$ThreadValid" exact="true"/>
                            </do_if>
                          </do_else>
                        </do_all>
                      </do_if>
                      <do_else>
                        <set_value name="$ThreadValid" exact="true"/>
                      </do_else>
                    </do_if>
                    <do_if value="$ThreadValid">
                      <set_value name="$MissionGroupCue" exact="$MissionGroupCues.{$Potential_Thread.$MissionGroup}"/>
                      <do_if value="$MissionGroupCue.$SubscriptionStatus == 'unsubscribed'">
                        <do_if value="$MissionGroupCue.$IntroMissionCue.state == cuestate.waiting and not $SignalledIntroMissions.indexof.{$MissionGroupCue.$IntroMissionCue}">
                          <do_if value="(not $MissionGroupCue.$Mission_Contact.isclass.npc or not $MissionGroupCue.$PlacementObject.isoperational) and not $SignalledContactCreationCues.indexof.{$MissionGroupCue.$ContactCreatorCue}" comment="npc class check incase of disconnected">
                            <append_to_list name="$SignalledContactCreationCues" exact="$MissionGroupCue.$ContactCreatorCue"/>
                            <signal_cue_instantly cue="$MissionGroupCue.$ContactCreatorCue" param="$Area.$HostSectors.clone"/>
                          </do_if>
                          <do_if value="$MissionGroupCue.$Mission_Contact.isclass.npc and $MissionGroupCue.$PlacementObject.isoperational">
                            <debug_text text="'Signalling intro mission cue ' + $MissionGroupCue.$IntroMissionCue + ' for mission group ' + $Potential_Thread.$MissionGroup" chance="$DebugChance"/>
                            <append_to_list name="$SignalledIntroMissions" exact="$MissionGroupCue.$IntroMissionCue"/>
                            <signal_cue cue="$MissionGroupCue.$IntroMissionCue"/>
                          </do_if>
                        </do_if>
                      </do_if>
                      <do_elseif value="$MissionGroupCue.$SubscriptionStatus == 'subscribed'">
                        <do_if value="$ActiveThreads.count == 0" comment="Don't offer new mission threads, if we already have an active mission-thread">
                          <set_value name="$New_Thread" exact="$Potential_Thread.clone"/>
                          <!--TODO @Owen sanity checks-->
                          <do_if value="not $MissionGroupCue.$Mission_Contact.isclass.npc" comment="class check incase of disconnected (should we allow disconnected contacts?)">
                            <signal_cue_instantly cue="$MissionGroupCue.$ContactCreatorCue" param="$Area.$HostSectors.clone"/>
                          </do_if>
                          <set_value name="$New_Thread.$Contact" exact="$MissionGroupCue.$Mission_Contact"/>
                          <!-- TODO: @Owen, hack in a pirate "HQ" (otherwise missions fail due to missing offer-object) -->
                          <!-- xxxxxxxxxx -->
                          <!--set_value name="$New_Thread.$HQ" exact="$New_Thread.$Contact.station"/-->
                          <set_value name="$New_Thread.$HQ" exact="$New_Thread.$Contact.$HQ"/>
                          <!--$Area should essentially be read-only, so we're not going to clone it-->
                          <set_value name="$New_Thread.$Area" exact="$Area"/>
                          <set_value name="$New_Thread.$OfferSectors" exact="$Area.$Sectors"/>
                          <set_value name="$New_Thread.$DebugChance" exact="$DebugChance"/>
                          <!--TODO @Guage the current mood of this faction-->
                          <do_any>
                            <set_value name="$ThreadMood" exact="'negative'"/>
                            <set_value name="$ThreadMood" exact="'positive'"/>
                          </do_any>
                          <do_if value="$New_Thread.$NameLib?" comment="Support for older mission threads without text construction libs">
                            <!--Get sub-missions-->
                            <include_actions ref="$New_Thread.$SubMissionLib"/>
                            <!--Get thread name-->
                            <include_actions ref="$New_Thread.$NameLib"/>
                            <set_value name="$New_Thread.$ThreadName" exact="this.$Name"/>
                            <!--Construct a suitable description-->
                            <include_actions ref="$New_Thread.$DescriptionLib"/>
                            <set_value name="$New_Thread.$ThreadDescription" exact="this.$Description"/>
                            <!-- Construct reward for this instance of the thread -->
                            <do_if value="$New_Thread.$RewardLib?">
                              <include_actions ref="$New_Thread.$RewardLib"/>
                              <do_if value="this.$Reward?">
                                <set_value name="$New_Thread.$Reward" exact="this.$Reward"/>
                              </do_if>
                              <do_if value="this.$RewardObject?">
                                <set_value name="$New_Thread.$RewardObject" exact="this.$RewardObject"/>
                              </do_if>
                              <do_if value="this.$RewardText?">
                                <set_value name="$New_Thread.$RewardText" exact="this.$RewardText"/>
                              </do_if>
                            </do_if>
                          </do_if>
                          <set_value name="$ThreadManagerParams" exact="table[                             $ThreadDefinition = $New_Thread,                             $RegisterThreadCue = Register_Thread,                             $ThreadAcceptedCue = Thread_Accepted,                             $CleanupThreadCue  = Cleanup_Thread]"/>
                          <signal_cue_instantly cue="md.MC_Management.Thread_Manager" param="$ThreadManagerParams"/>
                        </do_if>
                        <do_else>
                          <debug_text text="'Ignored (already have an active Missionthread)'" chance="$DebugChance"/>
                        </do_else>
                      </do_elseif>
                    </do_if>
                    <do_else>
                      <debug_text text="'Missionthread not (yet) valid'" chance="$DebugChance"/>
                    </do_else>
                  </do_if>
                </do_all>
              </do_if>
            </do_all>
          </actions>
        </cue>
        <!--event.param = thread table: table[$ThreadCue, $CleanupCue]-->
        <cue name="Register_Thread" instantiate="true">
          <conditions>
            <event_cue_signalled/>
          </conditions>
          <actions>
            <debug_text text="'registering %s:%s'.[event.param.$ThreadCue.$Definition.$ID, event.param.$ThreadCue.$Definition.$ThreadName]" chance="$DebugChance"/>
            <append_to_list name="$Threads" exact="event.param"/>
          </actions>
        </cue>
        <!-- Store the selected mission-thread in $ActiveThreads, and disable all other mission-thread cues of that mission group-->
        <cue name="Thread_Accepted" instantiate="true">
          <conditions>
            <event_cue_signalled/>
          </conditions>
          <actions>
            <debug_text text="'Accepted mission thread: ' + event.param.$Definition.$ID" chance="$DebugChance"/>
            <append_to_list name="$ActiveThreads" exact="event.param"/>
            <do_all exact="$Threads.count" counter="$i" reverse="true">
              <do_if value="$Threads.{$i}.$ThreadCue != event.param and $Threads.{$i}.$ThreadCue.$Definition.$MissionGroup == event.param.$Definition.$MissionGroup">
                <set_value name="$Threads.{$i}.$CleanupCue.namespace.$Failed" exact="true"/>
                <!--TODO @Owen This will stop the mission group going into cooldown when replacing an active mission but maybe we should have a different penalty on aborting missions-->
                <set_value name="$Threads.{$i}.$CleanupCue.namespace.$Interrupted" exact="true"/>
                <signal_cue_instantly cue="$Threads.{$i}.$CleanupCue"/>
              </do_if>
            </do_all>
          </actions>
        </cue>
        <!--event.param = table[
        $cue                = thread cue namespace,
        $completedmissions  = number of completed missions,
        $failedmissions     = number of failed missions]-->
        <cue name="Cleanup_Thread" instantiate="true">
          <conditions>
            <event_cue_signalled/>
          </conditions>
          <actions>
            <debug_text text="'Attempting to clean up mission thread: ' + event.param.$cue.$Definition.$ID" chance="$DebugChance"/>
            <set_value name="this.$ActiveThreadIdx" exact="$ActiveThreads.indexof.{event.param.$cue}"/>
            <do_if value="this.$ActiveThreadIdx">
              <remove_value name="$ActiveThreads.{this.$ActiveThreadIdx}"/>
            </do_if>
            <set_value name="this.$Removed" exact="false"/>
            <do_all exact="$Threads.count" counter="$Cleanup_Thread_i" reverse="true">
              <do_if value="$Threads.{$Cleanup_Thread_i}.$ThreadCue == event.param.$cue">
                <assert value="not this.$Removed" text="'Matching thread was already removed. Should not happen again. Thread: ' + event.param.$cue.$Definition.$ID + ' [Owen]'"/>
                <set_value name="this.$Removed" exact="true"/>
                <remove_value name="$Threads.{$Cleanup_Thread_i}"/>
              </do_if>
            </do_all>
            <assert value="this.$Removed" text="'No matching thread was found to be removed. Thread: ' + event.param.$cue.$Definition.$ID + ' [Owen]'"/>
          </actions>
        </cue>
      </cues>
    </cue>
    <!--Generic Event-handling code -->
    <library name="MM_GM_Event">
      <actions>
        <do_if value="@static.$EndFeedbackValue" comment="Evaluate return-value of GM (success/failure)">
          <debug_text text="'Mission ended. feedback' + static.$EndFeedbackValue" chance="$DebugChance"/>
          <do_if value="$SuccessfullyGenerated">
            <signal_cue_instantly cue="$Definition.$EndedCue" param="namespace"/>
          </do_if>
          <do_else>
            <signal_cue_instantly cue="$Definition.$SpawnFailedCue"/>
          </do_else>
          <do_if value="static.$EndFeedbackValue.$ID" exact="'$MISSION_SUCCEEDED'" comment="see the $FeedbackValues table in the Generic Mission">
            <do_if value="@$MissionDataTable.$NextMission">
              <do_if value="false" comment="Forced failure as there are no valid NextMission cases defined for this mission. Replace with valid case if needed.">

              </do_if>
              <do_else>
                <!--If there is a followup mission, signal it with whatever parameters it needs-->
                <assert value="false" text="'Next mission ' + $MissionDataTable.$NextMission + ' is missing handling in ' + namespace + '. It should be explicitly signalled with whatever parameters it requires. [Owen]'"/>
              </do_else>
            </do_if>
          </do_if>
          <do_elseif value="static.$EndFeedbackValue.$ID" exact="'$MISSION_TIMEOUT'">
          </do_elseif>
          <cancel_cue cue="namespace"/>
        </do_if>
        <do_elseif value="@static.$FeedbackValue">
          <debug_text text="'Mission signalled with feedback' + static.$FeedbackValue" chance="$DebugChance"/>
          <do_if value="static.$FeedbackValue.$ID == '$MISSION_GENERATED'">
            <!--If a followup mission, no need to inform the Mission Thread Manager of the mission successfully being generated as $Definition.$SpawnSuccessCue was already called for this mission-->
            <do_if value="not $FollowUp">
              <set_value name="$MissionDataTable" exact="event.param.clone"/>
              <set_value name="$MissionDataTable.$WrapperCue" exact="namespace"/>
              <signal_cue_instantly cue="$Definition.$SpawnSuccessCue" param="$MissionDataTable"/>
            </do_if>
            <set_value name="$SuccessfullyGenerated" exact="true"/>
          </do_if>
        </do_elseif>
      </actions>
    </library>
    <!--Submission Libraries-->
    <!--Variant Helper Libraries
    Helper libraries to be call from different threads but want to have the same basic variant rules
    If you want to have something custom for a faction e.g. if Vs Xenon, have twice as many enemies, either write your own variant within the cue itself, or modify variables after calling the library-->
    <library name="Assassinate__Enemy_S_M_Ship">
      <actions>
        <set_value name="$AreaSectors" exact="$Definition.$ThreadData.$Area.$Sectors.clone"/>
        <shuffle_list list="$AreaSectors"/>
        <set_value name="$TargetShip" exact="null"/>
        <do_all exact="$AreaSectors.count" counter="$areasectors_i">
          <find_ship name="$TargetShip" class="[class.ship_s, class.ship_m]" hascommander="false" space="$AreaSectors.{$areasectors_i}">
            <match owner="[faction.player, faction.xenon, faction.xenon1, faction.xenon2, faction.xenon3, faction.xenon4, faction.xenon5, faction.xenon6, faction.khaak]" negate="true"/>
            <match_relation_to faction="faction.scaleplate" comparison="le" relation="enemy"/>
          </find_ship>
          <do_if value="$TargetShip">
            <set_value name="$Valid" exact="2" comment="Valid mission variables"/>
            <break/>
          </do_if>
        </do_all>
        <remove_value name="$AreaSectors"/>
      </actions>
    </library>
    <cue name="Assassinate" instantiate="true" namespace="this">
      <conditions>
        <event_cue_signalled/>
        <!--Signal the static cue to trigger a new instance of this mission.
        Signalling a running instance will trigger a followup mission to run its GM library. See XXX_Activate_FollowUp cue for parameters-->
      </conditions>
      <actions>
        <set_value name="$Definition" exact="event.param"/>
        <set_value name="$Page" exact="$Definition.$Page"/>
        <set_value name="$TextOffset" exact="$Definition.$TextOffset.random"/>
        <set_value name="$FollowUp" exact="@$Definition.$FollowUp == true" comment="Does this mission follow directly after another, with parameters potentially passing between them. This changes how this mission is spawned and managed."/>
        <set_value name="$SuccessfullyGenerated" exact="false"/>
        <set_value name="$DebugChance" exact="$Definition.$ThreadData.$DebugChance"/>
        <assert value="not $FollowUp" text="'This mission does not currently have any parameters where it makes sense as a follow up mission. If there is, adjust the _Activate_FollowUp cue and remove this assert [Owen]'"/>
        <!--This mission is specific enough that it will only run if a matching text offset is found. If not, the offer will abort with an error.
        $Valid:
        0: Page/TextOffset not handled
        1: Correct Page/TextOffset but unable to setup mission
        2: Mission can attempt to be spawned -->
        <set_value name="$Valid" exact="0"/>
        <!--### SCALE PLATE PACT ###-->
        <do_if value="$Page == 30207">
          <do_if value="$TextOffset == 107000">
            <!--Targetted Individual thread-->
            <set_value name="$Valid" exact="1" comment="Valid text offset"/>
            <include_actions ref="Assassinate__Enemy_S_M_Ship"/>
          </do_if>
          <do_elseif value="$TextOffset == 107100">
            <!--Danger area thread-->
            <set_value name="$Valid" exact="1" comment="Valid text offset"/>
            <include_actions ref="Assassinate__Enemy_S_M_Ship"/>
          </do_elseif>
        </do_if>
        <do_if value="$Valid == 2">
          <do_if value="$FollowUp">
            <!--Followup missions use the namespace as the mission cue-->
            <set_value name="$MissionCue" exact="namespace"/>
          </do_if>
          <do_else>
            <set_value name="$MissionCue" exact="null"/>
          </do_else>
        </do_if>
        <do_else>
          <do_if value="$Valid == 1">
            <debug_text text="'Unable to find suitable variant variables for mission on ' + this + ' with combination of Page: ' + $Page + ' and TextOffset: ' + $TextOffset + '. [Owen]'" chance="$DebugChance"/>
          </do_if>
          <do_else>
            <assert value="false" text="'Attempting to spawn a mission on ' + this + ' but the combination of Page: ' + $Page + ' and TextOffset: ' + $TextOffset + ' do not match any definitions [Owen]'"/>
          </do_else>
          <signal_cue cue="$Definition.$SpawnFailedCue"/>
          <cancel_cue cue="this"/>
        </do_else>
      </actions>
      <cues>
        <cue name="Assassinate_FollowUp_Manager" onfail="cancel">
          <conditions>
            <check_value value="$FollowUp"/>
          </conditions>
          <actions>
            <!--If this is going to be a followup mission, first, inform the mission thread manager of this submission so it can be displayed in the offer.-->
            <!--Currently means you need to find the mission name here, instead of relying on the GM itself finding it.-->
            <set_value name="$MissionName" exact="readtext.{$Page}.{$TextOffset + 1}"/>
            <set_value name="$MissionDescription" exact="readtext.{$Page}.{$TextOffset + 2}"/>
            <debug_text text="'Attempting to signal the mission thread that followup mission cue ' + $MissionCue + ' is ready to be added to the offer'" chance="$DebugChance"/>
            <set_value name="$MissionDataTable" exact="table[$Name = $MissionName, $Cue = $MissionCue, $WrapperCue = $MissionCue, $FollowUp = true]"/>
            <signal_cue_instantly cue="$Definition.$SpawnSuccessCue" param="$MissionDataTable"/>
          </actions>
          <cues>
            <cue name="Assassinate_FollowUp_Offer_Accepted">
              <conditions>
                <event_cue_signalled cue="$Definition.$OfferAcceptedCue"/>
                <check_value value="event.param == $MissionCue"/>
              </conditions>
              <actions>
                <!--We don't want to call the GM yet. Create the mission here and pass it into the GM when the previous mission ends
                TODO @Owen Move this to a library in the GM file?-->
                <create_mission cue="$MissionCue" missionthread="$Definition.$ThreadCue" name="$MissionName" description="$MissionDescription" faction="$Definition.$ThreadData.$Faction" type="missiontype.deliver">
                  <briefing>
                    <!--TODO @Owen Better objective?-->
                    <objective step="1" action="objective.find"/>
                  </briefing>
                </create_mission>
              </actions>
            </cue>
            <cue name="Assassinate_Aborted">
              <conditions>
                <event_cue_signalled cue="$Definition.$ForceCleanupCue"/>
              </conditions>
              <actions>
                <cancel_cue cue="namespace"/>
              </actions>
            </cue>
            <!--namespace signalled to activate followup mission
            event.param = Station to supply-->
            <cue name="Assassinate_Activate_FollowUp">
              <conditions>
                <event_cue_signalled cue="namespace"/>
              </conditions>
              <actions>
                <!--Check that the correct parameters have been passed-->
                <do_if value="false">
                  <!--Currently no followup case for this type of mission-->
                  <signal_cue cue="Assassinate_Create_GM"/>
                  <cancel_cue cue="parent"/>
                </do_if>
                <do_else>
                  <assert value="false" text="namespace + ' was signalled to start a followup mission, but the passed parameter ' + event.param + ' was not what this mission was expecting. Ending mission.'"/>
                  <!--TODO @Owen what if there is another followup mission?-->
                  <signal_cue_instantly cue="$Definition.$EndedCue" param="namespace"/>
                  <cancel_cue cue="namespace"/>
                </do_else>
              </actions>
            </cue>
          </cues>
        </cue>
        <cue name="Assassinate_Not_FollowUp" onfail="cancel">
          <conditions>
            <check_value value="not $FollowUp"/>
          </conditions>
          <actions>
            <signal_cue cue="Assassinate_Create_GM"/>
          </actions>
        </cue>
        <cue name="Assassinate_Create_GM">
          <conditions>
            <event_cue_signalled/>
          </conditions>
          <cues>
            <!-- Trigger actual GM, passing the specified parameters -->
            <cue name="Assassinate_Ref" ref="md.GM_Assassinate.Start">
              <param name="Client" value="$Definition.$ThreadData.$Contact"/>
              <param name="MissionCue" value="$MissionCue"/>
              <param name="MissionThread" value="$Definition.$ThreadCue"/>
              <param name="ReportSignalCue" value="Assassinate_GM_Event" comment="tell GM to call this cue when done"/>
              <param name="WithoutOffer" value="true"/>
              <param name="WithoutOfferWaitCue" value="if $FollowUp then null else $Definition.$OfferAcceptedCue"/>
              <param name="ForceCleanup" value="$Definition.$ForceCleanupCue"/>
              <param name="Page" value="$Page"/>
              <param name="TextOffset" value="$TextOffset"/>
              <param name="MissionLevel" value="3"/>
              <param name="Difficulty" value="level.medium"/>
              <param name="AssassinationTarget" value="$TargetShip.pilot"/>
              <param name="DebugChance" value="$DebugChance"/>
            </cue>
            <!--Signalled by GM when an event happens e.g. mission successfully generated or mission ended.
            Feedback values saved to the static of this cue: $FeedbackValue and $EndFeedbackValue-->
            <cue name="Assassinate_GM_Event" instantiate="true">
              <conditions>
                <event_cue_signalled/>
              </conditions>
              <actions>
                <include_actions ref="MM_GM_Event"/>
              </actions>
            </cue>
          </cues>
        </cue>
      </cues>
    </cue>
    <cue name="Passenger_Transport" instantiate="true" namespace="this">
      <conditions>
        <event_cue_signalled/>
        <!--Signal the static cue to trigger a new instance of this mission.
        Signalling a running instance will trigger a followup mission to run its GM library. See XXX_Activate_FollowUp cue for parameters-->
      </conditions>
      <actions>
        <set_value name="$Definition" exact="event.param"/>
        <set_value name="$Page" exact="$Definition.$Page"/>
        <set_value name="$TextOffset" exact="$Definition.$TextOffset.random"/>
        <set_value name="$FollowUp" exact="@$Definition.$FollowUp == true" comment="Does this mission follow directly after another, with parameters potentially passing between them. This changes how this mission is spawned and managed."/>
        <set_value name="$SuccessfullyGenerated" exact="false"/>
        <set_value name="$DebugChance" exact="$Definition.$ThreadData.$DebugChance"/>
        <set_value name="$Difficulty" exact="level.medium"/>
        <assert value="not $FollowUp" text="'This mission does not currently have any parameters where it makes sense as a follow up mission. If there is, adjust the _Activate_FollowUp cue and remove this assert [Owen]'"/>
        <!--This mission is specific enough that it will only run if a matching text offset is found. If not, the offer will abort with an error.
        $Valid:
        0: Page/TextOffset not handled
        1: Correct Page/TextOffset but unable to setup mission
        2: Mission can attempt to be spawned -->
        <set_value name="$Valid" exact="0"/>
        <!--### SCALE PLATE PACT ###-->
        <do_if value="$Page == 30207">
          <do_if value="$TextOffset == 102000" comment="Transport saboteur">
            <set_value name="$Valid" exact="1" comment="Valid text offset"/>
            <!--TODO @Owen -->
          </do_if>
        </do_if>
        <do_if value="$Valid == 2">
          <do_if value="$FollowUp">
            <!--Followup missions use the namespace as the mission cue-->
            <set_value name="$MissionCue" exact="namespace"/>
          </do_if>
          <do_else>
            <set_value name="$MissionCue" exact="null"/>
          </do_else>
        </do_if>
        <do_else>
          <do_if value="$Valid == 1">
            <debug_text text="'Unable to find suitable variant variables for mission on ' + this + ' with combination of Page: ' + $Page + ' and TextOffset: ' + $TextOffset + '. [Owen]'" chance="$DebugChance"/>
          </do_if>
          <do_else>
            <assert value="false" text="'Attempting to spawn a mission on ' + this + ' but the combination of Page: ' + $Page + ' and TextOffset: ' + $TextOffset + ' do not match any definitions [Owen]'"/>
          </do_else>
          <signal_cue cue="$Definition.$SpawnFailedCue"/>
          <cancel_cue cue="this"/>
        </do_else>
      </actions>
      <cues>
        <cue name="Passenger_Transport_FollowUp_Manager" onfail="cancel">
          <conditions>
            <check_value value="$FollowUp"/>
          </conditions>
          <actions>
            <!--If this is going to be a followup mission, first, inform the mission thread manager of this submission so it can be displayed in the offer.-->
            <!--Currently means you need to find the mission name here, instead of relying on the GM itself finding it.-->
            <set_value name="$MissionName" exact="readtext.{$Page}.{$TextOffset + 1}"/>
            <set_value name="$MissionDescription" exact="readtext.{$Page}.{$TextOffset + 2}"/>
            <debug_text text="'Attempting to signal the mission thread that followup mission cue ' + $MissionCue + ' is ready to be added to the offer'" chance="$DebugChance"/>
            <set_value name="$MissionDataTable" exact="table[$Name = $MissionName, $Cue = $MissionCue, $WrapperCue = $MissionCue, $FollowUp = true]"/>
            <signal_cue_instantly cue="$Definition.$SpawnSuccessCue" param="$MissionDataTable"/>
          </actions>
          <cues>
            <cue name="Passenger_Transport_FollowUp_Offer_Accepted">
              <conditions>
                <event_cue_signalled cue="$Definition.$OfferAcceptedCue"/>
                <check_value value="event.param == $MissionCue"/>
              </conditions>
              <actions>
                <!--We don't want to call the GM yet. Create the mission here and pass it into the GM when the previous mission ends
                TODO @Owen Move this to a library in the GM file?-->
                <create_mission cue="$MissionCue" missionthread="$Definition.$ThreadCue" name="$MissionName" description="$MissionDescription" faction="$Definition.$ThreadData.$Faction" type="missiontype.deliver">
                  <briefing>
                    <!--TODO @Owen Better objective?-->
                    <objective step="1" action="objective.transport"/>
                  </briefing>
                </create_mission>
              </actions>
            </cue>
            <cue name="Passenger_Transport_Aborted">
              <conditions>
                <event_cue_signalled cue="$Definition.$ForceCleanupCue"/>
              </conditions>
              <actions>
                <cancel_cue cue="namespace"/>
              </actions>
            </cue>
            <!--namespace signalled to activate followup mission
            event.param = Station to supply-->
            <cue name="Passenger_Transport_Activate_FollowUp">
              <conditions>
                <event_cue_signalled cue="namespace"/>
              </conditions>
              <actions>
                <!--Check that the correct parameters have been passed-->
                <do_if value="false">
                  <!--Currently no followup case for this type of mission-->
                  <signal_cue cue="Passenger_Transport_Create_GM"/>
                  <cancel_cue cue="parent"/>
                </do_if>
                <do_else>
                  <assert value="false" text="namespace + ' was signalled to start a followup mission, but the passed parameter ' + event.param + ' was not what this mission was expecting. Ending mission.'"/>
                  <!--TODO @Owen what if there is another followup mission?-->
                  <signal_cue_instantly cue="$Definition.$EndedCue" param="namespace"/>
                  <cancel_cue cue="namespace"/>
                </do_else>
              </actions>
            </cue>
          </cues>
        </cue>
        <cue name="Passenger_Transport_Not_FollowUp" onfail="cancel">
          <conditions>
            <check_value value="not $FollowUp"/>
          </conditions>
          <actions>
            <signal_cue cue="Passenger_Transport_Create_GM"/>
          </actions>
        </cue>
        <cue name="Passenger_Transport_Create_GM">
          <conditions>
            <event_cue_signalled/>
          </conditions>
          <cues>
            <!-- Trigger actual GM, passing the specified parameters -->
            <cue name="Passenger_Transport_Ref" ref="md.GM_Transport_Passengers.Start">
              <param name="Client" value="$Definition.$ThreadData.$Contact"/>
              <param name="MissionCue" value="$MissionCue"/>
              <param name="MissionThread" value="$Definition.$ThreadCue"/>
              <param name="ReportSignalCue" value="Passenger_Transport_GM_Event"/>
              <param name="WithoutOffer" value="true"/>
              <param name="WithoutOfferWaitCue" value="if $FollowUp then null else $Definition.$OfferAcceptedCue"/>
              <param name="ForceCleanup" value="$Definition.$ForceCleanupCue"/>
              <param name="Page" value="$Page"/>
              <param name="TextOffset" value="$TextOffset"/>
              <param name="MissionLevel" value="3"/>
              <param name="Difficulty" value="$Difficulty"/>
              <param name="ExistingActors" value="[$TargetPassenger]"/>
              <param name="UseClient" value="false"/>
              <param name="StartContainer" value="$SourceStation"/>
              <param name="TargetContainer" value="$TargetStation"/>
              <param name="TargetDockArea" value="null"/>
              <param name="DebugChance" value="$DebugChance"/>
            </cue>
            <!--Signalled by GM when an event happens e.g. mission successfully generated or mission ended.
            Feedback values saved to the static of this cue: $FeedbackValue and $EndFeedbackValue-->
            <cue name="Passenger_Transport_GM_Event" instantiate="true">
              <conditions>
                <event_cue_signalled/>
              </conditions>
              <actions>
                <include_actions ref="MM_GM_Event"/>
              </actions>
            </cue>
          </cues>
        </cue>
      </cues>
    </cue>
    <cue name="TrackShip" instantiate="true" namespace="this">
      <conditions>
        <event_cue_signalled/>
        <!--Signal the static cue to trigger a new instance of this mission.
        Signalling a running instance will trigger a followup mission to run its GM library. See XXX_Activate_FollowUp cue for parameters-->
      </conditions>
      <actions>
        <set_value name="$Definition" exact="event.param"/>
        <set_value name="$Page" exact="$Definition.$Page"/>
        <set_value name="$TextOffset" exact="$Definition.$TextOffset.random"/>
        <set_value name="$FollowUp" exact="@$Definition.$FollowUp == true" comment="Does this mission follow directly after another, with parameters potentially passing between them. This changes how this mission is spawned and managed."/>
        <set_value name="$SuccessfullyGenerated" exact="false"/>
        <set_value name="$DebugChance" exact="$Definition.$ThreadData.$DebugChance"/>
        <assert value="not $FollowUp" text="'This mission does not currently have any parameters where it makes sense as a follow up mission. If there is, adjust the _Activate_FollowUp cue and remove this assert [Owen]'"/>
        <!--This mission is specific enough that it will only run if a matching text offset is found. If not, the offer will abort with an error.
        $Valid:
        0: Page/TextOffset not handled
        1: Correct Page/TextOffset but unable to setup mission
        2: Mission can attempt to be spawned -->
        <set_value name="$Valid" exact="0"/>
        <!--### SCALE PLATE PACT ###-->
        <do_if value="$Page == 30207">
          <do_if value="$TextOffset == 113000">
            <set_value name="$Valid" exact="1" comment="Valid text offset"/>
            <!--TODO @Owen-->
            <find_ship name="$TargetShip" masstraffic="false" space="player.sector">
              <match owner="[$Definition.$ThreadData.$Faction, faction.player, faction.xenon, faction.xenon1, faction.xenon2, faction.xenon3, faction.xenon4, faction.xenon5, faction.xenon6]" negate="true"/>
            </find_ship>
            <do_if value="$TargetShip">
              <set_value name="$Valid" exact="2" comment="Valid mission variables"/>
            </do_if>
          </do_if>
        </do_if>
        <do_if value="$Valid == 2">
          <do_if value="$FollowUp">
            <!--Followup missions use the namespace as the mission cue-->
            <set_value name="$MissionCue" exact="namespace"/>
          </do_if>
          <do_else>
            <set_value name="$MissionCue" exact="null"/>
          </do_else>
        </do_if>
        <do_else>
          <do_if value="$Valid == 1">
            <debug_text text="'Unable to find suitable variant variables for mission on ' + this + ' with combination of Page: ' + $Page + ' and TextOffset: ' + $TextOffset + '. [Owen]'" chance="$DebugChance"/>
          </do_if>
          <do_else>
            <assert value="false" text="'Attempting to spawn a mission on ' + this + ' but the combination of Page: ' + $Page + ' and TextOffset: ' + $TextOffset + ' do not match any definitions [Owen]'"/>
          </do_else>
          <signal_cue cue="$Definition.$SpawnFailedCue"/>
          <cancel_cue cue="this"/>
        </do_else>
      </actions>
      <cues>
        <cue name="TrackShip_FollowUp_Manager" onfail="cancel">
          <conditions>
            <check_value value="$FollowUp"/>
          </conditions>
          <actions>
            <!--If this is going to be a followup mission, first, inform the mission thread manager of this submission so it can be displayed in the offer.-->
            <!--Currently means you need to find the mission name here, instead of relying on the GM itself finding it.-->
            <set_value name="$MissionName" exact="readtext.{$Page}.{$TextOffset + 1}"/>
            <set_value name="$MissionDescription" exact="readtext.{$Page}.{$TextOffset + 2}"/>
            <debug_text text="'Attempting to signal the mission thread that followup mission cue ' + $MissionCue + ' is ready to be added to the offer'" chance="$DebugChance"/>
            <set_value name="$MissionDataTable" exact="table[$Name = $MissionName, $Cue = $MissionCue, $WrapperCue = $MissionCue, $FollowUp = true]"/>
            <signal_cue_instantly cue="$Definition.$SpawnSuccessCue" param="$MissionDataTable"/>
          </actions>
          <cues>
            <cue name="TrackShip_FollowUp_Offer_Accepted">
              <conditions>
                <event_cue_signalled cue="$Definition.$OfferAcceptedCue"/>
                <check_value value="event.param == $MissionCue"/>
              </conditions>
              <actions>
                <!--We don't want to call the GM yet. Create the mission here and pass it into the GM when the previous mission ends
                TODO @Owen Move this to a library in the GM file?-->
                <create_mission cue="$MissionCue" missionthread="$Definition.$ThreadCue" name="$MissionName" description="$MissionDescription" faction="$Definition.$ThreadData.$Faction" type="missiontype.deliver">
                  <briefing>
                    <!--TODO @Owen Better objective?-->
                    <objective step="1" action="objective.find"/>
                  </briefing>
                </create_mission>
              </actions>
            </cue>
            <cue name="TrackShip_Aborted">
              <conditions>
                <event_cue_signalled cue="$Definition.$ForceCleanupCue"/>
              </conditions>
              <actions>
                <cancel_cue cue="namespace"/>
              </actions>
            </cue>
            <!--namespace signalled to activate followup mission
            event.param = Station to supply-->
            <cue name="TrackShip_Activate_FollowUp">
              <conditions>
                <event_cue_signalled cue="namespace"/>
              </conditions>
              <actions>
                <!--Check that the correct parameters have been passed-->
                <do_if value="false">
                  <!--Currently no followup case for this type of mission-->
                  <signal_cue cue="TrackShip_Create_GM"/>
                  <cancel_cue cue="parent"/>
                </do_if>
                <do_else>
                  <assert value="false" text="namespace + ' was signalled to start a followup mission, but the passed parameter ' + event.param + ' was not what this mission was expecting. Ending mission.'"/>
                  <!--TODO @Owen what if there is another followup mission?-->
                  <signal_cue_instantly cue="$Definition.$EndedCue" param="namespace"/>
                  <cancel_cue cue="namespace"/>
                </do_else>
              </actions>
            </cue>
          </cues>
        </cue>
        <cue name="TrackShip_Not_FollowUp" onfail="cancel">
          <conditions>
            <check_value value="not $FollowUp"/>
          </conditions>
          <actions>
            <signal_cue cue="TrackShip_Create_GM"/>
          </actions>
        </cue>
        <cue name="TrackShip_Create_GM">
          <conditions>
            <event_cue_signalled/>
          </conditions>
          <cues>
            <!-- Trigger actual GM, passing the specified parameters -->
            <cue name="TrackShip_Ref" ref="md.GM_TrackShip.Start">
              <param name="Client" value="$Definition.$ThreadData.$Contact"/>
              <param name="MissionCue" value="$MissionCue"/>
              <param name="MissionThread" value="$Definition.$ThreadCue"/>
              <param name="ReportSignalCue" value="TrackShip_GM_Event" comment="tell GM to call this cue when done"/>
              <param name="WithoutOffer" value="true"/>
              <param name="WithoutOfferWaitCue" value="if $FollowUp then null else $Definition.$OfferAcceptedCue"/>
              <param name="ForceCleanup" value="$Definition.$ForceCleanupCue"/>
              <param name="Page" value="$Page"/>
              <param name="TextOffset" value="$TextOffset"/>
              <param name="MissionLevel" value="3"/>
              <param name="Difficulty" value="level.medium"/>
              <param name="TargetShip" value="$TargetShip" comment="Specific ship to find (find a $TargetShip if not provided by GM user) "/>
              <!--
              <param name="MoveTargetShip"        value="true"  comment="Give orders to TargetShip automatically to make sure it's moving around (can be set to false if TargetShip behaviour is controlled externally)" />
              <param name="DeviationDistance"     value="20km" comment="Initial distance of tracker position from actual ship (tracker will get more accurate over time)" />
              <param name="DetectionDistance"     value="10km" comment="Distance at which guidance switches from tracker locations to the target ship (mostly for nicer presentation, may be 0m to skip the post-detection phase of the mission)" />
              <param name="TimeLimitAfterDetection" value="60s" comment="Minimal time limit for finishing mission on reaching DetectionDistance, if SuccessDistance is lower (0s = no time limit in post-detection phase)" />
              <param name="SuccessDistance"       value="8km" comment="Distance from target ship that triggers mission success" />-->
              <param name="DebugChance" value="$DebugChance"/>
            </cue>
            <!--Signalled by GM when an event happens e.g. mission successfully generated or mission ended.
            Feedback values saved to the static of this cue: $FeedbackValue and $EndFeedbackValue-->
            <cue name="TrackShip_GM_Event" instantiate="true">
              <conditions>
                <event_cue_signalled/>
              </conditions>
              <actions>
                <include_actions ref="MM_GM_Event"/>
              </actions>
            </cue>
          </cues>
        </cue>
      </cues>
    </cue>
    <cue name="RetrieveItem" instantiate="true" namespace="this">
      <conditions>
        <event_cue_signalled/>
        <!--Signal the static cue to trigger a new instance of this mission.
        Signalling a running instance will trigger a followup mission to run its GM library. See XXX_Activate_FollowUp cue for parameters-->
      </conditions>
      <actions>
        <set_value name="$Definition" exact="event.param"/>
        <set_value name="$Page" exact="$Definition.$Page"/>
        <set_value name="$TextOffset" exact="$Definition.$TextOffset.random"/>
        <set_value name="$FollowUp" exact="@$Definition.$FollowUp == true" comment="Does this mission follow directly after another, with parameters potentially passing between them. This changes how this mission is spawned and managed."/>
        <set_value name="$SuccessfullyGenerated" exact="false"/>
        <set_value name="$DebugChance" exact="$Definition.$ThreadData.$DebugChance"/>
        <assert value="not $FollowUp" text="'This mission does not currently have any parameters where it makes sense as a follow up mission. If there is, adjust the _Activate_FollowUp cue and remove this assert [Owen]'"/>
        <!--This mission is specific enough that it will only run if a matching text offset is found. If not, the offer will abort with an error.
        $Valid:
        0: Page/TextOffset not handled
        1: Correct Page/TextOffset but unable to setup mission
        2: Mission can attempt to be spawned -->
        <set_value name="$Valid" exact="0"/>
        <!--### SCALE PLATE PACT ###-->
        <do_if value="$Page == 30207">
          <do_if value="$TextOffset == 114000">
            <set_value name="$Valid" exact="1" comment="Valid text offset"/>
            <!--TODO @Owen-->
            <find_ship name="$TargetShip" class="[class.ship_s, class.ship_m]" masstraffic="false" space="player.sector">
              <match owner="[$Definition.$ThreadData.$Faction, faction.player, faction.xenon, faction.xenon1, faction.xenon2, faction.xenon3, faction.xenon4, faction.xenon5, faction.xenon6]" negate="true"/>
            </find_ship>
            <do_if value="$TargetShip">
              <set_value name="$ItemWare" exact="ware.inv_pricelessart"/>
              <set_value name="$Valid" exact="2" comment="Valid mission variables"/>
            </do_if>
          </do_if>
        </do_if>
        <do_if value="$Valid == 2">
          <do_if value="$FollowUp">
            <!--Followup missions use the namespace as the mission cue-->
            <set_value name="$MissionCue" exact="namespace"/>
          </do_if>
          <do_else>
            <set_value name="$MissionCue" exact="null"/>
          </do_else>
        </do_if>
        <do_else>
          <do_if value="$Valid == 1">
            <debug_text text="'Unable to find suitable variant variables for mission on ' + this + ' with combination of Page: ' + $Page + ' and TextOffset: ' + $TextOffset + '. [Owen]'" chance="$DebugChance"/>
          </do_if>
          <do_else>
            <assert value="false" text="'Attempting to spawn a mission on ' + this + ' but the combination of Page: ' + $Page + ' and TextOffset: ' + $TextOffset + ' do not match any definitions [Owen]'"/>
          </do_else>
          <signal_cue cue="$Definition.$SpawnFailedCue"/>
          <cancel_cue cue="this"/>
        </do_else>
      </actions>
      <cues>
        <cue name="RetrieveItem_FollowUp_Manager" onfail="cancel">
          <conditions>
            <check_value value="$FollowUp"/>
          </conditions>
          <actions>
            <!--If this is going to be a followup mission, first, inform the mission thread manager of this submission so it can be displayed in the offer.-->
            <!--Currently means you need to find the mission name here, instead of relying on the GM itself finding it.-->
            <set_value name="$MissionName" exact="readtext.{$Page}.{$TextOffset + 1}"/>
            <set_value name="$MissionDescription" exact="readtext.{$Page}.{$TextOffset + 2}"/>
            <debug_text text="'Attempting to signal the mission thread that followup mission cue ' + $MissionCue + ' is ready to be added to the offer'" chance="$DebugChance"/>
            <set_value name="$MissionDataTable" exact="table[$Name = $MissionName, $Cue = $MissionCue, $WrapperCue = $MissionCue, $FollowUp = true]"/>
            <signal_cue_instantly cue="$Definition.$SpawnSuccessCue" param="$MissionDataTable"/>
          </actions>
          <cues>
            <cue name="RetrieveItem_FollowUp_Offer_Accepted">
              <conditions>
                <event_cue_signalled cue="$Definition.$OfferAcceptedCue"/>
                <check_value value="event.param == $MissionCue"/>
              </conditions>
              <actions>
                <!--We don't want to call the GM yet. Create the mission here and pass it into the GM when the previous mission ends
                TODO @Owen Move this to a library in the GM file?-->
                <create_mission cue="$MissionCue" missionthread="$Definition.$ThreadCue" name="$MissionName" description="$MissionDescription" faction="$Definition.$ThreadData.$Faction" type="missiontype.deliver">
                  <briefing>
                    <!--TODO @Owen Better objective?-->
                    <objective step="1" action="objective.find"/>
                  </briefing>
                </create_mission>
              </actions>
            </cue>
            <cue name="RetrieveItem_Aborted">
              <conditions>
                <event_cue_signalled cue="$Definition.$ForceCleanupCue"/>
              </conditions>
              <actions>
                <cancel_cue cue="namespace"/>
              </actions>
            </cue>
            <!--namespace signalled to activate followup mission
            event.param = Station to supply-->
            <cue name="RetrieveItem_Activate_FollowUp">
              <conditions>
                <event_cue_signalled cue="namespace"/>
              </conditions>
              <actions>
                <!--Check that the correct parameters have been passed-->
                <do_if value="false">
                  <!--Currently no followup case for this type of mission-->
                  <signal_cue cue="RetrieveItem_Create_GM"/>
                  <cancel_cue cue="parent"/>
                </do_if>
                <do_else>
                  <assert value="false" text="namespace + ' was signalled to start a followup mission, but the passed parameter ' + event.param + ' was not what this mission was expecting. Ending mission.'"/>
                  <!--TODO @Owen what if there is another followup mission?-->
                  <signal_cue_instantly cue="$Definition.$EndedCue" param="namespace"/>
                  <cancel_cue cue="namespace"/>
                </do_else>
              </actions>
            </cue>
          </cues>
        </cue>
        <cue name="RetrieveItem_Not_FollowUp" onfail="cancel">
          <conditions>
            <check_value value="not $FollowUp"/>
          </conditions>
          <actions>
            <signal_cue cue="RetrieveItem_Create_GM"/>
          </actions>
        </cue>
        <cue name="RetrieveItem_Create_GM">
          <conditions>
            <event_cue_signalled/>
          </conditions>
          <cues>
            <!-- Trigger actual GM, passing the specified parameters -->
            <cue name="RetrieveItem_Ref" ref="md.GM_RetrieveItem.Start">
              <param name="Client" value="$Definition.$ThreadData.$Contact"/>
              <param name="MissionCue" value="$MissionCue"/>
              <param name="MissionThread" value="$Definition.$ThreadCue"/>
              <param name="ReportSignalCue" value="RetrieveItem_GM_Event" comment="tell GM to call this cue when done"/>
              <param name="WithoutOffer" value="true"/>
              <param name="WithoutOfferWaitCue" value="if $FollowUp then null else $Definition.$OfferAcceptedCue"/>
              <param name="ForceCleanup" value="$Definition.$ForceCleanupCue"/>
              <param name="Page" value="$Page"/>
              <param name="TextOffset" value="$TextOffset"/>
              <param name="MissionLevel" value="3"/>
              <param name="Difficulty" value="level.medium"/>
              <param name="TargetShip" value="$TargetShip" comment="Specific ship that contains the item"/>
              <!--
              <param name="TargetShieldPercent"   value="5"         comment="Maximal shield percentage required to drop item"/>
              <param name="TargetHullPercent"     value="75"        comment="Maximal hull percentage required to drop item"/>-->
              <param name="ItemWare" value="$ItemWare" comment="Ware that should be dropped by TargetShip"/>
              <param name="DebugChance" value="$DebugChance"/>
            </cue>
            <!--Signalled by GM when an event happens e.g. mission successfully generated or mission ended.
            Feedback values saved to the static of this cue: $FeedbackValue and $EndFeedbackValue-->
            <cue name="RetrieveItem_GM_Event" instantiate="true">
              <conditions>
                <event_cue_signalled/>
              </conditions>
              <actions>
                <include_actions ref="MM_GM_Event"/>
              </actions>
            </cue>
          </cues>
        </cue>
      </cues>
    </cue>
    <cue name="Get_Exact_Crew" instantiate="true" namespace="this">
      <conditions>
        <event_cue_signalled/>
        <!--Signal the static cue to trigger a new instance of this mission.
        Signalling a running instance will trigger a followup mission to run its GM library. See XXX_Activate_FollowUp cue for parameters-->
      </conditions>
      <actions>
        <set_value name="$Definition" exact="event.param"/>
        <set_value name="$Page" exact="$Definition.$Page"/>
        <set_value name="$TextOffset" exact="$Definition.$TextOffset.random"/>
        <set_value name="$FollowUp" exact="@$Definition.$FollowUp == true" comment="Does this mission follow directly after another, with parameters potentially passing between them. This changes how this mission is spawned and managed."/>
        <set_value name="$SuccessfullyGenerated" exact="false"/>
        <set_value name="$DebugChance" exact="$Definition.$ThreadData.$DebugChance"/>
        <assert value="not $FollowUp" text="'This mission does not currently have any parameters where it makes sense as a follow up mission. If there is, adjust the _Activate_FollowUp cue and remove this assert [Owen]'"/>
        <!--This mission is specific enough that it will only run if a matching text offset is found. If not, the offer will abort with an error.
        $Valid:
        0: Page/TextOffset not handled
        1: Correct Page/TextOffset but unable to setup mission
        2: Mission can attempt to be spawned -->
        <set_value name="$Valid" exact="0"/>
        <set_value name="$Destination" exact="null"/>
        <!--### SCALE PLATE PACT ###-->
        <do_if value="$Page == 30207">
          <do_if value="$TextOffset == 104000" comment="Get Boarding Crew">
            <set_value name="$Valid" exact="1" comment="Valid text offset"/>
            <!--TODO @Owen-->
            <set_value name="$Skills" exact="table[{skilltype.boarding} = 4, {skilltype.morale} = 3]"/>
            <find_station_by_true_owner name="$Destination" faction="faction.scaleplate" space="player.galaxy" sortbygatedistanceto="player.zone" sortdescending="false"/>
            <do_if value="$Destination">
              <set_value name="$Valid" exact="2" comment="Valid mission variables"/>
            </do_if>
          </do_if>
        </do_if>
        <do_if value="$Valid == 2">
          <do_if value="$FollowUp">
            <!--Followup missions use the namespace as the mission cue-->
            <set_value name="$MissionCue" exact="namespace"/>
          </do_if>
          <do_else>
            <set_value name="$MissionCue" exact="null"/>
          </do_else>
        </do_if>
        <do_else>
          <do_if value="$Valid == 1">
            <debug_text text="'Unable to find suitable variant variables for mission on ' + this + ' with combination of Page: ' + $Page + ' and TextOffset: ' + $TextOffset + '. [Owen]'" chance="$DebugChance"/>
          </do_if>
          <do_else>
            <assert value="false" text="'Attempting to spawn a mission on ' + this + ' but the combination of Page: ' + $Page + ' and TextOffset: ' + $TextOffset + ' do not match any definitions [Owen]'"/>
          </do_else>
          <signal_cue cue="$Definition.$SpawnFailedCue"/>
          <cancel_cue cue="this"/>
        </do_else>
      </actions>
      <cues>
        <cue name="Get_Exact_Crew_FollowUp_Manager" onfail="cancel">
          <conditions>
            <check_value value="$FollowUp"/>
          </conditions>
          <actions>
            <!--If this is going to be a followup mission, first, inform the mission thread manager of this submission so it can be displayed in the offer.-->
            <!--Currently means you need to find the mission name here, instead of relying on the GM itself finding it.-->
            <set_value name="$MissionName" exact="readtext.{$Page}.{$TextOffset + 1}"/>
            <set_value name="$MissionDescription" exact="readtext.{$Page}.{$TextOffset + 2}"/>
            <debug_text text="'Attempting to signal the mission thread that followup mission cue ' + $MissionCue + ' is ready to be added to the offer'" chance="$DebugChance"/>
            <set_value name="$MissionDataTable" exact="table[$Name = $MissionName, $Cue = $MissionCue, $WrapperCue = $MissionCue, $FollowUp = true]"/>
            <signal_cue_instantly cue="$Definition.$SpawnSuccessCue" param="$MissionDataTable"/>
          </actions>
          <cues>
            <cue name="Get_Exact_Crew_FollowUp_Offer_Accepted">
              <conditions>
                <event_cue_signalled cue="$Definition.$OfferAcceptedCue"/>
                <check_value value="event.param == $MissionCue"/>
              </conditions>
              <actions>
                <!--We don't want to call the GM yet. Create the mission here and pass it into the GM when the previous mission ends
                TODO @Owen Move this to a library in the GM file?-->
                <create_mission cue="$MissionCue" missionthread="$Definition.$ThreadCue" name="$MissionName" description="$MissionDescription" faction="$Definition.$ThreadData.$Faction" type="missiontype.deliver">
                  <briefing>
                    <!--TODO @Owen Better objective?-->
                    <objective step="1" action="objective.acquire_crew"/>
                  </briefing>
                </create_mission>
              </actions>
            </cue>
            <cue name="Get_Exact_Crew_Aborted">
              <conditions>
                <event_cue_signalled cue="$Definition.$ForceCleanupCue"/>
              </conditions>
              <actions>
                <cancel_cue cue="namespace"/>
              </actions>
            </cue>
            <!--namespace signalled to activate followup mission
            event.param = Station to supply-->
            <cue name="Get_Exact_Crew_Activate_FollowUp">
              <conditions>
                <event_cue_signalled cue="namespace"/>
              </conditions>
              <actions>
                <!--Check that the correct parameters have been passed-->
                <do_if value="false">
                  <!--Currently no followup case for this type of mission-->
                  <signal_cue cue="Get_Exact_Crew_Create_GM"/>
                  <cancel_cue cue="parent"/>
                </do_if>
                <do_else>
                  <assert value="false" text="namespace + ' was signalled to start a followup mission, but the passed parameter ' + event.param + ' was not what this mission was expecting. Ending mission.'"/>
                  <!--TODO @Owen what if there is another followup mission?-->
                  <signal_cue_instantly cue="$Definition.$EndedCue" param="namespace"/>
                  <cancel_cue cue="namespace"/>
                </do_else>
              </actions>
            </cue>
          </cues>
        </cue>
        <cue name="Get_Exact_Crew_Not_FollowUp" onfail="cancel">
          <conditions>
            <check_value value="not $FollowUp"/>
          </conditions>
          <actions>
            <signal_cue cue="Get_Exact_Crew_Create_GM"/>
          </actions>
        </cue>
        <cue name="Get_Exact_Crew_Create_GM">
          <conditions>
            <event_cue_signalled/>
          </conditions>
          <cues>
            <!-- Trigger actual GM, passing the specified parameters -->
            <cue name="Get_Exact_Crew_Ref" ref="md.GM_GetExactCrew.Start">
              <param name="Client" value="$Definition.$ThreadData.$Contact"/>
              <param name="MissionCue" value="$MissionCue"/>
              <param name="MissionThread" value="$Definition.$ThreadCue"/>
              <param name="ReportSignalCue" value="Get_Exact_Crew_GM_Event"/>
              <param name="WithoutOffer" value="true"/>
              <param name="WithoutOfferWaitCue" value="if $FollowUp then null else $Definition.$OfferAcceptedCue"/>
              <param name="ForceCleanup" value="$Definition.$ForceCleanupCue"/>
              <param name="Page" value="$Page"/>
              <param name="TextOffset" value="$TextOffset"/>
              <param name="MissionLevel" value="3"/>
              <param name="Difficulty" value="level.medium"/>
              <param name="Faction" value="$Definition.$ThreadData.$Faction" comment="this faction..."/>
              <param name="NpcCount" value="3" comment="is looking for this amount of NPCs..."/>
              <param name="Skills" value="$Skills" comment="with *all* these skills at specified level"/>
              <param name="Destination" value="$Destination"/>
              <param name="DebugChance" value="$DebugChance"/>
            </cue>
            <!--Signalled by GM when an event happens e.g. mission successfully generated or mission ended.
            Feedback values saved to the static of this cue: $FeedbackValue and $EndFeedbackValue-->
            <cue name="Get_Exact_Crew_GM_Event" instantiate="true">
              <conditions>
                <event_cue_signalled/>
              </conditions>
              <actions>
                <include_actions ref="MM_GM_Event"/>
              </actions>
            </cue>
          </cues>
        </cue>
      </cues>
    </cue>
    <cue name="BoardShip" instantiate="true" namespace="this">
      <conditions>
        <event_cue_signalled/>
        <!--Signal the static cue to trigger a new instance of this mission.
        Signalling a running instance will trigger a followup mission to run its GM library. See XXX_Activate_FollowUp cue for parameters-->
      </conditions>
      <actions>
        <set_value name="$Definition" exact="event.param"/>
        <set_value name="$Page" exact="$Definition.$Page"/>
        <set_value name="$TextOffset" exact="$Definition.$TextOffset.random"/>
        <set_value name="$FollowUp" exact="@$Definition.$FollowUp == true" comment="Does this mission follow directly after another, with parameters potentially passing between them. This changes how this mission is spawned and managed."/>
        <set_value name="$SuccessfullyGenerated" exact="false"/>
        <set_value name="$DebugChance" exact="$Definition.$ThreadData.$DebugChance"/>
        <assert value="not $FollowUp" text="'This mission does not currently have any parameters where it makes sense as a follow up mission. If there is, adjust the _Activate_FollowUp cue and remove this assert [Owen]'"/>
        <!--This mission is specific enough that it will only run if a matching text offset is found. If not, the offer will abort with an error.
        $Valid:
        0: Page/TextOffset not handled
        1: Correct Page/TextOffset but unable to setup mission
        2: Mission can attempt to be spawned -->
        <set_value name="$Valid" exact="0"/>
        <!--### SCALE PLATE PACT ###-->
        <do_if value="$Page == 30207">
          <do_if value="$TextOffset == 103000">
            <set_value name="$Valid" exact="1" comment="Valid text offset"/>
            <!--TODO @Owen-->
            <find_ship name="$TargetShip" class="class.ship_l" primarypurpose="purpose.trade" space="player.galaxy" owner="faction.argon" capturable="true" multiple="false" docked="false"/>
            <set_value name="$TargetSpec" exact="null"/>
            <set_value name="$Difficulty" exact="level.hard"/>
            <do_any>
              <set_value name="$MissionDuration" exact="2h"/>
              <set_value name="$MissionDuration" exact="3h"/>
            </do_any>
            <set_value name="$Valid" exact="2" comment="Valid mission variables"/>
          </do_if>
        </do_if>
        <do_if value="$Valid == 2">
          <do_if value="$FollowUp">
            <!--Followup missions use the namespace as the mission cue-->
            <set_value name="$MissionCue" exact="namespace"/>
          </do_if>
          <do_else>
            <set_value name="$MissionCue" exact="null"/>
          </do_else>
        </do_if>
        <do_else>
          <do_if value="$Valid == 1">
            <debug_text text="'Unable to find suitable variant variables for mission on ' + this + ' with combination of Page: ' + $Page + ' and TextOffset: ' + $TextOffset + '. [Owen]'" chance="$DebugChance"/>
          </do_if>
          <do_else>
            <assert value="false" text="'Attempting to spawn a mission on ' + this + ' but the combination of Page: ' + $Page + ' and TextOffset: ' + $TextOffset + ' do not match any definitions [Owen]'"/>
          </do_else>
          <signal_cue cue="$Definition.$SpawnFailedCue"/>
          <cancel_cue cue="this"/>
        </do_else>
      </actions>
      <cues>
        <cue name="BoardShip_FollowUp_Manager" onfail="cancel">
          <conditions>
            <check_value value="$FollowUp"/>
          </conditions>
          <actions>
            <!--If this is going to be a followup mission, first, inform the mission thread manager of this submission so it can be displayed in the offer.-->
            <!--Currently means you need to find the mission name here, instead of relying on the GM itself finding it.-->
            <set_value name="$MissionName" exact="readtext.{$Page}.{$TextOffset + 1}"/>
            <set_value name="$MissionDescription" exact="readtext.{$Page}.{$TextOffset + 2}"/>
            <debug_text text="'Attempting to signal the mission thread that followup mission cue ' + $MissionCue + ' is ready to be added to the offer'" chance="$DebugChance"/>
            <set_value name="$MissionDataTable" exact="table[$Name = $MissionName, $Cue = $MissionCue, $WrapperCue = $MissionCue, $FollowUp = true]"/>
            <signal_cue_instantly cue="$Definition.$SpawnSuccessCue" param="$MissionDataTable"/>
          </actions>
          <cues>
            <cue name="BoardShip_FollowUp_Offer_Accepted">
              <conditions>
                <event_cue_signalled cue="$Definition.$OfferAcceptedCue"/>
                <check_value value="event.param == $MissionCue"/>
              </conditions>
              <actions>
                <!--We don't want to call the GM yet. Create the mission here and pass it into the GM when the previous mission ends
                TODO @Owen Move this to a library in the GM file?-->
                <create_mission cue="$MissionCue" missionthread="$Definition.$ThreadCue" name="$MissionName" description="$MissionDescription" faction="$Definition.$ThreadData.$Faction" type="missiontype.deliver">
                  <briefing>
                    <!--TODO @Owen Better objective?-->
                    <objective step="1" action="objective.board"/>
                  </briefing>
                </create_mission>
              </actions>
            </cue>
            <cue name="BoardShip_Aborted">
              <conditions>
                <event_cue_signalled cue="$Definition.$ForceCleanupCue"/>
              </conditions>
              <actions>
                <cancel_cue cue="namespace"/>
              </actions>
            </cue>
            <!--namespace signalled to activate followup mission
            event.param = Station to supply-->
            <cue name="BoardShip_Activate_FollowUp">
              <conditions>
                <event_cue_signalled cue="namespace"/>
              </conditions>
              <actions>
                <!--Check that the correct parameters have been passed-->
                <do_if value="false">
                  <!--Currently no followup case for this type of mission-->
                  <signal_cue cue="BoardShip_Create_GM"/>
                  <cancel_cue cue="parent"/>
                </do_if>
                <do_else>
                  <assert value="false" text="namespace + ' was signalled to start a followup mission, but the passed parameter ' + event.param + ' was not what this mission was expecting. Ending mission.'"/>
                  <!--TODO @Owen what if there is another followup mission?-->
                  <signal_cue_instantly cue="$Definition.$EndedCue" param="namespace"/>
                  <cancel_cue cue="namespace"/>
                </do_else>
              </actions>
            </cue>
          </cues>
        </cue>
        <cue name="BoardShip_Not_FollowUp" onfail="cancel">
          <conditions>
            <check_value value="not $FollowUp"/>
          </conditions>
          <actions>
            <signal_cue cue="BoardShip_Create_GM"/>
          </actions>
        </cue>
        <cue name="BoardShip_Create_GM">
          <conditions>
            <event_cue_signalled/>
          </conditions>
          <cues>
            <!-- Trigger actual GM, passing the specified parameters -->
            <cue name="BoardShip_Ref" ref="md.GM_BoardShip.Start">
              <param name="Client" value="$Definition.$ThreadData.$Contact"/>
              <param name="MissionCue" value="$MissionCue"/>
              <param name="MissionThread" value="$Definition.$ThreadCue"/>
              <param name="ReportSignalCue" value="BoardShip_GM_Event"/>
              <param name="WithoutOffer" value="true"/>
              <param name="WithoutOfferWaitCue" value="if $FollowUp then null else $Definition.$OfferAcceptedCue"/>
              <param name="ForceCleanup" value="$Definition.$ForceCleanupCue"/>
              <param name="Page" value="$Page"/>
              <param name="TextOffset" value="$TextOffset"/>
              <param name="MissionLevel" value="3"/>
              <param name="Difficulty" value="$Difficulty"/>
              <param name="MissionDuration" value="$MissionDuration"/>
              <param name="Faction" value="$Definition.$ThreadData.$Faction"/>
              <param name="TargetShip" value="$TargetShip" comment="pass either TargetShip or TargetSpecs!"/>
              <param name="TargetSpec" value="$TargetSpec"/>
              <param name="DebugChance" value="$DebugChance"/>
            </cue>
            <!--Signalled by GM when an event happens e.g. mission successfully generated or mission ended.
            Feedback values saved to the static of this cue: $FeedbackValue and $EndFeedbackValue-->
            <cue name="BoardShip_GM_Event" instantiate="true">
              <conditions>
                <event_cue_signalled/>
              </conditions>
              <actions>
                <include_actions ref="MM_GM_Event"/>
              </actions>
            </cue>
          </cues>
        </cue>
      </cues>
    </cue>
    <cue name="Supply_Factory" instantiate="true" namespace="this">
      <conditions>
        <event_cue_signalled/>
        <!--Signal the static cue to trigger a new instance of this mission.
        Signalling a running instance will trigger a followup mission to run its GM library. See XXX_Activate_FollowUp cue for parameters-->
      </conditions>
      <actions>
        <set_value name="$Definition" exact="event.param"/>
        <set_value name="$Page" exact="$Definition.$Page"/>
        <set_value name="$TextOffset" exact="$Definition.$TextOffset.random"/>
        <set_value name="$FollowUp" exact="@$Definition.$FollowUp == true" comment="Does this mission follow directly after another, with parameters potentially passing between them. This changes how this mission is spawned and managed."/>
        <set_value name="$SuccessfullyGenerated" exact="false"/>
        <set_value name="$DebugChance" exact="$Definition.$ThreadData.$DebugChance"/>
        <!--This mission is specific enough that it will only run if a matching text offset is found. If not, the offer will abort with an error.
        $Valid:
        0: Page/TextOffset not handled
        1: Correct Page/TextOffset but unable to setup mission
        2: Mission can attempt to be spawned -->
        <set_value name="$Valid" exact="0"/>
        <set_value name="$Faction" exact="$Definition.$ThreadData.$Faction"/>
        <!--### SCALE PLATE PACT ###-->
        <do_if value="$Page == 30207">
          <do_if value="$TextOffset == 110000" comment="Supply drug factory">
            <set_value name="$Valid" exact="1" comment="Valid text offset"/>
            <include_actions ref="md.GM_SupplyFactory.ConfigureDifficulty" comment="Input: -, output: $Difficulty, $SupplyStorageMinPercent, $MissionDuration"/>
            <do_if value="not $FollowUp">
              <include_actions ref="md.GM_SupplyFactory.SupplyFactory_FriendlyFactory" comment="input: $Faction, output: $TargetStation"/>
              <do_if value="$TargetStation">
                <set_value name="$Valid" exact="2" comment="Valid mission variables"/>
              </do_if>
            </do_if>
            <do_else>
              <set_value name="$Valid" exact="2" comment="Valid mission variables"/>
            </do_else>
          </do_if>
        </do_if>
        <do_if value="$Valid == 2">
          <do_if value="$FollowUp">
            <!--Followup missions use the namespace as the mission cue-->
            <set_value name="$MissionCue" exact="namespace"/>
          </do_if>
          <do_else>
            <set_value name="$MissionCue" exact="null"/>
          </do_else>
        </do_if>
        <do_else>
          <do_if value="$Valid == 1">
            <debug_text text="'Unable to find suitable variant variables for mission on ' + this + ' with combination of Page: ' + $Page + ' and TextOffset: ' + $TextOffset + '. [Owen]'" chance="$DebugChance"/>
          </do_if>
          <do_else>
            <assert value="false" text="'Attempting to spawn a mission on ' + this + ' but the combination of Page: ' + $Page + ' and TextOffset: ' + $TextOffset + ' do not match any definitions [Owen]'"/>
          </do_else>
          <signal_cue cue="$Definition.$SpawnFailedCue"/>
          <cancel_cue cue="this"/>
        </do_else>
      </actions>
      <cues>
        <cue name="Supply_Factory_FollowUp_Manager" onfail="cancel">
          <conditions>
            <check_value value="$FollowUp"/>
          </conditions>
          <actions>
            <!--If this is going to be a followup mission, first, inform the mission thread manager of this submission so it can be displayed in the offer.-->
            <!--Currently means you need to find the mission name here, instead of relying on the GM itself finding it.-->
            <set_value name="$MissionName" exact="readtext.{$Page}.{$TextOffset + 1}"/>
            <set_value name="$MissionDescription" exact="readtext.{$Page}.{$TextOffset + 2}"/>
            <debug_text text="'Attempting to signal the mission thread that followup mission cue ' + $MissionCue + ' is ready to be added to the offer'" chance="$DebugChance"/>
            <set_value name="$MissionDataTable" exact="table[$Name = $MissionName, $Cue = $MissionCue, $WrapperCue = $MissionCue, $FollowUp = true]"/>
            <signal_cue_instantly cue="$Definition.$SpawnSuccessCue" param="$MissionDataTable"/>
          </actions>
          <cues>
            <cue name="Supply_Factory_FollowUp_Offer_Accepted">
              <conditions>
                <event_cue_signalled cue="$Definition.$OfferAcceptedCue"/>
                <check_value value="event.param == $MissionCue"/>
              </conditions>
              <actions>
                <!--We don't want to call the GM yet. Create the mission here and pass it into the GM when the previous mission ends
                TODO @Owen Move this to a library in the GM file?-->
                <create_mission cue="$MissionCue" missionthread="$Definition.$ThreadCue" name="$MissionName" description="$MissionDescription" faction="$Definition.$ThreadData.$Faction" type="missiontype.deliver">
                  <briefing>
                    <objective step="1" action="objective.deliver" text="{30147,2}" comment="Production resources"/>
                  </briefing>
                </create_mission>
              </actions>
            </cue>
            <cue name="Supply_Factory_Aborted">
              <conditions>
                <event_cue_signalled cue="$Definition.$ForceCleanupCue"/>
              </conditions>
              <actions>
                <cancel_cue cue="namespace"/>
              </actions>
            </cue>
            <!--namespace signalled to activate followup mission
            event.param = Station to supply-->
            <cue name="Supply_Factory_Activate_FollowUp">
              <conditions>
                <event_cue_signalled cue="namespace"/>
              </conditions>
              <actions>
                <!--Check that the correct parameters have been passed-->
                <do_if value="event.param.isclass.station">
                  <set_value name="$TargetStation" exact="event.param"/>
                  <signal_cue cue="Supply_Factory_Create_GM"/>
                  <cancel_cue cue="parent"/>
                </do_if>
                <do_else>
                  <assert value="false" text="namespace + ' was signalled to start a followup mission, but the passed parameter ' + event.param + ' was not what this mission was expecting. Ending mission.'"/>
                  <!--TODO @Owen what if there is another followup mission?-->
                  <signal_cue_instantly cue="$Definition.$EndedCue" param="namespace"/>
                  <cancel_cue cue="namespace"/>
                </do_else>
              </actions>
            </cue>
          </cues>
        </cue>
        <cue name="Supply_Factory_Not_FollowUp" onfail="cancel">
          <conditions>
            <check_value value="not $FollowUp"/>
          </conditions>
          <actions>
            <signal_cue cue="Supply_Factory_Create_GM"/>
          </actions>
        </cue>
        <cue name="Supply_Factory_Create_GM">
          <conditions>
            <event_cue_signalled/>
          </conditions>
          <cues>
            <!-- Trigger actual GM, passing the specified parameters -->
            <cue name="Supply_Factory_Ref" ref="md.GM_SupplyFactory.Start">
              <param name="Client" value="$Definition.$ThreadData.$Contact"/>
              <param name="MissionCue" value="$MissionCue"/>
              <param name="MissionThread" value="$Definition.$ThreadCue"/>
              <param name="ReportSignalCue" value="Supply_Factory_GM_Event"/>
              <param name="WithoutOffer" value="true"/>
              <param name="WithoutOfferWaitCue" value="if $FollowUp then null else $Definition.$OfferAcceptedCue"/>
              <param name="ForceCleanup" value="$Definition.$ForceCleanupCue"/>
              <param name="Page" value="$Page"/>
              <param name="TextOffset" value="$TextOffset"/>
              <param name="MissionLevel" value="3"/>
              <param name="Difficulty" value="level.medium"/>
              <param name="MissionDuration" value="1h"/>
              <param name="TargetStation" value="$TargetStation"/>
              <param name="SupplyStorageMinPercent" value="$SupplyStorageMinPercent"/>
              <param name="DebugChance" value="$DebugChance"/>
            </cue>
            <!--Signalled by GM when an event happens e.g. mission successfully generated or mission ended.
            Feedback values saved to the static of this cue: $FeedbackValue and $EndFeedbackValue-->
            <cue name="Supply_Factory_GM_Event" instantiate="true">
              <conditions>
                <event_cue_signalled/>
              </conditions>
              <actions>
                <include_actions ref="MM_GM_Event"/>
              </actions>
            </cue>
          </cues>
        </cue>
      </cues>
    </cue>
    <cue name="KillMasstraffic" instantiate="true" namespace="this">
      <conditions>
        <event_cue_signalled/>
        <!--Signal the static cue to trigger a new instance of this mission.
        Signalling a running instance will trigger a followup mission to run its GM library. See XXX_Activate_FollowUp cue for parameters-->
      </conditions>
      <actions>
        <set_value name="$Definition" exact="event.param"/>
        <set_value name="$Page" exact="$Definition.$Page"/>
        <set_value name="$TextOffset" exact="$Definition.$TextOffset.random"/>
        <set_value name="$FollowUp" exact="@$Definition.$FollowUp == true" comment="Does this mission follow directly after another, with parameters potentially passing between them. This changes how this mission is spawned and managed."/>
        <set_value name="$SuccessfullyGenerated" exact="false"/>
        <set_value name="$DebugChance" exact="$Definition.$ThreadData.$DebugChance"/>
        <assert value="not $FollowUp" text="'This mission does not currently have any parameters where it makes sense as a follow up mission. If there is, adjust the _Activate_FollowUp cue and remove this assert [Owen]'"/>
        <!--This mission is specific enough that it will only run if a matching text offset is found. If not, the offer will abort with an error.
        $Valid:
        0: Page/TextOffset not handled
        1: Correct Page/TextOffset but unable to setup mission
        2: Mission can attempt to be spawned -->
        <set_value name="$Valid" exact="0"/>
        <!--### SCALE PLATE PACT ###-->
        <do_if value="$Page == 30207">
          <do_if value="$TextOffset == 101000">
            <set_value name="$Valid" exact="1" comment="Valid text offset"/>
            <!--TODO @Owen-->
            <find_station name="$Location" space="player.zone"/>
            <do_if value="not $Location">
              <find_station name="$Location" space="if player.sector then player.sector else player.cluster"/>
            </do_if>
            <do_if value="not $Location">
              <set_value name="$Valid" exact="2" comment="Valid mission variables"/>
            </do_if>
          </do_if>
        </do_if>
        <do_if value="$Valid == 2">
          <do_if value="$FollowUp">
            <!--Followup missions use the namespace as the mission cue-->
            <set_value name="$MissionCue" exact="namespace"/>
          </do_if>
          <do_else>
            <set_value name="$MissionCue" exact="null"/>
          </do_else>
        </do_if>
        <do_else>
          <do_if value="$Valid == 1">
            <debug_text text="'Unable to find suitable variant variables for mission on ' + this + ' with combination of Page: ' + $Page + ' and TextOffset: ' + $TextOffset + '. [Owen]'" chance="$DebugChance"/>
          </do_if>
          <do_else>
            <assert value="false" text="'Attempting to spawn a mission on ' + this + ' but the combination of Page: ' + $Page + ' and TextOffset: ' + $TextOffset + ' do not match any definitions [Owen]'"/>
          </do_else>
          <signal_cue cue="$Definition.$SpawnFailedCue"/>
          <cancel_cue cue="this"/>
        </do_else>
      </actions>
      <cues>
        <cue name="KillMasstraffic_FollowUp_Manager" onfail="cancel">
          <conditions>
            <check_value value="$FollowUp"/>
          </conditions>
          <actions>
            <!--If this is going to be a followup mission, first, inform the mission thread manager of this submission so it can be displayed in the offer.-->
            <!--Currently means you need to find the mission name here, instead of relying on the GM itself finding it.-->
            <set_value name="$MissionName" exact="readtext.{$Page}.{$TextOffset + 1}"/>
            <set_value name="$MissionDescription" exact="readtext.{$Page}.{$TextOffset + 2}"/>
            <debug_text text="'Attempting to signal the mission thread that followup mission cue ' + $MissionCue + ' is ready to be added to the offer'" chance="$DebugChance"/>
            <set_value name="$MissionDataTable" exact="table[$Name = $MissionName, $Cue = $MissionCue, $WrapperCue = $MissionCue, $FollowUp = true]"/>
            <signal_cue_instantly cue="$Definition.$SpawnSuccessCue" param="$MissionDataTable"/>
          </actions>
          <cues>
            <cue name="KillMasstraffic_FollowUp_Offer_Accepted">
              <conditions>
                <event_cue_signalled cue="$Definition.$OfferAcceptedCue"/>
                <check_value value="event.param == $MissionCue"/>
              </conditions>
              <actions>
                <!--We don't want to call the GM yet. Create the mission here and pass it into the GM when the previous mission ends
                TODO @Owen Move this to a library in the GM file?-->
                <create_mission cue="$MissionCue" missionthread="$Definition.$ThreadCue" name="$MissionName" description="$MissionDescription" faction="$Definition.$ThreadData.$Faction" type="missiontype.deliver">
                  <briefing>
                    <!--TODO @Owen Better objective?-->
                    <objective step="1" action="objective.destroy"/>
                  </briefing>
                </create_mission>
              </actions>
            </cue>
            <cue name="KillMasstraffic_Aborted">
              <conditions>
                <event_cue_signalled cue="$Definition.$ForceCleanupCue"/>
              </conditions>
              <actions>
                <cancel_cue cue="namespace"/>
              </actions>
            </cue>
            <!--namespace signalled to activate followup mission
            event.param = Station to supply-->
            <cue name="KillMasstraffic_Activate_FollowUp">
              <conditions>
                <event_cue_signalled cue="namespace"/>
              </conditions>
              <actions>
                <!--Check that the correct parameters have been passed-->
                <do_if value="false">
                  <!--Currently no followup case for this type of mission-->
                  <signal_cue cue="KillMasstraffic_Create_GM"/>
                  <cancel_cue cue="parent"/>
                </do_if>
                <do_else>
                  <assert value="false" text="namespace + ' was signalled to start a followup mission, but the passed parameter ' + event.param + ' was not what this mission was expecting. Ending mission.'"/>
                  <!--TODO @Owen what if there is another followup mission?-->
                  <signal_cue_instantly cue="$Definition.$EndedCue" param="namespace"/>
                  <cancel_cue cue="namespace"/>
                </do_else>
              </actions>
            </cue>
          </cues>
        </cue>
        <cue name="KillMasstraffic_Not_FollowUp" onfail="cancel">
          <conditions>
            <check_value value="not $FollowUp"/>
          </conditions>
          <actions>
            <signal_cue cue="KillMasstraffic_Create_GM"/>
          </actions>
        </cue>
        <cue name="KillMasstraffic_Create_GM">
          <conditions>
            <event_cue_signalled/>
          </conditions>
          <cues>
            <!-- Trigger actual GM, passing the specified parameters -->
            <cue name="KillMasstraffic_Ref" ref="md.GM_KillMasstraffic.Start">
              <param name="Client" value="$Definition.$ThreadData.$Contact"/>
              <param name="MissionCue" value="$MissionCue"/>
              <param name="MissionThread" value="$Definition.$ThreadCue"/>
              <param name="ReportSignalCue" value="KillMasstraffic_GM_Event"/>
              <param name="WithoutOffer" value="true"/>
              <param name="WithoutOfferWaitCue" value="if $FollowUp then null else $Definition.$OfferAcceptedCue"/>
              <param name="ForceCleanup" value="$Definition.$ForceCleanupCue"/>
              <param name="Page" value="$Page"/>
              <param name="TextOffset" value="$TextOffset"/>
              <param name="MissionLevel" value="3"/>
              <param name="Difficulty" value="level.medium"/>
              <param name="Location" value="$Location"/>
              <param name="Offset" value="null"/>
              <param name="Radius" value="10km"/>
              <param name="LeftRadius" value="12km"/>
              <param name="KillAmount" value="10"/>
              <param name="DebugChance" value="$DebugChance"/>
            </cue>
            <!--Signalled by GM when an event happens e.g. mission successfully generated or mission ended.
            Feedback values saved to the static of this cue: $FeedbackValue and $EndFeedbackValue-->
            <cue name="KillMasstraffic_GM_Event" instantiate="true">
              <conditions>
                <event_cue_signalled/>
              </conditions>
              <actions>
                <include_actions ref="MM_GM_Event"/>
              </actions>
            </cue>
          </cues>
        </cue>
      </cues>
    </cue>
    <!-- TODO: @Owen, @Roger: Change this, so when populating the missionthread, we can determine how many missions of a specific type are spawned.
      i.e. If we have 4 entrances into a sector, spawn 4 missions to block all of them. 
      -->
    <cue name="DeployInPlace" instantiate="true" namespace="this">
      <conditions>
        <event_cue_signalled/>
        <!--Signal the static cue to trigger a new instance of this mission.
        Signalling a running instance will trigger a followup mission to run its GM library. See XXX_Activate_FollowUp cue for parameters-->
      </conditions>
      <actions>
        <set_value name="$Definition" exact="event.param"/>
        <set_value name="$Page" exact="$Definition.$Page"/>
        <set_value name="$TextOffset" exact="$Definition.$TextOffset.random"/>
        <set_value name="$FollowUp" exact="@$Definition.$FollowUp == true" comment="Does this mission follow directly after another, with parameters potentially passing between them. This changes how this mission is spawned and managed."/>
        <set_value name="$SuccessfullyGenerated" exact="false"/>
        <set_value name="$DebugChance" exact="$Definition.$ThreadData.$DebugChance"/>
        <assert value="not $FollowUp" text="'This mission does not currently have any parameters where it makes sense as a follow up mission. If there is, adjust the _Activate_FollowUp cue and remove this assert [Owen]'"/>
        <!--This mission is specific enough that it will only run if a matching text offset is found. If not, the offer will abort with an error.
        $Valid:
        0: Page/TextOffset not handled
        1: Correct Page/TextOffset but unable to setup mission
        2: Mission can attempt to be spawned -->
        <set_value name="$Valid" exact="0"/>
        <!--### SCALE PLATE PACT ###-->
        <do_if value="$Page == 30207">
          <do_if value="$TextOffset == 106000" comment="place mines in dangerous area">
            <set_value name="$Valid" exact="1" comment="Valid text offset"/>
            <!--TODO @Owen Move this variant to something else. Undermine opponent?-->
            <create_position name="$TargetOffset" object="player.entity.object" space="player.sector" min="10km" max="20km"/>
            <set_value name="$TargetOffset" exact="position.[$TargetOffset.x, 0, $TargetOffset.z]" comment="Engine limitation, keep it on ecliptic (y=0)"/>
            <set_value name="$TargetSector" exact="player.sector"/>
            <set_value name="$TargetRadius" exact="5km"/>
            <set_value name="$TargetCount" exact="[5,6,7].random"/>
            <set_value name="$DeployableCategory" exact="deployablecategory.mine"/>
          </do_if>
          <do_elseif value="$TextOffset == 106100" comment="protect pirate space (minefield around entrypoints)">
            <set_value name="$Valid" exact="1" comment="Valid text offset"/>
            <!--TODO @Owen-->
            <do_if value="not $LocalEntryPoints? or $LocalEntryPoints.count == 0">
              <set_value name="$Sector" exact="player.sector"/>
              <run_actions ref="md.LIB_Generic.FindSectorEntryPoints" result="$LocalEntryPoints">
                <param name="Sector" value="$Sector"/>
              </run_actions>
            </do_if>
            <do_if value="$LocalEntryPoints.count">
              <set_value name="$Valid" exact="2"/>
              <set_value name="$SelectedEntryPoint" exact="$LocalEntryPoints.random"/>
              <debug_text text="'Selected EntryPoint: ' + $SelectedEntryPoint" chance="$DebugChance"/>
              <create_position name="$TargetOffset" object="$SelectedEntryPoint" space="player.sector"/>
              <set_value name="$TargetSector" exact="player.sector"/>
              <set_value name="$TargetRadius" exact="3km"/>
              <set_value name="$TargetCount" exact="[3,4,5].random"/>
              <set_value name="$DeployableCategory" exact="deployablecategory.mine"/>
            </do_if>
          </do_elseif>
          <do_elseif value="$TextOffset == 106200" comment="blockade to prevent escape (minefield around exitpoints)">
            <set_value name="$Valid" exact="1" comment="Valid text offset"/>
            <!--TODO @Owen-->
            <do_if value="not $LocalExitPoints? or $LocalExitPoints.count == 0">
              <set_value name="$Sector" exact="player.sector"/>
              <run_actions ref="md.LIB_Generic.FindSectorExitPoints" result="$LocalExitPoints">
                <param name="Sector" value="$Sector"/>
              </run_actions>
            </do_if>
            <do_if value="$LocalExitPoints.count">
              <set_value name="$Valid" exact="2"/>
              <set_value name="$SelectedExitPoint" exact="$LocalExitPoints.random"/>
              <debug_text text="'Selected ExitPoint: ' + $SelectedExitPoint" chance="$DebugChance"/>
              <create_position name="$TargetOffset" object="$SelectedExitPoint" space="player.sector"/>
              <set_value name="$TargetSector" exact="player.sector"/>
              <set_value name="$TargetRadius" exact="3km"/>
              <set_value name="$TargetCount" exact="[3,4,5].random"/>
              <set_value name="$DeployableCategory" exact="deployablecategory.mine"/>
            </do_if>
          </do_elseif>
        </do_if>
        <do_if value="$Valid == 2">
          <do_if value="$FollowUp">
            <!--Followup missions use the namespace as the mission cue-->
            <set_value name="$MissionCue" exact="namespace"/>
          </do_if>
          <do_else>
            <set_value name="$MissionCue" exact="null"/>
          </do_else>
        </do_if>
        <do_else>
          <do_if value="$Valid == 1">
            <debug_text text="'Unable to find suitable variant variables for mission on ' + this + ' with combination of Page: ' + $Page + ' and TextOffset: ' + $TextOffset + '. [Owen]'" chance="$DebugChance"/>
          </do_if>
          <do_else>
            <assert value="false" text="'Attempting to spawn a mission on ' + this + ' but the combination of Page: ' + $Page + ' and TextOffset: ' + $TextOffset + ' do not match any definitions [Owen]'"/>
          </do_else>
          <signal_cue cue="$Definition.$SpawnFailedCue"/>
          <cancel_cue cue="this"/>
        </do_else>
      </actions>
      <cues>
        <cue name="DeployInPlace_FollowUp_Manager" onfail="cancel">
          <conditions>
            <check_value value="$FollowUp"/>
          </conditions>
          <actions>
            <!--If this is going to be a followup mission, first, inform the mission thread manager of this submission so it can be displayed in the offer.-->
            <!--Currently means you need to find the mission name here, instead of relying on the GM itself finding it.-->
            <set_value name="$MissionName" exact="readtext.{$Page}.{$TextOffset + 1}"/>
            <set_value name="$MissionDescription" exact="readtext.{$Page}.{$TextOffset + 2}"/>
            <debug_text text="'Attempting to signal the mission thread that followup mission cue ' + $MissionCue + ' is ready to be added to the offer'" chance="$DebugChance"/>
            <set_value name="$MissionDataTable" exact="table[$Name = $MissionName, $Cue = $MissionCue, $WrapperCue = $MissionCue, $FollowUp = true]"/>
            <signal_cue_instantly cue="$Definition.$SpawnSuccessCue" param="$MissionDataTable"/>
          </actions>
          <cues>
            <cue name="DeployInPlace_FollowUp_Offer_Accepted">
              <conditions>
                <event_cue_signalled cue="$Definition.$OfferAcceptedCue"/>
                <check_value value="event.param == $MissionCue"/>
              </conditions>
              <actions>
                <!--We don't want to call the GM yet. Create the mission here and pass it into the GM when the previous mission ends
                TODO @Owen Move this to a library in the GM file?-->
                <create_mission cue="$MissionCue" missionthread="$Definition.$ThreadCue" name="$MissionName" description="$MissionDescription" faction="$Definition.$ThreadData.$Faction" type="missiontype.deliver">
                  <briefing>
                    <!--TODO @Owen Better objective?-->
                    <objective step="1" action="objective.deploy"/>
                  </briefing>
                </create_mission>
              </actions>
            </cue>
            <cue name="DeployInPlace_Aborted">
              <conditions>
                <event_cue_signalled cue="$Definition.$ForceCleanupCue"/>
              </conditions>
              <actions>
                <cancel_cue cue="namespace"/>
              </actions>
            </cue>
            <!--namespace signalled to activate followup mission
            event.param = Station to supply-->
            <cue name="DeployInPlace_Activate_FollowUp">
              <conditions>
                <event_cue_signalled cue="namespace"/>
              </conditions>
              <actions>
                <!--Check that the correct parameters have been passed-->
                <do_if value="false">
                  <!--Currently no followup case for this type of mission-->
                  <signal_cue cue="DeployInPlace_Create_GM"/>
                  <cancel_cue cue="parent"/>
                </do_if>
                <do_else>
                  <assert value="false" text="namespace + ' was signalled to start a followup mission, but the passed parameter ' + event.param + ' was not what this mission was expecting. Ending mission.'"/>
                  <!--TODO @Owen what if there is another followup mission?-->
                  <signal_cue_instantly cue="$Definition.$EndedCue" param="namespace"/>
                  <cancel_cue cue="namespace"/>
                </do_else>
              </actions>
            </cue>
          </cues>
        </cue>
        <cue name="DeployInPlace_Not_FollowUp" onfail="cancel">
          <conditions>
            <check_value value="not $FollowUp"/>
          </conditions>
          <actions>
            <signal_cue cue="DeployInPlace_Create_GM"/>
          </actions>
        </cue>
        <cue name="DeployInPlace_Create_GM">
          <conditions>
            <event_cue_signalled/>
          </conditions>
          <cues>
            <!-- Trigger actual GM, passing the specified parameters -->
            <cue name="DeployInPlace_Ref" ref="md.GM_DeployInPlace.Start">
              <param name="Client" value="$Definition.$ThreadData.$Contact"/>
              <param name="MissionCue" value="$MissionCue"/>
              <param name="MissionThread" value="$Definition.$ThreadCue"/>
              <param name="ReportSignalCue" value="DeployInPlace_GM_Event"/>
              <param name="WithoutOffer" value="true"/>
              <param name="WithoutOfferWaitCue" value="if $FollowUp then null else $Definition.$OfferAcceptedCue"/>
              <param name="ForceCleanup" value="$Definition.$ForceCleanupCue"/>
              <param name="Page" value="$Page"/>
              <param name="TextOffset" value="$TextOffset"/>
              <param name="MissionLevel" value="3"/>
              <param name="Difficulty" value="level.easy"/>
              <param name="Faction" value="$Definition.$ThreadData.$Faction"/>
              <param name="TargetSector" value="$TargetSector"/>
              <param name="TargetOffset" value="$TargetOffset"/>
              <param name="TargetRadius" value="$TargetRadius"/>
              <param name="TargetCount" value="$TargetCount"/>
              <param name="DeployableCategory" value="$DeployableCategory"/>
              <param name="DebugChance" value="$DebugChance"/>
            </cue>
            <!--Signalled by GM when an event happens e.g. mission successfully generated or mission ended.
            Feedback values saved to the static of this cue: $FeedbackValue and $EndFeedbackValue-->
            <cue name="DeployInPlace_GM_Event" instantiate="true">
              <conditions>
                <event_cue_signalled/>
              </conditions>
              <actions>
                <include_actions ref="MM_GM_Event"/>
              </actions>
            </cue>
          </cues>
        </cue>
      </cues>
    </cue>
    <cue name="SmuggleItem" instantiate="true" namespace="this">
      <conditions>
        <event_cue_signalled/>
        <!--Signal the static cue to trigger a new instance of this mission.
        Signalling a running instance will trigger a followup mission to run its GM library. See XXX_Activate_FollowUp cue for parameters-->
      </conditions>
      <actions>
        <set_value name="$Definition" exact="event.param"/>
        <set_value name="$Page" exact="$Definition.$Page"/>
        <set_value name="$TextOffset" exact="$Definition.$TextOffset.random"/>
        <set_value name="$FollowUp" exact="@$Definition.$FollowUp == true" comment="Does this mission follow directly after another, with parameters potentially passing between them. This changes how this mission is spawned and managed."/>
        <set_value name="$SuccessfullyGenerated" exact="false"/>
        <set_value name="$DebugChance" exact="$Definition.$ThreadData.$DebugChance"/>
        <assert value="not $FollowUp" text="'This mission does not currently have any parameters where it makes sense as a follow up mission. If there is, adjust the _Activate_FollowUp cue and remove this assert [Owen]'"/>
        <!--This mission is specific enough that it will only run if a matching text offset is found. If not, the offer will abort with an error.
        $Valid:
        0: Page/TextOffset not handled
        1: Correct Page/TextOffset but unable to setup mission
        2: Mission can attempt to be spawned -->
        <set_value name="$Valid" exact="0"/>
        <!--### SCALE PLATE PACT ###-->
        <do_if value="$Page == 30207">
          <do_if value="$TextOffset == 109000">
            <set_value name="$Valid" exact="1" comment="Valid text offset"/>
            <set_value name="$Faction" exact="$Definition.$ThreadData.$Faction"/>
            <include_actions ref="md.GM_BringItems.Setup_ExquisiteFood"/>
          </do_if>
        </do_if>
        <do_if value="$TargetStation">
          <set_value name="$Valid" exact="2" comment="Valid mission variables"/>
        </do_if>
        <!-- abort/error handling -->
        <do_if value="$Valid == 2">
          <do_if value="$FollowUp">
            <!--Followup missions use the namespace as the mission cue-->
            <set_value name="$MissionCue" exact="namespace"/>
          </do_if>
          <do_else>
            <set_value name="$MissionCue" exact="null"/>
          </do_else>
        </do_if>
        <do_else>
          <do_if value="$Valid == 1">
            <debug_text text="'Unable to find suitable variant variables for mission on ' + this + ' with combination of Page: ' + $Page + ' and TextOffset: ' + $TextOffset + '. [Owen]'" chance="$DebugChance"/>
          </do_if>
          <do_else>
            <assert value="false" text="'Attempting to spawn a mission on ' + this + ' but the combination of Page: ' + $Page + ' and TextOffset: ' + $TextOffset + ' do not match any definitions [Owen]'"/>
          </do_else>
          <signal_cue cue="$Definition.$SpawnFailedCue"/>
          <cancel_cue cue="this"/>
        </do_else>
      </actions>
      <cues>
        <cue name="SmuggleItem_FollowUp_Manager" onfail="cancel">
          <conditions>
            <check_value value="$FollowUp"/>
          </conditions>
          <actions>
            <!--If this is going to be a followup mission, first, inform the mission thread manager of this submission so it can be displayed in the offer.-->
            <!--Currently means you need to find the mission name here, instead of relying on the GM itself finding it.-->
            <set_value name="$MissionName" exact="readtext.{$Page}.{$TextOffset + 1}"/>
            <set_value name="$MissionDescription" exact="readtext.{$Page}.{$TextOffset + 2}"/>
            <debug_text text="'Attempting to signal the mission thread that followup mission cue ' + $MissionCue + ' is ready to be added to the offer'" chance="$DebugChance"/>
            <set_value name="$MissionDataTable" exact="table[$Name = $MissionName, $Cue = $MissionCue, $WrapperCue = $MissionCue, $FollowUp = true]"/>
            <signal_cue_instantly cue="$Definition.$SpawnSuccessCue" param="$MissionDataTable"/>
          </actions>
          <cues>
            <cue name="SmuggleItem_FollowUp_Offer_Accepted">
              <conditions>
                <event_cue_signalled cue="$Definition.$OfferAcceptedCue"/>
                <check_value value="event.param == $MissionCue"/>
              </conditions>
              <actions>
                <!--We don't want to call the GM yet. Create the mission here and pass it into the GM when the previous mission ends
                TODO @Owen Move this to a library in the GM file?-->
                <create_mission cue="$MissionCue" missionthread="$Definition.$ThreadCue" name="$MissionName" description="$MissionDescription" faction="$Definition.$ThreadData.$Faction" type="missiontype.deliver">
                  <briefing>
                    <!--TODO @Owen Better objective?-->
                    <objective step="1" action="objective.repair"/>
                  </briefing>
                </create_mission>
              </actions>
            </cue>
            <cue name="SmuggleItem_Aborted">
              <conditions>
                <event_cue_signalled cue="$Definition.$ForceCleanupCue"/>
              </conditions>
              <actions>
                <cancel_cue cue="namespace"/>
              </actions>
            </cue>
            <!--namespace signalled to activate followup mission
            event.param = Station to supply-->
            <cue name="SmuggleItem_Activate_FollowUp">
              <conditions>
                <event_cue_signalled cue="namespace"/>
              </conditions>
              <actions>
                <!--Check that the correct parameters have been passed-->
                <do_if value="false">
                  <!--Currently no followup case for this type of mission-->
                  <signal_cue cue="SmuggleItem_Create_GM"/>
                  <cancel_cue cue="parent"/>
                </do_if>
                <do_else>
                  <assert value="false" text="namespace + ' was signalled to start a followup mission, but the passed parameter ' + event.param + ' was not what this mission was expecting. Ending mission.'"/>
                  <!--TODO @Owen what if there is another followup mission?-->
                  <signal_cue_instantly cue="$Definition.$EndedCue" param="namespace"/>
                  <cancel_cue cue="namespace"/>
                </do_else>
              </actions>
            </cue>
          </cues>
        </cue>
        <cue name="SmuggleItem_Not_FollowUp" onfail="cancel">
          <conditions>
            <check_value value="not $FollowUp"/>
          </conditions>
          <actions>
            <signal_cue cue="SmuggleItem_Create_GM"/>
          </actions>
        </cue>
        <cue name="SmuggleItem_Create_GM" version="2">
          <conditions>
            <event_cue_signalled/>
          </conditions>
          <actions>
            <create_cue_actor cue="SmuggleItem_Create_GM" name="$MissionActor">
              <select faction="$Definition.$ThreadData.$Faction"/>
              <skills>
                <skill type="management" min="4" max="9"/>
                <skill type="morale" min="4" max="9"/>
                <skill type="piloting" min="2" max="9"/>
                <skill type="engineering" min="2" max="9"/>
                <skill type="boarding" min="2" max="9"/>
              </skills>
            </create_cue_actor>
            <set_entity_traits entity="$MissionActor" missionactor="true" customhandler="true"/>
          </actions>
          <patch sinceversion="2" state="complete">
            <debug_text text="'Clearing the role of Bring Item mission actor ' + $MissionActor + ' ' + $MissionActor.knownname" filter="savegame"/>
            <clear_entity_role entity="$MissionActor"/>
          </patch>
          <cues>
            <cue name="SmuggleItem_Ref" ref="md.GM_BringItems.Start">
              <param name="Client" value="$Definition.$ThreadData.$Contact"/>
              <param name="MissionCue" value="$MissionCue"/>
              <param name="MissionThread" value="$Definition.$ThreadCue"/>
              <param name="ReportSignalCue" value="SmuggleItem_GM_Event"/>
              <param name="WithoutOffer" value="true"/>
              <param name="WithoutOfferWaitCue" value="if $FollowUp then null else $Definition.$OfferAcceptedCue"/>
              <param name="ForceCleanup" value="$Definition.$ForceCleanupCue"/>
              <param name="Page" value="$Page"/>
              <param name="TextOffset" value="$TextOffset"/>
              <param name="MissionLevel" value="3"/>
              <param name="Difficulty" value="level.easy"/>
              <param name="DeliveryNPC" value="$MissionActor"/>
              <param name="DeliveryStation" value="$TargetStation"/>
              <param name="DeliveryItem" value="$DeliveryItem"/>
              <param name="DeliveryAmount" value="$DeliveryAmount"/>
              <param name="PlaceNPC" value="true"/>
              <param name="DebugChance" value="$DebugChance"/>
            </cue>
            <!--Signalled by GM when an event happens e.g. mission successfully generated or mission ended.
            Feedback values saved to the static of this cue: $FeedbackValue and $EndFeedbackValue-->
            <cue name="SmuggleItem_GM_Event" instantiate="true">
              <conditions>
                <event_cue_signalled/>
              </conditions>
              <actions>
                <include_actions ref="MM_GM_Event"/>
              </actions>
            </cue>
          </cues>
        </cue>
      </cues>
    </cue>
    <cue name="DestroyObject" instantiate="true" namespace="this">
      <conditions>
        <event_cue_signalled/>
        <!--Signal the static cue to trigger a new instance of this mission.
        Signalling a running instance will trigger a followup mission to run its GM library. See XXX_Activate_FollowUp cue for parameters-->
      </conditions>
      <actions>
        <set_value name="$Definition" exact="event.param"/>
        <set_value name="$Page" exact="$Definition.$Page"/>
        <set_value name="$TextOffset" exact="$Definition.$TextOffset.random"/>
        <set_value name="$FollowUp" exact="@$Definition.$FollowUp == true" comment="Does this mission follow directly after another, with parameters potentially passing between them. This changes how this mission is spawned and managed."/>
        <set_value name="$DebugChance" exact="$Definition.$ThreadData.$DebugChance"/>
        <set_value name="$Valid" exact="0"/>
        <assert value="not $FollowUp" text="'This mission does not currently have any parameters where it makes sense as a follow up mission. If there is, adjust the _Activate_FollowUp cue and remove this assert [Owen]'"/>
        <set_value name="$Difficulty" exact="level.medium"/>
        <set_value name="$MissionLevel" exact="3"/>
        <create_group groupname="$Targets"/>
        <!--This mission is specific enough that it will only run if a matching text offset is found. If not, the offer will abort with an error.-->
        <do_if value="$Page == 30207">
          <do_if value="$TextOffset == 100000" comment="Destroy satellites">
            <set_value name="$Valid" exact="1" comment="No valid page/offset"/>
            <set_value name="$AreaSectors" exact="$Definition.$ThreadData.$Area.$Sectors.clone"/>
            <shuffle_list list="$AreaSectors"/>
            <create_group groupname="$Targets"/>
            <do_all exact="$AreaSectors.count" counter="$areasectors_i">
              <find_object groupname="$Targets" deployablecategory="deployablecategory.satellite" multiple="true" space="$AreaSectors.{$areasectors_i}">
                <match owner="[faction.player, $Definition.$ThreadData.$Faction]" negate="true"/>
              </find_object>
              <!--Break after 8 or after the first 2 sectors-->
              <do_if value="$areasectors_i gt 2 or $Targets.count gt 8">
                <break/>
              </do_if>
            </do_all>
            <remove_value name="$AreaSectors"/>
            <do_if value="$Targets.count ge 4">
              <set_value name="$WantedCount" min="2" max="4"/>
              <do_all exact="$Targets.count - $WantedCount" counter="$wantedcount_i">
                <remove_from_group group="$Targets" object="$Targets.random"/>
              </do_all>
              <set_value name="$Valid" exact="2" comment="Valid mission variables"/>
            </do_if>
          </do_if>
          <do_elseif value="$TextOffset == 100100" comment="Destroy mines">
            <set_value name="$Valid" exact="1" comment="No valid page/offset"/>
            <set_value name="$AreaSectors" exact="$Definition.$ThreadData.$Area.$Sectors.clone"/>
            <shuffle_list list="$AreaSectors"/>
            <set_value name="$Mines" exact="[]"/>
            <do_all exact="$AreaSectors.count" counter="$areasectors_i">
              <find_object name="$Mine" deployablecategory="deployablecategory.mine" space="$AreaSectors.{$areasectors_i}">
                <match owner="[faction.player, $Definition.$ThreadData.$Faction]" negate="true"/>
              </find_object>
              <do_if value="$Mine">
                <find_object name="$Mines" space="$Mine.sector" multiple="true">
                  <match_distance object="$Mine" max="10km"/>
                </find_object>
                <!--Break after 8 or after the first 2 sectors-->
                <do_if value="$Mines.count gt 2">
                  <break/>
                </do_if>
              </do_if>
            </do_all>
            <remove_value name="$AreaSectors"/>
            <do_if value="$Mines.count ge 2">
              <shuffle_list list="$Mines"/>
              <create_group groupname="$Targets"/>
              <set_value name="$WantedCount" min="2" max="[$Mines.count, 5].min"/>
              <do_all exact="$WantedCount" counter="$wantedcount_i">
                <add_to_group groupname="$Targets" object="$Mines.{$wantedcount_i}"/>
              </do_all>
              <set_value name="$Valid" exact="2" comment="Valid mission variables"/>
            </do_if>
          </do_elseif>
          <do_elseif value="$TextOffset == 100200" comment="Destroy station parts">
            <set_value name="$Valid" exact="1" comment="No valid page/offset"/>
            <set_value name="$AreaSectors" exact="$Definition.$ThreadData.$Area.$Sectors.clone"/>
            <shuffle_list list="$AreaSectors"/>
            <do_all exact="$AreaSectors.count" counter="$areasectors_i">
              <find_station name="$PotentialStations" space="$AreaSectors.{$areasectors_i}" multiple="true">
                <match owner="[faction.player, $Definition.$ThreadData.$Faction]" negate="true"/>
              </find_station>
              <shuffle_list list="$PotentialStations"/>
              <do_for_each name="$PotentialStation" in="$PotentialStations">
                <find_object_component name="$PotentialTargets" object="$PotentialStation" surfaceelement="true" invulnerable="false" multiple="true"/>
                <do_if value="$PotentialTargets.count ge 3">
                  <shuffle_list list="$PotentialTargets"/>
                  <do_all exact="[$PotentialTargets.count, 3].min" counter="$target_i">
                    <add_to_group groupname="$Targets" object="$PotentialTargets.{$target_i}"/>
                  </do_all>
                  <set_value name="$Difficulty" exact="level.hard"/>
                  <set_value name="$MissionLevel" exact="3"/>
                  <set_value name="$Valid" exact="2" comment="all fine"/>
                  <break/>
                </do_if>
              </do_for_each>
              <do_if value="$Targets.count">
                <break/>
              </do_if>
            </do_all>
          </do_elseif>
        </do_if>
        <set_value name="$SuccessfullyGenerated" exact="false"/>
        <do_if value="$Valid == 2">
          <do_if value="$FollowUp">
            <!--Followup missions use the namespace as the mission cue-->
            <set_value name="$MissionCue" exact="namespace"/>
          </do_if>
          <do_else>
            <set_value name="$MissionCue" exact="null"/>
          </do_else>
        </do_if>
        <do_else>
          <do_if value="$Valid == 1">
            <debug_text text="'Unable to find suitable variant variables for mission on ' + this + ' with combination of Page: ' + $Page + ' and TextOffset: ' + $TextOffset + '. [Owen]'" chance="$DebugChance"/>
          </do_if>
          <do_else>
            <assert value="false" text="'Attempting to spawn a mission on ' + this + ' but the combination of Page: ' + $Page + ' and TextOffset: ' + $TextOffset + ' do not match any definitions [Owen]'"/>
          </do_else>
          <signal_cue cue="$Definition.$SpawnFailedCue"/>
          <cancel_cue cue="this"/>
        </do_else>
      </actions>
      <cues>
        <cue name="DestroyObject_FollowUp_Manager" onfail="cancel">
          <conditions>
            <check_value value="$FollowUp"/>
          </conditions>
          <actions>
            <!--If this is going to be a followup mission, first, inform the mission thread manager of this submission so it can be displayed in the offer.-->
            <!--Currently means you need to find the mission name here, instead of relying on the GM itself finding it.-->
            <set_value name="$MissionName" exact="readtext.{$Page}.{$TextOffset + 1}"/>
            <set_value name="$MissionDescription" exact="readtext.{$Page}.{$TextOffset + 2}"/>
            <debug_text text="'Attempting to signal the mission thread that followup mission cue ' + $MissionCue + ' is ready to be added to the offer'" chance="$DebugChance"/>
            <set_value name="$MissionDataTable" exact="table[$Name = $MissionName, $Cue = $MissionCue, $WrapperCue = $MissionCue, $FollowUp = true]"/>
            <signal_cue_instantly cue="$Definition.$SpawnSuccessCue" param="$MissionDataTable"/>
          </actions>
          <cues>
            <cue name="DestroyObject_FollowUp_Offer_Accepted">
              <conditions>
                <event_cue_signalled cue="$Definition.$OfferAcceptedCue"/>
                <check_value value="event.param == $MissionCue"/>
              </conditions>
              <actions>
                <!--We don't want to call the GM yet. Create the mission here and pass it into the GM when the previous mission ends
                TODO @Owen Move this to a library in the GM file?-->
                <create_mission cue="$MissionCue" missionthread="$Definition.$ThreadCue" name="$MissionName" description="$MissionDescription" faction="$Definition.$ThreadData.$Faction" type="missiontype.destroy">
                  <briefing>
                    <!--TODO @Owen Better objective?-->
                    <objective step="1" action="objective.destroy"/>
                  </briefing>
                </create_mission>
              </actions>
            </cue>
            <cue name="DestroyObject_Aborted">
              <conditions>
                <event_cue_signalled cue="$Definition.$ForceCleanupCue"/>
              </conditions>
              <actions>
                <cancel_cue cue="namespace"/>
              </actions>
            </cue>
            <!--namespace signalled to activate followup mission
            event.param = Station to supply-->
            <cue name="DestroyObject_Activate_FollowUp">
              <conditions>
                <event_cue_signalled cue="namespace"/>
              </conditions>
              <actions>
                <!--Check that the correct parameters have been passed-->
                <do_if value="false">
                  <!--Currently no followup case for this type of mission-->
                  <signal_cue cue="DestroyObject_Create_GM"/>
                  <cancel_cue cue="parent"/>
                </do_if>
                <do_else>
                  <assert value="false" text="namespace + ' was signalled to start a followup mission, but the passed parameter ' + event.param + ' was not what this mission was expecting. Ending mission.'"/>
                  <!--TODO @Owen what if there is another followup mission?-->
                  <signal_cue_instantly cue="$Definition.$EndedCue" param="namespace"/>
                  <cancel_cue cue="namespace"/>
                </do_else>
              </actions>
            </cue>
          </cues>
        </cue>
        <cue name="DestroyObject_Not_FollowUp" onfail="cancel">
          <conditions>
            <check_value value="not $FollowUp"/>
          </conditions>
          <actions>
            <signal_cue cue="DestroyObject_Create_GM"/>
          </actions>
        </cue>
        <cue name="DestroyObject_Create_GM">
          <conditions>
            <event_cue_signalled/>
          </conditions>
          <cues>
            <!-- Trigger actual GM, passing the specified parameters -->
            <cue name="Destroy_Objects__Ref" ref="md.GM_Destroy_Objects.Start">
              <param name="Client" value="$Definition.$ThreadData.$Contact"/>
              <param name="MissionCue" value="$MissionCue"/>
              <param name="MissionThread" value="$Definition.$ThreadCue"/>
              <param name="ReportSignalCue" value="DestroyObject_GM_Event"/>
              <param name="WithoutOffer" value="true"/>
              <param name="WithoutOfferWaitCue" value="if $FollowUp then null else $Definition.$OfferAcceptedCue"/>
              <param name="ForceCleanup" value="$Definition.$ForceCleanupCue"/>
              <param name="Page" value="$Page"/>
              <param name="TextOffset" value="$TextOffset"/>
              <param name="MissionLevel" value="$MissionLevel"/>
              <param name="Difficulty" value="$Difficulty"/>
              <param name="TargetSector" value="$Targets.{1}.sector"/>
              <param name="Targets" value="$Targets"/>
              <param name="DebugChance" value="$DebugChance"/>
            </cue>
            <!--Signalled by GM when an event happens e.g. mission successfully generated or mission ended.
            Feedback values saved to the static of this cue: $FeedbackValue and $EndFeedbackValue-->
            <cue name="DestroyObject_GM_Event" instantiate="true">
              <conditions>
                <event_cue_signalled/>
              </conditions>
              <actions>
                <include_actions ref="MM_GM_Event"/>
              </actions>
            </cue>
          </cues>
        </cue>
      </cues>
    </cue>
    <cue name="HackPanel" instantiate="true" namespace="this">
      <conditions>
        <event_cue_signalled/>
        <!--Signal the static cue to trigger a new instance of this mission.
        Signalling a running instance will trigger a followup mission to run its GM library. See XXX_Activate_FollowUp cue for parameters-->
      </conditions>
      <actions>
        <set_value name="$Definition" exact="event.param"/>
        <set_value name="$Page" exact="$Definition.$Page"/>
        <set_value name="$TextOffset" exact="$Definition.$TextOffset.random"/>
        <set_value name="$FollowUp" exact="@$Definition.$FollowUp == true" comment="Does this mission follow directly after another, with parameters potentially passing between them. This changes how this mission is spawned and managed."/>
        <set_value name="$SuccessfullyGenerated" exact="false"/>
        <set_value name="$DebugChance" exact="$Definition.$ThreadData.$DebugChance"/>
        <assert value="not $FollowUp" text="'This mission does not currently have any parameters where it makes sense as a follow up mission. If there is, adjust the _Activate_FollowUp cue and remove this assert [Owen]'"/>
        <!--This mission is specific enough that it will only run if a matching text offset is found. If not, the offer will abort with an error.
        $Valid:
        0: Page/TextOffset not handled
        1: Correct Page/TextOffset but unable to setup mission
        2: Mission can attempt to be spawned -->
        <set_value name="$Valid" exact="0"/>
        <!--### SCALEPLATE PIRATES ###-->
        <do_if value="$Page == 30207">
          <do_if value="$TextOffset == 115000">
            <set_value name="$Valid" exact="1" comment="Valid text offset"/>
            <set_value name="$PanelType" exact="[controlpaneltype.hack_storage, controlpaneltype.hack_discount].random"/>
            <find_cluster_in_range name="$LocalClusters" object="player.entity" maxdistance="2" multiple="true"/>
            <shuffle_list list="$LocalClusters"/>
            <do_all exact="$LocalClusters.count" counter="$cluster_i">
              <find_station groupname="$TargetObjects" space="$LocalClusters.{$cluster_i}" multiple="false">
                <match owner="[faction.player, faction.xenon, faction.xenon1, faction.xenon2, faction.xenon3, faction.xenon4, faction.xenon5, faction.xenon6, faction.khaak, faction.scaleplate]" negate="true"/>
              </find_station>
              <do_if value="$TargetObjects.count">
                <set_value name="$Valid" exact="2" comment="Valid mission variables"/>
                <break/>
              </do_if>
            </do_all>
          </do_if>
        </do_if>
        <do_if value="$Valid == 2">
          <do_if value="$FollowUp">
            <!--Followup missions use the namespace as the mission cue-->
            <set_value name="$MissionCue" exact="namespace"/>
          </do_if>
          <do_else>
            <set_value name="$MissionCue" exact="null"/>
          </do_else>
        </do_if>
        <do_else>
          <do_if value="$Valid == 1">
            <debug_text text="'Unable to find suitable variant variables for mission on ' + this + ' with combination of Page: ' + $Page + ' and TextOffset: ' + $TextOffset + '. [Owen]'" chance="$DebugChance"/>
          </do_if>
          <do_else>
            <assert value="false" text="'Attempting to spawn a mission on ' + this + ' but the combination of Page: ' + $Page + ' and TextOffset: ' + $TextOffset + ' do not match any definitions [Owen]'"/>
          </do_else>
          <signal_cue cue="$Definition.$SpawnFailedCue"/>
          <cancel_cue cue="this"/>
        </do_else>
      </actions>
      <cues>
        <cue name="HackPanel_FollowUp_Manager" onfail="cancel">
          <conditions>
            <check_value value="$FollowUp"/>
          </conditions>
          <actions>
            <!--If this is going to be a followup mission, first, inform the mission thread manager of this submission so it can be displayed in the offer.-->
            <!--Currently means you need to find the mission name here, instead of relying on the GM itself finding it.-->
            <set_value name="$MissionName" exact="readtext.{$Page}.{$TextOffset + 1}"/>
            <set_value name="$MissionDescription" exact="readtext.{$Page}.{$TextOffset + 2}"/>
            <debug_text text="'Attempting to signal the mission thread that followup mission cue ' + $MissionCue + ' is ready to be added to the offer'" chance="$DebugChance"/>
            <set_value name="$MissionDataTable" exact="table[$Name = $MissionName, $Cue = $MissionCue, $WrapperCue = $MissionCue, $FollowUp = true]"/>
            <signal_cue_instantly cue="$Definition.$SpawnSuccessCue" param="$MissionDataTable"/>
          </actions>
          <cues>
            <cue name="HackPanel_FollowUp_Offer_Accepted">
              <conditions>
                <event_cue_signalled cue="$Definition.$OfferAcceptedCue"/>
                <check_value value="event.param == $MissionCue"/>
              </conditions>
              <actions>
                <!--We don't want to call the GM yet. Create the mission here and pass it into the GM when the previous mission ends
                TODO @Owen Move this to a library in the GM file?-->
                <create_mission cue="$MissionCue" missionthread="$Definition.$ThreadCue" name="$MissionName" description="$MissionDescription" faction="$Definition.$ThreadData.$Faction" type="missiontype.deliver">
                  <briefing>
                    <!--TODO @Owen Better objective?-->
                    <objective step="1" action="objective.repair"/>
                  </briefing>
                </create_mission>
              </actions>
            </cue>
            <cue name="HackPanel_Aborted">
              <conditions>
                <event_cue_signalled cue="$Definition.$ForceCleanupCue"/>
              </conditions>
              <actions>
                <cancel_cue cue="namespace"/>
              </actions>
            </cue>
            <!--namespace signalled to activate followup mission
            event.param = Station to supply-->
            <cue name="HackPanel_Activate_FollowUp">
              <conditions>
                <event_cue_signalled cue="namespace"/>
              </conditions>
              <actions>
                <!--Check that the correct parameters have been passed-->
                <do_if value="false">
                  <!--Currently no followup case for this type of mission-->
                  <signal_cue cue="HackPanel_Create_GM"/>
                  <cancel_cue cue="parent"/>
                </do_if>
                <do_else>
                  <assert value="false" text="namespace + ' was signalled to start a followup mission, but the passed parameter ' + event.param + ' was not what this mission was expecting. Ending mission.'"/>
                  <!--TODO @Owen what if there is another followup mission?-->
                  <signal_cue_instantly cue="$Definition.$EndedCue" param="namespace"/>
                  <cancel_cue cue="namespace"/>
                </do_else>
              </actions>
            </cue>
          </cues>
        </cue>
        <cue name="HackPanel_Not_FollowUp" onfail="cancel">
          <conditions>
            <check_value value="not $FollowUp"/>
          </conditions>
          <actions>
            <signal_cue cue="HackPanel_Create_GM"/>
          </actions>
        </cue>
        <cue name="HackPanel_Create_GM">
          <conditions>
            <event_cue_signalled/>
          </conditions>
          <cues>
            <cue name="HackPanel_Ref" ref="md.GM_HackPanel.Start">
              <param name="Client" value="$Definition.$ThreadData.$Contact"/>
              <param name="MissionCue" value="$MissionCue"/>
              <param name="MissionThread" value="$Definition.$ThreadCue"/>
              <param name="ReportSignalCue" value="HackPanel_GM_Event"/>
              <param name="WithoutOffer" value="true"/>
              <param name="WithoutOfferWaitCue" value="if $FollowUp then null else $Definition.$OfferAcceptedCue"/>
              <param name="ForceCleanup" value="$Definition.$ForceCleanupCue"/>
              <param name="Page" value="$Page"/>
              <param name="TextOffset" value="$TextOffset"/>
              <param name="MissionLevel" value="3"/>
              <param name="Difficulty" value="level.medium"/>
              <param name="Faction" value="$Definition.$ThreadData.$Faction"/>
              <param name="Targets_Param" value="$TargetObjects"/>
              <param name="PanelType" value="$PanelType"/>
              <param name="DebugChance" value="$DebugChance"/>
            </cue>
            <!--Signalled by GM when an event happens e.g. mission successfully generated or mission ended.
            Feedback values saved to the static of this cue: $FeedbackValue and $EndFeedbackValue-->
            <cue name="HackPanel_GM_Event" instantiate="true">
              <conditions>
                <event_cue_signalled/>
              </conditions>
              <actions>
                <include_actions ref="MM_GM_Event"/>
              </actions>
            </cue>
          </cues>
        </cue>
      </cues>
    </cue>
  </cues>
</mdscript>
