<?xml version='1.0' encoding='utf-8'?>
<mdscript xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" name="NPC_Instantiation" xsi:noNamespaceSchemaLocation="md.xsd">
  <cues>
    <!--TODO @Owen DockArea > WalkableModule-->
    <cue name="Instantiation" version="7">
      <actions>
        <create_group groupname="$PlayerSpace"/>
        <create_group groupname="$LargeObjects"/>
        <create_group groupname="$SmallObjects"/>
        <create_group groupname="$TrackedObjects"/>
        <set_value name="$ObjectClasses" exact="[class.station, class.ship]"/>
        <!--class.ship_xs currently removed as .ismasstraffic fails for MT ships which have just been connected to the zone-->
        <set_value name="$SmallObjectClasses" exact="[class.ship_s, class.ship_m]"/>
        <set_value name="$LargeObjectClasses" exact="[class.station, class.ship_l, class.ship_xl]"/>
        <set_value name="$DockareaBoostedFactions" exact="[faction.alliance, faction.scaleplate, faction.buccaneers]" comment="Factions with a higher minimum amount of desired dockarea instanced NPCs"/>
        <set_value name="$DockareaAlliedFactionOverrides" exact="table[]"/>
        <set_value name="$ButlerMacros" exact="[]"/>
        <set_value name="$GamblingDenWelfareModuleMacros" exact="[macro.welfare_gen_gamblinghall_01_macro]"/>
        <set_value name="$CasinoWelfareModuleMacros" exact="[]"/>
        <create_group groupname="$ExcludedObjects" comment="Objects to be excluded from NPC instancing"/>
        <!-- <set_value name="$debugchance" exact="player.debug * 100" /> -->
      </actions>
      <patch sinceversion="2">
        <find_ship name="$patch_playerships" owner="faction.player" space="player.galaxy" multiple="true"/>
        <do_all exact="$patch_playerships.count" counter="$i">
          <find_object_component name="$patch_npcs" class="class.npc" owner="faction.player" temporaryentity="false" object="$patch_playerships.{$i}" multiple="true"/>
          <do_all exact="$patch_npcs.count" counter="$k">
            <do_if value="$patch_npcs.{$k}.role == entityrole.service or $patch_npcs.{$k}.role == entityrole.marine">
              <debug_text text="'Patching NPC ' + $patch_npcs.{$k} + ' ' + $patch_npcs.{$k}.knownname + ' who should be flagged as temporary'" filter="savegame"/>
              <set_entity_traits entity="$patch_npcs.{$k}" temporary="true"/>
            </do_if>
          </do_all>
        </do_all>
        <remove_value name="$patch_playerships"/>
        <remove_value name="$patch_patch_npcs"/>
      </patch>
      <patch sinceversion="3">
        <set_value name="$DockareaBoostedFactions" exact="[faction.alliance, faction.scaleplate, faction.buccaneers]"/>
      </patch>
      <patch sinceversion="4">
        <create_group groupname="$ExcludedObjects"/>
      </patch>
      <patch sinceversion="5">
        <set_value name="$DockareaAlliedFactionOverrides" exact="table[]"/>
      </patch>
      <patch sinceversion="6">
        <set_value name="$ButlerMacros" exact="[]"/>
      </patch>
      <patch sinceversion="7">
        <set_value name="$GamblingDenWelfareModuleMacros" exact="[macro.welfare_gen_gamblinghall_01_macro]"/>
        <do_if value="not $CasinoWelfareModuleMacros?">
          <set_value name="$CasinoWelfareModuleMacros" exact="[]"/>
        </do_if>
      </patch>
      <cues>
        <cue name="VerifyGroups" instantiate="true">
          <conditions>
            <event_cue_signalled/>
          </conditions>
          <actions>
            <debug_text text="'Verifying NPC instantiation groups for player space: ' + $PlayerSpace.{1}.knownname"/>
            <debug_text text="'Large objects: ' + $LargeObjects.count"/>
            <do_all exact="$LargeObjects.count" counter="$i">
              <debug_text text="$LargeObjects.{$i} + ' ' + $LargeObjects.{$i}.knownname + ' attention: ' + $LargeObjects.{$i}.attention"/>
              <assert value="$LargeObjects.{$i}.isrealclass.{$LargeObjectClasses}" text="'Incorrect class [Owen]'"/>
              <assert value="$LargeObjects.{$i}.hascontext.{$PlayerSpace.{1}}" text="'Object not in player space [Owen]'"/>
            </do_all>
            <debug_text text="'Small objects: ' + $SmallObjects.count"/>
            <do_all exact="$SmallObjects.count" counter="$i">
              <debug_text text="$SmallObjects.{$i} + ' ' + $SmallObjects.{$i}.knownname + ' attention: ' + $SmallObjects.{$i}.attention"/>
              <assert value="$SmallObjects.{$i}.isrealclass.{$SmallObjectClasses}" text="'Incorrect class [Owen]'"/>
              <assert value="not $SmallObjects.{$i}.ismasstraffic" text="'Ship is mass traffic [Owen]'"/>
              <assert value="not $SmallObjects.{$i}.isunit" text="'Ship is a unit [Owen]'"/>
              <assert value="$SmallObjects.{$i}.hascontext.{$PlayerSpace.{1}}" text="'Object not in player space'"/>
            </do_all>
            <debug_text text="'Instantiated objects: ' + $TrackedObjects.count"/>
            <do_all exact="$TrackedObjects.count" counter="$i">
              <debug_text text="$TrackedObjects.{$i} + ' ' + $TrackedObjects.{$i}.knownname + ' attention: ' + $TrackedObjects.{$i}.attention"/>
              <assert value="$TrackedObjects.{$i}.attention ge attention.visible" text="'Object not visible [Owen]'"/>
            </do_all>
            <do_if value="player.container">
              <assert value="$TrackedObjects.indexof.{player.container}" text="'player container ' + player.container + ' ' + player.container.knownname + ' is not a tracked object. [Owen]'"/>
            </do_if>
            <find_object groupname="static.$Objects" multiple="true" class="$ObjectClasses" masstraffic="false" checkoperational="false" recursive="true" space="$PlayerSpace.{1}"/>
            <debug_text text="'Checking that the ' + static.$Objects.count + ' local objects are known to this library'"/>
            <do_all exact="static.$Objects.count" counter="$i">
              <do_if value="static.$Objects.{$i}.isrealclass.{$LargeObjectClasses}">
                <assert value="$LargeObjects.indexof.{static.$Objects.{$i}}" text="static.$Objects.{$i} + ' ' + static.$Objects.{$i}.knownname + ' is not in the large object list'"/>
              </do_if>
              <do_elseif value="static.$Objects.{$i}.isrealclass.{$SmallObjectClasses}">
                <do_if value="not static.$Objects.{$i}.isunit">
                  <assert value="$SmallObjects.indexof.{static.$Objects.{$i}}" text="static.$Objects.{$i} + ' ' + static.$Objects.{$i}.knownname + ' is not in the small object list'"/>
                </do_if>
              </do_elseif>
            </do_all>
          </actions>
        </cue>
        <cue name="GameStarted">
          <conditions>
            <event_cue_signalled cue="md.Setup.Start"/>
          </conditions>
          <actions>
            <include_actions ref="FindObjects"/>
          </actions>
        </cue>
        <cue name="PlayerChangesSpace" instantiate="true">
          <conditions>
            <event_object_changed_sector object="player.entity"/>
          </conditions>
          <actions>
            <include_actions ref="FindObjects"/>
          </actions>
        </cue>
        <library name="FindObjects">
          <actions>
            <!-- Update player space group, used by group listener cues -->
            <clear_group group="$PlayerSpace"/>
            <add_to_group groupname="$PlayerSpace" object="if player.sector then player.sector else player.zone" comment="sector or superhighway (player.sector is null in superhighways)"/>
            <debug_text text="'Searching for new objects in space: ' + $PlayerSpace.{1}.knownname" chance="@$debugchance"/>
            <!-- Don't replace $LargeObjects or $SmallObjects, so we don't have to reset the group listener cues. But we have to look at each member individually anyway. -->
            <find_object groupname="$NewObjects" multiple="true" class="$ObjectClasses" excluded="$ExcludedObjects" masstraffic="false" checkoperational="false" recursive="true" space="$PlayerSpace.{1}"/>
            <!-- Remove objects that are not in player space any more, and add new objects in player space (taking into account that the player may be on a large object that travels around) -->
            <!-- NOTE: OnRemoveLargeObject/OnRemoveSmallObject removes object from $LargeObjects/$SmallObjects, so a reverse loop is required -->
            <do_all exact="$LargeObjects.count" counter="$i" reverse="true">
              <do_if value="not $NewObjects.indexof.{$LargeObjects.{$i}}">
                <signal_cue_instantly cue="OnRemoveLargeObject" param="$LargeObjects.{$i}"/>
              </do_if>
            </do_all>
            <do_all exact="$SmallObjects.count" counter="$i" reverse="true">
              <do_if value="not $NewObjects.indexof.{$SmallObjects.{$i}}">
                <signal_cue_instantly cue="OnRemoveSmallObject" param="$SmallObjects.{$i}"/>
              </do_if>
            </do_all>
            <set_value name="$NewObject" exact="null"/>
            <do_all exact="$NewObjects.count" counter="$i">
              <set_value name="$NewObject" exact="$NewObjects.{$i}"/>
              <do_if value="$NewObject.isrealclass.{$SmallObjectClasses}">
                <!--TODO @Owen 'isunit' find filter-->
                <do_if value="not $SmallObjects.indexof.{$NewObject} and not $NewObject.isunit">
                  <signal_cue_instantly cue="OnAddSmallObject" param="$NewObject"/>
                </do_if>
              </do_if>
              <do_elseif value="$NewObject.isrealclass.{$LargeObjectClasses}">
                <do_if value="not $LargeObjects.indexof.{$NewObject}">
                  <signal_cue_instantly cue="OnAddLargeObject" param="$NewObject"/>
                </do_if>
              </do_elseif>
            </do_all>
            <remove_value name="$NewObject"/>
            <remove_value name="$NewObjects"/>
          </actions>
        </library>
        <cue name="OnAddLargeObject" instantiate="true">
          <conditions>
            <check_any>
              <event_cue_signalled/>
              <check_all>
                <event_object_entered group="$PlayerSpace"/>
                <check_value value="event.param.isrealclass.{$LargeObjectClasses}"/>
                <check_value value="not $LargeObjects.indexof.{event.param} and not $ExcludedObjects.indexof.{event.param}"/>
              </check_all>
            </check_any>
          </conditions>
          <actions>
            <add_to_group groupname="$LargeObjects" object="event.param"/>
            <do_if value="event.param.attention" min="attention.visible">
              <do_if value="not $TrackedObjects.indexof.{event.param}">
                <signal_cue_instantly cue="StartTrackingObject" param="event.param"/>
              </do_if>
            </do_if>
          </actions>
        </cue>
        <cue name="OnRemoveLargeObject" instantiate="true">
          <conditions>
            <check_any>
              <event_cue_signalled/>
              <check_all>
                <event_object_left group="$PlayerSpace"/>
                <check_value value="event.param.isrealclass.{$LargeObjectClasses}"/>
                <check_value value="$LargeObjects.indexof.{event.param}"/>
                <check_value value="player.container != event.param and player.entity.commoncontext.{event.param}.isclass.space"/>
              </check_all>
            </check_any>
          </conditions>
          <actions>
            <remove_from_group group="$LargeObjects" object="event.param"/>
            <do_if value="$TrackedObjects.indexof.{event.param}">
              <signal_cue_instantly cue="StopTrackingObject" param="event.param"/>
            </do_if>
          </actions>
        </cue>
        <cue name="OnAddSmallObject" instantiate="true">
          <conditions>
            <check_any>
              <event_cue_signalled/>
              <check_all>
                <event_object_entered group="$PlayerSpace"/>
                <check_value value="event.param.isrealclass.{$SmallObjectClasses} and not event.param.isunit and not event.param.ismasstraffic"/>
                <check_value value="not $SmallObjects.indexof.{event.param} and not $ExcludedObjects.indexof.{event.param}"/>
              </check_all>
            </check_any>
          </conditions>
          <actions>
            <add_to_group groupname="$SmallObjects" object="event.param"/>
            <do_if value="event.param.attention" min="attention.visible">
              <do_if value="not $TrackedObjects.indexof.{event.param}">
                <signal_cue_instantly cue="StartTrackingObject" param="event.param"/>
              </do_if>
            </do_if>
          </actions>
        </cue>
        <cue name="OnRemoveSmallObject" instantiate="true">
          <conditions>
            <check_any>
              <event_cue_signalled/>
              <check_all>
                <event_object_left group="$PlayerSpace"/>
                <check_value value="event.param.isrealclass.{$SmallObjectClasses}"/>
                <check_value value="$SmallObjects.indexof.{event.param}"/>
                <check_value value="player.container != event.param and player.entity.commoncontext.{event.param}.isclass.space"/>
              </check_all>
            </check_any>
          </conditions>
          <actions>
            <remove_from_group group="$SmallObjects" object="event.param"/>
            <do_if value="$TrackedObjects.indexof.{event.param}">
              <signal_cue_instantly cue="StopTrackingObject" param="event.param"/>
            </do_if>
          </actions>
        </cue>
        <cue name="OnObjectVisible" instantiate="true">
          <conditions>
            <check_any>
              <event_object_changed_attention group="$SmallObjects"/>
              <event_object_changed_attention group="$LargeObjects"/>
            </check_any>
            <check_value value="event.param" min="attention.visible"/>
            <check_value value="not $TrackedObjects.indexof.{event.object}"/>
          </conditions>
          <actions>
            <signal_cue_instantly cue="StartTrackingObject" param="event.object"/>
          </actions>
        </cue>
        <cue name="OnObjectInvisible" instantiate="true">
          <conditions>
            <check_any>
              <event_object_changed_attention group="$SmallObjects"/>
              <event_object_changed_attention group="$LargeObjects"/>
            </check_any>
            <check_value value="event.param" min="attention.visible" negate="true"/>
            <check_value value="$TrackedObjects.indexof.{event.object}"/>
          </conditions>
          <actions>
            <signal_cue_instantly cue="StopTrackingObject" param="event.object"/>
          </actions>
        </cue>
        <!--TODO @Owen - station - ship built events for state change-->
        <cue name="OnShipBuildComplete" instantiate="true">
          <conditions>
            <event_build_finished group="$TrackedObjects"/>
            <check_value value="event.param3.isshipbuild and event.param3.buildobject.isclass.ship"/>
            <check_value value="$TrackedObjects.indexof.{event.param3.buildobject}"/>
          </conditions>
          <actions>
            <signal_cue_instantly cue="TrackedShipBuilt" param="event.param3.buildobject"/>
          </actions>
        </cue>
        <cue name="OnPropDespawning" instantiate="true">
          <conditions>
            <event_object_props_despawning group="$TrackedObjects"/>
          </conditions>
          <actions>
            <debug_text text="player.age + ' prop despawn ' + event.object + ' ' + event.object.knownname" chance="@$debugchance"/>
            <signal_cue_instantly cue="RemoveNPCs" param="[event.param, false]"/>
          </actions>
        </cue>
        <cue name="OnNPCSlotsValidated" instantiate="true">
          <conditions>
            <event_npc_slots_validated group="$TrackedObjects" recalculation="false"/>
          </conditions>
          <actions>
            <debug_text text="player.age + ' NPC slots validated on ' + event.object.knownname + ' for interior ' + event.param +  ' ' + event.param.knownname" chance="@$debugchance"/>
            <include_actions ref="InstantiateNPCs"/>
          </actions>
        </cue>
        <cue name="AssignAirMarshal" instantiate="true">
          <conditions>
            <check_any>
              <check_all>
                <event_object_dock_assigned_at group="$TrackedObjects"/>
                <check_value value="event.param2.isoperational"/>
                <check_value value="not event.param2.isunit"/>
              </check_all>
              <check_all>
                <!--event.param [$Dock, $AssignedShip]-->
                <event_cue_signalled/>
                <check_value value="event.param.{2}.isoperational and not event.param.{2}.isunit"/>
              </check_all>
            </check_any>
          </conditions>
          <actions>
            <do_if value="event.name == 'event_object_dock_assigned_at'">
              <set_value name="this.$Object" exact="event.object"/>
              <set_value name="this.$Dock" exact="event.param"/>
              <debug_text text="'Triggered via ' + event.name + ' ' + this.$Object + ' ' + this.$Object.knownname + ' had ship ' + event.param2 + ' ' + event.param2.knownname + ' assigned to dock ' + this.$Dock + ' ' + this.$Dock.knownname" chance="@$debugchance"/>
            </do_if>
            <do_else>
              <set_value name="this.$Object" exact="event.param.{1}.object"/>
              <set_value name="this.$Dock" exact="event.param.{1}"/>
              <debug_text text="'Triggered via ' + event.name + ' ' + this.$Object + ' ' + this.$Object.knownname + ' had ship ' + event.param.{2} + ' ' + event.param.{2}.knownname + ' assigned to dock ' + this.$Dock + ' ' + this.$Dock.knownname" chance="@$debugchance"/>
            </do_else>
            <find_npc_slot name="this.$Destination" object="this.$Dock" excludefilled="false" tags="tag.airmarshal"/>
            <do_if value="this.$Destination">
              <!--If airmarshal slot can not be found, the dock isn't yet ready for NPCs to be placed (or it's missing in the asset, in which case, do nothing.)-->
              <set_value name="this.$AssignedAirMarshal" exact="null"/>
              <create_list name="this.$FreeWorkers"/>
              <set_value name="this.$marshalraces" exact="[race.argon, race.split, race.terran]"/>
              <do_for_each name="$worker" in="this.$Object.roleentities">
                <do_if value="$worker.exists and $worker.role == entityrole.service and this.$marshalraces.indexof.{$worker.race}">
                  <do_if value="$worker.hastool">
                    <debug_text text="$worker.knownname + ' has tool, not using as AirMarshal'" chance="@$debugchance"/>
                  </do_if>
                  <do_elseif value="$worker.$casual?">
                    <debug_text text="$worker.knownname + ' is a casual, not an AirMarshal'" chance="@$debugchance"/>
                  </do_elseif>
                  <do_elseif value="$worker.$roulette_dealer_slot?">
                    <debug_text text="$worker.knownname + ' is a dealer, not an AirMarshal'" chance="@$debugchance"/>
                  </do_elseif>
                  <do_elseif value="not @$worker.$airmarshal_dockingbay.exists">
                    <append_to_list name="this.$FreeWorkers" exact="$worker"/>
                  </do_elseif>
                  <do_elseif value="$worker.$airmarshal_dockingbay == this.$Dock">
                    <set_value name="this.$AssignedAirMarshal" exact="$worker"/>
                    <break/>
                  </do_elseif>
                </do_if>
              </do_for_each>
              <do_if value="not this.$AssignedAirMarshal and this.$FreeWorkers.count">
                <debug_text text="'There are ' + this.$Object.roleentities.count + ' workers on this object. ' + this.$FreeWorkers.count + ' are free.'" chance="@$debugchance"/>
                <set_value name="this.$DistanceTable" exact="table[]"/>
                <do_all exact="this.$FreeWorkers.count" counter="$i">
                  <!--TODO @Owen - improve selection by distance. Walk distance may actually be longer than direct distance-->
                  <set_value name="this.$DistanceTable.{this.$FreeWorkers.{$i}}" exact="this.$FreeWorkers.{$i}.distanceto.{this.$Destination}"/>
                </do_all>
                <set_value name="this.$AssignedAirMarshal" exact="this.$DistanceTable.keys.sorted.{1}"/>
              </do_if>
              <do_elseif value="this.$AssignedAirMarshal">
                <debug_text text="this.$AssignedAirMarshal + ' ' + this.$AssignedAirMarshal.knownname + ' is already assigned to the dock'" chance="@$debugchance"/>
              </do_elseif>
              <do_if value="this.$AssignedAirMarshal">
                <set_value name="this.$AssignedAirMarshal.$airmarshal_dockingbay" exact="this.$Dock"/>
                <debug_text text="'signalling marshal ' + this.$AssignedAirMarshal + ' ' + this.$AssignedAirMarshal.knownname + ' to work for dock ' + this.$Dock + ' ' + this.$Dock.knownname" chance="@$debugchance"/>
                <do_if value="not this.$AssignedAirMarshal.roomslot or this.$AssignedAirMarshal.roomslot.component != this.$AssignedAirMarshal.$airmarshal_dockingbay or (this.$AssignedAirMarshal.roomslot.component == this.$AssignedAirMarshal.$airmarshal_dockingbay and not this.$AssignedAirMarshal.roomslot.hastag.airmarshal)">
                  <signal_objects object="this.$AssignedAirMarshal" param="'npc_state_reinit'"/>
                </do_if>
                <do_else>
                  <!-- If we fall into this case, the airmarshal is already in position. This means they are probably also in the correct state and do not need signalling, or are about to be -->
                  <debug_text text="'NPC is already in position - for now assume they are standing by'" chance="@$debugchance"/>
                </do_else>
              </do_if>
            </do_if>
          </actions>
        </cue>
        <!--event.param = object-->
        <cue name="PlaceShiptrader" instantiate="true">
          <conditions>
            <event_cue_signalled/>
          </conditions>
          <actions>
            <set_value name="this.$Object" exact="event.param"/>
            <set_value name="this.$ShipTrader" exact="this.$Object.shiptrader"/>
            <assert value="$TrackedObjects.indexof.{this.$Object}" text="'Shiptrader containing object ' + this.$Object + ' ' + (if this.$Object then + this.$Object.knownname else 'invalid') + ' is not a tracked object [Owen]'"/>
            <do_if value="this.$ShipTrader and this.$ShipTrader.hascontext.{this.$Object} and not @this.$ShipTrader.roomslot.hastag.{controlpost.shiptrader.tag}">
              <!--shiptrader is on the object but not in a valid shiptrader position, attempt to find one-->
              <debug_text text="'Attempting to find a suitable slot for shiptrader ' + this.$ShipTrader + ' ' + this.$ShipTrader.knownname + ' on ' + this.$Object + ' ' + this.$Object.knownname" chance="@$debugchance"/>
              <!--TODO @Owen, using the tag here is a bit of a hack as using 'post' will not find slots on corners-->
              <find_npc_slot name="this.$Slot" object="this.$Object" tags="controlpost.shiptrader.tag"/>
              <do_if value="this.$Slot">
                <debug_text text="'Adding shiptrader ' + this.$ShipTrader + ' ' + this.$ShipTrader.knownname + ' to slot ' + this.$Slot" chance="@$debugchance"/>
                <add_actor_to_room actor="this.$ShipTrader" slot="this.$Slot"/>
              </do_if>
            </do_if>
          </actions>
        </cue>
        <!-- event.param == placement component (station, walkablemodule or room. Not ship) -->
        <cue name="ReturnShiptrader" instantiate="true">
          <conditions>
            <event_cue_signalled/>
          </conditions>
          <actions>
            <!--Attempt to return the shiptrader to the control room-->
            <do_if value="event.param.isclass.station">
              <set_value name="this.$Object" exact="event.param"/>
            </do_if>
            <do_elseif value="event.param.isclass.[class.walkablemodule, class.room]">
              <set_value name="this.$Object" exact="event.param.object"/>
            </do_elseif>
            <do_else>
              <assert value="event.param.isclass.[class.station, class.walkablemodule, class.room]" text="'object ' + event.param + ' ' + event.param.knownname + ' is neither a station, dockarea or room [Owen]'" break="1"/>
            </do_else>
            <do_if value="@this.$Object.exists">
              <set_value name="this.$ShipTrader" exact="this.$Object.shiptrader"/>
              <do_if value="this.$ShipTrader and this.$ShipTrader.hascontext.{this.$Object}">
                <!--shiptrader is on the object. move them to the default shiptrader location-->
                <do_if value="this.$Object == event.param">
                  <debug_text text="'Attempting to return the shiptrader ' + this.$ShipTrader + ' ' + this.$ShipTrader.knownname + ' on ' + this.$Object + ' ' + this.$Object.knownname + ' to its default position'" chance="@$debugchance"/>
                </do_if>
                <do_else>
                  <debug_text text="'Attempting to return the shiptrader ' + this.$ShipTrader + ' ' + this.$ShipTrader.knownname + ' on ' + this.$Object + ' ' + this.$Object.knownname + ' to its default position at request of ' + event.param + ' ' + event.param.knownname" chance="@$debugchance"/>
                </do_else>
                <!--TODO @Owen, using the tag here is a bit of a hack as using 'post' will not find slots on corners-->
                <add_actor_to_post_location actor="this.$ShipTrader"/>
              </do_if>
            </do_if>
          </actions>
        </cue>
        <!-- event.param == placement component (station, walkablemodule or room. Not ship) -->
        <cue name="PlaceItemTrader" instantiate="true">
          <conditions>
            <event_cue_signalled/>
          </conditions>
          <actions>
            <!--Attempt to place item traders on suitable slots in the placement component-->
            <do_if value="event.param.isclass.station">
              <set_value name="this.$Object" exact="event.param"/>
              <debug_text text="'Attempting to place item traders for ' + this.$Object.knownname + ' ({' + this.$Object + '})'" chance="@$debugchance"/>
            </do_if>
            <do_elseif value="event.param.isclass.[class.walkablemodule, class.room]">
              <set_value name="this.$Object" exact="event.param.object"/>
              <debug_text text="'Attempting to place item traders for ' + event.param.knownname + ' ({' + event.param + '}) on '  + this.$Object.knownname + ' ({' + this.$Object + '})'" chance="@$debugchance"/>
            </do_elseif>
            <do_else>
              <assert value="event.param.isclass.[class.station, class.walkablemodule, class.room]" text="'object ' + event.param + ' ' + event.param.knownname + ' is neither a station, dockarea or room [Owen]'" break="1"/>
            </do_else>
            <do_if value="@this.$Object.exists">
              <set_value name="this.$Owner" exact="this.$Object.owner"/>
              <find_npc_slot name="this.$TraderSlots" object="event.param" tags="tag.itemtrader" multiple="true"/>
              <debug_text text="this.$TraderSlots.count + ' free trader slots found on ' + event.param.knownname" chance="@$debugchance"/>
              <do_if value="this.$TraderSlots">
                <!--Find item traders on the object which are not yet placed in a corner (as they may have been moved to the control room when the corner was removed)-->
                <find_object_component name="this.$ItemTraders" object="this.$Object" class="class.npc" entitytype="entitytype.trader" multiple="true">
                  <match controlpost="controlpost.shiptrader" negate="true"/>
                </find_object_component>
                <do_all exact="this.$ItemTraders.count" counter="$TraderCount" reverse="true">
                  <!--Not on a itemtrader tagged slot-->
                  <do_if value="@this.$ItemTraders.{$TraderCount}.roomslot.hastag.itemtrader">
                    <remove_value name="this.$ItemTraders.{$TraderCount}"/>
                  </do_if>
                </do_all>
                <do_if value="this.$ItemTraders.count">
                  <debug_text text="'This station has ' + this.$ItemTraders.count + ' item traders not yet on a suitable slot, they will be moved to item trader corners'" chance="@$debugchance"/>
                  <do_all exact="this.$ItemTraders.count" counter="$TraderCounter">
                    <!--Check $TraderSlots again as a slot could have been removed in this loop-->
                    <do_if value="this.$TraderSlots.count">
                      <set_value name="this.$TraderSlot" exact="null"/>
                      <set_value name="this.$ItemTrader" exact="this.$ItemTraders.{$TraderCounter}"/>
                      <debug_text text="'Attempting to find suitable slot for ' + this.$ItemTrader.name + ' ({' + this.$ItemTrader + '})'" chance="@$debugchance"/>
                      <do_if value="this.$ItemTrader.$itemtrader_dockarea?">
                        <!--Item trader remembers the dock area where they were previously placed. Attempt to place there again. Note: This does not necessarily mean the same corner which may have been destroyed-->
                        <debug_text text="this.$ItemTrader.knownname + ' was prevously placed on a dockarea. Attempting to restore'" chance="@$debugchance"/>
                        <do_if value="this.$ItemTrader.$itemtrader_dockarea.exists">
                          <debug_text text="'Previous dockarea: ' + this.$ItemTrader.$itemtrader_dockarea" chance="@$debugchance"/>
                          <do_if value="this.$ItemTrader.$itemtrader_dockarea == event.param">
                            <!--event.param is the dock area the Item trader remembers. Use one of the slots already found.-->
                            <set_value name="this.$TraderSlot" exact="this.$TraderSlots.random"/>
                          </do_if>
                          <do_elseif value="this.$ItemTrader.$itemtrader_dockarea.hascontext.{event.param}">
                            <shuffle_list list="this.$TraderSlots"/>
                            <do_all exact="this.$TraderSlots.count" counter="$SlotCounter">
                              <do_if value="this.$TraderSlots.{$SlotCounter}.component.hascontext.{this.$ItemTrader.$itemtrader_dockarea}">
                                <set_value name="this.$TraderSlot" exact="this.$TraderSlots.{$SlotCounter}"/>
                                <break/>
                              </do_if>
                            </do_all>
                          </do_elseif>
                          <do_else>
                            <debug_text text="'Previous itemtrader dockarea has no relation to ' + event.param.knownname + ' ignoring trader'" chance="@$debugchance"/>
                          </do_else>
                        </do_if>
                        <do_else>
                          <debug_text text="'Previous dockarea no longer exists. Forgetting and selecting slot at random.'" chance="@$debugchance"/>
                          <remove_value name="this.$ItemTrader.$itemtrader_dockarea"/>
                          <set_value name="this.$TraderSlot" exact="this.$TraderSlots.random"/>
                        </do_else>
                      </do_if>
                      <do_else>
                        <set_value name="this.$TraderSlot" exact="this.$TraderSlots.random"/>
                      </do_else>
                      <do_if value="this.$TraderSlot">
                        <debug_text text="'Successfully found an NPC slot for item trader: ' + this.$TraderSlot.component.knownname + ' ' + this.$TraderSlot" chance="@$debugchance"/>
                        <add_actor_to_room actor="this.$ItemTrader" slot="this.$TraderSlot" result="this.$TraderMoved"/>
                        <do_if value="this.$TraderMoved">
                          <set_value name="this.$ItemTrader.$itemtrader_dockarea" exact="this.$ItemTrader.dockarea"/>
                          <remove_from_list name="this.$TraderSlots" exact="this.$TraderSlot" multiple="false"/>
                        </do_if>
                        <do_else>
                          <debug_text text="'$Trader ' + this.$ItemTrader.name + ' ({' + this.$ItemTrader + '}) could not be moved to an item trader corner'" filter="error"/>
                        </do_else>
                      </do_if>
                    </do_if>
                  </do_all>
                </do_if>
                <!-- Create traders to fill remaining slots -->
                <do_if value="this.$TraderSlots.count">
                  <debug_text text="'This station will attempt to spawn traders to fill ' + this.$TraderSlots.count + ' trader slots'" chance="@$debugchance"/>
                  <do_all exact="this.$TraderSlots.count" counter="$SlotCounter">
                    <do_if value="this.$Owner == faction.player">
                      <!--TODO @Owen potential optimisation. Move the finding of suitable trader factions/definitions outside of the slot loop. Create a table of the best faction/definition pairs-->
                      <get_factions_by_tag result="$locmainfactions" tag="tag.economic"/>
                      <shuffle_list list="$locmainfactions"/>
                      <!-- faction with traders that the player is on the best terms with sends traders to player-owned stations. -->
                      <sort_list list="$locmainfactions" sortbyvalue="faction.player.relationto.{loop.element}" sortdescending="true"/>
                      <do_all exact="$locmainfactions.count" counter="$i">
                        <get_character_definition reference="$trader_ref" faction="$locmainfactions.{$i}" tags="tag.trader"/>
                        <do_if value="$trader_ref">
                          <set_value name="$locowner" exact="$locmainfactions.{$i}"/>
                          <break/>
                        </do_if>
                      </do_all>
                      <remove_value name="$locmainfactions"/>
                    </do_if>
                    <do_else>
                      <set_value name="$locowner" exact="this.$Owner"/>
                      <get_character_definition reference="$trader_ref" faction="$locowner" tags="tag.trader"/>
                      <assert value="$trader_ref" text="this.$Object + ' ' + this.$Object.knownname + ' has a trader corner but the faction has no character definition for a suitable trader [Owen]'"/>
                    </do_else>
                    <!-- NB: if the player is not on speaking terms with any of the factions, no inventory trader will trade on player stations. -->
                    <do_if value="$locowner? and $trader_ref?">
                      <create_cue_actor cue="this" name="this.$npc" ref="$trader_ref">
                        <owner exact="$locowner"/>
                      </create_cue_actor>
                      <do_if value="this.$npc">
                        <set_entity_type entity="this.$npc" type="entitytype.trader"/>
                        <set_value name="this.$ChosenSlot" exact="this.$TraderSlots.{$SlotCounter}"/>
                        <debug_text text="'NPC ' + this.$npc.name + ' ({' + this.$npc + '}) was successfully created. Attempting to place on ' + this.$ChosenSlot" chance="@$debugchance"/>
                        <add_actor_to_room actor="this.$npc" slot="this.$ChosenSlot" result="this.$TraderMoved"/>
                        <do_if value="this.$TraderMoved">
                          <set_value name="this.$npc.$itemtrader_dockarea" exact="this.$npc.dockarea"/>
                          <debug_text text="'%s Creating NPC instance %s of faction %s to be a trader and placing in slot %s'.[player.age, this.$npc, this.$Owner, this.$ChosenSlot]" chance="@$debugchance"/>
                          <signal_cue_instantly cue="md.NPC_Itemtrader.OnPlatformPopulation_Itemtrader" param="[this.$npc]"/>
                        </do_if>
                        <do_else>
                          <debug_text text="'Trader could not be spawned at trader slot ' + this.$ChosenSlot + ' killing NPC'" filter="error"/>
                          <destroy_object object="this.$npc"/>
                        </do_else>
                      </do_if>
                      <do_else>
                        <debug_text text="'No trader definition found for ' + this.$Owner + ' with tag ' + tag.trader" chance="@$debugchance"/>
                      </do_else>
                    </do_if>
                    <remove_value name="$locowner"/>
                    <remove_value name="$trader_ref"/>
                  </do_all>
                </do_if>
              </do_if>
            </do_if>
          </actions>
        </cue>
        <!-- event.param == placement component (station, walkablemodule or room. Not ship) -->
        <cue name="HideItemTraders" instantiate="true">
          <conditions>
            <event_cue_signalled/>
          </conditions>
          <actions>
            <do_if value="event.param.isrealclass.station">
              <set_value name="this.$Object" exact="event.param"/>
              <debug_text text="'Attempting to move item traders of ' + this.$Object.knownname + ' ({' + this.$Object + '}) to the control room'" chance="@$debugchance"/>
            </do_if>
            <do_elseif value="event.param.isrealclass.[class.walkablemodule, class.room]">
              <set_value name="this.$Object" exact="event.param.object"/>
              <debug_text text="'Attempting to move item traders of ' + event.param.knownname + ' ({' + event.param + '}) on '  + this.$Object.knownname + ' ({' + this.$Object + '}) to the control room'" chance="@$debugchance"/>
            </do_elseif>
            <do_else>
              <assert value="event.param.isrealclass.[class.station, class.walkablemodule, class.room]" text="'object ' + event.param + ' ' + event.param.knownname + ' is neither a station, dockarea or room [Owen]'" break="1"/>
            </do_else>
            <do_if value="@this.$Object.exists">
              <!--Find the item traders on event.param and attempt to move them to the controlroom. If not able, destroy them-->
              <find_object_component name="this.$ItemTraders" object="event.param" class="class.npc" entitytype="entitytype.trader" multiple="true">
                <match controlpost="controlpost.shiptrader" negate="true"/>
              </find_object_component>
              <do_if value="this.$ItemTraders.count">
                <debug_text text="'There are item traders ' + this.$ItemTraders.count + ' to be moved into the control room.'" chance="@$debugchance"/>
                <set_value name="$ControlRoom" exact="this.$Object.controlroom"/>
                <do_if value="$ControlRoom">
                  <do_all exact="this.$ItemTraders.count" counter="$TraderCounter" reverse="true">
                    <add_actor_to_room actor="this.$ItemTraders.{$TraderCounter}" object="$ControlRoom" result="this.$TraderMoved"/>
                    <do_if value="this.$TraderMoved">
                      <debug_text text="'NPC ' + this.$ItemTraders.{$TraderCounter}.name + ' ({' + this.$ItemTraders.{$TraderCounter} + '}) was successfully moved into the control room'" chance="@$debugchance"/>
                    </do_if>
                    <do_else>
                      <debug_text text="'NPC ' + this.$ItemTraders.{$TraderCounter}.name + ' ({' + this.$ItemTraders.{$TraderCounter} + '}) could not be moved into the control room. They will be killed'" filter="error"/>
                      <destroy_object object="this.$ItemTraders.{$TraderCounter}"/>
                    </do_else>
                  </do_all>
                </do_if>
                <do_else>
                  <debug_text text="'No control room. Kill item traders'" chance="@$debugchance"/>
                  <destroy_group group="this.$ItemTraders"/>
                </do_else>
              </do_if>
              <do_else>
                <debug_text text="'There are no item traders to be cleaned up'" chance="@$debugchance"/>
              </do_else>
            </do_if>
          </actions>
        </cue>
        <!-- event.param == Object -->
        <cue name="KillItemTraders" instantiate="true">
          <conditions>
            <event_cue_signalled/>
          </conditions>
          <actions>
            <set_value name="this.$Object" exact="event.param"/>
            <find_object_component groupname="this.$ItemTraders" object="event.param" class="class.npc" entitytype="entitytype.trader" multiple="true">
              <match controlpost="controlpost.shiptrader" negate="true"/>
            </find_object_component>
            <debug_text text="'Killing ' + this.$ItemTraders.count + ' item traders'" chance="@$debugchance"/>
            <destroy_group group="this.$ItemTraders"/>
          </actions>
        </cue>
        <cue name="PlaceShadyGuy" instantiate="true" version="5">
          <conditions>
            <check_any>
              <event_object_changed_attention group="$TrackedObjects"/>
              <event_object_signalled group="$TrackedObjects" param="'npc_instantiation__force'"/>
              <event_object_signalled group="$TrackedObjects" param="'npc_instantiation__mission'"/>
            </check_any>
            <check_value value="event.object.isclass.station and event.object.attention ge attention.nearby and not [faction.ownerless, faction.xenon, faction.xenon1, faction.xenon2, faction.xenon3, faction.xenon4, faction.xenon5, faction.xenon6, faction.khaak].indexof.{event.object.owner}"/>
            <!-- If the Black Marketeer is in the Bar already, we have nothing to do (already taken care of by another cue instance) -->
            <check_value value="event.object.shadyguy and @event.object.shadyguy.room.type != roomtype.bar"/>
          </conditions>
          <actions>
            <set_value name="this.$Object" exact="event.object"/>
            <set_value name="this.$ShadyGuy" exact="this.$Object.shadyguy"/>
            <!-- Check to see whether this shady guy has been unlocked -->
            <set_value name="this.$Instantiate" exact="this.$ShadyGuy.tradesvisible"/>
            <do_if value="not this.$Instantiate and this.$ShadyGuy.$InstantiationRequesters?">
              <do_all exact="this.$ShadyGuy.$InstantiationRequesters.count" counter="$i" reverse="true">
                <do_if value="this.$ShadyGuy.$InstantiationRequesters.{$i}.exists">
                  <set_value name="this.$Instantiate" exact="true"/>
                </do_if>
                <do_else>
                  <remove_value name="this.$ShadyGuy.$InstantiationRequesters.{$i}"/>
                </do_else>
              </do_all>
              <do_if value="this.$ShadyGuy.$InstantiationRequesters.count == 0">
                <remove_value name="this.$ShadyGuy.$InstantiationRequesters"/>
              </do_if>
            </do_if>
            <do_if value="this.$Instantiate">
              <debug_text text="'Setting up shady guy for ' + this.$Object.knownname + ' ({' + this.$Object + '})'" chance="@$debugchance"/>
              <find_object_component name="this.$SelectedDockArea" object="this.$Object" class="class.walkablemodule"/>
              <do_if value="this.$SelectedDockArea">
                <debug_text text="'We have found a dock area to which to attach the dynamic interior'" chance="@$debugchance"/>
                <!-- Define interior -->
                <set_value name="this.$Race" exact="this.$Object.owner.primaryrace"/>
                <set_value name="this.$Seed" exact="this.$Object.seed + lookup.roomtype.list.indexof.{roomtype.bar}"/>
                <get_room_definition macro="this.$CorridorMacro" race="this.$Race" tags="tag.entertainmentcorridor" seed="this.$Seed"/>
                <do_if value="not this.$CorridorMacro">
                  <get_room_definition macro="this.$CorridorMacro" race="this.$Race" tags="tag.corridor" seed="this.$Seed"/>
                </do_if>
                <get_room_definition macro="this.$RoomMacro" tags="tag.bar" seed="this.$Seed"/>
                <!-- Create interior -->
                <create_dynamic_interior object="this.$Object" corridor="this.$CorridorMacro" room="this.$RoomMacro" name="'{20007,1031}'" interiorname="this.$Interior" corridorname="this.$Corridor" roomname="this.$Room" roomtype="roomtype.bar" seed="this.$Seed"/>
                <do_if value="this.$Interior and this.$Corridor and this.$Room">
                  <debug_text text="'Interior for shady guy has been created'" chance="@$debugchance"/>
                  <find_npc_slot name="this.$RoomSlot" object="this.$Room"/>
                  <do_if value="this.$RoomSlot">
                    <debug_text text="'We have found a room slot on which to place the shady guy'" chance="@$debugchance"/>
                    <add_actor_to_room actor="this.$ShadyGuy" slot="this.$RoomSlot"/>
                  </do_if>
                </do_if>
                <do_else>
                  <debug_text text="'Unable to generate a shady guy room for ' + this.$Object + ' ' + this.$Object.knownname" filter="error"/>
                  <cancel_cue cue="this"/>
                </do_else>
              </do_if>
            </do_if>
            <do_else>
              <cancel_cue cue="this"/>
            </do_else>
          </actions>
          <patch sinceversion="3" state="complete">
            <do_if value="not this.$Object.exists">
              <debug_text text="'Shady guy object no longer exists. Object: ' + @this.$Object + ' NPC: ' + @this.$ShadyGuy" filter="savegame"/>
              <cancel_cue cue="this"/>
            </do_if>
          </patch>
          <patch sinceversion="4" state="complete">
            <do_if value="not this.$ShadyGuy.exists">
              <!--Pre 1.60 versions could have this cue instantiate on a station which had no shady guy, having the this.$ShadyGuy == null-->
              <debug_text text="'Shady guy no longer exists... or maybe they never existed at all. Object: ' + @this.$Object + ' NPC: ' + @this.$ShadyGuy" filter="savegame"/>
              <cancel_cue cue="this"/>
            </do_if>
          </patch>
          <patch sinceversion="5" state="complete">
            <do_if value="not this.$Room.exists">
              <debug_text text="'Shady guy room does not exist. Killing instance.'" filter="savegame"/>
              <cancel_cue cue="this"/>
            </do_if>
          </patch>
          <cues>
            <cue name="ReturnShadyGuy_InteriorRemoved">
              <conditions>
                <event_object_destroyed object="parent.$Interior" method="killmethod.removed"/>
                <check_value value="not event.param3"/>
              </conditions>
              <actions>
                <do_if value="parent.$ShadyGuy.hascontext.{parent.$Interior}">
                  <add_actor_to_room actor="parent.$ShadyGuy" object="parent.$Object.controlroom" result="this.$ShadyGuyMoved"/>
                  <debug_text text="'Shady guy ' + parent.$ShadyGuy + ' was in an interior which was to be removed. Rescue them! Now in ' + parent.$ShadyGuy.parent + ' ' + parent.$ShadyGuy.knownname"/>
                </do_if>
                <cancel_cue cue="parent"/>
              </actions>
            </cue>
            <cue name="ReturnShadyGuy">
              <conditions>
                <check_any>
                  <event_object_interiors_despawning object="parent.$Object"/>
                  <event_object_destroyed object="parent.$Object"/>
                </check_any>
              </conditions>
              <actions>
                <do_if value="event.name == 'event_object_interiors_despawning'">
                  <do_if value="parent.$ShadyGuy.exists">
                    <!-- Move shady guy back to control room -->
                    <add_actor_to_room actor="parent.$ShadyGuy" object="parent.$Object.controlroom" result="this.$ShadyGuyMoved"/>
                    <do_if value="this.$ShadyGuyMoved">
                      <debug_text text="'Shady guy ' + parent.$ShadyGuy.name + ' ({' + parent.$ShadyGuy + '}) moved back to control room'" chance="@$debugchance"/>
                    </do_if>
                    <do_else>
                      <debug_text text="'Shady guy ' + parent.$ShadyGuy.name + ' ({' + parent.$ShadyGuy + '}) could not be moved back to control room of ' + event.object.knownname + ' ({' + event.object + '})'" filter="error"/>
                    </do_else>
                  </do_if>
                </do_if>
                <!-- Make sure interior, if it was spawned, is cleaned up before player leaves attention level -->
                <do_if value="parent.$Interior?">
                  <remove_dynamic_interior object="parent.$Object" interior="parent.$Interior"/>
                  <debug_text text="'Interior for shady guy should have been removed'" chance="@$debugchance"/>
                </do_if>
                <cancel_cue cue="parent"/>
              </actions>
            </cue>
          </cues>
        </cue>
        <!--TODO @Owen handle player owned station cases. Should the manager office always be accessable even when there is no assigned manager?
        Also, they don't appear on gamestart-->
        <cue name="PlaceManager" instantiate="true" version="5">
          <conditions>
            <check_any>
              <event_object_changed_attention group="$TrackedObjects"/>
              <event_object_signalled group="$TrackedObjects" param="'npc_instantiation__force'"/>
            </check_any>
            <check_value value="event.object.isclass.station and event.object.attention ge attention.nearby"/>
            <check_value value="event.object.tradenpc.isclass.npc or event.object.isplayerowned"/>
            <!-- If the Manager is in the Manager's Office already, we have nothing to do (already taken care of by another cue instance) -->
            <check_value value="@event.object.tradenpc.room.type != roomtype.manager"/>
          </conditions>
          <actions>
            <set_value name="this.$Object" exact="event.object"/>
            <!-- Find existing room -->
            <find_room name="this.$Room" object="this.$Object" roomtype="roomtype.manager"/>
            <do_if value="this.$Room">
              <debug_text text="'Manager\'s office for ' + this.$Object + ' ' + this.$Object.knownname + ' already exists'" chance="@$debugchance"/>
              <set_value name="this.$Interior" exact="this.$Room.dynamicinterior"/>
            </do_if>
            <do_else>
              <!-- Define room in which manager will sit -->
              <set_value name="this.$Race" exact="this.$Object.owner.primaryrace"/>
              <set_value name="this.$Seed" exact="this.$Object.seed + lookup.roomtype.list.indexof.{roomtype.manager}"/>
              <get_room_definition macro="this.$CorridorMacro" race="this.$Race" tags="tag.administrationcorridor" seed="this.$Seed"/>
              <do_if value="not this.$CorridorMacro">
                <get_room_definition macro="this.$CorridorMacro" race="this.$Race" tags="tag.corridor" seed="this.$Seed"/>
              </do_if>
              <get_room_definition macro="this.$RoomMacro" tags="tag.office" seed="this.$Seed"/>
              <!-- Create Interior -->
              <create_dynamic_interior object="this.$Object" corridor="this.$CorridorMacro" room="this.$RoomMacro" name="'{20007,1001}'" interiorname="this.$Interior" corridorname="this.$Corridor" roomname="this.$Room" roomtype="roomtype.manager" seed="this.$Seed"/>
              <do_if value="this.$Interior and this.$Corridor and this.$Room">
                <debug_text text="'Manager\'s office for ' + this.$Object + ' ' + this.$Object.knownname + ' created'" chance="@$debugchance"/>
              </do_if>
              <do_else>
                <set_value name="this.$Room" exact="null"/>
              </do_else>
            </do_else>
            <!-- Place manager -->
            <do_if value="this.$Room">
              <do_if value="this.$Object.tradenpc">
                <find_npc_slot name="this.$NPCSlot" object="this.$Room" tags="tag.control"/>
                <do_if value="not this.$NPCSlot">
                  <find_npc_slot name="this.$NPCSlot" object="this.$Room"/>
                </do_if>
                <do_if value="this.$NPCSlot">
                  <add_actor_to_room actor="this.$Object.tradenpc" slot="this.$NPCSlot"/>
                  <debug_text text="'Station manager ' + this.$Object.tradenpc.name + ' ({' + this.$Object.tradenpc + '}) moved to manager\'s office'" chance="@$debugchance"/>
                </do_if>
                <do_if value="this.$Object.tradenpc.room.type != roomtype.manager">
                  <debug_text text="'Manager ' + this.$Object.tradenpc + ' of ' + this.$Object + ' ' + this.$Object.knownname + ' was not added to a dynamic interior.'" filter="error"/>
                  <cancel_cue cue="this"/>
                </do_if>
              </do_if>
            </do_if>
            <do_else>
              <debug_text text="'Unable to find or generate a manager room for ' + this.$Object + ' ' + this.$Object.knownname" filter="error"/>
              <cancel_cue cue="this"/>
            </do_else>
          </actions>
          <patch sinceversion="3" state="complete">
            <do_if value="not this.$Object.exists">
              <cancel_cue cue="this"/>
            </do_if>
          </patch>
          <patch sinceversion="4" state="complete">
            <do_if value="not this.$Interior.exists and this.$Room.exists">
              <set_value name="this.$Interior" exact="this.$Room.dynamicinterior"/>
            </do_if>
          </patch>
          <patch sinceversion="5" state="complete">
            <do_if value="not this.$Room.exists">
              <debug_text text="'Manager room does not exist. Killing instance.'" filter="savegame"/>
              <cancel_cue cue="this"/>
            </do_if>
          </patch>
          <cues>
            <cue name="ReturnManager_InteriorRemoved">
              <conditions>
                <event_object_destroyed object="parent.$Interior" method="killmethod.removed"/>
                <check_value value="not event.param3"/>
              </conditions>
              <actions>
                <set_value name="this.$manager" exact="parent.$Object.assignedcontrolentity.{controlpost.manager}"/>
                <do_if value="this.$manager">
                  <add_actor_to_post_location actor="this.$manager"/>
                  <debug_text text="'Manager ' + this.$manager + ' of ' + parent.$Object + ' ' + parent.$Object.knownname + ' was in an interior which was to be removed. Rescue them! Now in ' + this.$manager.parent + ' ' + this.$manager.parent.knownname"/>
                </do_if>
                <cancel_cue cue="parent"/>
              </actions>
            </cue>
            <cue name="ReturnManager">
              <conditions>
                <check_any>
                  <event_object_interiors_despawning object="parent.$Object"/>
                  <event_object_destroyed object="parent.$Object"/>
                </check_any>
              </conditions>
              <actions>
                <!-- Note: There may be multiple handlers doing this at the same time, but it's not harmful to move the character multiple times -->
                <set_value name="this.$manager" exact="parent.$Object.assignedcontrolentity.{controlpost.manager}"/>
                <do_if value="event.name == 'event_object_interiors_despawning'">
                  <!-- Move manager back to control room -->
                  <do_if value="this.$manager">
                    <add_actor_to_post_location actor="this.$manager"/>
                  </do_if>
                  <!--TODO @Owen move any wandering NPCs out of here?-->
                </do_if>
                <!-- Make sure interior is destroyed before player leaves attention level -->
                <do_if value="parent.$Interior?">
                  <remove_dynamic_interior object="parent.$Object" interior="parent.$Interior"/>
                  <debug_text text="'Manager\'s office for ' + parent.$Object.knownname + ' has been removed'" chance="@$debugchance"/>
                </do_if>
                <do_else>
                  <debug_text text="'Manager\'s office? What Manager\'s office?'" chance="@$debugchance"/>
                </do_else>
                <cancel_cue cue="parent"/>
              </actions>
            </cue>
          </cues>
        </cue>
        <!--Create a security office on the station-->
        <cue name="SecurityOffice" instantiate="true" version="6">
          <conditions>
            <check_any>
              <event_object_changed_attention group="$TrackedObjects"/>
              <event_object_signalled group="$TrackedObjects" param="'npc_instantiation__force'"/>
            </check_any>
            <check_value value="event.object.isclass.station and event.object.attention ge attention.nearby and not [faction.ownerless, faction.xenon, faction.xenon1, faction.xenon2, faction.xenon3, faction.xenon4, faction.xenon5, faction.xenon6, faction.khaak].indexof.{event.object.owner}"/>
            <count_rooms object="event.object" roomtype="roomtype.security" exact="0"/>
          </conditions>
          <actions>
            <set_value name="this.$Object" exact="event.object"/>
            <set_value name="this.$Race" exact="this.$Object.owner.primaryrace"/>
            <set_value name="this.$Seed" exact="this.$Object.seed + lookup.roomtype.list.indexof.{roomtype.security}"/>
            <get_room_definition macro="this.$CorridorMacro" race="this.$Race" tags="tag.administrationcorridor" seed="this.$Seed"/>
            <do_if value="not this.$CorridorMacro">
              <get_room_definition macro="this.$CorridorMacro" race="this.$Race" tags="tag.corridor" seed="this.$Seed"/>
            </do_if>
            <get_room_definition macro="this.$RoomMacro" tags="tag.security" seed="this.$Seed"/>
            <!-- Create Interior -->
            <create_dynamic_interior object="this.$Object" corridor="this.$CorridorMacro" room="this.$RoomMacro" name="'{20007,1041}'" interiorname="this.$Interior" corridorname="this.$Corridor" roomname="this.$Room" roomtype="roomtype.security" seed="this.$Seed"/>
            <do_if value="this.$Interior and this.$Corridor and this.$Room">
              <debug_text text="'Security office for ' + this.$Object.knownname + ' created'" chance="@$debugchance"/>
            </do_if>
            <do_else>
              <debug_text text="'Unable to generate a security room for ' + this.$Object + ' ' + this.$Object.knownname" filter="error"/>
              <cancel_cue cue="this"/>
            </do_else>
          </actions>
          <patch sinceversion="5" state="waiting">
            <do_all exact="$TrackedObjects.count" counter="$i">
              <do_if value="$TrackedObjects.{$i}.attention ge attention.nearby and $TrackedObjects.{$i}.isclass.station and not [faction.ownerless, faction.xenon, faction.xenon1, faction.xenon2, faction.xenon3, faction.xenon4, faction.xenon5, faction.xenon6, faction.khaak].indexof.{$TrackedObjects.{$i}.owner}">
                <find_room name="$SecurityOffice" object="$TrackedObjects.{$i}" roomtype="roomtype.security"/>
                <do_if value="$SecurityOffice == null">
                  <debug_text text="'PATCH: Spawn missing rooms on nearby station %s [%s]'.[$TrackedObjects.{$i}.knownname, $TrackedObjects.{$i}]" filter="savegame"/>
                  <signal_objects object="$TrackedObjects.{$i}" param="'npc_instantiation__force'"/>
                </do_if>
                <remove_value name="$SecurityOffice"/>
              </do_if>
            </do_all>
          </patch>
          <patch sinceversion="4">
            <do_if value="not this.$Object.exists">
              <cancel_cue cue="this"/>
            </do_if>
          </patch>
          <patch sinceversion="6" state="complete">
            <do_if value="not this.$Room.exists">
              <debug_text text="'Security office room does not exist. Killing instance.'" filter="savegame"/>
              <cancel_cue cue="this"/>
            </do_if>
          </patch>
          <cues>
            <cue name="SecurityOffice_Remove">
              <conditions>
                <check_any>
                  <event_object_interiors_despawning object="parent.$Object"/>
                  <event_object_destroyed object="parent.$Object"/>
                </check_any>
              </conditions>
              <actions>
                <!--TODO @Owen move any wandering NPCs out of here?-->
                <!-- Make sure interior is destroyed before player leaves attention level -->
                <do_if value="parent.$Interior?">
                  <remove_dynamic_interior object="parent.$Object" interior="parent.$Interior"/>
                  <debug_text text="'Security office for ' + parent.$Object.knownname + ' should have been removed'" chance="@$debugchance"/>
                </do_if>
                <do_else>
                  <debug_text text="'Security office invalid. Can not be removed'" chance="@$debugchance"/>
                </do_else>
              </actions>
            </cue>
          </cues>
        </cue>
        <!--Create a infrastructure office on the station. Currently only for shipyards as a test case-->
        <cue name="InfrastructureOffice" instantiate="true" version="4">
          <conditions>
            <check_any>
              <event_object_changed_attention group="$TrackedObjects"/>
              <event_object_signalled group="$TrackedObjects" param="'npc_instantiation__force'"/>
            </check_any>
            <check_value value="event.object.isclass.station and event.object.attention ge attention.nearby and not [faction.ownerless, faction.xenon, faction.xenon1, faction.xenon2, faction.xenon3, faction.xenon4, faction.xenon5, faction.xenon6, faction.khaak].indexof.{event.object.owner} and not event.object.isheadquarters"/>
            <count_rooms object="event.object" roomtype="roomtype.infrastructure" exact="0"/>
          </conditions>
          <actions>
            <set_value name="this.$Object" exact="event.object"/>
            <set_value name="this.$Race" exact="this.$Object.owner.primaryrace"/>
            <set_value name="this.$Seed" exact="this.$Object.seed + lookup.roomtype.list.indexof.{roomtype.infrastructure}"/>
            <get_room_definition macro="this.$CorridorMacro" race="this.$Race" tags="tag.maintenancecorridor" seed="this.$Seed"/>
            <do_if value="not this.$CorridorMacro">
              <get_room_definition macro="this.$CorridorMacro" race="this.$Race" tags="tag.corridor" seed="this.$Seed"/>
            </do_if>
            <get_room_definition macro="this.$RoomMacro" tags="tag.infrastructure" seed="this.$Seed"/>
            <!-- Create Interior -->
            <create_dynamic_interior object="this.$Object" corridor="this.$CorridorMacro" room="this.$RoomMacro" name="'{20007,1051}'" interiorname="this.$Interior" corridorname="this.$Corridor" roomname="this.$Room" roomtype="roomtype.infrastructure" seed="this.$Seed"/>
            <do_if value="this.$Interior and this.$Corridor and this.$Room">
              <debug_text text="'Infrastructure office for ' + this.$Object.knownname + ' created'" chance="@$debugchance"/>
            </do_if>
            <do_else>
              <debug_text text="'Unable to generate a infrastructure office for ' + this.$Object + ' ' + this.$Object.knownname" filter="error"/>
              <cancel_cue cue="this"/>
            </do_else>
          </actions>
          <patch sinceversion="3">
            <do_if value="not this.$Object.exists">
              <cancel_cue cue="this"/>
            </do_if>
          </patch>
          <patch sinceversion="4" state="complete">
            <do_if value="not this.$Room.exists">
              <debug_text text="'Infrastructure office room does not exist. Killing instance.'" filter="savegame"/>
              <cancel_cue cue="this"/>
            </do_if>
          </patch>
          <cues>
            <cue name="InfrastructureOffice_Remove">
              <conditions>
                <check_any>
                  <event_object_interiors_despawning object="parent.$Object"/>
                  <event_object_destroyed object="parent.$Object"/>
                </check_any>
              </conditions>
              <actions>
                <!--TODO @Owen move any wandering NPCs out of here?-->
                <!-- Make sure interior is destroyed before player leaves attention level -->
                <do_if value="parent.$Interior?">
                  <remove_dynamic_interior object="parent.$Object" interior="parent.$Interior"/>
                  <debug_text text="'Infrastructure office for ' + parent.$Object.knownname + ' should have been removed'" chance="@$debugchance"/>
                </do_if>
                <do_else>
                  <debug_text text="'Infrastructure office invalid. Can not be removed'" chance="@$debugchance"/>
                </do_else>
              </actions>
            </cue>
          </cues>
        </cue>
        <cue name="GamblingDen" instantiate="true" version="2">
          <conditions>
            <check_any>
              <event_object_changed_attention group="$TrackedObjects"/>
              <event_object_signalled group="$TrackedObjects" param="'npc_instantiation__force'"/>
            </check_any>
            <check_value value="event.object.isclass.station and event.object.attention ge attention.nearby and event.object.isplayerowned and $GamblingDenWelfareModuleMacros.count"/>
            <check_any exact="event.object.welfaremodules.count" counter="$i">
              <check_value value="event.object.welfaremodules.{$i}.macro.ismacro.{$GamblingDenWelfareModuleMacros}"/>
            </check_any>
          </conditions>
          <actions>
            <set_value name="this.$Object" exact="event.object"/>
            <set_value name="this.$Race" exact="this.$Object.owner.primaryrace"/>
            <set_value name="this.$Seed" exact="this.$Object.seed"/>
            <get_room_definition macro="this.$CorridorMacro" race="this.$Race" tags="tag.entertainmentcorridor" seed="this.$Seed"/>
            <do_if value="not this.$CorridorMacro">
              <get_room_definition macro="this.$CorridorMacro" race="this.$Race" tags="tag.corridor" seed="this.$Seed"/>
            </do_if>
            <get_room_definition macro="this.$RoomMacro" tags="tag.bar" seed="this.$Seed"/>
            <!-- Create Interior -->
            <create_dynamic_interior object="this.$Object" corridor="this.$CorridorMacro" room="this.$RoomMacro" name="'{20007,3091}'" interiorname="this.$Interior" corridorname="this.$Corridor" roomname="this.$Room" roomtype="roomtype.bar" seed="this.$Seed"/>
            <do_if value="this.$Interior and this.$Corridor and this.$Room">
              <debug_text text="'Gambling Den for ' + this.$Object.knownname + ' created'" chance="@$debugchance"/>
            </do_if>
            <do_else>
              <debug_text text="'Unable to generate a gambling den for ' + this.$Object + ' ' + this.$Object.knownname" filter="error"/>
              <cancel_cue cue="this"/>
            </do_else>
          </actions>
          <patch sinceversion="2" state="complete">
            <do_if value="not this.$Room.exists">
              <debug_text text="'Gambling den room does not exist. Killing instance.'" filter="savegame"/>
              <cancel_cue cue="this"/>
            </do_if>
          </patch>
          <cues>
            <cue name="GamblingDen_Remove">
              <conditions>
                <check_any>
                  <event_object_interiors_despawning object="parent.$Object"/>
                  <event_object_destroyed object="parent.$Object"/>
                </check_any>
              </conditions>
              <actions>
                <!--TODO @Owen move any wandering NPCs out of here?-->
                <!-- Make sure interior is destroyed before player leaves attention level -->
                <do_if value="parent.$Interior?">
                  <remove_dynamic_interior object="parent.$Object" interior="parent.$Interior"/>
                  <debug_text text="'Gambling Den for ' + parent.$Object.knownname + ' should have been removed'" chance="@$debugchance"/>
                </do_if>
                <do_else>
                  <debug_text text="'Gambling Den invalid. Can not be removed'" chance="@$debugchance"/>
                </do_else>
              </actions>
            </cue>
          </cues>
        </cue>
        <!--Enabled for player station with suitable casino modules-->
        <cue name="Casino" instantiate="true">
          <conditions>
            <check_any>
              <event_object_changed_attention group="$TrackedObjects"/>
              <event_object_signalled group="$TrackedObjects" param="'npc_instantiation__force'"/>
            </check_any>
            <check_value value="event.object.isclass.station and event.object.attention ge attention.nearby and event.object.isplayerowned and $CasinoWelfareModuleMacros.count"/>
            <check_any exact="event.object.welfaremodules.count" counter="$i">
              <check_value value="event.object.welfaremodules.{$i}.macro.ismacro.{$CasinoWelfareModuleMacros}"/>
            </check_any>
          </conditions>
          <actions>
            <set_value name="this.$Object" exact="event.object"/>
            <set_value name="this.$Race" exact="this.$Object.owner.primaryrace"/>
            <set_value name="this.$Seed" exact="this.$Object.seed"/>
            <get_room_definition macro="this.$CorridorMacro" race="this.$Race" tags="tag.entertainmentcorridor" seed="this.$Seed"/>
            <do_if value="not this.$CorridorMacro">
              <get_room_definition macro="this.$CorridorMacro" race="this.$Race" tags="tag.corridor" seed="this.$Seed"/>
            </do_if>
            <get_room_definition macro="this.$RoomMacro" tags="tag.casino" seed="this.$Seed"/>
            <!-- Create Interior -->
            <create_dynamic_interior object="this.$Object" corridor="this.$CorridorMacro" room="this.$RoomMacro" name="'{20007,1341}'" interiorname="this.$Interior" corridorname="this.$Corridor" roomname="this.$Room" roomtype="roomtype.bar" seed="this.$Seed"/>
            <do_if value="this.$Interior and this.$Corridor and this.$Room">
              <debug_text text="'Casino for ' + this.$Object.knownname + ' created'" chance="@$debugchance"/>
            </do_if>
            <run_actions ref="md.NPC_Instantiation.Add_Casino_Workers">
              <param name="ActorCue" value="this"/>
              <param name="Room" value="this.$Room"/>
            </run_actions>
          </actions>
          <cues>
            <cue name="Casino_Remove">
              <conditions>
                <check_any>
                  <event_object_interiors_despawning object="parent.$Object"/>
                  <event_object_destroyed object="parent.$Object"/>
                </check_any>
              </conditions>
              <actions>
                <!--TODO @Owen move any wandering NPCs out of here?-->
                <!-- Make sure interior is destroyed before player leaves attention level -->
                <do_if value="parent.$Interior?">
                  <remove_dynamic_interior object="parent.$Object" interior="parent.$Interior"/>
                  <debug_text text="'Casino for ' + parent.$Object.knownname + ' should have been removed'" chance="@$debugchance"/>
                </do_if>
                <do_else>
                  <debug_text text="'Casino invalid. Can not be removed'" chance="@$debugchance"/>
                </do_else>
              </actions>
            </cue>
          </cues>
        </cue>
        <!--Create a crewquarters room on ships-->
        <cue name="CrewquartersInterior" instantiate="true">
          <conditions>
            <check_any>
              <event_object_changed_attention group="$TrackedObjects"/>
              <event_object_signalled group="$TrackedObjects" param="'npc_instantiation__force'"/>
            </check_any>
            <check_value value="event.object.isclass.[class.ship_l, class.ship_xl] and event.object.attention ge attention.nearby and event.object.canhavedynamicinterior and not [faction.ownerless, faction.xenon, faction.xenon1, faction.xenon2, faction.xenon3, faction.xenon4, faction.xenon5, faction.xenon6, faction.khaak].indexof.{event.object.owner}"/>
            <count_rooms object="event.object" roomtype="roomtype.crewquarters" exact="0"/>
          </conditions>
          <actions>
            <set_value name="this.$Object" exact="event.object"/>
            <set_value name="this.$Race" exact="this.$Object.owner.primaryrace"/>
            <set_value name="this.$Seed" exact="this.$Object.seed + lookup.roomtype.list.indexof.{roomtype.crewquarters}"/>
            <get_room_definition macro="this.$CorridorMacro" race="this.$Race" tags="tag.residentialcorridor" seed="this.$Seed"/>
            <do_if value="not this.$CorridorMacro">
              <get_room_definition macro="this.$CorridorMacro" race="this.$Race" tags="tag.corridor" seed="this.$Seed"/>
            </do_if>
            <get_room_definition macro="this.$RoomMacro" tags="tag.crewquarters" seed="this.$Seed"/>
            <!-- Create Interior -->
            <create_dynamic_interior object="this.$Object" corridor="this.$CorridorMacro" room="this.$RoomMacro" name="'{20007,1251}'" interiorname="this.$Interior" corridorname="this.$Corridor" roomname="this.$Room" roomtype="roomtype.crewquarters" seed="this.$Seed"/>
            <do_if value="this.$Interior and this.$Corridor and this.$Room">
              <debug_text text="'Crew quarters for ' + this.$Object.knownname + ' created'" chance="@$debugchance"/>
            </do_if>
          </actions>
          <cues>
            <cue name="CrewquartersInterior_Remove">
              <conditions>
                <check_any>
                  <event_object_interiors_despawning object="parent.$Object"/>
                  <event_object_destroyed object="parent.$Object"/>
                </check_any>
              </conditions>
              <actions>
                <!--TODO @Owen move any wandering NPCs out of here?-->
                <!-- Make sure interior is destroyed before player leaves attention level -->
                <do_if value="parent.$Interior?">
                  <remove_dynamic_interior object="parent.$Object" interior="parent.$Interior"/>
                  <debug_text text="'Crew quarters for ' + parent.$Object.knownname + ' should have been removed'" chance="@$debugchance"/>
                </do_if>
                <do_else>
                  <debug_text text="'Crew quarters invalid. Can not be removed'" chance="@$debugchance"/>
                </do_else>
              </actions>
            </cue>
          </cues>
        </cue>
        <!--Create a brig room on ships-->
        <cue name="BrigInterior" instantiate="true">
          <conditions>
            <check_any>
              <event_object_changed_attention group="$TrackedObjects"/>
              <event_object_signalled group="$TrackedObjects" param="'npc_instantiation__force'"/>
            </check_any>
            <check_value value="event.object.isclass.[class.ship_l, class.ship_xl] and event.object.attention ge attention.nearby and event.object.canhavedynamicinterior and not [faction.ownerless, faction.xenon, faction.xenon1, faction.xenon2, faction.xenon3, faction.xenon4, faction.xenon5, faction.xenon6, faction.khaak].indexof.{event.object.owner}"/>
            <count_rooms object="event.object" roomtype="roomtype.prison" exact="0"/>
          </conditions>
          <actions>
            <set_value name="this.$Object" exact="event.object"/>
            <set_value name="this.$Race" exact="this.$Object.owner.primaryrace"/>
            <set_value name="this.$Seed" exact="this.$Object.seed + lookup.roomtype.list.indexof.{roomtype.prison}"/>
            <get_room_definition macro="this.$CorridorMacro" race="this.$Race" tags="tag.maintenancecorridor" seed="this.$Seed"/>
            <do_if value="not this.$CorridorMacro">
              <get_room_definition macro="this.$CorridorMacro" race="this.$Race" tags="tag.corridor" seed="this.$Seed"/>
            </do_if>
            <get_room_definition macro="this.$RoomMacro" tags="tag.prison" seed="this.$Seed"/>
            <!-- Create Interior -->
            <create_dynamic_interior object="this.$Object" corridor="this.$CorridorMacro" room="this.$RoomMacro" name="'{20007,1011}'" interiorname="this.$Interior" corridorname="this.$Corridor" roomname="this.$Room" roomtype="roomtype.prison" seed="this.$Seed"/>
            <do_if value="this.$Interior and this.$Corridor and this.$Room">
              <debug_text text="'Brig for ' + this.$Object.knownname + ' created'" chance="@$debugchance"/>
            </do_if>
          </actions>
          <cues>
            <cue name="BrigInterior_Remove">
              <conditions>
                <check_any>
                  <event_object_interiors_despawning object="parent.$Object"/>
                  <event_object_destroyed object="parent.$Object"/>
                </check_any>
              </conditions>
              <actions>
                <!--TODO @Owen move any wandering NPCs out of here?-->
                <!-- Make sure interior is destroyed before player leaves attention level -->
                <do_if value="parent.$Interior?">
                  <remove_dynamic_interior object="parent.$Object" interior="parent.$Interior"/>
                  <debug_text text="'Brig for ' + parent.$Object.knownname + ' should have been removed'" chance="@$debugchance"/>
                </do_if>
                <do_else>
                  <debug_text text="'Brig invalid. Can not be removed'" chance="@$debugchance"/>
                </do_else>
              </actions>
            </cue>
          </cues>
        </cue>
        <library name="Add_Casino_Workers" purpose="run_actions">
          <params>
            <param name="ActorCue"/>
            <param name="Room"/>
            <!--TODO @Owen additional override parameters e.g. race?-->
            <param name="DebugChance" default="0"/>
          </params>
          <actions>
            <do_if value="$Room">
              <set_value name="$SelectFaction" exact="$Room.owner"/>
              <set_value name="$SelectRace" exact="null"/>
              <do_if value="$Room.isplayerowned">
                <set_value name="$SelectRace" exact="faction.player.primaryrace"/>
              </do_if>
              <set_value name="$Faction" exact="$Room.owner"/>
              <find_npc_slot name="$DealerSlots" tags="tag.roulette_dealer" object="$Room" multiple="true"/>
              <do_for_each name="$DealerSlot" in="$DealerSlots">
                <create_cue_actor cue="$ActorCue" name="$Dealer">
                  <select faction="$SelectFaction" race="$SelectRace" tags="tag.manager"/>
                  <owner exact="$Faction"/>
                </create_cue_actor>
                <do_if value="$Dealer">
                  <add_actor_to_room actor="$Dealer" slot="$DealerSlot"/>
                  <set_entity_overrides entity="$Dealer" icon="'pilot'" title="if $Dealer.isfemale then '{20208,20802}' else '{20208,20801}'"/>
                  <set_entity_role entity="$Dealer" role="entityrole.service"/>
                  <set_entity_role_object entity="$Dealer" object="$Room.object"/>
                  <set_entity_traits entity="$Dealer" customhandler="true"/>
                  <set_value name="$Dealer.$roulette_dealer_slot" exact="$DealerSlot"/>
                  <debug_text text="'Created dealer ' + $Dealer + ' ' + $Dealer.knownname + ' for ' + $DealerSlot" chance="$DebugChance"/>
                </do_if>
              </do_for_each>
            </do_if>
          </actions>
        </library>
        <cue name="InstantiateForUsecase" instantiate="true">
          <conditions>
            <event_cue_signalled/>
          </conditions>
          <actions>
            <set_value name="$NPCsToInstantiate" exact="event.param.{2}"/>
            <create_list name="$InstantiatedNPCs"/>
            <set_value name="$debugchance" exact="0" comment="TODO (@Lorraine): Remove after testing"/>
            <do_all exact="$NPCsToInstantiate.count" counter="$NPCCounter">
              <set_value name="$NPC" exact="$NPCsToInstantiate.{$NPCCounter}"/>
              <set_value name="$Container" exact="$NPC.$Container"/>
              <set_value name="$Template" exact="$NPC.$Template"/>
              <set_value name="$Slot" exact="$NPC.$SpawnSlot"/>
              <debug_text text="'Creating NPC on ' + $Container.knownname + ' ({' + $Container + '})'" chance="$debugchance"/>
              <create_npc_from_template name="$Result" object="$Container" template="$Template" owner="$Container.owner" slot="$Slot" required="true"/>
              <do_if value="not $Result">
                <debug_text text="'NPC could not be created on ' + $Container.knownname + ' ({' + $Container + '})'" filter="error"/>
              </do_if>
              <do_else>
                <append_to_list name="$InstantiatedNPCs" exact="$Result"/>
              </do_else>
            </do_all>
            <do_if value="$InstantiatedNPCs.count">
              <set_value name="event.param.{1}.$InstantiatedNPCs" exact="$InstantiatedNPCs"/>
            </do_if>
          </actions>
        </cue>
        <library name="InstantiateNPCs">
          <!-- event.param == placement component (ship, station, walkablemodule or room) -->
          <actions>
            <do_if value="event.param.isoperational">
              <do_if value="event.param.isclass.[class.ship, class.station]">
                <set_value name="this.$Object" exact="event.param"/>
              </do_if>
              <do_elseif value="event.param.isclass.[class.walkablemodule, class.room]">
                <set_value name="this.$Object" exact="event.param.object"/>
              </do_elseif>
              <do_elseif value="event.param.isclass.navcontext">
                <!--interior navcontexts are populated when the object itself is processed-->
              </do_elseif>
              <do_else>
                <assert value="event.param.isclass.[class.ship, class.station, class.walkablemodule, class.room, class.navcontext]" text="'object ' + event.param + ' ' + event.param.knownname + ' is neither a ship, station, dockarea or room [Owen]'" break="1"/>
              </do_else>
              <do_if value="@this.$Object.exists">
                <set_value name="this.$Owner" exact="this.$Object.owner"/>
                <do_if value="this.$Object.isclass.ship">
                  <set_value name="this.$AIPilot" exact="this.$Object.assignedaipilot"/>
                  <set_value name="this.$People" exact="this.$Object.people.list"/>
                  <do_if value="this.$People.count and this.$Object.people.capacity">
                    <!-- Check NPCs which have already been instanced to avoid duplicates -->
                    <do_for_each name="$ExistingNPC" in="this.$Object.roleentities">
                      <do_for_each name="$PersonEntry" in="this.$People" counter="$People_i" reverse="true">
                        <do_if value="this.$Object.people.{$PersonEntry}.seed == $ExistingNPC.seed">
                          <debug_text text="$ExistingNPC.knownname + ' ' + $ExistingNPC + ' is already instanced for ' + this.$Object" chance="@$debugchance"/>
                          <remove_value name="this.$People.{$People_i}"/>
                          <break/>
                        </do_if>
                      </do_for_each>
                    </do_for_each>
                    <do_if value="this.$People.count">
                      <set_value name="this.$PlaceCasual" exact="this.$Object.isalertlevel.green"/>
                      <set_value name="this.$TotalNumSlots" exact="0"/>
                      <set_value name="this.$TotalNumCrewSlots" exact="0"/>
                      <find_npc_slot name="this.$CasualSlots" object="event.param" multiple="true"/>
                      <do_for_each name="$PotentialSlot" in="this.$CasualSlots" counter="$slot_counter" reverse="true">
                        <!--Don't count or place NPCs directly on airmarshal slots. They should walk there when assigned-->
                        <do_if value="$PotentialSlot.hastag.airmarshal">
                          <remove_value name="this.$CasualSlots.{$slot_counter}"/>
                        </do_if>
                        <do_elseif value="$PotentialSlot.hastag.service or $PotentialSlot.hastag.marine">
                          <set_value name="this.$TotalNumSlots" operation="add"/>
                          <set_value name="this.$TotalNumCrewSlots" operation="add"/>
                          <remove_value name="this.$CasualSlots.{$slot_counter}"/>
                        </do_elseif>
                        <do_elseif value="$PotentialSlot.hastag.npc_generic">
                          <do_if value="this.$PlaceCasual">
                            <set_value name="this.$TotalNumSlots" operation="add"/>
                          </do_if>
                        </do_elseif>
                      </do_for_each>
                      <do_if value="not this.$PlaceCasual">
                        <clear_list list="this.$CasualSlots"/>
                      </do_if>
                      <do_if value="this.$TotalNumSlots">
                        <shuffle_list list="this.$CasualSlots"/>
                        <!--Base the number of placed NPCs on how filled the object is with people-->
                        <set_value name="this.$MaxAmount" exact="[(this.$TotalNumSlots * ((this.$People.count)f / (this.$Object.people.capacity)f) * player.chardensity)i, 1].max"/>
                        <set_value name="this.$RemainingAmount" exact="this.$MaxAmount"/>
                        <do_if value="this.$RemainingAmount">
                          <shuffle_list list="this.$People"/>
                          <debug_text text="'Will attempt to place ' + this.$RemainingAmount + ' instanced NPCs on object ' + this.$Object + ' ' + this.$Object.knownname + ' with ' + this.$TotalNumSlots + ' free slots'" chance="@$debugchance"/>
                          <set_value name="this.$SlotTable" exact="table[]"/>
                          <set_value name="this.$NumPlacedCrew" exact="0"/>
                          <do_all exact="this.$People.count" counter="$i">
                            <do_if value="not this.$RemainingAmount">
                              <break/>
                            </do_if>
                            <!-- TODO: Priorities certain rooms e.g. bridge? Prioritise NPCs! -->
                            <set_value name="this.$Role" exact="this.$Object.people.{this.$People.{$i}}.role"/>
                            <set_value name="this.$IsCrew" exact="this.$Role == entityrole.service or this.$Role == entityrole.marine"/>
                            <do_if value="not this.$Object.people.{this.$People.{$i}}.isbusy">
                              <set_value name="this.$IsButler" exact="this.$Role == entityrole.service and $ButlerMacros.count and (not this.$SlotTable.{tag.butler}? or this.$SlotTable.{tag.butler}.count) and $ButlerMacros.indexof.{this.$Object.people.{this.$People.{$i}}.macro}"/>
                              <do_if value="not this.$SlotTable.{this.$Role}?">
                                <find_npc_slot name="this.$SlotTable.{this.$Role}" object="event.param" role="this.$Role" multiple="true"/>
                                <shuffle_list list="this.$SlotTable.{this.$Role}"/>
                                <debug_text text="this.$SlotTable.{this.$Role}.count + ' slots found for role: ' + this.$Role" chance="@$debugchance"/>
                              </do_if>
                              <do_if value="this.$IsButler and not this.$SlotTable.{tag.butler}?">
                                <find_npc_slot name="this.$SlotTable.{tag.butler}" object="event.param" tags="tag.butler" multiple="true"/>
                                <do_if value="this.$SlotTable.{tag.butler}.count">
                                  <shuffle_list list="this.$SlotTable.{tag.butler}"/>
                                  <!--Remove any remaining butler slot from the service slots. It's possible some service crew may have spawned on them but that's fine-->
                                  <remove_from_list name="this.$SlotTable.{entityrole.service}" list="this.$SlotTable.{tag.butler}"/>
                                </do_if>
                                <do_else>
                                  <set_value name="this.$IsButler" exact="false"/>
                                </do_else>
                              </do_if>
                              <set_value name="this.$IsCasual" exact="false"/>
                              <do_if value="this.$CasualSlots.count">
                                <do_if value="this.$Role == entityrole.passenger">
                                  <set_value name="this.$IsCasual" exact="true"/>
                                </do_if>
                                <do_elseif value="this.$IsCrew and not this.$IsButler and this.$NumPlacedCrew gt this.$TotalNumCrewSlots / 2">
                                  <set_value name="this.$IsCasual" exact="true" chance="90"/>
                                </do_elseif>
                              </do_if>
                              <do_elseif value="this.$Role == entityrole.passenger">
                                <debug_text text="'Passenger can not be placed as there are no casual slots'" chance="@$debugchance"/>
                                <continue/>
                              </do_elseif>
                              <do_if value="this.$IsCasual">
                                <set_value name="this.$Slots" exact="this.$CasualSlots"/>
                              </do_if>
                              <do_elseif value="this.$IsButler and @this.$SlotTable.{tag.butler}.count">
                                <set_value name="this.$Slots" exact="this.$SlotTable.{tag.butler}"/>
                              </do_elseif>
                              <do_else>
                                <set_value name="this.$Slots" exact="this.$SlotTable.{this.$Role}"/>
                              </do_else>
                              <do_if value="this.$Slots.count and (this.$TotalNumSlots == 1 or this.$Slots.count ge 2)" comment="Leave space for one to move around unless there is only 1 available spot, otherwise it would never be filled">
                                <set_value name="this.$SlotIdx" min="1" max="this.$Slots.count"/>
                                <set_value name="this.$Slot" exact="this.$Slots.{this.$SlotIdx}"/>
                                <create_npc_from_template name="this.$npc" object="this.$Object" template="this.$People.{$i}" owner="this.$Object.owner" slot="this.$Slot" required="true"/>
                                <set_entity_role_object entity="this.$npc" object="this.$Object"/>
                                <debug_text text="'%s Creating NPC instance %s %s %s in slot %s for role %s, is casual %s'.[player.age, this.$npc, this.$People.{$i}, this.$Object.people.{this.$People.{$i}}.name, this.$Slot, this.$Role, this.$IsCasual]" chance="@$debugchance"/>
                                <do_if value="this.$npc">
                                  <run_actions ref="CalculateNPCHiringFee">
                                    <param name="npc" value="this.$npc"/>
                                  </run_actions>
                                  <do_if value="this.$IsCrew">
                                    <set_value name="this.$NumPlacedCrew" operation="add"/>
                                  </do_if>
                                  <do_if value="this.$IsCasual">
                                    <set_value name="this.$npc.$casual" exact="true"/>
                                  </do_if>
                                  <do_if value="this.$IsButler">
                                    <set_value name="this.$npc.$butler" exact="true"/>
                                  </do_if>
                                  <do_if value="@this.$AIPilot.$freezeinstancedNPCs">
                                    <set_value name="this.$npc.$Stay" exact="true"/>
                                  </do_if>
                                  <set_value name="this.$RemainingAmount" operation="subtract"/>
                                  <remove_value name="this.$Slots.{this.$SlotIdx}"/>
                                  <do_if value="this.$SlotTable.keys.count gt 1">
                                    <!--remove slot from other role slot lists-->
                                    <set_value name="this.$SlotKeys" exact="this.$SlotTable.keys.list"/>
                                    <do_all exact="this.$SlotKeys.count" counter="$key_counter">
                                      <do_if value="this.$SlotKeys.{$key_counter} != this.$Role">
                                        <set_value name="this.$SlotIdx" exact="this.$SlotTable.{this.$SlotKeys.{$key_counter}}.indexof.{this.$Slot}" comment="re-use variable"/>
                                        <do_if value="this.$SlotIdx">
                                          <debug_text text="'Removing slot ' + this.$Slot + ' from list of slots for role ' + this.$SlotKeys.{$key_counter}" chance="@$debugchance"/>
                                          <remove_value name="this.$SlotTable.{this.$SlotKeys.{$key_counter}}.{this.$SlotIdx}"/>
                                        </do_if>
                                      </do_if>
                                    </do_all>
                                  </do_if>
                                </do_if>
                                <remove_value name="this.$npc"/>
                              </do_if>
                            </do_if>
                          </do_all>
                        </do_if>
                      </do_if>
                    </do_if>
                  </do_if>
                </do_if>
                <do_elseif value="this.$Object.isclass.station">
                  <do_if value="@this.$Object.shiptrader.isclass.npc">
                    <signal_cue_instantly cue="PlaceShiptrader" param="this.$Object"/>
                  </do_if>
                  <signal_cue_instantly cue="PlaceItemTrader" param="event.param"/>
                  <!--Workforce-->
                  <!--TODO @Owen improve number of NPCs on stations with no workforce capacity by design e.g. defence stations-->
                  <set_value name="this.$WorkforceCount" exact="this.$Object.workforce.amount"/>
                  <!--If there is workforce capacity, spawn crew, unless it is a NPC defence station-->
                  <do_if value="this.$Object.workforce.capacity and (not this.$Object.isdefencestation or this.$Object.isplayerowned)">
                    <!--TODO @Owen use suitable role tag based on what the NPC will end up being-->
                    <find_object_component name="this.$CurrentNPCs" multiple="true" temporaryentity="true" object="this.$Object"/>
                    <find_npc_slot name="this.$ServiceSlots" object="this.$Object" role="entityrole.service" multiple="true"/>
                    <find_npc_slot name="this.$GenericSlots" object="this.$Object" tags="tag.npc_generic" multiple="true"/>
                    <find_npc_slot name="this.$DecorationSlots" object="this.$Object" tags="tag.npc_decoration" excludeblocked="false" multiple="true"/>
                    <set_value name="this.$GenericInteriorSlots" exact="[]"/>
                    <find_object_component name="this.$Interiors" object="this.$Object" class="class.navcontext" multiple="true"/>
                    <do_for_each name="$Interior" in="this.$Interiors">
                      <do_if value="not $Interior.isprivate">
                        <do_for_each name="$InteriorRoom" in="$Interior.rooms">
                          <find_npc_slot name="this.$InteriorSlots" object="$InteriorRoom" excludeblocked="false" multiple="true"/>
                          <do_for_each name="$InteriorSlot" in="this.$InteriorSlots">
                            <do_if value="$InteriorSlot.hastag.{entityrole.service.tag}">
                              <do_if value="this.$ServiceSlots.indexof.{$InteriorSlot} == 0">
                                <append_to_list name="this.$ServiceSlots" exact="$InteriorSlot"/>
                              </do_if>
                            </do_if>
                            <do_elseif value="$InteriorSlot.hastag.npc_generic">
                              <append_to_list name="this.$GenericInteriorSlots" exact="$InteriorSlot"/>
                            </do_elseif>
                          </do_for_each>
                        </do_for_each>
                      </do_if>
                    </do_for_each>
                    <remove_from_list name="this.$GenericSlots" list="this.$ServiceSlots"/>
                    <remove_from_list name="this.$GenericSlots" list="this.$GenericInteriorSlots"/>
                    <do_if value="this.$ServiceSlots.count or this.$GenericSlots.count or this.$GenericInteriorSlots.count or this.$DecorationSlots.count">
                      <shuffle_list list="this.$ServiceSlots"/>
                      <shuffle_list list="this.$GenericSlots"/>
                      <shuffle_list list="this.$GenericInteriorSlots"/>
                      <shuffle_list list="this.$DecorationSlots"/>
                      <!--Remove the back of the shuffled slots so there will be slots to move around to-->
                      <do_if value="this.$ServiceSlots.count gt 1">
                        <remove_value name="this.$ServiceSlots.last"/>
                        <do_if value="this.$ServiceSlots.count gt 3">
                          <remove_value name="this.$ServiceSlots.last"/>
                        </do_if>
                      </do_if>
                      <do_if value="this.$GenericSlots.count gt 1">
                        <remove_value name="this.$GenericSlots.last"/>
                        <do_if value="this.$GenericSlots.count gt 3">
                          <remove_value name="this.$GenericSlots.last"/>
                        </do_if>
                      </do_if>
                      <do_if value="this.$GenericInteriorSlots.count gt 1">
                        <remove_value name="this.$GenericInteriorSlots.last"/>
                        <do_if value="this.$GenericInteriorSlots.count gt 3">
                          <remove_value name="this.$GenericInteriorSlots.last"/>
                        </do_if>
                      </do_if>
                      <!--The absolute maximum is still dictated by the amount of workforce and available slots-->
                      <do_if value="$DockareaBoostedFactions.indexof.{this.$Owner} or this.$Object.istradestation or this.$Object.canbuildships or this.$Object.canequipships">
                        <set_value name="this.$MinAmount" exact="30 * player.chardensity"/>
                      </do_if>
                      <do_else>
                        <set_value name="this.$MinAmount" exact="10 * player.chardensity"/>
                      </do_else>
                      <set_value name="this.$MaxAmount" exact="[this.$ServiceSlots.count + this.$GenericSlots.count + this.$GenericInteriorSlots.count, (60 * player.chardensity), this.$WorkforceCount + (if this.$Object.isplayerowned then 0 else 10)].min"/>
                      <do_if value="this.$MaxAmount gt this.$MinAmount and this.$WorkforceCount">
                        <!--Calculate the amount-->
                        <debug_text text="'Minimum amount: ' + this.$MinAmount + ' Max: ' + this.$MaxAmount + ' with workforce: ' + this.$WorkforceCount + ' / ' + this.$Object.workforce.capacity" chance="@$debugchance"/>
                        <set_value name="this.$WorkforceFill" exact="(this.$WorkforceCount)f / (this.$Object.workforce.capacity)f"/>
                        <set_value name="this.$AmountRange" exact="this.$MaxAmount - this.$MinAmount"/>
                        <set_value name="this.$NPCAmount" exact="(this.$MinAmount + (this.$GenericInteriorSlots.count * 0.6f) + (this.$AmountRange * this.$WorkforceFill))i"/>
                      </do_if>
                      <do_else>
                        <!--There are less or equal slots or workforce than our intended minimum amount of instanced NPCs. Use that number.-->
                        <set_value name="this.$NPCAmount" exact="this.$MaxAmount"/>
                      </do_else>
                      <set_value name="this.$NPCAmount" operation="subtract" exact="this.$CurrentNPCs.count"/>
                      <do_if value="this.$NPCAmount gt 0">
                        <!--Table containing a list of allied factions by race. key: race, value: faction list-->
                        <set_value name="this.$AlliedFactionTable" exact="table[]"/>
                        <!--List containing all allied factions-->
                        <set_value name="this.$AlliedFactionList" exact="[]"/>
                        <do_if value="$DockareaAlliedFactionOverrides.{this.$Object}? or $DockareaAlliedFactionOverrides.{this.$Owner}?">
                          <!--This faction has an override of allies to be used as visitors for the dock area-->
                          <set_value name="this.$AlliedFactionList" exact="if $DockareaAlliedFactionOverrides.{this.$Object}? then $DockareaAlliedFactionOverrides.{this.$Object}.clone else $DockareaAlliedFactionOverrides.{this.$Owner}.clone"/>
                          <do_for_each name="$AlliedFaction" in="this.$AlliedFactionList">
                            <do_if value="this.$AlliedFactionTable.{$AlliedFaction.primaryrace}?">
                              <append_to_list name="this.$AlliedFactionTable.{$AlliedFaction.primaryrace}" exact="$AlliedFaction"/>
                            </do_if>
                            <do_else>
                              <set_value name="this.$AlliedFactionTable.{$AlliedFaction.primaryrace}" exact="[$AlliedFaction]"/>
                            </do_else>
                          </do_for_each>
                        </do_if>
                        <do_else>
                          <do_for_each name="$PotentialFaction" in="lookup.faction.list">
                            <do_if value="$PotentialFaction.iseconomic and $PotentialFaction.isactive and $PotentialFaction != faction.player and $PotentialFaction != this.$Owner and ($PotentialFaction.hasrelation.neutral.{this.$Owner} or $PotentialFaction.hasrelation.friend.{this.$Owner})">
                              <append_to_list name="this.$AlliedFactionList" exact="$PotentialFaction"/>
                              <do_if value="this.$AlliedFactionTable.{$PotentialFaction.primaryrace}?">
                                <append_to_list name="this.$AlliedFactionTable.{$PotentialFaction.primaryrace}" exact="$PotentialFaction"/>
                              </do_if>
                              <do_else>
                                <set_value name="this.$AlliedFactionTable.{$PotentialFaction.primaryrace}" exact="[$PotentialFaction]"/>
                              </do_else>
                            </do_if>
                          </do_for_each>
                        </do_else>
                        <!--TODO @Owen be less strict on local allies? Allow them if a ship or station is nearby?-->
                        <set_value name="this.$LocalAlliedFactions" exact="[]"/>
                        <find_sector_in_range name="this.$LocalSectors" maxdistance="1" object="this.$Object.sector" multiple="true"/>
                        <do_for_each name="$LocalSector" in="this.$LocalSectors">
                          <do_if value="$LocalSector.iscontested">
                            <do_for_each name="$LocalFaction" in="$LocalSector.contestingfactions">
                              <do_if value="this.$AlliedFactionList.indexof.{$LocalFaction} and this.$LocalAlliedFactions.indexof.{$LocalFaction} == 0">
                                <append_to_list name="this.$LocalAlliedFactions" exact="$LocalFaction"/>
                              </do_if>
                            </do_for_each>
                          </do_if>
                          <do_else>
                            <do_if value="this.$AlliedFactionList.indexof.{$LocalSector.owner} and this.$LocalAlliedFactions.indexof.{$LocalSector.owner} == 0">
                              <append_to_list name="this.$LocalAlliedFactions" exact="$LocalSector.owner"/>
                            </do_if>
                          </do_else>
                        </do_for_each>
                        <debug_text text="'Local allies: ' + this.$LocalAlliedFactions" chance="@$debugchance"/>
                        <debug_text text="'Has allies ' + this.$AlliedFactionTable" chance="@$debugchance"/>
                        <do_if value="this.$AlliedFactionList.count and not this.$Object.isplayerowned">
                          <do_if value="this.$WorkforceCount">
                            <set_value name="this.$VisitorNPCAmount" exact="(this.$NPCAmount * 0.3)i"/>
                            <set_value name="this.$WorkforceNPCAmount" exact="this.$NPCAmount - this.$VisitorNPCAmount"/>
                          </do_if>
                          <do_else>
                            <set_value name="this.$VisitorNPCAmount" exact="this.$NPCAmount"/>
                            <set_value name="this.$WorkforceNPCAmount" exact="0"/>
                          </do_else>
                        </do_if>
                        <do_else>
                          <set_value name="this.$VisitorNPCAmount" exact="0"/>
                          <set_value name="this.$WorkforceNPCAmount" exact="this.$NPCAmount"/>
                        </do_else>
                        <!--TODO @Owen we currently fill every decoration slot but perhaps have a 'critical' slot tag to define which ones MUST be filled, and then a random chance for remaining slots-->
                        <!--<set_value name="this.$DecorationNPCAmount" min="(this.$DecorationSlots.count * 0.8)i" max="this.$DecorationSlots.count"/>-->
                        <set_value name="this.$DecorationNPCAmount" exact="this.$DecorationSlots.count"/>
                        <debug_text text="'Will attempt to place ' + this.$WorkforceNPCAmount + ' workforce NPCs, ' + this.$VisitorNPCAmount + ' visitor NPCs and ' + this.$DecorationNPCAmount + ' decoration NPCs on object ' + event.param + ' ' + event.param.knownname + ' with ' + this.$ServiceSlots.count + ' service slots and ' + this.$GenericSlots.count + ' generic slots'" chance="@$debugchance"/>
                        <set_value name="this.$Workforce" exact="this.$Object.workforce.amounts"/>
                        <set_value name="this.$PrimaryRaceWorkforce" exact="@this.$Workforce.{this.$Owner.primaryrace}"/>
                        <do_if value="this.$PrimaryRaceWorkforce gt 50 and (this.$Owner == faction.scaleplate or this.$Owner == faction.alliance)">
                          <!--Certain factions have a mixture of races. Have them appear as workforce of this station.-->
                          <!--TODO @Owen put workforce demographics in factions.xml?-->
                          <set_value name="this.$Workforce.{race.argon}" min="this.$PrimaryRaceWorkforce / 10" max="this.$PrimaryRaceWorkforce / 5" chance="if this.$Owner.primaryrace == race.argon then 0 else 100"/>
                          <set_value name="this.$Workforce.{race.paranid}" min="this.$PrimaryRaceWorkforce / 10" max="this.$PrimaryRaceWorkforce / 5" chance="if this.$Owner.primaryrace == race.paranid then 0 else 100"/>
                          <set_value name="this.$Workforce.{race.split}" min="this.$PrimaryRaceWorkforce / 10" max="this.$PrimaryRaceWorkforce / 5" chance="if this.$Owner.primaryrace == race.split then 0 else 100"/>
                          <set_value name="this.$Workforce.{race.teladi}" min="this.$PrimaryRaceWorkforce / 10" max="this.$PrimaryRaceWorkforce / 5" chance="if this.$Owner.primaryrace == race.teladi then 0 else 100"/>
                        </do_if>
                        <assert value="this.$Workforce.keys.count or this.$WorkforceCount == 0" text="'Workforce table ' + this.$Workforce + ' is empty while the station has ' + this.$WorkforceCount + ' workforce [Owen]'" break="1"/>
                        <set_value name="this.$WorkforceKeys" exact="this.$Workforce.keys.list"/>
                        <set_value name="this.$WorkforceTotal" exact="0"/>
                        <do_for_each valuename="$WorkforceAmount" in="this.$Workforce">
                          <set_value name="this.$WorkforceTotal" operation="add" exact="$WorkforceAmount"/>
                        </do_for_each>
                        <do_if value="this.$Object.isplayerowned">
                          <set_value name="this.$SkillsetTags" exact="[tag.regular, tag.regular]"/>
                        </do_if>
                        <do_else>
                          <set_value name="this.$SkillsetTags" exact="[tag.regular, tag.veteran]"/>
                        </do_else>
                        <do_all exact="this.$WorkforceNPCAmount" counter="$instance_i">
                          <set_value name="this.$PastWorkforceAmount" exact="0"/>
                          <set_value name="this.$WorkforceSelection" min="1" max="this.$WorkforceTotal"/>
                          <do_for_each name="$WorkforceRace" valuename="$WorkforceAmount" in="this.$Workforce">
                            <do_if value="this.$PastWorkforceAmount + $WorkforceAmount ge this.$WorkforceSelection">
                              <set_value name="this.$WorkforceTotal" operation="subtract"/>
                              <set_value name="this.$Workforce.{$WorkforceRace}" operation="subtract"/>
                              <!--TODO @Owen - extract this section into a library to better allow extending for DLC?-->
                              <set_value name="this.$SelectedRace" exact="$WorkforceRace"/>
                              <!-- use races available depending on habitation, but attempt to also match by faction -->
                              <set_value name="this.$MatchingFaction" exact="null"/>
                              <do_if value="this.$Owner == faction.player">
                                <set_value name="this.$MatchingFaction" exact="faction.player"/>
                              </do_if>
                              <do_elseif value="this.$SelectedRace == this.$Owner.primaryrace">
                                <set_value name="this.$MatchingFaction" exact="this.$Owner"/>
                              </do_elseif>
                              <do_elseif value="this.$AlliedFactionTable.{this.$SelectedRace}?">
                                <set_value name="this.$MatchingFaction" exact="this.$AlliedFactionTable.{this.$SelectedRace}.random"/>
                              </do_elseif>
                              <do_if value="this.$MatchingFaction">
                                <do_any>
                                  <set_value name="this.$Role" exact="entityrole.service" weight="50"/>
                                  <set_value name="this.$Role" exact="entityrole.marine" weight="5"/>
                                </do_any>
                                <do_if value="this.$ServiceSlots.count + this.$GenericSlots.count ge 2" comment="Leave space for one to move around">
                                  <set_value name="$rookie" chance="30"/>
                                  <set_value name="this.$casual" exact="false"/>
                                  <debug_text text="'Finding character for role ' + this.$Role + ' race: ' + this.$SelectedRace + ' faction: ' + this.$MatchingFaction + ' is rookie: ' + @$rookie" chance="@$debugchance"/>
                                  <do_if value="$rookie?">
                                    <do_any>
                                      <do_all weight="if this.$ServiceSlots.count then 20 else 0">
                                        <get_character_definition reference="$chardef" race="this.$SelectedRace" faction="this.$MatchingFaction" tags="[this.$Role.tag, tag.rookie, tag.recruitable]"/>
                                      </do_all>
                                      <do_all weight="if this.$GenericSlots.count + this.$GenericInteriorSlots.count then (if this.$Object.welfaremodules.count then 40 else 15) else 0">
                                        <set_value name="this.$casual" exact="true"/>
                                        <do_any>
                                          <!--Have a chance that someone is acting causal but is still dressed as a worker-->
                                          <get_character_definition reference="$chardef" race="this.$SelectedRace" faction="this.$MatchingFaction" tags="tag.casual" weight="10"/>
                                          <get_character_definition reference="$chardef" race="this.$SelectedRace" faction="this.$MatchingFaction" tags="[this.$Role.tag, tag.rookie, tag.recruitable]" weight="1"/>
                                        </do_any>
                                      </do_all>
                                    </do_any>
                                    <do_if value="@$chardef">
                                      <create_cue_actor cue="this" name="this.$npc" ref="$chardef">
                                        <owner exact="this.$Owner"/>
                                      </create_cue_actor>
                                      <do_if value="this.$casual">
                                        <set_value name="this.$npc.$casual" exact="true"/>
                                      </do_if>
                                    </do_if>
                                  </do_if>
                                  <do_if value="not @this.$npc">
                                    <shuffle_list list="this.$SkillsetTags"/>
                                    <get_character_definition reference="$chardef" race="this.$SelectedRace" faction="this.$MatchingFaction" tags="[this.$Role.tag, this.$SkillsetTags.{1}, tag.recruitable]"/>
                                    <do_if value="not $chardef">
                                      <get_character_definition reference="$chardef" race="this.$SelectedRace" faction="this.$MatchingFaction" tags="[this.$Role.tag, this.$SkillsetTags.{2}, tag.recruitable]"/>
                                    </do_if>
                                    <do_if value="@$chardef">
                                      <create_cue_actor cue="this" name="this.$npc" ref="$chardef">
                                        <owner exact="this.$Owner"/>
                                      </create_cue_actor>
                                    </do_if>
                                  </do_if>
                                  <do_if value="not @this.$npc">
                                    <get_character_definition reference="$chardef" race="this.$SelectedRace" faction="this.$MatchingFaction" tags="tag.recruitable"/>
                                    <do_if value="@$chardef">
                                      <create_cue_actor cue="this" name="this.$npc" ref="$chardef">
                                        <owner exact="this.$Owner"/>
                                      </create_cue_actor>
                                    </do_if>
                                    <do_else>
                                      <debug_text text="'no character entry found with tag recruitable for faction ' + this.$MatchingFaction + '. see characters.xml'" filter="error"/>
                                    </do_else>
                                  </do_if>
                                  <do_if value="@this.$npc">
                                    <do_if value="this.$casual">
                                      <do_any>
                                        <set_value name="this.$SelectedSlotList" exact="this.$GenericSlots" weight="if this.$GenericSlots.count then 20 else 0"/>
                                        <set_value name="this.$SelectedSlotList" exact="this.$GenericInteriorSlots" weight="if this.$GenericInteriorSlots.count then 60 else 0"/>
                                      </do_any>
                                      <set_value name="this.$SlotIdx" min="1" max="this.$SelectedSlotList.count"/>
                                      <set_value name="this.$Slot" exact="this.$SelectedSlotList.{this.$SlotIdx}"/>
                                      <remove_value name="this.$SelectedSlotList.{this.$SlotIdx}"/>
                                    </do_if>
                                    <do_else>
                                      <set_value name="this.$SlotIdx" min="1" max="this.$ServiceSlots.count"/>
                                      <set_value name="this.$Slot" exact="this.$ServiceSlots.{this.$SlotIdx}"/>
                                      <remove_value name="this.$ServiceSlots.{this.$SlotIdx}"/>
                                    </do_else>
                                    <debug_text text="'%s Creating NPC instance %s of race %s out of workforce group %s with character definition %s and placing in slot %s. Casual: %s'.[player.age, this.$npc, this.$SelectedRace, $WorkforceRace, $chardef, this.$Slot, @this.$casual]" chance="@$debugchance"/>
                                    <set_entity_traits entity="this.$npc" temporary="true"/>
                                    <set_entity_role entity="this.$npc" role="this.$Role"/>
                                    <set_entity_role_object entity="this.$npc" object="this.$Object"/>
                                    <run_actions ref="CalculateNPCHiringFee">
                                      <param name="npc" value="this.$npc"/>
                                    </run_actions>
                                    <add_actor_to_room actor="this.$npc" slot="this.$Slot"/>
                                    <do_if value="true" chance="@$debugchance" comment="for debugging">
                                      <set_value name="$rolesandposts" exact="[entityrole.service, entityrole.marine, controlpost.aipilot, controlpost.manager]"/>
                                      <do_for_each name="$roleorpost" in="$rolesandposts">
                                        <do_if value="not $combinedskill? or (this.$npc.potentialskill.{$roleorpost} gt $combinedskill)">
                                          <set_value name="$combinedskill" exact="this.$npc.potentialskill.{$roleorpost}"/>
                                          <set_value name="$debugrole" exact="$roleorpost"/>
                                          <do_if value="$combinedskill ge 60">
                                            <debug_text text="'%s %s with 3 stars or over.\nskill: %s\nrole: %s\nchardef: %s\npiloting: %s\nmanagement: %s\nengineering: %s\nboarding: %s'.[this.$npc.knownname, this.$npc, $combinedskill, $roleorpost, $chardef, this.$npc.skill.piloting, this.$npc.skill.management, this.$npc.skill.engineering, this.$npc.skill.boarding]" filter="error"/>
                                          </do_if>
                                        </do_if>
                                      </do_for_each>
                                      <debug_text text="'%s %s\nskills: %s\nrole: %s\nchardef: %s\npiloting: %s\nmanagement: %s\nengineering: %s\nboarding: %s'.[this.$npc.knownname, this.$npc, $combinedskill, $debugrole, $chardef, this.$npc.skill.piloting, this.$npc.skill.management, this.$npc.skill.engineering, this.$npc.skill.boarding]"/>
                                      <remove_value name="$debugrole"/>
                                      <remove_value name="$combinedskill"/>
                                    </do_if>
                                  </do_if>
                                  <remove_value name="$chardef"/>
                                  <remove_value name="this.$npc"/>
                                  <remove_value name="$rookie"/>
                                </do_if>
                                <break/>
                              </do_if>
                            </do_if>
                            <do_else>
                              <set_value name="this.$PastWorkforceAmount" operation="add" exact="$WorkforceAmount"/>
                            </do_else>
                          </do_for_each>
                        </do_all>
                        <do_if value="this.$AlliedFactionList.count">
                          <do_all exact="this.$VisitorNPCAmount">
                            <do_if value="this.$GenericSlots.count + this.$GenericInteriorSlots.count == 0">
                              <break/>
                            </do_if>
                            <do_any>
                              <set_value name="this.$VisitorFaction" exact="this.$LocalAlliedFactions.random" weight="if this.$LocalAlliedFactions.count then 85 else 0"/>
                              <set_value name="this.$VisitorFaction" exact="this.$AlliedFactionList.random" weight="15"/>
                            </do_any>
                            <do_any>
                              <set_value name="this.$SelectedTags" exact="[tag.recruitable, tag.rookie, tag.service]" weight="5"/>
                              <set_value name="this.$SelectedTags" exact="[tag.recruitable, tag.regular, tag.service]" weight="10"/>
                              <set_value name="this.$SelectedTags" exact="[tag.recruitable, tag.rookie, tag.pilot]" weight="20"/>
                              <set_value name="this.$SelectedTags" exact="[tag.recruitable, tag.regular, tag.pilot]" weight="25"/>
                              <set_value name="this.$SelectedTags" exact="[tag.recruitable, tag.regular, tag.manager]" weight="10"/>
                            </do_any>
                            <get_character_definition reference="this.$chardef" race="this.$VisitorFaction.primaryrace" faction="this.$VisitorFaction" tags="this.$SelectedTags"/>
                            <do_if value="this.$chardef">
                              <create_cue_actor cue="this" name="this.$npc" ref="this.$chardef">
                                <owner exact="this.$VisitorFaction"/>
                              </create_cue_actor>
                              <do_if value="this.$npc">
                                <do_any>
                                  <set_value name="this.$SelectedSlotList" exact="this.$GenericSlots" weight="if this.$GenericSlots.count then 20 else 0"/>
                                  <set_value name="this.$SelectedSlotList" exact="this.$GenericInteriorSlots" weight="if this.$GenericInteriorSlots.count then 60 else 0"/>
                                </do_any>
                                <set_value name="this.$SlotIdx" min="1" max="this.$SelectedSlotList.count"/>
                                <set_value name="this.$Slot" exact="this.$SelectedSlotList.{this.$SlotIdx}"/>
                                <remove_value name="this.$SelectedSlotList.{this.$SlotIdx}"/>
                                <debug_text text="'%s Creating visitor NPC instance %s of faction %s and placing in slot %s'.[player.age, this.$npc, this.$VisitorFaction, this.$Slot]" chance="@$debugchance"/>
                                <set_entity_traits entity="this.$npc" temporary="true"/>
                                <set_entity_role entity="this.$npc" role="entityrole.passenger"/>
                                <set_value name="this.$npc.$station_visitor" exact="true"/>
                                <do_if value="this.$npc.isfemale">
                                  <set_entity_overrides entity="this.$npc" title="'{20208,30102}'" icon="'pilot'"/>
                                </do_if>
                                <do_else>
                                  <set_entity_overrides entity="this.$npc" title="'{20208,30101}'" icon="'pilot'"/>
                                </do_else>
                                <!--TODO @Owen is role object actually exposed anywhere? Is it needed for these guys?-->
                                <set_entity_role_object entity="this.$npc" object="this.$Object"/>
                                <run_actions ref="CalculateNPCHiringFee">
                                  <param name="npc" value="this.$npc"/>
                                </run_actions>
                                <add_actor_to_room actor="this.$npc" slot="this.$Slot"/>
                              </do_if>
                            </do_if>
                          </do_all>
                        </do_if>
                        <do_if value="this.$DecorationNPCAmount gt 0">
                          <set_value name="this.$DecoTags" exact="[tag.swim]"/>
                          <set_value name="this.$DecorationRaces" exact="this.$Object.workforce.races"/>
                          <do_for_each name="$VisitorFaction_i" in="this.$AlliedFactionList">
                            <do_if value="not this.$DecorationRaces.indexof.{$VisitorFaction_i.primaryrace}">
                              <append_to_list name="this.$DecorationRaces" exact="$VisitorFaction_i.primaryrace"/>
                            </do_if>
                          </do_for_each>
                          <do_for_each name="$DecorationSlot" in="this.$DecorationSlots">
                            <set_value name="$DecoSlotTag" exact="null"/>
                            <do_for_each name="$DecoSlotTag_i" in="$DecorationSlot.tags">
                              <do_if value="this.$DecoTags.indexof.{$DecoSlotTag_i}">
                                <set_value name="$DecoSlotTag" exact="$DecoSlotTag_i"/>
                                <break/>
                              </do_if>
                            </do_for_each>
                            <do_if value="$DecoSlotTag">
                              <shuffle_list list="this.$DecorationRaces"/>
                              <set_value name="this.$chardef" exact="null"/>
                              <do_for_each name="$DecoRace" in="this.$DecorationRaces">
                                <get_character_definition reference="this.$chardef" race="$DecoRace" tags="[tag.decoration, $DecoSlotTag]"/>
                                <do_if value="this.$chardef">
                                  <break/>
                                </do_if>
                              </do_for_each>
                            </do_if>
                            <do_if value="this.$chardef">
                              <create_cue_actor cue="this" name="this.$npc" ref="this.$chardef">
                                <owner exact="this.$Owner"/>
                              </create_cue_actor>
                              <debug_text text="'Spawned ' + this.$npc + ' as a decoration character for slot ' + $DecorationSlot + ' with tag ' + $DecoSlotTag" chance="@$debugchance"/>
                              <set_entity_traits entity="this.$npc" temporary="true" remote="false" customhandler="true"/>
                              <set_entity_role entity="this.$npc" role="entityrole.passenger"/>
                              <set_entity_role_object entity="this.$npc" object="this.$Object"/>
                              <set_entity_overrides entity="this.$npc" icon="''"/>
                              <set_value name="this.$npc.$Stay" exact="true"/>
                              <run_actions ref="CalculateNPCHiringFee">
                                <param name="npc" value="this.$npc"/>
                              </run_actions>
                              <add_actor_to_room actor="this.$npc" slot="$DecorationSlot"/>
                              <set_value name="this.$DecorationNPCAmount" operation="subtract"/>
                              <do_if value="this.$DecorationNPCAmount == 0">
                                <break/>
                              </do_if>
                            </do_if>
                          </do_for_each>
                        </do_if>
                      </do_if>
                    </do_if>
                  </do_if>
                  <do_elseif value="this.$Object.isdefencestation">
                    <!-- must explicitly be of this faction -->
                    <find_npc_slot name="this.$AllSlots" object="event.param" role="entityrole.service" multiple="true"/>
                    <shuffle_list list="this.$AllSlots"/>
                    <find_object_component name="this.$CurrentNPCs" multiple="true" temporaryentity="true" object="event.param"/>
                    <set_value name="this.$RemainingAmount" exact="[(this.$AllSlots.count  * 0.85f * player.chardensity)i - this.$CurrentNPCs.count, 0].max"/>
                    <debug_text text="'Will attempt to place ' + this.$RemainingAmount + ' instanced NPCs on object with ' + this.$AllSlots.count + ' free slots'" chance="@$debugchance"/>
                    <do_if value="this.$Object.isplayerowned">
                      <set_value name="this.$SkillsetTags" exact="[tag.regular, tag.regular]"/>
                    </do_if>
                    <do_else>
                      <set_value name="this.$SkillsetTags" exact="[tag.regular, tag.veteran]"/>
                    </do_else>
                    <do_all exact="this.$RemainingAmount" counter="$instance_i">
                      <do_any>
                        <set_value name="this.$Role" exact="entityrole.service" weight="30"/>
                        <set_value name="this.$Role" exact="entityrole.marine" weight="70"/>
                      </do_any>
                      <do_if value="this.$AllSlots.count ge 2" comment="Leave space for one to move around">
                        <set_value name="this.$SlotIdx" min="1" max="this.$AllSlots.count"/>
                        <set_value name="this.$Slot" exact="this.$AllSlots.{this.$SlotIdx}"/>
                        <!-- TODO: @Nick @Owen Review when defence stations are populated with recruitable NPCs. Current tuning will give a disporportionately large number of qualified personnel, but all will be service personnel or marines. -->
                        <set_value name="$rookie" chance="0"/>
                        <do_if value="$rookie?">
                          <get_character_definition reference="$chardef" faction="this.$Owner" tags="[this.$Role.tag, tag.rookie, tag.recruitable]"/>
                          <do_if value="@$chardef">
                            <create_cue_actor cue="this" name="this.$npc" ref="$chardef">
                              <owner exact="this.$Owner"/>
                            </create_cue_actor>
                          </do_if>
                        </do_if>
                        <do_if value="not @this.$npc">
                          <shuffle_list list="this.$SkillsetTags"/>
                          <get_character_definition reference="$chardef" faction="this.$Owner" tags="[this.$Role.tag, this.$SkillsetTags.{1}, tag.recruitable]"/>
                          <do_if value="not $chardef">
                            <get_character_definition reference="$chardef" faction="this.$Owner" tags="[this.$Role.tag, this.$SkillsetTags.{2}, tag.recruitable]"/>
                          </do_if>
                          <do_if value="@$chardef">
                            <create_cue_actor cue="this" name="this.$npc" ref="$chardef">
                              <owner exact="this.$Owner"/>
                            </create_cue_actor>
                          </do_if>
                          <debug_text text="'no character entry found with role %s and tags rookie and recruitable. see characters.xml'.[this.$Role.tag]" filter="error" chance="$rookie? * 100"/>
                        </do_if>
                        <do_if value="not @this.$npc">
                          <get_character_definition reference="$chardef" faction="this.$Owner" tags="tag.recruitable"/>
                          <do_if value="@$chardef">
                            <create_cue_actor cue="this" name="this.$npc" ref="$chardef">
                              <owner exact="this.$Owner"/>
                            </create_cue_actor>
                          </do_if>
                          <debug_text text="'no character entry found with role %s and tags regular and recruitable. see characters.xml'.[this.$Role.tag]" filter="error"/>
                        </do_if>
                        <do_if value="this.$npc">
                          <debug_text text="'%s Creating NPC instance %s of faction %s for defence station and placing in slot %s'.[player.age, this.$npc, this.$Owner, this.$Slot]" chance="@$debugchance"/>
                          <set_entity_traits entity="this.$npc" temporary="true"/>
                          <set_entity_role entity="this.$npc" role="this.$Role"/>
                          <set_entity_role_object entity="this.$npc" object="this.$Object"/>
                          <run_actions ref="CalculateNPCHiringFee">
                            <param name="npc" value="this.$npc"/>
                          </run_actions>
                          <add_actor_to_room actor="this.$npc" slot="this.$Slot"/>
                          <set_value name="this.$RemainingAmount" operation="subtract"/>
                          <remove_value name="this.$AllSlots.{this.$SlotIdx}"/>
                        </do_if>
                        <remove_value name="this.$npc"/>
                        <remove_value name="$rookie"/>
                      </do_if>
                    </do_all>
                  </do_elseif>
                </do_elseif>
                <!--Common actions-->
                <!--Assign airmarshals for ships and station walkablemodule-->
                <find_dockingbay name="this.$DockingBays" object="this.$Object" multiple="true">
                  <match_dock walkable="true" storage="false" free="false"/>
                </find_dockingbay>
                <do_all exact="this.$DockingBays.count" counter="$dock_i">
                  <do_if value="this.$DockingBays.{$dock_i}.assignedship.exists and this.$DockingBays.{$dock_i}.docked.count == 0">
                    <signal_cue_instantly cue="AssignAirMarshal" param="[this.$DockingBays.{$dock_i}, this.$DockingBays.{$dock_i}.assignedship]"/>
                  </do_if>
                </do_all>
                <do_if value="this.$Object.isclass.station and md.GenericMissions.Manager.$ExcludedOfferObjects.indexof.{this.$Object} == 0 and not this.$Object.isplayerowned">
                  <signal_cue_instantly cue="md.NPC_Missions.EvaluateLocationMissions" param="[this.$Object]"/>
                </do_if>
              </do_if>
            </do_if>
          </actions>
        </library>
        <cue name="RemoveNPCs" instantiate="true">
          <conditions>
            <event_cue_signalled/>
          </conditions>
          <!-- event.param.{1} == placement component (ship, station, walkablemodule or room)
               event.param.{2} == kill item traders? (if false, item traders are added to the control room)-->
          <actions>
            <set_value name="this.$Component" exact="event.param.{1}"/>
            <do_if value="this.$Component.isrealclass.[class.ship, class.station]">
              <set_value name="this.$Object" exact="this.$Component"/>
              <debug_text text="'Attempting to remove NPCs on ' + this.$Object.knownname + ' ({' + this.$Object + '}) ' + (if event.param.{2} then ' including item traders' else ' while moving item traders to the control room')" chance="@$debugchance"/>
            </do_if>
            <do_elseif value="this.$Component.isrealclass.[class.walkablemodule, class.room]">
              <set_value name="this.$Object" exact="this.$Component.object"/>
              <debug_text text="'Attempting to remove NPCs on ' + this.$Component.knownname + ' ({' + this.$Component + '}) on '  + this.$Object.knownname + ' ({' + this.$Object + '})' + (if event.param.{2} then ' including item traders' else ' while moving item traders to the control room')" chance="@$debugchance"/>
            </do_elseif>
            <do_else>
              <assert value="event.param.{1}.isrealclass.[class.ship, class.station, class.walkablemodule, class.room]" text="'object ' + this.$Component + ' ' + this.$Component.knownname + ' is neither a ship, station, dockarea or room [Owen]'" break="1"/>
            </do_else>
            <do_if value="@this.$Object.exists">
              <!-- Remove instantiated NPCs -->
              <find_object_component name="this.$NPCs" multiple="true" temporaryentity="true" object="this.$Component"/>
              <do_all exact="this.$NPCs.count" counter="$i">
                <signal_cue_instantly cue="OnRemoveInstantiatedNPC" param="this.$NPCs.{$i}"/>
              </do_all>
              <set_value name="this.$shiptrader" exact="this.$Object.shiptrader"/>
              <do_if value="this.$shiptrader and this.$shiptrader.isclass.npc and this.$shiptrader.hascontext.{this.$Component}">
                <signal_cue_instantly cue="ReturnShiptrader" param="this.$Component"/>
              </do_if>
              <remove_value name="this.$shiptrader"/>
              <do_if value="this.$Object.isclass.station">
                <do_if value="event.param.{2}">
                  <!--Kill item traders-->
                  <signal_cue_instantly cue="KillItemTraders" param="this.$Component"/>
                </do_if>
                <do_else>
                  <!-- Move item traders into control room -->
                  <signal_cue_instantly cue="HideItemTraders" param="this.$Component"/>
                </do_else>
              </do_if>
            </do_if>
          </actions>
        </cue>
        <cue name="OnRemoveInstantiatedNPC" instantiate="true">
          <conditions>
            <event_cue_signalled/>
          </conditions>
          <actions>
            <do_if value="event.param.exists and event.param.istemporary">
              <debug_text text="'%s Destroying NPC instance %s %s'.[player.age, event.param, event.param.knownname]" chance="@$debugchance"/>
              <!-- TODO: Update template in case of changed skills? -->
              <destroy_object object="event.param" explosion="false"/>
            </do_if>
          </actions>
        </cue>
        <cue name="OnNPCLeft" instantiate="true">
          <conditions>
            <event_entity_left group="$TrackedObjects"/>
          </conditions>
          <!--Assumed reason for the delay: so that event.param.object resolves to the new object of the entity-->
          <delay exact="1ms"/>
          <actions>
            <do_if value="event.param.exists and event.param.istemporary and not $TrackedObjects.indexof.{event.param.object}">
              <debug_text text="'%s Destroying NPC instance %s %s'.[player.age, event.param, event.param.knownname]" chance="@$debugchance"/>
              <!-- TODO: Update template in case of changed skills? -->
              <destroy_object object="event.param" explosion="false"/>
            </do_if>
          </actions>
        </cue>
        <cue name="StartTrackingObject" instantiate="true">
          <conditions>
            <event_cue_signalled/>
          </conditions>
          <actions>
            <debug_text text="'%s Start tracking %s%s %s'.[player.age, (if $TrackedObjects.indexof.{event.param.object} then 'docked ' else ''), event.param, event.param.knownname]" chance="@$debugchance"/>
            <add_to_group groupname="$TrackedObjects" object="event.param"/>
            <do_if value="event.param.attention ge attention.nearby">
              <!--Signal the object so listening cues can react to a nearby object being added before it was visible. Covers the case of teleporting.-->
              <signal_objects object="event.param" param="'npc_instantiation__force'"/>
            </do_if>
            <!-- Instantiate NPCs -->
            <include_actions ref="InstantiateNPCs"/>
          </actions>
        </cue>
        <cue name="StopTrackingObject" instantiate="true">
          <conditions>
            <event_cue_signalled/>
          </conditions>
          <actions>
            <debug_text text="'%s Stop tracking %s%s %s'.[player.age, (if $TrackedObjects.indexof.{event.param.object} then 'docked ' else ''), event.param, event.param.knownname]" chance="@$debugchance"/>
            <remove_from_group group="$TrackedObjects" object="event.param"/>
            <!--note: the attention level check on event.param.object is because a docked capship will dispatch the changed_attention event before the station does-->
            <assert value="(not event.param.object or not $TrackedObjects.indexof.{event.param.object} or event.param.object.attention lt attention.visible or event.param.sector != player.sector) and not ($LargeObjects.indexof.{event.param} and event.param.attention ge attention.visible)" text="'Should not stop tracking object %1 %2 [Owen]'.[event.param, event.param.knownname]"/>
            <signal_cue_instantly cue="RemoveNPCs" param="[event.param, true]"/>
          </actions>
        </cue>
        <cue name="TrackedShipBuilt" instantiate="true">
          <conditions>
            <event_cue_signalled/>
          </conditions>
          <actions>
            <debug_text text="'%s Ship %s %s was built. Instantiating NPCs.'.[player.age, event.param, event.param.knownname]" chance="@$debugchance"/>
            <assert value="event.param.isclass.ship and $TrackedObjects.indexof.{event.param}" text="'Object is not tracked or is not a ship'"/>
            <!-- Instantiate NPCs -->
            <include_actions ref="InstantiateNPCs"/>
          </actions>
        </cue>
      </cues>
    </cue>
    <library name="CalculateNPCHiringFee" purpose="run_actions">
      <params>
        <param name="npc"/>
      </params>
      <actions>
        <set_value name="$rolesandposts" exact="[entityrole.service, entityrole.marine, controlpost.aipilot, controlpost.manager]"/>
        <do_for_each name="$roleorpost" in="$rolesandposts">
          <do_if value="not $combinedskill? or ($npc.potentialskill.{$roleorpost} gt $combinedskill)">
            <set_value name="$combinedskill" exact="$npc.potentialskill.{$roleorpost}"/>
          </do_if>
        </do_for_each>
        <run_actions ref="HiringFeeFromCombinedSkill" result="$HiringFee">
          <param name="combinedskill" value="$combinedskill"/>
        </run_actions>
        <set_value name="$npc.$HiringFee" exact="$HiringFee"/>
      </actions>
    </library>
    <library name="HiringFeeFromCombinedSkill" purpose="run_actions">
      <params>
        <param name="combinedskill"/>
      </params>
      <actions>
        <set_value name="$HiringFee" exact="$combinedskill * 225"/>
        <do_if value="$combinedskill gt 20">
          <set_value name="$HiringFee" exact="[$HiringFee, (($combinedskill * 15) * (15 ^ ($combinedskill / 20f)))i].max"/>
        </do_if>
        <set_value name="$HiringFee" min="300" max="700" operation="add"/>
        <!--Round to number ending in 0-->
        <set_value name="$HiringFee" exact="((($HiringFee)i / 10) * 10)Cr"/>
        <return value="$HiringFee"/>
      </actions>
    </library>
    <!--No longer to be signalled-->
    <cue name="ManageInteriorInstance" instantiate="true" version="3">
      <conditions>
        <event_cue_signalled/>
      </conditions>
      <actions>
        <set_value name="$InteriorTable" exact="event.param"/>
        <assert value="false" text="'This library is no longer to be signalled. Only kept for patching reasons. Called with ' + $InteriorTable + ' [Owen]'"/>
      </actions>
      <patch sinceversion="2" state="complete">
        <set_value name="$InteriorTable.$LibraryInstance" exact="ManageInterior_Ref"/>
      </patch>
      <patch sinceversion="3" state="complete">
        <set_value name="$InteriorTable.$Patch_Interior" exact="ManageInterior_Ref.$Interior"/>
        <set_value name="$InteriorTable.$Patch_Corridor" exact="ManageInterior_Ref.$Corridor"/>
        <set_value name="$InteriorTable.$Patch_Room" exact="ManageInterior_Ref.$Room"/>
        <debug_text text="'Passing object values back to calling mission. Interior: ' + $InteriorTable.$Patch_Interior + ' ' + @$InteriorTable.$Patch_Interior.knownname +  ' corridor ' + $InteriorTable.$Patch_Corridor + ' room ' + $InteriorTable.$Patch_Room" filter="savegame"/>
        <cancel_cue cue="this"/>
      </patch>
      <cues>
        <cue name="ManageInterior_Ref" ref="ManageInteriorRoom"/>
      </cues>
    </cue>
    <library name="ManageInteriorRoom" namespace="this" version="2">
      <cues>
        <cue name="ManageInteriorRoom_DelayRemoval">
          <delay exact="1ms"/>
          <actions>
            <debug_text text="'Disused library will no longer have any active or waiting cues and is to be cleaned up.'" filter="savegame"/>
          </actions>
        </cue>
      </cues>
    </library>
    <!--Cue to be signalled when a mission generated interior should be removed at a suitable moment
    event.param = [Interior, $DebugChance]-->
    <cue name="RemoveMissionInterior" instantiate="true" namespace="this">
      <conditions>
        <event_cue_signalled/>
      </conditions>
      <actions>
        <set_value name="$Interior" exact="event.param.{1}"/>
        <set_value name="$DebugChance" exact="@event.param.{2}"/>
        <set_value name="$Object" exact="@$Interior.object"/>
        <do_if value="$Object.exists">
          <debug_text text="'waiting for object ' + $Object + ' ' + $Object.knownname + ' to signal that interiors can be removed so that ' + $Interior + ' ' + $Interior.knownname + ' can be destroyed'" chance="$DebugChance"/>
        </do_if>
        <do_else>
          <cancel_cue cue="this"/>
        </do_else>
      </actions>
      <cues>
        <cue name="RemoveMissionInterior_Despawn">
          <conditions>
            <event_object_interiors_despawning object="$Object"/>
          </conditions>
          <actions>
            <debug_text text="$Object + ' ' + $Object.knownname + ' has signalled that interiors can be removed. Destroying: ' + $Interior + ' ' + $Interior.knownname" chance="$DebugChance"/>
            <destroy_object object="$Interior"/>
            <cancel_cue cue="RemoveMissionInterior"/>
          </actions>
        </cue>
      </cues>
    </cue>
    <!--NPC Placement Request Manager
    Signal this manager with a placement definition, a table defining where a NPC is expected to be by the requesting cue.
    The manager will cull previous requests by that cue (allowing missions to update the NPCs position).
    The definitions will each have a priority, allowing more important missions to dictate where a NPC is. Missions will have to be aware that the NPC may not be where they requested.
    
    Note: Dead NPCs can come back and be reconnected.
    If the NPC is killed, the definitions will not be cleared up, unless the NPC is no longer valid. It is up to the requesters themselves to decide if the death affects future positioning.
    
    You can signal NPC_Placement_Manager with the following:
    - ['add_definition', $NPC, $PlacementTable]   - add or update a placement definition for a NPC
    - ['remove_request', $NPC, $RequesterCue]     - remove the replacement request for $NPC by $RequesterCue
    
    -->
    <!--PlacementTable example:
    postion table = table[
      $slottags/$position,    Position within $location object or room. Either an explicit position or tags to find a slot
      $allowfallback,         If no slot was found within $location with $slottags, use $fallbacktags and look at the object of $location
      $fallbacktags,          Tags to use if $slottags failed to find a slot
      $rotation,              Additional rotation to $position
      $location,              Context in which to place the NPC. Either an object, room or NPC-slot or strings 'disconnect' or 'inert'
                                  - disconnect: Disconnect from the universe. If visible the NPC will move to a location used to hide NPCs e.g. the elevator. Otherwise, it will disconnect instantly
                                  - inert: The placement manager will not attempt to move the NPC, allowing the mission to move them itself.
                                           Useful if a mission is placing them in a control position and must prevent other requests interfering
      $requestercue,          Cue requesting the placement of the NPC. Usually a mission. Following requests with the same cue will erase the previous one.
      $priority               Priority of the request. Any requests for the NPC with a higher priority take higher precedence
      $debugcaller            cue which signalled for the registering of the definition
      $debugchance            debugchance value-->
    <!--TODO @Owen disallow player owned as they could be assigned to objects?-->
    <cue name="NPC_Placement_Manager" namespace="this">
      <actions>
        <!--NPC is the key of this table-->
        <set_value name="$RequestTable" exact="table[]"/>
        <set_value name="$DebugChance" exact="0"/>
      </actions>
      <cues>
        <cue name="DEBUG_Output_Placement_Requests" instantiate="true" namespace="this">
          <conditions>
            <event_cue_signalled/>
          </conditions>
          <actions>
            <do_for_each name="$EntryNPC" valuename="$PlacementTable" in="NPC_Placement_Manager.$RequestTable">
              <set_value name="$PlacementDefinitions" exact="$PlacementTable.$PlacementDefinitions"/>
              <debug_text text="$EntryNPC + ' ' + $EntryNPC.knownname + ' has ' + $PlacementDefinitions.count + ' placement definitions'"/>
              <do_for_each name="$PlacementDefinition" in="$PlacementDefinitions">
                <do_if value="typeof $PlacementDefinition.$location == datatype.component">
                  <debug_text text="' - Location: ' + $PlacementDefinition.$location + ' ' + $PlacementDefinition.$location.knownname"/>
                </do_if>
                <do_elseif value="typeof $PlacementDefinition.$location == datatype.componentslot">
                  <debug_text text="' - Location slot: ' + $PlacementDefinition.$location + ' on ' + $PlacementDefinition.$location.component.knownname"/>
                </do_elseif>
                <do_else>
                  <debug_text text="' - Location: ' + $PlacementDefinition.$location"/>
                </do_else>
              </do_for_each>
            </do_for_each>
          </actions>
        </cue>
        <!--event.param: ['add_definition', $NPC, $PlacementDefinition]
        Add or update the placement request from $RequesterCue for the $NPC-->
        <cue name="NPC_Placement_Manager_Add_Definition" instantiate="true">
          <conditions>
            <event_cue_signalled cue="NPC_Placement_Manager"/>
            <check_value value="event.param.{1} == 'add_definition' and event.param.{2}.isclass.npc and typeof event.param.{3} == datatype.table"/>
          </conditions>
          <actions>
            <set_value name="this.$NPC" exact="event.param.{2}"/>
            <do_if value="not $RequestTable.{this.$NPC}?">
              <set_value name="$RequestTable.{this.$NPC}" exact="table[]"/>
            </do_if>
            <!--Append placement table to list of definitions. 'Older' entries from the same requester will be removed
            Clone the table to prevent the caller from modifying data. If they wish to do so, send another request.-->
            <do_if value="not $RequestTable.{this.$NPC}.$PlacementDefinitions?">
              <set_value name="$RequestTable.{this.$NPC}.$PlacementDefinitions" exact="[]"/>
            </do_if>
            <append_to_list name="$RequestTable.{this.$NPC}.$PlacementDefinitions" exact="event.param.{3}.clone"/>
            <debug_text text="'Adding placement definition for ' + this.$NPC + ' ' + this.$NPC.knownname + ' definition: ' + $RequestTable.{this.$NPC}.$PlacementDefinitions.last" chance="$DebugChance"/>
            <signal_cue_instantly cue="NPC_Placement_Manager" param="['cull_invalid_definitions', this.$NPC]"/>
            <do_if value="@$RequestTable.{this.$NPC}.$PlacementDefinitions.count">
              <!--Has valid definitions. Make sure they have a handler running.-->
              <do_if value="@$RequestTable.{this.$NPC}.$Handler.exists">
                <do_if value="@event.param.{3}.$debugchance">
                  <set_value name="$RequestTable.{this.$NPC}.$Handler.$DebugChance" exact="event.param.{3}.$debugchance"/>
                </do_if>
              </do_if>
              <do_else>
                <signal_cue_instantly cue="md.NPC_Instantiation.PlaceNPC" param="table[$npc = this.$NPC, $debugchance = @event.param.{3}.$debugchance]"/>
              </do_else>
              <signal_objects object="this.$NPC" param="'placement_definitions_updated'"/>
            </do_if>
            <do_else>
              <do_if value="@$RequestTable.{this.$NPC}.$Handler.exists">
                <debug_text text="'Cancelling NPC placement handler ' + $RequestTable.{this.$NPC}.$Handler" chance="$DebugChance"/>
                <!--TODO @Owen is it better to signal the handler to clean itself up?-->
                <cancel_cue cue="$RequestTable.{this.$NPC}.$Handler"/>
                <set_value name="$RequestTable.{this.$NPC}.$Handler" exact="null"/>
              </do_if>
            </do_else>
            <!--Perform a bit of cleanup which isn't time sensitive-->
            <include_actions ref="NPC_Placement_Manager_Cull_Dead_Entries"/>
          </actions>
        </cue>
        <!--event.param: ['remove_request', $NPC, $RequesterCue]
        Removes the placement request from $RequesterCue from $NPC's definitions-->
        <cue name="NPC_Placement_Manager_Remove_Request" instantiate="true">
          <conditions>
            <event_cue_signalled cue="NPC_Placement_Manager"/>
            <check_value value="event.param.{1} == 'remove_request' and event.param.{2}.isclass.npc and typeof event.param.{3} == datatype.cue"/>
          </conditions>
          <actions>
            <set_value name="this.$NPC" exact="event.param.{2}"/>
            <!--remove entry with the matching requestercue-->
            <do_if value="@$RequestTable.{this.$NPC}.$PlacementDefinitions">
              <do_for_each name="$Entry" in="$RequestTable.{this.$NPC}.$PlacementDefinitions" counter="$i" reverse="true">
                <do_if value="$Entry.$requestercue == event.param.{3}">
                  <debug_text text="'Removing position table entry ' + $Entry"/>
                  <remove_value name="$RequestTable.{this.$NPC}.$PlacementDefinitions.{$i}"/>
                </do_if>
              </do_for_each>
            </do_if>
          </actions>
          <delay exact="1ms"/>
          <actions>
            <do_if value="this.$NPC.isclass.npc">
              <signal_objects object="this.$NPC" param="'placement_definitions_updated'"/>
            </do_if>
          </actions>
        </cue>
        <!--event.param: ['remove_all_requests', $NPC]
        Removes all placement request for $NPC, usually if the NPC is no longer valid-->
        <cue name="NPC_Placement_Manager_Remove_All_Requests" instantiate="true">
          <conditions>
            <event_cue_signalled cue="NPC_Placement_Manager"/>
            <check_value value="event.param.{1} == 'remove_all_requests'"/>
          </conditions>
          <actions>
            <set_value name="this.$NPC" exact="event.param.{2}"/>
            <do_if value="this.$NPC.isclass.npc">
              <!--remove NPC entry-->
              <do_if value="$RequestTable.{this.$NPC}?">
                <debug_text text="player.age + ' Removing all placement requests for ' + this.$NPC + ' ' + this.$NPC.knownname" chance="$DebugChance"/>
                <remove_value name="$RequestTable.{this.$NPC}"/>
              </do_if>
            </do_if>
          </actions>
          <delay exact="1ms"/>
          <actions>
            <do_if value="this.$NPC.isclass.npc">
              <signal_objects object="this.$NPC" param="'placement_definitions_updated'"/>
            </do_if>
          </actions>
        </cue>
        <!--event.param: ['handler_instanced', $NPC, $HandlerCue]
        For internal use-->
        <cue name="NPC_Placement_Manager_Handler_Instanced" instantiate="true">
          <conditions>
            <event_cue_signalled cue="NPC_Placement_Manager"/>
            <check_value value="event.param.{1} == 'handler_instanced' and event.param.{2}.isclass.npc and typeof event.param.{3} == datatype.cue"/>
          </conditions>
          <actions>
            <set_value name="this.$NPC" exact="event.param.{2}"/>
            <do_if value="not $RequestTable.{this.$NPC}?">
              <set_value name="$RequestTable.{this.$NPC}" exact="table[]"/>
            </do_if>
            <assert value="not @$RequestTable.{this.$NPC}.$Handler.exists" text="'NPC ' + this.$NPC + ' ' + this.$NPC.knownname + ' already has a placement manager [Owen]'"/>
            <do_if value="not @$RequestTable.{this.$NPC}.$Handler.exists">
              <set_value name="$RequestTable.{this.$NPC}.$Handler" exact="event.param.{3}"/>
            </do_if>
          </actions>
        </cue>
        <!--event.param: ['handler_removed', $NPC]
        For internal use-->
        <cue name="NPC_Placement_Manager_Handler_Removed" instantiate="true">
          <conditions>
            <event_cue_signalled cue="NPC_Placement_Manager"/>
            <check_value value="event.param.{1} == 'handler_removed' and event.param.{2}.isclass.npc and $RequestTable.{event.param.{2}}?"/>
          </conditions>
          <actions>
            <set_value name="$RequestTable.{event.param.{2}}.$Handler" exact="null"/>
          </actions>
        </cue>
        <!--event.param: ['cull_invalid_definitions', $NPC]
        For internal use-->
        <cue name="NPC_Placement_Manager_Cull_Invalid_Definitions" instantiate="true">
          <conditions>
            <event_cue_signalled cue="NPC_Placement_Manager"/>
            <check_value value="event.param.{1} == 'cull_invalid_definitions' and event.param.{2}.isclass.npc"/>
          </conditions>
          <actions>
            <set_value name="this.$NPC" exact="event.param.{2}"/>
            <do_if value="@$RequestTable.{this.$NPC}.$PlacementDefinitions">
              <set_value name="$cid_RequesterCues" exact="[]"/>
              <do_for_each name="$cid_Entry" in="$RequestTable.{this.$NPC}.$PlacementDefinitions" counter="$cui_i" reverse="true">
                <set_value name="$cui_invalidentry" exact="true"/>
                <do_if value="$cid_Entry.$location">
                  <do_if value="$cid_Entry.$location == 'disconnect' or $cid_Entry.$location == 'inert'">
                    <set_value name="$cui_invalidentry" exact="false"/>
                  </do_if>
                  <do_elseif value="typeof $cid_Entry.$location == datatype.componentslot">
                    <do_if value="$cid_Entry.$location.component.exists">
                      <set_value name="$cui_invalidentry" exact="false"/>
                    </do_if>
                  </do_elseif>
                  <do_else>
                    <do_if value="@$cid_Entry.$location.exists">
                      <do_if value="@$cid_Entry.$slottags.count or @$cid_Entry.$position">
                        <set_value name="$cui_invalidentry" exact="false"/>
                      </do_if>
                      <do_else>
                        <assert value="@$cid_Entry.$slottags or @$cid_Entry.$position" text="'No position or slottags defined for placement entry ' + $cid_Entry + ' for NPC ' + this.$NPC + ' ' + this.$NPC.knownname + ' - Removing entry [Owen]'"/>
                      </do_else>
                    </do_if>
                    <do_else>
                      <assert value="$cid_Entry.$location.exists" text="'Placment location ' + $cid_Entry.$location + ' ' + @$cid_Entry.$location.knownname + ' for NPC ' + this.$NPC + ' ' + this.$NPC.knownname + ' does not exist - Removing entry [Owen]'"/>
                    </do_else>
                  </do_else>
                </do_if>
                <do_if value="not $cui_invalidentry">
                  <do_if value="not $cid_Entry.$requestercue.exists">
                    <assert value="$cid_Entry.$requestercue.exists" text="'Requester cue for placement entry ' + $cid_Entry + ' for NPC ' + this.$NPC + ' ' + this.$NPC.knownname + ' does not exist - Removing entry [Owen]'"/>
                    <set_value name="$cui_invalidentry" exact="true"/>
                  </do_if>
                  <do_elseif value="$cid_RequesterCues.indexof.{$cid_Entry.$requestercue}">
                    <debug_text text="'Requester cue ' + [$cid_Entry.$requestercue] + ' is already used for another, newer placement entry. Removing this entry: ' + $cid_Entry" chance="$DebugChance"/>
                    <set_value name="$cui_invalidentry" exact="true"/>
                  </do_elseif>
                </do_if>
                <do_if value="$cui_invalidentry">
                  <remove_value name="$RequestTable.{this.$NPC}.$PlacementDefinitions.{$cui_i}"/>
                </do_if>
                <do_else>
                  <append_to_list name="$cid_RequesterCues" exact="$cid_Entry.$requestercue"/>
                </do_else>
              </do_for_each>
              <remove_value name="$cui_invalidentry"/>
              <remove_value name="$cid_RequesterCues"/>
            </do_if>
          </actions>
        </cue>
        <library name="NPC_Placement_Manager_Cull_Dead_Entries">
          <actions>
            <do_for_each name="$EntryNPC" in="$RequestTable" reverse="true">
              <do_if value="not $EntryNPC.isclass.npc">
                <debug_text text="'Removing dead placement entry ' + $RequestTable.{$EntryNPC}" chance="$DebugChance"/>
                <remove_value name="$RequestTable.{$EntryNPC}"/>
              </do_if>
            </do_for_each>
          </actions>
        </library>
      </cues>
    </cue>
    <!--This instance will look at the highest priority placement entry for the NPC and attempt to place them there-->
    <!--event.param = table[
      $npc = NPC to be managed,
      $debugchance
    ]-->
    <cue name="PlaceNPC" instantiate="true" namespace="this">
      <conditions>
        <event_cue_signalled/>
      </conditions>
      <actions>
        <create_group groupname="$LocationObjects"/>
        <set_value name="$Params" exact="event.param"/>
        <set_value name="$NPC" exact="$Params.$npc"/>
        <set_value name="$DebugChance" exact="if $Params.$debugchance? then $Params.$debugchance else 0"/>
        <set_value name="$FeedbackValue" exact="null"/>
        <do_if value="not $NPC.isclass.npc">
          <debug_text text="'Provided NPC ' + $NPC + ' is not a valid NPC'" filter="error"/>
          <set_value name="$FeedbackValue" exact="'INVALID_NPC'"/>
        </do_if>
        <do_else>
          <signal_cue_instantly cue="NPC_Placement_Manager" param="['handler_instanced', $NPC, this]"/>
        </do_else>
      </actions>
      <cues>
        <cue name="PlaceNPC_Init">
          <actions>
            <do_if value="$FeedbackValue">
              <signal_cue cue="PlaceNPC_Cleanup"/>
            </do_if>
            <do_else>
              <!--Check where the NPC currently is-->
              <include_actions ref="PlaceNPC_UpdateLocationObjects"/>
              <include_actions ref="PlaceNPC_CheckNPC"/>
            </do_else>
          </actions>
        </cue>
        <library name="PlaceNPC_UpdateLocationObjects">
          <actions>
            <signal_cue_instantly cue="NPC_Placement_Manager" param="['cull_invalid_definitions', $NPC]"/>
            <clear_group group="$LocationObjects"/>
            <do_if value="@NPC_Placement_Manager.$RequestTable.{$NPC}.$PlacementDefinitions">
              <do_for_each name="$ulo_Entry" in="NPC_Placement_Manager.$RequestTable.{$NPC}.$PlacementDefinitions">
                <do_if value="typeof $ulo_Entry.$location == datatype.component and $ulo_Entry.$location.exists">
                  <do_if value="$ulo_Entry.$location.isclass.object">
                    <add_to_group groupname="$LocationObjects" object="$ulo_Entry.$location"/>
                  </do_if>
                  <do_elseif value="$ulo_Entry.$location.object">
                    <add_to_group groupname="$LocationObjects" object="$ulo_Entry.$location.object"/>
                  </do_elseif>
                </do_if>
                <do_elseif value="typeof $ulo_Entry.$location == datatype.componentslot and $ulo_Entry.$location.component.exists">
                  <do_if value="$ulo_Entry.$location.component.isclass.object">
                    <add_to_group groupname="$LocationObjects" object="$ulo_Entry.$location.component"/>
                  </do_if>
                  <do_elseif value="$ulo_Entry.$location.component.object">
                    <add_to_group groupname="$LocationObjects" object="$ulo_Entry.$location.component.object"/>
                  </do_elseif>
                </do_elseif>
              </do_for_each>
            </do_if>
            <do_else>
              <debug_text text="'No placement table entries for ' + $NPC + ' ' + $NPC.knownname + ' - despawn if in low attention'" chance="$DebugChance"/>
            </do_else>
          </actions>
        </library>
        <library name="PlaceNPC_CheckNPC">
          <actions>
            <!--TODO @Owen add $NPC.$StateMachine.$StayRequesters so reinitialising the state machine doesn't break any placement requests-->
            <signal_cue_instantly cue="NPC_Placement_Manager" param="['cull_invalid_definitions', $NPC]"/>
            <do_if value="@NPC_Placement_Manager.$RequestTable.{$NPC}.$PlacementDefinitions.count">
              <set_value name="$BestEntry" exact="NPC_Placement_Manager.$RequestTable.{$NPC}.$PlacementDefinitions.{1}"/>
              <set_value name="$BestPriority" exact="$BestEntry.$priority"/>
              <do_for_each name="$cNPC_Entry" in="NPC_Placement_Manager.$RequestTable.{$NPC}.$PlacementDefinitions">
                <do_if value="$cNPC_Entry.$location != 'disconnect' and $cNPC_Entry.$location != 'inert'">
                  <do_if value="typeof $cNPC_Entry.$location == datatype.componentslot">
                    <assert value="$cNPC_Entry.$location.component.exists" text="'Placment entry for location ' + $cNPC_Entry.$location + ' for NPC ' + $NPC + ' ' + $NPC.knownname + ' no longer is valid [Owen]'"/>
                  </do_if>
                  <do_else>
                    <assert value="$cNPC_Entry.$location.exists" text="'Placment location ' + $cNPC_Entry.$location + ' name: ' + @$cNPC_Entry.$location.knownname + ' for NPC ' + $NPC + ' ' + $NPC.knownname + ' does not exist [Owen]'"/>
                    <assert value="@$cNPC_Entry.$slottags or @$cNPC_Entry.$position" text="'Placment entry for location ' + $cNPC_Entry.$location + ' ' + @$BestEntry.$location.knownname + ' for NPC ' + $NPC + ' ' + $NPC.knownname + ' does not have slot tags or a position defined [Owen]'"/>
                  </do_else>
                </do_if>
                <do_if value="$cNPC_Entry.$priority gt $BestPriority">
                  <set_value name="$BestEntry" exact="$cNPC_Entry"/>
                  <set_value name="$BestPriority" exact="$BestEntry.$priority"/>
                </do_if>
              </do_for_each>
              <debug_text text="'Best placement entry is ' + $BestEntry" chance="$DebugChance"/>
              <!--Check if the current position is correct for this entry-->
              <set_value name="$ValidLocationEntry" exact="false"/>
              <set_value name="$ValidPosition" exact="false"/>
              <do_if value="$BestEntry.$location == 'disconnect'">
                <set_value name="$ValidLocationEntry" exact="true"/>
                <do_if value="not $NPC.exists">
                  <!--TODO @Owen check if NPC is already walking to despawn?-->
                  <set_value name="$ValidPosition" exact="true"/>
                </do_if>
              </do_if>
              <do_elseif value="$BestEntry.$location == 'inert'">
                <set_value name="$ValidLocationEntry" exact="true"/>
                <set_value name="$ValidPosition" exact="true"/>
              </do_elseif>
              <do_elseif value="typeof $BestEntry.$location == datatype.componentslot and $BestEntry.$location.component.exists">
                <set_value name="$ValidLocationEntry" exact="true"/>
                <do_if value="$NPC.roomslot == $BestEntry.$location">
                  <set_value name="$ValidPosition" exact="true"/>
                </do_if>
              </do_elseif>
              <do_elseif value="typeof $BestEntry.$location == datatype.component and $BestEntry.$location.exists">
                <set_value name="$ValidLocationEntry" exact="true"/>
                <do_if value="$NPC.hascontext.{$BestEntry.$location}">
                  <debug_text text="$NPC + ' ' + $NPC.knownname + ' has context of ' + $BestEntry.$location.knownname" chance="$DebugChance"/>
                  <do_if value="@$BestEntry.$slottags">
                    <set_value name="$NPCSlotTags" exact="@$NPC.roomslot.tags"/>
                    <debug_text text="'current room slot ' + $NPC.roomslot + ' has tags ' + $NPCSlotTags" chance="$DebugChance"/>
                    <do_if value="$NPCSlotTags">
                      <do_all exact="$BestEntry.$slottags.count" counter="$cNPC_i">
                        <do_if value="$NPCSlotTags.indexof.{$BestEntry.$slottags.{$cNPC_i}}">
                          <debug_text text="'Slot has tag ' + $BestEntry.$slottags.{$cNPC_i}" chance="$DebugChance"/>
                          <do_if value="$cNPC_i == $BestEntry.$slottags.count">
                            <set_value name="$ValidPosition" exact="true"/>
                            <debug_text text="'Current roomslot ' + $NPC.roomslot + ' matched all tags'" chance="$DebugChance"/>
                          </do_if>
                        </do_if>
                        <do_else>
                          <debug_text text="'Current roomslot ' + $NPC.roomslot + ' did not match all tags'" chance="$DebugChance"/>
                          <break/>
                        </do_else>
                      </do_all>
                    </do_if>
                  </do_if>
                  <do_elseif value="$BestEntry.$position">
                    <do_if value="@$FallbackFloorPlacement">
                      <!--If $FallbackFloorPlacement was set, treat the current placement as invalid and try again-->
                      <remove_value name="$FallbackFloorPlacement"/>
                    </do_if>
                    <do_else>
                      <!--TODO @Owen - check if the NPC is walking towards the position-->
                      <check_object result="$CheckResult" object="$NPC">
                        <match_distance object="$BestEntry.$location" value="$BestEntry.$position" max="1.5m"/>
                      </check_object>
                      <do_if value="$CheckResult">
                        <do_if value="not @$BestEntry.$rotation">
                          <set_value name="$ValidPosition" exact="true"/>
                        </do_if>
                        <!--TODO @Owen better way of checking if rotation is close enough-->
                        <do_else>
                          <do_if value="$NPC.rotation.yaw" min="$BestEntry.$rotation.yaw - 0.1deg" max="$BestEntry.$rotation.yaw + 0.1deg">
                            <set_value name="$ValidPosition" exact="true"/>
                          </do_if>
                          <do_else>
                            <debug_text text="'NPC ' + $NPC + ' ' + $NPC.knownname + ' does not match the defined rotation:' + $BestEntry.$rotation + ' vs ' + $NPC.rotation" chance="$DebugChance"/>
                          </do_else>
                        </do_else>
                      </do_if>
                      <do_else>
                        <debug_text text="'NPC ' + $NPC + ' ' + $NPC.knownname + ' is not close to the defined position:' + $BestEntry.$position" chance="$DebugChance"/>
                      </do_else>
                    </do_else>
                  </do_elseif>
                </do_if>
              </do_elseif>
              <do_else>
                <debug_text text="'NPC ' + $NPC + ' has invalid or incomplete NPC position table ' + $BestEntry" filter="error"/>
              </do_else>
              <do_if value="$ValidLocationEntry and not $ValidPosition">
                <do_if value="$BestEntry.$location == 'disconnect'">
                  <do_if value="@event.object == $NPC and @event.name == 'event_object_changed_attention'">
                    <do_if value="event.param lt attention.nearby and event.param2 ge attention.nearby">
                      <debug_text text="'Actor ' + $NPC + ' ' + $NPC.knownname + ' should be disconnected and is now switching to low attention so this can be immediate.'" chance="$DebugChance"/>
                      <remove_actor_from_room actor="$NPC"/>
                    </do_if>
                    <do_else>
                      <signal_objects object="$NPC" param="'npc_despawn'" param2="table[$disconnect = true]"/>
                    </do_else>
                  </do_if>
                  <do_else>
                    <signal_objects object="$NPC" param="'npc_despawn'" param2="table[$disconnect = true]"/>
                  </do_else>
                </do_if>
                <do_elseif value="$BestEntry.$location == 'inert'">
                  <debug_text text="'Actor ' + $NPC + ' ' + $NPC.knownname + ' is to be left in place due to an inert request.'" chance="$DebugChance"/>
                </do_elseif>
                <do_elseif value="typeof $BestEntry.$location == datatype.componentslot or @$BestEntry.$slottags">
                  <do_if value="typeof $BestEntry.$location == datatype.componentslot">
                    <set_value name="$Slot" exact="$BestEntry.$location"/>
                  </do_if>
                  <do_else>
                    <do_if value="($NPC.race == race.paranid) and ($BestEntry.$slottags == [tag.npc_generic])">
                      <find_npc_slot name="$Slot" object="$BestEntry.$location" tags="[tag.npc_generic, tag.stand]"/>
                    </do_if>
                    <do_else>
                      <find_npc_slot name="$Slot" object="$BestEntry.$location" tags="$BestEntry.$slottags"/>
                    </do_else>
                    <do_if value="not $Slot">
                      <debug_text text="'Unable to find slot on ' + $BestEntry.$location + ' ' + $BestEntry.$location.knownname + ' with tags ' + $BestEntry.$slottags" chance="$DebugChance"/>
                      <do_if value="@$BestEntry.$allowfallback">
                        <set_value name="$LocationContainer" exact="if $BestEntry.$location.isclass.object then null else $BestEntry.$location.container"/>
                        <do_if value="@$BestEntry.$fallbacktags and $BestEntry.$fallbacktags.count">
                          <!--Attempt to find slot with the fallback slot tags-->
                          <find_npc_slot name="$Slot" object="$BestEntry.$location" tags="$BestEntry.$fallbacktags"/>
                        </do_if>
                        <do_if value="not $Slot and $LocationContainer">
                          <!--Attempt to find slot on object container with the $BestEntry.$slottags-->
                          <find_npc_slot name="$Slot" object="$LocationContainer" tags="$BestEntry.$slottags"/>
                          <do_if value="not $Slot and $BestEntry.$fallbacktags">
                            <!--Attempt to find slot on object container with the fallback slot tags-->
                            <find_npc_slot name="$Slot" object="$LocationContainer" tags="$BestEntry.$fallbacktags"/>
                          </do_if>
                        </do_if>
                        <debug_text text="'Result of attempting to find slot with fallback: ' + $Slot" chance="$DebugChance"/>
                      </do_if>
                    </do_if>
                  </do_else>
                  <do_if value="$Slot">
                    <do_if value="$NPC.exists">
                      <!--TODO @Owen what if the destination is in high attention-->
                      <do_if value="$NPC.attention lt attention.visible">
                        <debug_text text="'Connecting low attention NPC ' + $NPC + ' ' + $NPC.knownname + ' to slot ' + $Slot" chance="$DebugChance"/>
                        <add_actor_to_room actor="$NPC" slot="$Slot"/>
                        <set_entity_traits entity="$NPC" hidden="false"/>
                        <debug_text text="'Roomslot is now ' + $NPC.roomslot" chance="$DebugChance"/>
                      </do_if>
                      <do_elseif value="$Slot.hastag.npc">
                        <!--Is an NPC slot. Check NPC reservation-->
                        <do_if value="$NPC.roomslot != $Slot">
                          <debug_text text="'Attempting to move NPC ' + $NPC + ' ' + $NPC.knownname + ' to NPC slot ' + $Slot" chance="$DebugChance"/>
                          <signal_objects object="$NPC" param="'npc_move_to'" param2="table[$slot = $Slot]"/>
                        </do_if>
                        <do_else>
                          <debug_text text="'NPC ' + $NPC + ' ' + $NPC.knownname + ' was already at NPC slot ' + $Slot" chance="$DebugChance"/>
                        </do_else>
                      </do_elseif>
                      <do_else>
                        <!--Is an NPC waypoint slot. Check distance-->
                        <do_if value="not $NPC.hascontext.{$Slot.component} or $NPC.distanceto.{$Slot} gt 1m">
                          <!--TODO @Owen also check hidden flags?-->
                          <debug_text text="'Attempting to move NPC ' + $NPC + ' ' + $NPC.knownname + ' to NPC waypoint slot ' + $Slot" chance="$DebugChance"/>
                          <set_value name="$NPC.$StateMachine.$DebugChance" exact="100" chance="$DebugChance"/>
                          <signal_objects object="$NPC" param="'npc_move_to'" param2="table[$slot = $Slot]"/>
                        </do_if>
                        <do_else>
                          <debug_text text="'NPC ' + $NPC + ' ' + $NPC.knownname + ' was already at NPC waypoint slot ' + $Slot" chance="$DebugChance"/>
                        </do_else>
                      </do_else>
                    </do_if>
                    <do_else>
                      <debug_text text="'Connecting disconnected NPC ' + $NPC + ' ' + $NPC.knownname + ' to slot ' + $Slot" chance="$DebugChance"/>
                      <add_actor_to_room actor="$NPC" slot="$Slot"/>
                      <set_entity_traits entity="$NPC" hidden="false"/>
                      <debug_text text="'Roomslot is now ' + $NPC.roomslot" chance="$DebugChance"/>
                    </do_else>
                  </do_if>
                  <do_else>
                    <debug_text text="player.age + ' - Unable to place NPC at this time'" chance="$DebugChance"/>
                  </do_else>
                  <remove_value name="$Slot"/>
                </do_elseif>
                <do_elseif value="@$BestEntry.$position">
                  <debug_text text=" 'distance to player ' + player.entity.distanceto.{$BestEntry.$location}" chance="$DebugChance"/>
                  <get_floor_position object="$BestEntry.$location">
                    <position value="$BestEntry.$position" object="$BestEntry.$location"/>
                    <result position="$FloorPos" context="$FloorContext" room="$PlacementRoom" tags="$FloorTags"/>
                  </get_floor_position>
                  <debug_text text="'attempting to place at ' + $BestEntry.$position + ' of ' + $BestEntry.$location + ' ' + $BestEntry.$location.knownname + ' - result pos: ' + $FloorPos +                                '\nFloorContext: ' + $FloorContext + ' ' + @$FloorContext.knownname +                                '\nPlacementRoom: ' + $PlacementRoom + ' ' + @$PlacementRoom.knownname" chance="$DebugChance"/>
                  <!--HACK @Owen-->
                  <do_if value="player.sector != $BestEntry.$location.sector">
                    <debug_text text="'get_floor_position result is unreliable when not actually nearby, such as when there is a cutscene in the room. Ignore the result.'" chance="$DebugChance"/>
                    <set_value name="$FloorContext" exact="null"/>
                    <set_value name="$PlacementRoom" exact="null"/>
                    <set_value name="$FloorPos" exact="null"/>
                    <set_value name="$FloorTags" exact="null"/>
                  </do_if>
                  <!--END HACK-->
                  <do_if value="$FloorContext and $PlacementRoom">
                    <do_if value="$NPC.exists">
                      <!--Check if the NPC is currently visible. If so have them move-->
                      <do_if value="$NPC.attention lt attention.visible or $NPC.room and $NPC.room == @$NPC.station.controlroom" comment="$NPC.station.controlroom is a hack to treat NPCs in station control rooms as invisible">
                        <debug_text text="'Connecting low attention NPC ' + $NPC + ' ' + $NPC.knownname + ' to room ' + $PlacementRoom + ' ' + $PlacementRoom.knownname" chance="$DebugChance"/>
                        <debug_text text="$BestEntry.$rotation"/>
                        <set_entity_traits entity="$NPC" hidden="false"/>
                        <do_if value="@$BestEntry.$rotation">
                          <add_actor_to_room actor="$NPC" object="$PlacementRoom">
                            <position value="$FloorPos" object="$FloorContext" space="$PlacementRoom"/>
                            <rotation value="$BestEntry.$rotation"/>
                          </add_actor_to_room>
                        </do_if>
                        <do_else>
                          <add_actor_to_room actor="$NPC" object="$PlacementRoom">
                            <position value="$FloorPos" object="$FloorContext" space="$PlacementRoom"/>
                          </add_actor_to_room>
                        </do_else>
                      </do_if>
                      <do_else>
                        <debug_text text="'Attempting to move NPC ' + $NPC + ' ' + $NPC.knownname + ' to room ' + $PlacementRoom + ' ' + $PlacementRoom.knownname" chance="$DebugChance"/>
                        <set_value name="$MovementTable" exact="table[$context = $FloorContext, $offset = $FloorPos, $rotation = @$BestEntry.$rotation, $room = $PlacementRoom, $destinationtags = $FloorTags]"/>
                        <!--If reacting to an attention change, the state machine may not yet be ready.-->
                        <do_if value="$NPC.$StateMachine?">
                          <set_value name="$NPC.$StateMachine.$DebugChance" exact="100" chance="$DebugChance"/>
                          <signal_objects object="$NPC" param="'npc_move_to'" param2="$MovementTable.clone"/>
                        </do_if>
                        <do_else>
                          <signal_objects object="$NPC" param="'npc_move_to'" param2="$MovementTable.clone" delay="1ms"/>
                        </do_else>
                      </do_else>
                    </do_if>
                    <do_else>
                      <debug_text text="'Connecting disconnected NPC ' + $NPC + ' ' + $NPC.knownname + ' to room ' + $PlacementRoom + ' ' + $PlacementRoom.knownname" chance="$DebugChance"/>
                      <do_if value="@$BestEntry.$rotation">
                        <add_actor_to_room actor="$NPC" object="$PlacementRoom">
                          <position value="$FloorPos" object="$FloorContext" space="$PlacementRoom"/>
                          <rotation value="$BestEntry.$rotation"/>
                        </add_actor_to_room>
                      </do_if>
                      <do_else>
                        <add_actor_to_room actor="$NPC" object="$PlacementRoom">
                          <position value="$FloorPos" object="$FloorContext" space="$PlacementRoom"/>
                        </add_actor_to_room>
                      </do_else>
                      <set_entity_traits entity="$NPC" hidden="false"/>
                    </do_else>
                  </do_if>
                  <do_else>
                    <do_if value="$BestEntry.$location.isclass.[class.room, class.controllable]">
                      <debug_text text="'No floor position found in ' + $BestEntry.$location + ' ' + $BestEntry.$location.knownname + ' for ' + $NPC + ' ' + $NPC.knownname + ' - Placing at unchecked position.'" chance="$DebugChance"/>
                      <set_entity_traits entity="$NPC" hidden="false"/>
                      <do_if value="@$BestEntry.$rotation">
                        <add_actor_to_room actor="$NPC" object="$BestEntry.$location">
                          <position value="$BestEntry.$position"/>
                          <rotation value="$BestEntry.$rotation"/>
                        </add_actor_to_room>
                      </do_if>
                      <do_else>
                        <add_actor_to_room actor="$NPC" object="$BestEntry.$location">
                          <position value="$BestEntry.$position"/>
                        </add_actor_to_room>
                      </do_else>
                    </do_if>
                    <do_elseif value="$BestEntry.$location.controllable">
                      <debug_text text="'No floor position found in ' + $BestEntry.$location + ' ' + $BestEntry.$location.knownname + ' for ' + $NPC + ' ' + $NPC.knownname + ' - Placing at unchecked position.'" chance="$DebugChance"/>
                      <add_actor_to_room actor="$NPC" object="$BestEntry.$location.controllable"/>
                    </do_elseif>
                    <do_if value="$NPC.hascontext.{$BestEntry.$location}">
                      <set_value name="$FallbackFloorPlacement" exact="true"/>
                    </do_if>
                    <do_else>
                      <assert value="$NPC.hascontext.{$BestEntry.$location} or @$NPC.hascontext.{$BestEntry.$location.controllable}" text="'Unable to place NPC ' + $NPC + ' ' + $NPC.knownname + ' at a fallback floor position in ' + $BestEntry.$location + ' [Owen]'"/>
                    </do_else>
                  </do_else>
                </do_elseif>
              </do_if>
            </do_if>
            <do_else>
              <debug_text text="'No placement table entries for ' + $NPC + ' ' + $NPC.knownname + ' - Leaving it where it is'" chance="$DebugChance"/>
            </do_else>
          </actions>
        </library>
        <cue name="PlaceNPC_NPC_Killed">
          <conditions>
            <event_object_destroyed object="$NPC"/>
          </conditions>
          <actions>
            <debug_text text="player.age + ' NPC ' + $NPC + ' ' + $NPC.knownname + ' killed'" chance="$DebugChance"/>
            <set_value name="$FeedbackValue" exact="'NPC_KILLED'"/>
            <signal_cue_instantly cue="NPC_Placement_Manager" param="['remove_all_requests', $NPC]"/>
            <cancel_cue cue="PlaceNPC_CheckForPlacement"/>
            <signal_cue_instantly cue="PlaceNPC_Cleanup"/>
          </actions>
        </cue>
        <cue name="PlaceNPC_NPC_Lost" checkinterval="1s">
          <conditions>
            <check_value value="not $NPC.isclass.npc"/>
          </conditions>
          <actions>
            <debug_text text="player.age + ' NPC was lost without being killed. Can happen if it was disconnected and the cue referencing it was cancelled or reset'" chance="$DebugChance"/>
            <set_value name="$FeedbackValue" exact="'NPC_LOST'"/>
            <signal_cue_instantly cue="NPC_Placement_Manager" param="['remove_all_requests', $NPC]"/>
            <cancel_cue cue="PlaceNPC_CheckForPlacement"/>
            <signal_cue cue="PlaceNPC_Cleanup"/>
          </actions>
        </cue>
        <!--TODO @Owen check at the end of a conversation as they could have rotated?-->
        <!--TODO @Owen #important Placing NPCs on S/M cockpit floors will fail the raycast having them remain at a fallback position.
        Either have an event that fires when physics are ready or schedule another update attempt in the future (bit hacky)-->
        <cue name="PlaceNPC_CheckForPlacement" instantiate="true">
          <conditions>
            <check_any>
              <check_all>
                <event_object_changed_attention group="$LocationObjects"/>
                <check_value value="event.param ge attention.nearby"/>
              </check_all>
              <event_npc_slots_validated group="$LocationObjects" recalculation="false"/>
              <check_all>
                <event_object_signalled object="$NPC"/>
                <check_value value="event.param == 'placement_definitions_updated'"/>
              </check_all>
              <check_all>
                <event_object_changed_attention object="$NPC"/>
                <check_value value="event.param lt attention.nearby and event.param2 ge attention.nearby"/>
              </check_all>
            </check_any>
          </conditions>
          <actions>
            <debug_text text="player.age + ' ' + event.object + ' ' + event.name + ' ' + @event.param + ' ' + @event.param2" chance="$DebugChance"/>
            <do_if value="event.name == 'event_object_signalled'">
              <!--Update all location objects-->
              <include_actions ref="PlaceNPC_UpdateLocationObjects"/>
            </do_if>
            <include_actions ref="PlaceNPC_CheckNPC"/>
          </actions>
        </cue>
        <!--Despawning interiors are essentially killed, but only due to attention change. Do not have the NPCs be 'killed' because of it.-->
        <cue name="PlaceNPC_InteriorDespawning" instantiate="true">
          <conditions>
            <check_any>
              <check_all>
                <event_object_interiors_despawning group="$LocationObjects"/>
                <check_value value="$NPC.object == event.object and @$NPC.room.dynamicinterior and not $NPC.room.dynamicinterior.ispersistent"/>
              </check_all>
              <event_object_props_despawning object="$NPC"/>
            </check_any>
          </conditions>
          <actions>
            <debug_text text="player.age + ' ' + event.object + ' ' + event.name + ' ' + @event.param2 + ' Disconnecting the NPC so they are not be killed along with the interior. If they should, then their mission should also respond to this event.'" chance="$DebugChance"/>
            <remove_actor_from_room actor="$NPC"/>
          </actions>
          <delay exact="1ms"/>
          <actions>
            <include_actions ref="PlaceNPC_UpdateLocationObjects"/>
            <include_actions ref="PlaceNPC_CheckNPC"/>
          </actions>
        </cue>
        <cue name="PlaceNPC_Cleanup">
          <conditions>
            <event_cue_signalled/>
          </conditions>
          <actions>
            <debug_text text="'Ended with reason: %s for NPC %s `%s`'.[$FeedbackValue, $NPC, $NPC.name]" chance="$DebugChance"/>
            <signal_cue_instantly cue="NPC_Placement_Manager" param="['handler_removed', $NPC]"/>
            <cancel_cue cue="PlaceNPC"/>
          </actions>
        </cue>
      </cues>
    </cue>
  </cues>
</mdscript>
