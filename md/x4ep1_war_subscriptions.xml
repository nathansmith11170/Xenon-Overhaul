<?xml version='1.0' encoding='utf-8'?>
<mdscript xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" name="X4Ep1_War_Subscriptions" xsi:noNamespaceSchemaLocation="md.xsd">
  <cues>
    <!--If a matching war subscription exists, the result will be the current $SubscriptionStatus, otherwise null
    Status results:
    null = there is no matching war subscription
    'unsubscribed' = player is not subscribed to the war subscription yet
    'probation' = player is assigned to complete the probation mission
    'subscribed' = player is subscribed to the war subscription
    'cooldown' = player is temporarily locked out of the war subscription, potentially due to previous failure-->
    <library name="Query_War_Subscription_Status" purpose="run_actions">
      <params>
        <param name="HostFaction"/>
        <param name="EnemyFaction"/>
      </params>
      <actions>
        <do_for_each valuename="$WarCue" in="Start.$MissionGroupCues">
          <do_if value="$WarCue.$Faction == $HostFaction and $WarCue.$EnemyFaction == $EnemyFaction">
            <return value="$WarCue.$SubscriptionStatus"/>
          </do_if>
        </do_for_each>
        <return value="null"/>
      </actions>
    </library>
    <library name="Get_Active_War_Subscriptions" purpose="run_actions">
      <params>
        <param name="HostFactions" default="null"/>
        <param name="EnemyFactions" default="null"/>
      </params>
      <actions>
        <set_value name="$ActiveSubscriptions" exact="[]"/>
        <do_for_each valuename="$WarCue" in="Start.$MissionGroupCues">
          <do_if value="$WarCue.$SubscriptionStatus == 'subscribed'">
            <do_if value="(not $HostFactions or $HostFactions.indexof.{$WarCue.$Faction}) and (not $EnemyFactions or $EnemyFactions.indexof.{$WarCue.$EnemyFaction})">
              <append_to_list name="$ActiveSubscriptions" exact="$WarCue"/>
            </do_if>
          </do_if>
        </do_for_each>
        <return value="$ActiveSubscriptions"/>
      </actions>
    </library>
    <library name="SendSubscriptionMail" purpose="run_actions">
      <!-- Also used for Trade subscriptions -->
      <params>
        <param name="Page"/>
        <param name="Faction"/>
        <param name="Mission_Contact"/>
      </params>
      <actions>
        <do_if value="not md.X4Ep1_War_Subscriptions.Start.$SubscriptionMails.indexof.{$Page}" comment="Send only once per game">
          <append_to_list name="md.X4Ep1_War_Subscriptions.Start.$SubscriptionMails" exact="$Page"/>
          <substitute_text text="$title" source="readtext.{$Page}.{310}" comment="$FACTION$ - Recruiting Volunteers Against the Xenon">
            <replace string="'$FACTION$'" with="'' + $Faction.shortname"/>
          </substitute_text>
          <!--<substitute_text text="$signature" source="readtext.{$Page}.{302}" comment="readtext.{$Page}.{201}\n$FACTION$">
            <replace string="'$FACTION$'" with="'' + $Faction.name" comment="e.g. Argon Federation"/>
          </substitute_text> discarded so we can use .titleoverride which should be properly gendered -->
          <set_value name="$signature" exact="$Mission_Contact.knownname + '\n' + $Mission_Contact.titleoverride + '\n' + $Faction.name"/>
          <write_incoming_message source="$Mission_Contact.knownname" highpriority="true" title="$title" text="'' + readtext.{$Page}.{301} + '\n\n' + readtext.{$Page}.{311} + '\n\n' + readtext.{30005}.{2010} + '\n\n' + $signature">
          </write_incoming_message>
        </do_if>
      </actions>
    </library>
    <!--event.param = mission group-->
    <cue name="Player_Subscribed_To_War" instantiate="true" namespace="this">
      <conditions>
        <event_cue_signalled/>
      </conditions>
      <actions>
        <unlock_achievement name="JOIN_WAR"/>
        <set_userdata relationstate="'relation_war_joinedfaction'" value="1"/>
        <!--Check if the player is subscribed to an opposing war-->
        <run_actions ref="Get_Active_War_Subscriptions" result="$EnemySubscriptions">
          <param name="HostFactions" value="[event.param.enemy]"/>
          <param name="EnemyFactions" value="[event.param.faction]"/>
        </run_actions>
        <do_if value="$EnemySubscriptions.count">
          <unlock_achievement name="JOIN_DOUBLE_AGENT"/>
          <set_userdata relationstate="'relation_war_joinedopposition'" value="1"/>
        </do_if>
      </actions>
    </cue>
    <cue name="Patch_Userdata_Player_Subscribed_To_War_V2" namespace="this" instantiate="true">
      <conditions>
        <event_cue_signalled cue="md.Setup.Start"/>
        <check_value value="Start.$MissionGroupCues?"/>
      </conditions>
      <actions>
        <do_for_each name="$WarMissionGroup" valuename="$WarCue" in="Start.$MissionGroupCues">
          <do_if value="$WarCue.$SubscriptionStatus == 'subscribed'">
            <do_if value="not @userdatasigned.relation_war_joinedfaction">
              <set_userdata relationstate="'relation_war_joinedfaction'" value="1"/>
              <debug_text text="'Player is subscribed to war missions: ' + $WarCue + ' - setting user data'" filter="savegame"/>
            </do_if>
            <run_actions ref="Get_Active_War_Subscriptions" result="$EnemySubscriptions">
              <param name="HostFactions" value="[$WarMissionGroup.enemy]"/>
              <param name="EnemyFactions" value="[$WarMissionGroup.faction]"/>
            </run_actions>
            <do_if value="$EnemySubscriptions.count">
              <set_userdata relationstate="'relation_war_joinedopposition'" value="1"/>
              <debug_text text="'Player has subscription to both ' + $WarCue + ' and ' + $EnemySubscriptions + ' - setting user data'" filter="savegame"/>
              <break/>
            </do_if>
          </do_if>
        </do_for_each>
      </actions>
    </cue>
    <!--TODO @Owen Look into using areas for all war mission sets so there can still be offers even if there is no border-->
    <cue name="Start" namespace="this" version="4">
      <conditions>
        <event_cue_completed cue="md.Setup.Start"/>
        <check_value value="player.galaxy.macro == macro.xu_ep2_universe_macro" comment="only in main-galaxy"/>
      </conditions>
      <actions>
        <set_value name="$DebugChance" exact="0"/>
        <set_value name="$DebugChance2" exact="0"/>
        <set_value name="$MissionGroupCues" exact="table[]"/>
        <set_value name="$Threads" exact="[]"/>
        <set_value name="$ThreadDefinitions" exact="table[]"/>
        <set_value name="$ActiveThreads" exact="[]" comment="List of instanced thread cues of md.MC_Management.Thread_Manager"/>
        <set_value name="$WarFronts" exact="table[]"/>
        <set_value name="$NonSubscriptionWars" exact="table[]"/>
        <create_list name="$Areas"/>
        <create_list name="$SubscriptionMails"/>
      </actions>
      <patch sinceversion="2" state="complete">
        <do_all exact="$Threads.count" counter="$i" reverse="true">
          <do_if value="not $Threads.{$i}.$ThreadCue.$Definition.$WarFront.$HostEntryPoint and $Threads.{$i}.$ThreadCue.$Definition.$WarFront.$ContestedSectors.count == 0">
            <!--Some mission definitions didn't clone the $ContestedSectors list of the war table and went and removed entries, leading to a lead of threads.-->
            <debug_text text="'War front ' + $Threads.{$i}.$ThreadCue.$Definition.$ID + ' has no host entry point nor contested sectors. This should not happen. Removing.'" filter="savegame"/>
            <signal_cue_instantly cue="$Threads.{$i}.$CleanupCue"/>
          </do_if>
          <do_elseif value="$Threads.{$i}.$ThreadCue.$Definition.$OfferSectors.count == 0">
            <debug_text text="'War front ' + $Threads.{$i}.$ThreadCue.$Definition.$ID + ' has no BBS spaces. Adding new ones.'" filter="savegame"/>
            <do_if value="$Threads.{$i}.$ThreadCue.$Definition.$WarFront.$ContestedSectors.count">
              <set_value name="$Threads.{$i}.$ThreadCue.$Definition.$OfferSectors" exact="$Threads.{$i}.$ThreadCue.$Definition.$WarFront.$ContestedSectors"/>
              <update_mission_thread_offer cue="$Threads.{$i}.$ThreadCue" space="$Threads.{$i}.$ThreadCue.$Definition.$WarFront.$ContestedSectors"/>
            </do_if>
            <do_elseif value="$Threads.{$i}.$ThreadCue.$Definition.$WarFront.$HostEntryPoint.exists">
              <set_value name="$Threads.{$i}.$ThreadCue.$Definition.$OfferSectors" exact="[$Threads.{$i}.$ThreadCue.$Definition.$WarFront.$HostEntryPoint.sector]"/>
              <update_mission_thread_offer cue="$Threads.{$i}.$ThreadCue" space="$Threads.{$i}.$ThreadCue.$Definition.$WarFront.$HostEntryPoint.sector"/>
            </do_elseif>
          </do_elseif>
        </do_all>
      </patch>
      <patch sinceversion="3" state="complete">
        <create_list name="$Areas"/>
      </patch>
      <patch sinceversion="4" state="complete">
        <create_list name="$SubscriptionMails"/>
      </patch>
      <cues>
        <!--War text pages
        Argon Vs Xenon
        Text: 30210
        Rep voice: 10110
        
        Argon Vs Holy Order
        Text: 30211
        Rep voice: 10101
        
        Paranid Vs Holy Order
        Text: 30212
        Rep voice: 10304
        
        Holy Order Vs Argon
        Text: 30213
        Rep voice: 10305
        
        Holy Order Vs Paranid
        Text: 30214
        Rep voice: 10307-->
        <cue name="DefineNonSubscriptionWars">
          <actions>
            <set_value name="$NonSubscriptionWars.{faction.antigone}" exact="[faction.holyorder, faction.xenon, faction.xenon1, faction.xenon2, faction.xenon3, faction.xenon4, faction.xenon5, faction.xenon6]"/>
            <set_value name="$NonSubscriptionWars.{faction.holyorder}" exact="[faction.antigone, faction.ministry, faction.teladi, faction.xenon, faction.xenon1, faction.xenon2, faction.xenon3, faction.xenon4, faction.xenon5, faction.xenon6]"/>
            <set_value name="$NonSubscriptionWars.{faction.ministry}" exact="[faction.holyorder, faction.xenon, faction.xenon1, faction.xenon2, faction.xenon3, faction.xenon4, faction.xenon5, faction.xenon6]"/>
            <set_value name="$NonSubscriptionWars.{faction.teladi}" exact="[faction.holyorder, faction.xenon, faction.xenon1, faction.xenon2, faction.xenon3, faction.xenon4, faction.xenon5, faction.xenon6]"/>
          </actions>
        </cue>
        <cue name="GenerateTheadReports" instantiate="true" namespace="this">
          <conditions>
            <event_cue_signalled/>
          </conditions>
          <actions>
            <set_value name="$ThreadsByGroup" exact="table[]"/>
            <do_all exact="parent.$Threads.count" counter="$i">
              <set_value name="$ThreadCue" exact="parent.$Threads.{$i}.$ThreadCue"/>
              <do_if value="$ThreadsByGroup.{$ThreadCue.$Definition.$MissionGroup}?">
                <append_to_list name="$ThreadsByGroup.{$ThreadCue.$Definition.$MissionGroup}" exact="$ThreadCue"/>
              </do_if>
              <do_else>
                <set_value name="$ThreadsByGroup.{$ThreadCue.$Definition.$MissionGroup}" exact="[$ThreadCue]"/>
              </do_else>
            </do_all>
            <set_value name="$ThreadGroups" exact="$ThreadsByGroup.keys.list"/>
            <do_all exact="$ThreadGroups.count" counter="$i">
              <debug_text text="'War missions for group: ' + $ThreadGroups.{$i} + ' - ' + $ThreadsByGroup.{$ThreadGroups.{$i}}.count + ' missions.'" context="false"/>
              <do_all exact="$ThreadsByGroup.{$ThreadGroups.{$i}}.count" counter="$k">
                <set_value name="$Thread" exact="$ThreadsByGroup.{$ThreadGroups.{$i}}.{$k}"/>
                <set_value name="$CueInstanceString" exact="'' + [$Thread]"/>
                <substitute_text source="$CueInstanceString" text="$ThreadInstance">
                  <replace string="'md.MC_Management.Thread_Manager'" with="''"/>
                  <replace string="'['" with="''"/>
                  <replace string="']'" with="''"/>
                </substitute_text>
                <do_if value="$Thread.$Definition.$WarFront.$HostEntryPoint">
                  <debug_text text="$Thread.time + ' ' + $ThreadInstance + ' ' + $Thread.$Definition.$ID + ' ' + $Thread.$Definition.$ThreadName + ' Entry point: ' + $Thread.$Definition.$WarFront.$HostEntryPoint + ' ' + $Thread.$Definition.$WarFront.$HostEntryPoint.sector.knownname + ' ' + $Thread.$Definition.$WarFront.$HostEntryPoint.knownname" context="false"/>
                </do_if>
                <do_else>
                  <debug_text text="$Thread.time + ' ' + $ThreadInstance + ' ' + $Thread.$Definition.$ID + ' ' + $Thread.$Definition.$ThreadName + ' Contested sectors: '" context="false"/>
                  <do_all exact="$Thread.$Definition.$WarFront.$ContestedSectors.count" counter="$j">
                    <debug_text text="'   ' + $Thread.$Definition.$WarFront.$ContestedSectors.{$j} + ' ' + $Thread.$Definition.$WarFront.$ContestedSectors.{$j}.knownname" context="false"/>
                  </do_all>
                  <do_if value="$Thread.$Definition.$WarFront.$ContestedSectors.count == 0">
                    <debug_text text="'War front has no entry point nor contested sectors'" filter="error"/>
                  </do_if>
                </do_else>
                <!--<debug_text text="'offer sectors'"/>
                <do_all exact="$Thread.$Definition.$OfferSectors.count" counter="$j">
                  <debug_text text="'   ' + $Thread.$Definition.$OfferSectors.{$j} + ' ' + $Thread.$Definition.$OfferSectors.{$j}.knownname" context="false"/>
                </do_all>-->
              </do_all>
            </do_all>
          </actions>
        </cue>
        <library name="Remove_Dynamic_Interior">
          <actions>
            <do_if value="$DynamicInterior">
              <debug_text text="event.name + ' Destroying interior ' + $DynamicInterior" chance="$DebugChance"/>
              <destroy_object object="$DynamicInterior"/>
            </do_if>
            <remove_value name="$DynamicInterior"/>
            <remove_value name="$DynamicCorridor"/>
            <remove_value name="$DynamicRoom"/>
          </actions>
        </library>
        <!--
        ###################################
        ARGON VS XENON
        ###################################-->
        <cue name="ARG_VS_XENON" namespace="this" version="4">
          <actions>
            <!--Common values-->
            <set_value name="$ManagerCue" exact="parent.namespace"/>
            <set_value name="$Faction" exact="faction.argon"/>
            <set_value name="$EnemyFaction" exact="faction.xenon"/>
            <set_value name="$MissionGroup" exact="missiongroup.argon_war_xenon"/>
            <set_value name="$Mission_Contact" exact="null"/>
            <set_value name="$Page" exact="30210" comment="Argon-Xenon-War page"/>
            <set_value name="$ManagerCue.$MissionGroupCues.{$MissionGroup}" exact="this"/>
            <set_value name="$SubscriptionMinRel" exact="$Faction.relation.friend.min"/>
            <set_value name="$SubscriptionLossRel" exact="-0.00064" comment="for UI-value -1"/>
            <set_value name="$HasIntroMission" exact="false"/>
            <set_value name="$DebugChance" exact="$ManagerCue.$DebugChance"/>
            <!--Status-->
            <set_value name="$SubscriptionStatus" exact="null"/>
            <set_value name="$IntroducedToContact" exact="false"/>
            <set_value name="$JobsDescribed" exact="false"/>
            <set_value name="$ConflictDescribed" exact="false"/>
            <set_value name="$IntroMissionSuccessful" exact="false"/>
            <set_value name="$CooldownTime" exact="-1s"/>
            <!--Stats-->
            <set_value name="$ThreadsCompleted" exact="0"/>
            <set_value name="$ThreadsFailed" exact="0"/>
            <set_value name="$MissionsCompleted" exact="0"/>
            <set_value name="$MissionsFailed" exact="0"/>
          </actions>
          <patch sinceversion="2" state="complete">
            <do_if value="$CooldownTime gt (player.age + 5min)">
              <debug_text text="'Reducing mission subscription cooldowntime from ' + $CooldownTime + ' to ' + player.age + 5min" filter="savegame"/>
              <set_value name="$CooldownTime" exact="player.age + 5min"/>
            </do_if>
          </patch>
          <patch sinceversion="3" state="complete">
            <do_if value="not md.$SubscribedMissionGroups?">
              <create_list name="md.$SubscribedMissionGroups"/>
            </do_if>
            <do_if value="$SubscriptionStatus == 'subscribed'">
              <append_to_list name="md.$SubscribedMissionGroups" exact="$MissionGroup"/>
            </do_if>
          </patch>
          <patch sinceversion="4" state="complete">
            <set_value name="$HasIntroMission" exact="false"/>
          </patch>
          <cues>
            <cue name="ARG_VS_XENON_Init">
              <actions>
                <set_value name="$ContactCreatorCue" exact="ARG_VS_XENON_Create_Contact"/>
                <set_value name="$IntroMissionCue" exact="ARG_VS_XENON_Introduction"/>
                <!--$SubscriptionStatus:
                - 'unsubscribed'
                - 'probation'
                - 'subscribed'
                - 'cooldown'-->
                <signal_cue_instantly cue="ARG_VS_XENON_Set_Subscription_Status" param="'unsubscribed'"/>
              </actions>
            </cue>
            <!--
            ####################
            DEBUG
            ####################-->
            <cue name="ARG_VS_XENON_Debug_Reset">
              <conditions>
                <event_cue_signalled/>
              </conditions>
              <actions>
                <do_all exact="$ManagerCue.$Threads.count" counter="$i" reverse="true">
                  <do_if value="$ManagerCue.$Threads.{$i}.$ThreadCue.$Definition.$MissionGroup == $MissionGroup">
                    <signal_cue_instantly cue="$ManagerCue.$Threads.{$i}.$CleanupCue"/>
                  </do_if>
                </do_all>
                <set_value name="$DefinitionKeys" exact="$ManagerCue.$ThreadDefinitions.keys.list"/>
                <do_all exact="$DefinitionKeys.count" counter="$i" reverse="true">
                  <do_if value="$ManagerCue.$ThreadDefinitions.{$DefinitionKeys.{$i}}.$MissionGroup == $MissionGroup">
                    <remove_value name="$ManagerCue.$ThreadDefinitions.{$DefinitionKeys.{$i}}"/>
                  </do_if>
                </do_all>
                <do_if value="$Mission_Contact.isclass.npc">
                  <destroy_object object="$Mission_Contact"/>
                </do_if>
                <set_value name="$Mission_Contact" exact="null"/>
                <reset_cue cue="namespace"/>
                <reset_cue cue="Gamestart" comment="Trigger CalculateThreads again"/>
              </actions>
            </cue>
            <cue name="ARG_VS_XENON_Debug_Subscribe" instantiate="true">
              <conditions>
                <event_cue_signalled/>
              </conditions>
              <actions>
                <signal_cue_instantly cue="ARG_VS_XENON_Set_Subscription_Status" param="'subscribed'"/>
              </actions>
            </cue>
            <!--
            ####################
            SUBSCRIPTION
            ####################-->
            <!--event.param == new status-->
            <cue name="ARG_VS_XENON_Set_Subscription_Status" instantiate="true">
              <conditions>
                <event_cue_signalled/>
              </conditions>
              <actions>
                <do_if value="                        event.param == 'unsubscribed' or                        event.param == 'probation' or                        event.param == 'subscribed' or                        event.param == 'cooldown'">
                  <debug_text text="'Changing subscription status from ' + $SubscriptionStatus + ' to ' + event.param" chance="$DebugChance"/>
                  <set_value name="$SubscriptionStatus" exact="event.param"/>
                  <!--Be careful with state change handlers here if the requested state was the same as the previous one-->
                  <do_if value="event.param == 'subscribed' and Gamestart.state == cuestate.complete">
                    <signal_cue_instantly cue="Player_Subscribed_To_War" param="$MissionGroup"/>
                    <signal_cue cue="CalculateThreads"/>
                  </do_if>
                  <do_elseif value="event.param == 'cooldown'">
                    <!--TODO @Owen balance cooldown. Have a harsher cooldown in certain situations?-->
                    <set_value name="$CooldownTime" exact="player.age + 5min"/>
                  </do_elseif>
                  <!-- update global missiongroup-registry -->
                  <do_if value="$SubscriptionStatus == 'subscribed'">
                    <assert value="not md.$SubscribedMissionGroups.indexof.{$MissionGroup}"/>
                    <do_if value="not md.$SubscribedMissionGroups.indexof.{$MissionGroup}">
                      <append_to_list name="md.$SubscribedMissionGroups" exact="$MissionGroup"/>
                    </do_if>
                  </do_if>
                  <do_else>
                    <remove_from_list name="md.$SubscribedMissionGroups" exact="$MissionGroup"/>
                  </do_else>
                </do_if>
                <do_else>
                  <assert value="false" text="'Unknown subscription status: ' + event.param + ' [Owen]'"/>
                </do_else>
              </actions>
            </cue>
            <cue name="ARG_VS_XENON_Check_Cooldown" instantiate="true" checkinterval="5s">
              <conditions>
                <check_value value="$SubscriptionStatus == 'cooldown' and player.age gt $CooldownTime"/>
              </conditions>
              <actions>
                <debug_text text="player.age + ' Ending  cooldown'" chance="$DebugChance"/>
                <signal_cue_instantly cue="ARG_VS_XENON_Set_Subscription_Status" param="'subscribed'"/>
              </actions>
            </cue>
            <!--
            ####################
            CONTACT
            ####################-->
            <!--event.param == Cloned table of the host sectors for this war front in which to search for a placement object (or null to fallback to any owned space in the galaxy)-->
            <cue name="ARG_VS_XENON_Create_Contact">
              <conditions>
                <event_cue_signalled/>
                <check_value value="$Faction.isactive"/>
              </conditions>
              <actions>
                <set_value name="this.$SelectedSpace" exact="null"/>
                <do_if value="event.param and typeof event.param == datatype.table">
                  <set_value name="this.$HostSectorKeys" exact="event.param.keys.sorted"/>
                  <do_all exact="this.$HostSectorKeys.count" counter="$i">
                    <do_if value="this.$HostSectorKeys.{$i}.security ge 0.75f">
                      <!--Select a sector with stations and a high security value-->
                      <find_station name="this.$PotentialStation" owner="$Faction" space="this.$HostSectorKeys.{$i}">
                        <match_content class="class.walkablemodule" checkoperational="true"/>
                      </find_station>
                      <do_if value="this.$PotentialStation">
                        <set_value name="this.$SelectedSpace" exact="this.$HostSectorKeys.{$i}"/>
                        <break/>
                      </do_if>
                    </do_if>
                  </do_all>
                  <do_if value="not this.$SelectedSpace">
                    <!--Simply select the furthest sector with stations-->
                    <do_all exact="this.$HostSectorKeys.count" counter="$i" reverse="true">
                      <!--TODO @Owen - attempt to find major stations first-->
                      <find_station name="this.$PotentialStation" owner="$Faction" space="this.$HostSectorKeys.{$i}">
                        <match_content class="class.walkablemodule" checkoperational="true"/>
                      </find_station>
                      <do_if value="this.$PotentialStation">
                        <set_value name="this.$SelectedSpace" exact="this.$HostSectorKeys.{$i}"/>
                        <break/>
                      </do_if>
                    </do_all>
                  </do_if>
                </do_if>
                <do_if value="not this.$SelectedSpace">
                  <find_station name="this.$PotentialStation" owner="$Faction" space="player.galaxy">
                    <match_content class="class.walkablemodule" checkoperational="true"/>
                  </find_station>
                  <do_if value="this.$PotentialStation">
                    <set_value name="this.$SelectedSpace" exact="this.$PotentialStation.sector"/>
                    <debug_text text="'Fallback case for not finding suitable sector to place mission contact for ' + $MissionGroup + '. Placing on ' + this.$PotentialStation + ' ' + this.$PotentialStation.knownname + ' in ' + this.$SelectedSpace.knownname" filter="error"/>
                  </do_if>
                </do_if>
                <do_if value="this.$SelectedSpace">
                  <find_station name="$PlacementObject" owner="$Faction" space="this.$SelectedSpace" required="true">
                    <match_content class="class.walkablemodule" checkoperational="true"/>
                  </find_station>
                  <assert value="$PlacementObject.exists" text="'Station was unable to be found in ' + this.$SelectedSpace.knownname + ' even when it should have [Owen]'"/>
                  <do_if value="$PlacementObject">
                    <do_if value="not $Mission_Contact.isclass.npc">
                      <create_cue_actor name="$Mission_Contact" cue="namespace" group="argon.factionrepresentative.female">
                        <page exact="10110"/>
                        <owner exact="$Faction"/>
                        <skills>
                          <skill type="management" min="12" max="15"/>
                          <skill type="morale" min="12" max="15"/>
                          <skill type="piloting" min="6" max="15"/>
                          <skill type="engineering" min="6" max="15"/>
                          <skill type="boarding" min="6" max="15"/>
                        </skills>
                      </create_cue_actor>
                      <do_if value="$Mission_Contact">
                        <set_entity_type entity="$Mission_Contact" type="entitytype.crowd"/>
                        <set_entity_traits entity="$Mission_Contact" missionactor="true" remote="false" customhandler="true"/>
                        <set_entity_overrides entity="$Mission_Contact" title="'{30210,201}'"/>
                        <debug_text text="'Created mission contact ' + $Mission_Contact + ' ' + $Mission_Contact.knownname + ' for placement on ' + $PlacementObject + ' ' + $PlacementObject.knownname" chance="$DebugChance"/>
                      </do_if>
                    </do_if>
                  </do_if>
                </do_if>
                <assert value="$Mission_Contact.isclass.npc" text="'Unable to generate mission contact [Owen]'"/>
                <do_if value="not $Mission_Contact.isclass.npc or not $PlacementObject.exists">
                  <reset_cue cue="this"/>
                </do_if>
              </actions>
              <cues>
                <cue name="ARG_VS_XENON_Place_Contact_Init" version="2">
                  <actions>
                    <do_if value="$PlacementObject.attention ge attention.nearby">
                      <signal_cue cue="ARG_VS_XENON_Place_Contact_Create_Interior"/>
                    </do_if>
                  </actions>
                  <patch sinceversion="2" state="complete">
                    <do_if value="not $PlacementObject.isoperational">
                      <set_value name="$PlacementObject" exact="null"/>
                      <reset_cue cue="$ContactCreatorCue"/>
                    </do_if>
                  </patch>
                </cue>
                <cue name="ARG_VS_XENON_Place_Contact_Create_Interior">
                  <conditions>
                    <check_any>
                      <event_cue_signalled/>
                      <check_all>
                        <event_object_changed_attention object="$PlacementObject"/>
                        <check_value value="event.param ge attention.nearby"/>
                      </check_all>
                    </check_any>
                  </conditions>
                  <actions>
                    <debug_text text="'Attempting to create dynamic interior to place NPC'" chance="$DebugChance"/>
                    <get_room_definition macro="$StartCorridorMacro" tags="tag.corridor" race="$Faction.primaryrace"/>
                    <get_room_definition macro="$StartRoomMacro" doors="$RoomDoors" tags="tag.warroom" race="$Faction.primaryrace"/>
                    <!--TODO @Owen either make persistent or use a seed-->
                    <create_dynamic_interior object="$PlacementObject" corridor="$StartCorridorMacro" room="$StartRoomMacro" name="'{30210,3}'" interiorname="$DynamicInterior" corridorname="$DynamicCorridor" roomname="$DynamicRoom"/>
                    <assert value="$DynamicInterior" text="'Unable to create dynamic interior for contact ' + $Mission_Contact + ' ' + $Mission_Contact.knownname + ' [Owen]'"/>
                    <do_if value="$DynamicInterior">
                      <find_npc_slot name="$NPC_Slot" object="$DynamicRoom" tags="tag.stand"/>
                      <do_if value="not $NPC_Slot">
                        <find_npc_slot name="$NPC_Slot" object="$DynamicRoom"/>
                      </do_if>
                      <assert value="$NPC_Slot" text="'Can not find slot for mission contact in ' + $DynamicInterior + ' ' + $DynamicInterior.knownname + ' [Owen]'"/>
                      <do_if value="$NPC_Slot">
                        <add_actor_to_room actor="$Mission_Contact" slot="$NPC_Slot"/>
                        <debug_text text="'Added mission contact ' + $Mission_Contact + ' ' + $Mission_Contact.knownname + ' to ' + $PlacementObject + ' ' + $PlacementObject.knownname" chance="$DebugChance"/>
                      </do_if>
                    </do_if>
                  </actions>
                  <cues>
                    <cue name="ARG_VS_XENON_Place_Contact_WithinDynamicInterior_Destroy">
                      <conditions>
                        <event_object_interiors_despawning object="$PlacementObject"/>
                      </conditions>
                      <actions>
                        <remove_actor_from_room actor="$Mission_Contact"/>
                        <include_actions ref="Remove_Dynamic_Interior"/>
                        <do_if value="$Faction.isactive">
                          <reset_cue cue="ARG_VS_XENON_Place_Contact_Create_Interior"/>
                        </do_if>
                        <do_else>
                          <debug_text text="'Faction is now inactive. Deactivating contact handling.'"/>
                          <reset_cue cue="$ContactCreatorCue"/>
                        </do_else>
                      </actions>
                    </cue>
                  </cues>
                </cue>
                <cue name="ARG_VS_XENON_Contact_Killed">
                  <conditions>
                    <event_object_destroyed object="$Mission_Contact"/>
                  </conditions>
                  <actions>
                    <set_value name="$Mission_Contact" exact="null"/>
                    <reset_cue cue="ARG_VS_XENON_Create_Contact"/>
                  </actions>
                </cue>
                <cue name="ARG_VS_XENON_Placement_Object_Destroyed">
                  <conditions>
                    <event_object_destroyed object="$PlacementObject"/>
                  </conditions>
                  <actions>
                    <include_actions ref="Remove_Dynamic_Interior"/>
                    <set_value name="$PlacementObject" exact="null"/>
                    <reset_cue cue="$ContactCreatorCue"/>
                  </actions>
                </cue>
                <cue name="ARG_VS_XENON_Contact__Faction_Deactivated">
                  <conditions>
                    <event_faction_deactivated faction="$Faction"/>
                  </conditions>
                  <actions>
                    <do_if value="ARG_VS_XENON_Place_Contact_Create_Interior.state == cuestate.waiting">
                      <debug_text text="'Faction is now inactive. Deactivating contact handling.'"/>
                      <reset_cue cue="$ContactCreatorCue"/>
                    </do_if>
                    <!--else, the depawning of the interior must happen-->
                  </actions>
                </cue>
                <cue name="ARG_VS_XENON_Contact_Conversation_Started" instantiate="true">
                  <conditions>
                    <check_any>
                      <event_conversation_started actor="$Mission_Contact"/>
                      <event_conversation_returned_to_section actor="$Mission_Contact"/>
                    </check_any>
                    <check_value value="event.param == 'default' and $Faction.isactive"/>
                  </conditions>
                  <actions>
                    <do_if value="event.name == 'event_conversation_started'">
                      <do_if value="$SubscriptionStatus == 'unsubscribed' or $SubscriptionStatus == 'cooldown'">
                        <do_if value="player.entity.isfemale">
                          <add_npc_line speaker="$Mission_Contact" line="3007" comment="Pilot. (female)"/>
                        </do_if>
                        <do_else>
                          <add_npc_line speaker="$Mission_Contact" line="3006" comment="Pilot. (male)"/>
                        </do_else>
                      </do_if>
                      <do_else>
                        <!--More familiar greeting-->
                        <add_npc_line speaker="$Mission_Contact" line="3003" comment="Captain."/>
                      </do_else>
                    </do_if>
                    <include_actions ref="ARG_VS_XENON_Contact_Player_Lines"/>
                  </actions>
                </cue>
                <library name="ARG_VS_XENON_Contact_Player_Lines">
                  <actions>
                    <!--Specific sections-->
                    <do_if value="event.name == 'event_conversation_next_section' and event.param == 'war_subscribe_request'">
                      <do_if value="$Faction.relationto.{faction.player} ge $SubscriptionMinRel">
                        <add_player_choice text="{1002,3000401}" section="war_subscribe_ask_intro" comment="What kind of jobs can I expect?"/>
                      </do_if>
                    </do_if>
                    <do_elseif value="event.name == 'event_conversation_next_section' and (event.param == 'war_subscribe_ask_intro' or event.param == 'war_subscribe_request_2')">
                      <add_player_choice text="{1002,3021002}" section="war_subscribe_ask_conflict" comment="What can you tell me about them?"/>
                      <add_player_choice text="{1002,3000402}" section="war_subscribe_start_intro" position="top_right" comment="Let's get started."/>
                    </do_elseif>
                    <do_elseif value="event.name == 'event_conversation_next_section' and event.param == 'war_subscribe_ask_conflict'">
                      <add_player_choice text="{1002,3021003}" section="war_subscribe_ask_conflict_2" comment="What can we do?"/>
                      <add_player_choice text="{1002,3000402}" section="war_subscribe_start_intro" position="top_right" comment="Let's get started."/>
                    </do_elseif>
                    <do_elseif value="event.name == 'event_conversation_next_section' and event.param == 'war_subscribe_ask_conflict_2'">
                      <add_player_choice text="{1002,3000402}" section="war_subscribe_start_intro" position="top_right" comment="Let's get started."/>
                    </do_elseif>
                    <!--Start or other sections-->
                    <do_else>
                      <do_if value="$SubscriptionStatus == 'unsubscribed'">
                        <do_if value="ARG_VS_XENON_Introduction.state == cuestate.waiting">
                          <!--Intro mission is not in a state where the player can take it.-->
                          <!--TODO @Owen - voice lines on rejecting the player?-->
                          <add_player_choice text="{1002,3021001}" section="war_subscribe_request_2" comment="I'm here to help with the Xenon."/>
                        </do_if>
                        <do_elseif value="$IntroducedToContact">
                          <do_if value="$JobsDescribed">
                            <add_player_choice text="{1002,3000402}" section="war_subscribe_start_intro" position="top_right" comment="Let's get started."/>
                            <add_player_choice text="{1002,3021002}" section="war_subscribe_ask_conflict" comment="What can you tell me about them?"/>
                          </do_if>
                          <do_else>
                            <add_player_choice text="{1002,3000401}" section="war_subscribe_ask_intro" comment="What kind of jobs can I expect?"/>
                          </do_else>
                        </do_elseif>
                        <do_else>
                          <add_player_choice text="{1002,3021001}" section="war_subscribe_request" comment="I'm here to help with the Xenon."/>
                        </do_else>
                      </do_if>
                      <do_elseif value="$SubscriptionStatus == 'probation'">
                        <do_if value="$IntroMissionSuccessful">
                          <add_player_choice text="{1002,3000404}" section="war_intro_complete" comment="I completed the task."/>
                        </do_if>
                        <do_else>
                          <add_player_choice text="{1002,3000405}" section="war_abort_intro" comment="I would like to stop."/>
                        </do_else>
                      </do_elseif>
                    </do_else>
                  </actions>
                </library>
                <cue name="ARG_VS_XENON_Contact_NextSection" instantiate="true">
                  <conditions>
                    <event_conversation_next_section actor="$Mission_Contact" sectionprefix="war_"/>
                  </conditions>
                  <actions>
                    <set_value name="$AddPlayerChoices" exact="true"/>
                    <set_value name="$IsXenonSlayer" exact="player.name == 'Xenon Slayer'"/>
                    <!--TODO @Owen statistic counting of how many Xenon have been killed. If >100, play this line-->
                    <!--Xenon Slayer easter egg-->
                    <do_if value="event.param == 'war_subscribe_request'">
                      <do_if value="$Faction.relationto.{faction.player} ge $SubscriptionMinRel">
                        <set_value name="$IntroducedToContact" exact="true"/>
                        <add_npc_line speaker="$Mission_Contact" line="30210001" hidechoices="true" comment="Ah, nice to meet you."/>
                        <add_npc_line speaker="$Mission_Contact" line="30210002" hidechoices="true" comment="My job here is to help coordinate our efforts against the Xenon..."/>
                        <do_if value="player.entity.race == race.argon">
                          <!--Argon citizen-->
                          <add_npc_line speaker="$Mission_Contact" line="30210004" hidechoices="true" comment="If you're here, it means you have been recognised as an outstanding citizen of the Argon Federation."/>
                        </do_if>
                        <do_else>
                          <!--Argon friend-->
                          <add_npc_line speaker="$Mission_Contact" line="30210003" hidechoices="true" comment="If you're here, it means you have been recognised as a true friend of the Argon Federation."/>
                        </do_else>
                        <add_npc_line speaker="$Mission_Contact" line="30210005" hidechoices="true" comment="There is a great need for pilots like you."/>
                        <add_npc_line speaker="$Mission_Contact" line="30210006" hidechoices="true" comment="Probation line 1"/>
                        <add_npc_line speaker="$Mission_Contact" line="30210007" hidechoices="true" comment="Probation line 2"/>
                        <do_if value="$IsXenonSlayer">
                          <add_npc_line speaker="$Mission_Contact" line="30210008" hidechoices="true" comment="Looking at your records, I see you consider yourself a 'Xenon Slayer'..."/>
                        </do_if>
                        <do_else>
                          <add_npc_line speaker="$Mission_Contact" line="30210009" hidechoices="true" comment="Probation line 3"/>
                          <add_npc_line speaker="$Mission_Contact" line="30210010" hidechoices="true" comment="Any questions?"/>
                        </do_else>
                      </do_if>
                      <do_else>
                        <add_npc_line speaker="$Mission_Contact" line="30210026" comment="Sorry, but this is a high-risk situation. We require pilots who have proven themselves to the Argon Federation."/>
                      </do_else>
                    </do_if>
                    <do_elseif value="event.param == 'war_subscribe_ask_intro'">
                      <set_value name="$JobsDescribed" exact="true"/>
                      <add_npc_line speaker="$Mission_Contact" line="30210011" hidechoices="true" comment="There will be a wide range of tasks, from combat deployments to construction work..."/>
                      <add_npc_line speaker="$Mission_Contact" line="30210012" hidechoices="true" comment="You will be paid as you complete your allotted tasks, with a potential bonus at the end."/>
                    </do_elseif>
                    <do_elseif value="event.param == 'war_subscribe_ask_conflict'">
                      <set_value name="$ConflictDescribed" exact="true"/>
                      <do_if value="$IsXenonSlayer">
                        <add_npc_line speaker="$Mission_Contact" line="30210013" hidechoices="true" comment="As someone who's been toe to toe with the Xenon I'm sure you know what they are capable of."/>
                      </do_if>
                      <add_npc_line speaker="$Mission_Contact" line="30210014" hidechoices="true" comment="Conflict desc 1"/>
                      <add_npc_line speaker="$Mission_Contact" line="30210015" hidechoices="true" comment="Conflict desc 2"/>
                      <add_npc_line speaker="$Mission_Contact" line="30210016" hidechoices="true" comment="Conflict desc 3"/>
                    </do_elseif>
                    <do_elseif value="event.param == 'war_subscribe_ask_conflict_2'">
                      <add_npc_line speaker="$Mission_Contact" line="30210017" hidechoices="true" comment="Conflict desc 4"/>
                      <add_npc_line speaker="$Mission_Contact" line="30210018" hidechoices="true" comment="Conflict desc 5"/>
                      <add_npc_line speaker="$Mission_Contact" line="30210019" hidechoices="true" comment="Anything else?"/>
                    </do_elseif>
                    <do_elseif value="event.param == 'war_subscribe_request_2'">
                      <!--This section is for when the intro mission is not currently active for the player to accept it. Either reject the player or signal the intro mission to activate.-->
                      <include_actions ref="ARG_VS_XENON_Can_Activate_Introduction"/>
                      <do_if value="$CanActivateIntro">
                        <signal_cue cue="ARG_VS_XENON_Introduction"/>
                        <add_npc_line speaker="$Mission_Contact" line="30210001" hidechoices="true" comment="Ah, very good."/>
                      </do_if>
                      <do_else>
                        <set_value name="$AddPlayerChoices" exact="false"/>
                        <add_npc_line speaker="$Mission_Contact" line="30210027" hidechoices="true" comment="Sorry. We're still reviewing your performance from the last time."/>
                      </do_else>
                    </do_elseif>
                    <do_elseif value="event.param == 'war_subscribe_start_intro'">
                      <do_if value="$HasIntroMission">
                        <set_value name="$AddPlayerChoices" exact="false"/>
                        <signal_cue cue="ARG_VS_XENON_Player_Requested_Subscription"/>
                        <add_npc_line speaker="$Mission_Contact" line="30210020" hidechoices="true" comment="Alright. I'll have a suitable task picked out for you momentarily."/>
                        <add_npc_line speaker="$Mission_Contact" line="30210021" hidechoices="true" comment="Stay safe out there, pilot."/>
                      </do_if>
                      <do_else>
                        <set_value name="$AddPlayerChoices" exact="false"/>
                        <add_npc_line speaker="$Mission_Contact" line="2113" hidechoices="true" comment="Excellent."/>
                        <add_npc_line speaker="$Mission_Contact" line="30210023" hidechoices="true" comment="You will now find tasks related to the Xenon in your mission interface."/>
                        <signal_cue cue="ARG_VS_XENON_Cancel_Intro_Talkto"/>
                        <reset_cue cue="ARG_VS_XENON_Introduction"/>
                        <signal_cue_instantly cue="ARG_VS_XENON_Set_Subscription_Status" param="'subscribed'"/>
                      </do_else>
                    </do_elseif>
                    <do_elseif value="event.param == 'war_intro_complete'">
                      <set_value name="$AddPlayerChoices" exact="false"/>
                      <add_npc_line speaker="$Mission_Contact" line="30210022" hidechoices="true" comment="Yes, I saw. Good work."/>
                      <add_npc_line speaker="$Mission_Contact" line="30210023" hidechoices="true" comment="You will now find tasks related to the Xenon in your mission interface."/>
                      <signal_cue_instantly cue="ARG_VS_XENON_Set_Subscription_Status" param="'subscribed'"/>
                    </do_elseif>
                    <do_elseif value="event.param == 'war_abort_intro'">
                      <set_value name="$AddPlayerChoices" exact="false"/>
                      <signal_cue cue="ARG_VS_XENON_Player_Requests_Intro_Abort"/>
                    </do_elseif>
                    <do_if value="$AddPlayerChoices">
                      <include_actions ref="ARG_VS_XENON_Contact_Player_Lines"/>
                    </do_if>
                  </actions>
                </cue>
              </cues>
            </cue>
            <!--event.param = table[
            $cue                = thread cue namespace,
            $completedmissions  = number of completed missions,
            $failedmissions     = number of failed missions]-->
            <cue name="ARG_VS_XENON_Thread_Finished" instantiate="true">
              <conditions>
                <event_cue_signalled cue="Cleanup_Thread"/>
                <!--<debug_text text="event.param.$cue.$Definition.$MissionGroup"/>
                <debug_text text="$MissionGroup"/>-->
                <check_value value="event.param.$cue.$Definition.$MissionGroup == $MissionGroup"/>
                <!--<debug_text text="$ManagerCue.$ActiveThreads.indexof.{event.param.$cue}"/>-->
                <check_value value="$ManagerCue.$ActiveThreads.indexof.{event.param.$cue}"/>
              </conditions>
              <actions>
                <debug_text text="'player finished ' + event.param.$cue + ' for ' + $MissionGroup + '. Completed missions: ' + event.param.$completedmissions + ' - Failed missions: ' + event.param.$failedmissions" chance="$DebugChance"/>
                <set_value name="$MissionsCompleted" operation="add" exact="event.param.$completedmissions"/>
                <set_value name="$MissionsFailed" operation="add" exact="event.param.$completedmissions"/>
                <do_if value="$MissionsCompleted ge 20">
                  <unlock_achievement name="WAR_MISSIONS"/>
                </do_if>
                <do_if value="event.param.$failed">
                  <set_value name="$ThreadsFailed" operation="add"/>
                  <do_if value="not event.param.$interrupted">
                    <signal_cue_instantly cue="ARG_VS_XENON_Set_Subscription_Status" param="'cooldown'"/>
                  </do_if>
                </do_if>
                <do_else>
                  <set_value name="$ThreadsCompleted" operation="add"/>
                  <signal_cue cue="CalculateThreads"/>
                </do_else>
              </actions>
            </cue>
            <!--
            ####################
            INTRODUCTION
            ####################-->
            <cue name="ARG_VS_XENON_Player_Requested_Subscription" instantiate="true">
              <conditions>
                <event_cue_signalled/>
              </conditions>
            </cue>
            <cue name="ARG_VS_XENON_Player_Requests_Intro_Abort" instantiate="true">
              <conditions>
                <event_cue_signalled/>
              </conditions>
            </cue>
            <library name="ARG_VS_XENON_Can_Activate_Introduction">
              <actions>
                <!--TODO @Owen other conditions based on if they failed a previous intro mission and need a cooldown-->
                <set_value name="$CanActivateIntro" exact="false"/>
                <do_if value="$Faction.relationto.{faction.player} ge $SubscriptionMinRel">
                  <set_value name="$CanActivateIntro" exact="true"/>
                </do_if>
              </actions>
            </library>
            <cue name="ARG_VS_XENON_Introduction" version="4">
              <conditions>
                <event_cue_signalled/>
                <check_value value="$Faction.isactive"/>
              </conditions>
              <actions>
                <debug_text text="'Starting intro mission handling for ' + $MissionGroup" chance="$DebugChance"/>
                <set_value name="$MissionIntroCue" exact="this"/>
                <signal_cue_instantly cue="ARG_VS_XENON_Set_Subscription_Status" param="'unsubscribed'"/>
              </actions>
              <patch sinceversion="2" state="complete">
                <do_if value="$SubscriptionStatus == 'cooldown'">
                  <debug_text text="'Fixing war mission which is still of state cooldown when it should be unsubscribed'" filter="savegame"/>
                  <signal_cue_instantly cue="ARG_VS_XENON_Set_Subscription_Status" param="'unsubscribed'"/>
                </do_if>
              </patch>
              <patch sinceversion="4" state="waiting">
                <do_if value="$SubscriptionStatus == 'probation'">
                  <debug_text text="'Fixing war mission which is still of state probation when it should be unsubscribed'" filter="savegame"/>
                  <signal_cue_instantly cue="ARG_VS_XENON_Set_Subscription_Status" param="'unsubscribed'"/>
                </do_if>
              </patch>
              <cues>
                <cue name="ARG_VS_XENON_Introduction_Init">
                  <actions>
                    <do_if value="$Faction.relationto.{faction.player} ge $SubscriptionMinRel">
                      <signal_cue cue="ARG_VS_XENON_Introduction_Create_Offer"/>
                    </do_if>
                  </actions>
                </cue>
                <cue name="ARG_VS_XENON_Introduction_Create_Offer">
                  <conditions>
                    <check_any>
                      <check_all>
                        <event_player_relation_changed faction="$Faction"/>
                        <check_value value="event.param2.{1} ge $SubscriptionMinRel"/>
                      </check_all>
                      <event_cue_signalled/>
                    </check_any>
                  </conditions>
                  <actions>
                    <do_if value="not $Mission_Contact.isclass.npc or not $PlacementObject.isoperational">
                      <debug_text text="'Mission contact was not yet created for ' + $MissionGroup + '. Triggering creation now but location may not be near a war front. [Owen]'" filter="error"/>
                      <signal_cue_instantly cue="$ContactCreatorCue"/>
                    </do_if>
                    <do_if value="$Mission_Contact.isclass.npc and $PlacementObject.isoperational">
                      <debug_text text="'Player has passed the conditions for the intro mission to be available for group: ' + $MissionGroup" chance="$DebugChance"/>
                      <create_offer cue="$MissionIntroCue" actor="$Mission_Contact" type="missiontype.fight" name="readtext.{30210}.{1}" description="readtext.{30210}.{2}" difficulty="level.trivial" faction="$Faction" group="$MissionGroup">
                        <briefing>
                          <objective step="1" action="objective.talkto" object="$Mission_Contact"/>
                        </briefing>
                      </create_offer>
                      <!-- Guild Notification Mail -->
                      <run_actions ref="md.X4Ep1_War_Subscriptions.SendSubscriptionMail">
                        <param name="Page" value="30210"/>
                        <param name="Faction" value="$Faction"/>
                        <param name="Mission_Contact" value="$Mission_Contact"/>
                      </run_actions>
                    </do_if>
                    <do_else>
                      <debug_text text="'Unable to start intro mission due to missing mission client [Owen]'" filter="error"/>
                      <reset_cue cue="$MissionIntroCue"/>
                    </do_else>
                  </actions>
                  <cues>
                    <cue name="ARG_VS_XENON_Introduction_Offer_Accepted">
                      <conditions>
                        <event_object_signalled object="$Mission_Contact" param="'accept'"/>
                      </conditions>
                      <actions>
                        <create_mission cue="$MissionIntroCue" offercue="$MissionIntroCue"/>
                        <update_mission cue="$MissionIntroCue">
                          <briefing>
                            <objective step="1" action="objective.talkto" text="$Mission_Contact.knownname"/>
                          </briefing>
                        </update_mission>
                        <remove_offer cue="$MissionIntroCue"/>
                        <signal_cue_instantly cue="md.GenericMissions.DisconnectedActorObjectiveLibrary" param="table[                                               $actor = $Mission_Contact,                                               $object = $PlacementObject,                                               $missioncue = $MissionIntroCue,                                               $cancelcue = ARG_VS_XENON_Cancel_Intro_Talkto,                                               $libfailedcue = ARG_VS_XENON_Intro_Abort,                                               $objective = objective.talkto,                                               $debugchance = $DebugChance]"/>
                      </actions>
                    </cue>
                  </cues>
                </cue>
                <cue name="ARG_VS_XENON_Intro_Abort" version="2">
                  <conditions>
                    <check_any>
                      <event_mission_aborted cue="ARG_VS_XENON_Introduction"/>
                      <event_cue_signalled cue="ARG_VS_XENON_Player_Requests_Intro_Abort"/>
                      <event_cue_signalled/>
                      <event_object_destroyed object="$Mission_Contact"/>
                      <event_object_destroyed object="$PlacementObject"/>
                      <event_faction_deactivated faction="$Faction"/>
                    </check_any>
                  </conditions>
                  <actions>
                    <debug_text text="'Aborting due to ' + event.name" chance="$DebugChance"/>
                    <do_if value="$MissionIntroCue.hasmission">
                      <remove_mission cue="$MissionIntroCue" type="aborted"/>
                    </do_if>
                    <signal_cue_instantly cue="ARG_VS_XENON_Set_Subscription_Status" param="'unsubscribed'"/>
                    <reset_cue cue="ARG_VS_XENON_Introduction"/>
                  </actions>
                  <patch sinceversion="2" state="waiting">
                    <do_if value="ARG_VS_XENON_Introduction_Offer_Accepted.state == cuestate.complete and (not $TestShip? or not $TestShip.isoperational)">
                      <set_value name="$Patch_CheckLibraryInstance" exact="true"/>
                    </do_if>
                  </patch>
                </cue>
                <cue name="ARG_VS_XENON_Patch_Check_Talkto_Lib" onfail="cancel">
                  <conditions>
                    <check_value value="@$Patch_CheckLibraryInstance"/>
                  </conditions>
                  <actions>
                    <do_if value="not @md.GenericMissions.DisconnectedActorObjectiveLibrary.$Patch_ActiveMissionCues.indexof.{$MissionIntroCue}">
                      <debug_text text="'Talkto helper instance no longer exists for ' + $MissionIntroCue + ' - aborting intro mission'" filter="savegame"/>
                      <signal_cue cue="ARG_VS_XENON_Intro_Abort"/>
                    </do_if>
                    <remove_value name="$Patch_CheckLibraryInstance"/>
                  </actions>
                </cue>
                <cue name="ARG_VS_XENON_Cancel_Intro_Talkto" instantiate="true">
                  <conditions>
                    <event_cue_signalled/>
                  </conditions>
                </cue>
                <cue name="ARG_VS_XENON_Start_Intro_Mission" version="2">
                  <conditions>
                    <event_cue_signalled cue="ARG_VS_XENON_Player_Requested_Subscription"/>
                  </conditions>
                  <actions>
                    <signal_cue cue="ARG_VS_XENON_Cancel_Intro_Talkto"/>
                    <signal_cue_instantly cue="ARG_VS_XENON_Set_Subscription_Status" param="'probation'"/>
                    <set_value name="$IntroMissionSuccessful" exact="false"/>
                    <do_if value="$MissionIntroCue.hasmissionoffer">
                      <remove_offer cue="$MissionIntroCue"/>
                    </do_if>
                    <do_if value="not $MissionIntroCue.hasmission">
                      <create_mission cue="$MissionIntroCue" type="missiontype.fight" name="readtext.{30210}.{10}" description="readtext.{30210}.{11}" difficulty="level.trivial" faction="faction.argon" group="$MissionGroup"/>
                    </do_if>
                    <create_ship name="$TestShip" sector="player.sector">
                      <select faction="faction.xenon" size="class.ship_s"/>
                      <owner exact="faction.xenon"/>
                      <pilot actor="null"/>
                      <safepos object="player.entity" min="30km" max="40km"/>
                    </create_ship>
                    <update_mission cue="$MissionIntroCue">
                      <briefing>
                        <objective step="1" action="objective.destroy" object="$TestShip"/>
                      </briefing>
                    </update_mission>
                    <set_objective cue="$MissionIntroCue" action="objective.destroy" object="$TestShip"/>
                  </actions>
                  <patch sinceversion="2" state="complete">
                    <do_if value="$TestShip.isoperational">
                      <set_value name="$TestShip_Pos" exact="$TestShip.position"/>
                      <do_if value="[$TestShip_Pos.x, $TestShip_Pos.y, $TestShip_Pos.z].min lt 50km or [$TestShip_Pos.x, $TestShip_Pos.y, $TestShip_Pos.z].max gt 50km">
                        <debug_text text="'Warping ship ' + $TestShip + ' ' + $TestShip.knownname + ' to valid position'" filter="savegame"/>
                        <warp object="$TestShip" sector="$TestShip.sector">
                          <position object="$TestShip" space="$TestShip.sector"/>
                        </warp>
                      </do_if>
                      <remove_value name="$TestShip_Pos"/>
                    </do_if>
                  </patch>
                  <cues>
                    <cue name="ARG_VS_XENON_Start_Intro_Mission_Successful">
                      <conditions>
                        <event_object_destroyed object="$TestShip"/>
                      </conditions>
                      <actions>
                        <update_mission cue="$MissionIntroCue">
                          <briefing>
                            <objective step="2" action="objective.talkto" object="$Mission_Contact"/>
                          </briefing>
                        </update_mission>
                        <set_value name="$IntroMissionSuccessful" exact="true"/>
                        <signal_cue_instantly cue="md.GenericMissions.DisconnectedActorObjectiveLibrary" param="table[                                               $actor = $Mission_Contact,                                               $object = $PlacementObject,                                               $missioncue = $MissionIntroCue,                                               $cancelcue = ARG_VS_XENON_Start_Intro_Mission_Remove_Mission,                                               $libfailedcue = ARG_VS_XENON_Intro_Abort,                                               $objective = objective.talkto,                                               $step = 2,                                               $debugchance = $DebugChance]"/>
                      </actions>
                    </cue>
                    <cue name="ARG_VS_XENON_Start_Intro_Mission_Remove_Mission">
                      <conditions>
                        <event_cue_signalled/>
                      </conditions>
                      <actions>
                        <remove_mission cue="$MissionIntroCue" type="completed"/>
                        <reset_cue cue="ARG_VS_XENON_Introduction"/>
                      </actions>
                    </cue>
                    <cue name="ARG_VS_XENON_Start_Intro_Mission_End">
                      <conditions>
                        <event_conversation_started actor="$Mission_Contact"/>
                        <check_value value="$IntroMissionSuccessful"/>
                      </conditions>
                      <actions>
                        <allow_conversation_escape enabled="false"/>
                        <signal_cue cue="ARG_VS_XENON_Start_Intro_Mission_Remove_Mission"/>
                      </actions>
                    </cue>
                  </cues>
                </cue>
              </cues>
            </cue>
            <!--
            ####################
            THREADS
            ####################-->
            <cue name="ARG_VS_XENON_Reinforce_Defence">
              <cues>
                <cue name="ARG_VS_XENON_Reinforce_Defence_Register" version="3">
                  <actions>
                    <!--Argon Vs Xenon - Reinforce Defence-->
                    <set_value name="$ThreadID" exact="'$arg_vs_xenon_reinforce_defence'"/>
                    <set_value name="$Thread" exact="table[                            $ID = $ThreadID,                            $Faction = $Faction,                            $EnemyFaction = $EnemyFaction,                            $MissionGroup = $MissionGroup,                            $ThreadConditionLibs = [Situation__Cold_War, Situation__Contention, Situation__Defence_Prep],                            $ThreadType = 'sequential',                            $MissionType = missiontype.protect,                            $Difficulty = level.medium,                            $SubMissionLib = ARG_VS_XENON_Reinforce_Defence_Get_Submissions,                            $NameLib = ARG_VS_XENON_Reinforce_Defence_Construct_Name,                            $DescriptionLib = ARG_VS_XENON_Reinforce_Defence_Construct_Description,                            $RewardLib = ARG_VS_XENON_Reinforce_Defence_Construct_Reward,                            $MinMissions = 4,                            $MaxMissions = 5,                            $ThreadAbortRelation = -0.00064]"/>
                    <assert value="not $ManagerCue.$ThreadDefinitions.{$ThreadID}?" text="'Thread definition ' + $ThreadID + ' already exists in this table [Owen]'"/>
                    <set_value name="$ManagerCue.$ThreadDefinitions.{$ThreadID}" exact="$Thread"/>
                  </actions>
                  <patch sinceversion="3" state="complete">
                    <set_value name="$ManagerCue.$ThreadDefinitions.$arg_vs_xenon_reinforce_defence.$RewardLib" exact="ARG_VS_XENON_Reinforce_Defence_Construct_Reward"/>
                  </patch>
                </cue>
                <!--Called from CalculateThreads. Result saved to $New_Thread. Namespace is not this parent.-->
                <library name="ARG_VS_XENON_Reinforce_Defence_Get_Submissions">
                  <actions>
                    <set_value name="$Submissions" exact="table[]"/>
                    <set_value name="$Submissions.$deploy_lasertowers" exact="table[$Cue = md.X4Ep1_War_Subscriptions.DeployInPlace__Standard,    $MissionType = missiontype.drop,  $Page = 30210, $TextOffset = [101000], $Sequence = -1 ]"/>
                    <set_value name="$Submissions.$deploy_mines" exact="table[$Cue = md.X4Ep1_War_Subscriptions.DeployInPlace__Standard,    $MissionType = missiontype.drop,  $Page = 30210, $TextOffset = [101100, 101200], $Sequence = -1 ]"/>
                    <set_value name="$Submissions.$achieve_coverage__host_sector" exact="table[$Cue = md.X4Ep1_War_Subscriptions.Achieve_Coverage__Standard, $MissionType = missiontype.drop,  $Page = 30210, $TextOffset = [102000], $Sequence = -1 ]"/>
                    <set_value name="$Submissions.$repair__damagedship" exact="table[$Cue = md.X4Ep1_War_Subscriptions.RepairObject__Standard,     $MissionType = missiontype.repair,  $Page = 30210, $TextOffset = [103000], $Sequence = -1 ]"/>
                    <set_value name="$Submissions.$taxi__specialist" exact="table[$Cue = md.X4Ep1_War_Subscriptions.Passenger_Transport__Standard, $MissionType = missiontype.transport, $Page = 30210, $TextOffset = [104000], $Sequence = -1 ]"/>
                    <set_value name="$Submissions.$deliver__crew" exact="table[$Cue = md.X4Ep1_War_Subscriptions.Get_Exact_Crew__Standard, $MissionType = missiontype.deliver, $Page = 30210, $TextOffset = [110000, 110100], $Sequence = -1 ]"/>
                    <set_value name="$New_Thread.$Submissions" exact="$Submissions"/>
                  </actions>
                </library>
                <!--Called from CalculateThreads. Result saved to $New_Thread. Namespace is not this parent.-->
                <library name="ARG_VS_XENON_Reinforce_Defence_Construct_Name">
                  <actions>
                    <do_any>
                      <set_value name="this.$Name" exact="{30210, 3000}"/>
                      <set_value name="this.$Name" exact="{30210, 3001}"/>
                      <set_value name="this.$Name" exact="{30210, 3002}"/>
                    </do_any>
                  </actions>
                </library>
                <!--Called from CalculateThreads where several values are set to help decide the briefing text. Result saved to $New_Thread. Namespace is not this parent.-->
                <library name="ARG_VS_XENON_Reinforce_Defence_Construct_Description">
                  <actions>
                    <do_if value="$ThreadMood == 'negative'">
                      <do_any>
                        <set_value name="this.$Description" exact="{30210, 3101}"/>
                        <set_value name="this.$Description" exact="{30210, 3102}"/>
                      </do_any>
                      <set_value name="this.$Description" operation="add" exact="' ' + {30210, 3111}"/>
                      <do_any>
                        <set_value name="this.$Description" operation="add" exact="'\n' + {30210, 3121}"/>
                        <set_value name="this.$Description" operation="add" exact="'\n' + {30210, 3122}"/>
                      </do_any>
                    </do_if>
                    <do_elseif value="$ThreadMood == 'positive'">
                      <do_any>
                        <set_value name="this.$Description" exact="{30210, 3201}"/>
                        <set_value name="this.$Description" exact="{30210, 3202}"/>
                      </do_any>
                      <set_value name="this.$Description" operation="add" exact="' ' + {30210, 3211}"/>
                      <set_value name="this.$Description" operation="add" exact="'\n' + {30210, 3221}"/>
                    </do_elseif>
                  </actions>
                </library>
                <library name="ARG_VS_XENON_Reinforce_Defence_Construct_Reward">
                  <actions>
                    <do_any>
                      <set_value name="this.$RewardObject" exact="[ware.paintmod_0076]" weight="15" comment="special arg vs xen subscription paint"/>
                      <set_value name="this.$RewardObject" exact="[ware.paintmod_0002]" weight="15" comment="basic argon faction paint"/>
                      <set_value name="this.$RewardObject" exact="[[ware.modpart_tuningsoftware, ware.modpart_shieldgeneratorcoil_t1, ware.modpart_shieldgeneratorcoil_t2].random]" weight="15" comment="modpart"/>
                      <set_value name="this.$RewardObject" exact="[ware.modpart_tuningsoftware, [ware.modpart_shieldgeneratorcoil_t1, ware.modpart_shieldgeneratorcoil_t2].random]" weight="15" comment="complete mod"/>
                      <set_value name="this.$RewardObject" exact="[ware.modpart_shieldgeneratorcoil_t3]" weight="5" comment="rare modpart"/>
                      <set_value name="this.$RewardObject" exact="[[ware.inv_seminar_piloting_2, ware.inv_seminar_piloting_2, ware.inv_seminar_management_2].random]" weight="15"/>
                      <set_value name="this.$RewardObject" exact="[[ware.inv_seminar_piloting_3, ware.inv_seminar_piloting_3, ware.inv_seminar_management_3].random]" weight="4"/>
                      <set_value name="this.$RewardObject" exact="[[ware.inv_seminar_piloting_4, ware.inv_seminar_management_4].random]" weight="1"/>
                    </do_any>
                    <run_actions ref="md.LIB_Generic.GenerateRewardText" result="this.$RewardText">
                      <param name="RewardObject" value="this.$RewardObject"/>
                    </run_actions>
                  </actions>
                </library>
              </cues>
            </cue>
            <cue name="ARG_VS_XENON_Construct_Defence">
              <cues>
                <cue name="ARG_VS_XENON_Construct_Defence_Register" version="3">
                  <actions>
                    <!--Argon Vs Xenon - Construct Defence-->
                    <set_value name="$ThreadID" exact="'$arg_vs_xenon_construct_defence'"/>
                    <set_value name="$Thread" exact="table[                            $ID = $ThreadID,                            $Faction = $Faction,                            $EnemyFaction = $EnemyFaction,                            $MissionGroup = $MissionGroup,                            $ThreadConditionLibs = [Situation__Cold_War, Situation__Contention, Situation__Defence_Prep, Situation__Pushback],                            $ThreadType = 'sequential',                            $MissionType = missiontype.build,                            $Difficulty = level.hard,                            $SubMissionLib = ARG_VS_XENON_Construct_Defence_Get_Submissions,                            $NameLib = ARG_VS_XENON_Construct_Defence_Construct_Name,                            $DescriptionLib = ARG_VS_XENON_Construct_Defence_Construct_Description,                            $RewardLib = ARG_VS_XENON_Construct_Defence_Construct_Reward,                            $MinMissions = 1,                            $MaxMissions = 2,                            $ThreadAbortRelation = -0.00064]"/>
                    <assert value="not $ManagerCue.$ThreadDefinitions.{$ThreadID}?" text="'Thread definition ' + $ThreadID + ' already exists in this table [Owen]'"/>
                    <set_value name="$ManagerCue.$ThreadDefinitions.{$ThreadID}" exact="$Thread"/>
                  </actions>
                  <patch sinceversion="2">
                    <append_to_list name="$Thread.$ThreadConditionLibs" exact="Situation__Pushback"/>
                  </patch>
                  <patch sinceversion="3" state="complete">
                    <set_value name="$ManagerCue.$ThreadDefinitions.$arg_vs_xenon_construct_defence.$RewardLib" exact="ARG_VS_XENON_Construct_Defence_Construct_Reward"/>
                  </patch>
                </cue>
                <!--Called from CalculateThreads. Result saved to $New_Thread. Namespace is not this parent.-->
                <library name="ARG_VS_XENON_Construct_Defence_Get_Submissions">
                  <actions>
                    <set_value name="$Submissions" exact="table[]"/>
                    <set_value name="$Submissions.$build__defencestation" exact="table[$Cue = md.X4Ep1_War_Subscriptions.Build_Station__Standard, $MissionType = missiontype.build, $Page = 30210, $TextOffset = [105000], $Sequence = -1 ]"/>
                    <set_value name="$Submissions.$build__fleet" exact="table[$Cue = md.X4Ep1_War_Subscriptions.Get_Exact_Fleet__Standard, $MissionType = missiontype.build, $Page = 30210, $TextOffset = [120000], $Sequence = -1 ]"/>
                    <set_value name="$New_Thread.$Submissions" exact="$Submissions"/>
                  </actions>
                </library>
                <!--Called from CalculateThreads. Result saved to $New_Thread. Namespace is not this parent.-->
                <library name="ARG_VS_XENON_Construct_Defence_Construct_Name">
                  <actions>
                    <do_any>
                      <set_value name="this.$Name" exact="{30210, 4000}"/>
                      <set_value name="this.$Name" exact="{30210, 4001}"/>
                    </do_any>
                  </actions>
                </library>
                <!--Called from CalculateThreads where several values are set to help decide the briefing text. Result saved to $New_Thread. Namespace is not this parent.-->
                <library name="ARG_VS_XENON_Construct_Defence_Construct_Description">
                  <actions>
                    <do_if value="$ThreadMood == 'negative'">
                      <do_any>
                        <set_value name="this.$Description" exact="{30210, 4101}"/>
                        <set_value name="this.$Description" exact="{30210, 4102}"/>
                      </do_any>
                      <set_value name="this.$Description" operation="add" exact="' ' + {30210, 4111}"/>
                      <do_any>
                        <set_value name="this.$Description" operation="add" exact="'\n' + {30210, 4121}"/>
                        <set_value name="this.$Description" operation="add" exact="'\n' + {30210, 4122}"/>
                      </do_any>
                    </do_if>
                    <do_elseif value="$ThreadMood == 'positive'">
                      <do_any>
                        <set_value name="this.$Description" exact="{30210, 4201}"/>
                        <set_value name="this.$Description" exact="{30210, 4202}"/>
                      </do_any>
                      <set_value name="this.$Description" operation="add" exact="' ' + {30210, 4211}"/>
                      <do_any>
                        <set_value name="this.$Description" operation="add" exact="'\n' + {30210, 4221}"/>
                        <set_value name="this.$Description" operation="add" exact="'\n' + {30210, 4222}"/>
                      </do_any>
                    </do_elseif>
                  </actions>
                </library>
                <library name="ARG_VS_XENON_Construct_Defence_Construct_Reward">
                  <actions>
                    <do_if value="true" chance="70">
                      <!--mod(part) reward-->
                      <do_any>
                        <set_value name="this.$RewardObject" exact="[ware.paintmod_0076]" weight="15" comment="special arg vs xen subscription paint"/>
                        <set_value name="this.$RewardObject" exact="[ware.paintmod_0002]" weight="15" comment="basic argon faction paint"/>
                        <set_value name="this.$RewardObject" exact="[[ware.modpart_tuningsoftware, ware.modpart_shieldgeneratorcoil_t1, ware.modpart_shieldgeneratorcoil_t2].random]" weight="15" comment="modpart"/>
                        <set_value name="this.$RewardObject" exact="[ware.modpart_tuningsoftware, [ware.modpart_shieldgeneratorcoil_t1, ware.modpart_shieldgeneratorcoil_t2].random]" weight="15" comment="complete mod"/>
                        <set_value name="this.$RewardObject" exact="[ware.modpart_shieldgeneratorcoil_t3]" weight="5" comment="rare modpart"/>
                        <set_value name="this.$RewardObject" exact="[[ware.inv_seminar_piloting_2, ware.inv_seminar_piloting_2, ware.inv_seminar_management_2].random]" weight="15"/>
                        <set_value name="this.$RewardObject" exact="[[ware.inv_seminar_piloting_3, ware.inv_seminar_piloting_3, ware.inv_seminar_management_3].random]" weight="4"/>
                        <set_value name="this.$RewardObject" exact="[[ware.inv_seminar_piloting_4, ware.inv_seminar_management_4].random]" weight="1"/>
                      </do_any>
                    </do_if>
                    <do_else>
                      <!-- setup the ship-reward -->
                      <set_value name="this.$RewardObject" exact="[]"/>
                      <set_value name="$shipcargo" exact="[[2500, ware.nividium]]"/>
                      <set_value name="$Faction" exact="faction.argon"/>
                      <run_actions ref="md.LIB_Generic.FindShipMacroForCargo" result="$shipmacro">
                        <param name="shipcargo" value="$shipcargo"/>
                        <param name="Faction" value="$Faction"/>
                      </run_actions>
                      <run_actions ref="md.LIB_Generic.FindNearestStationForFaction" result="$SuitableStation">
                        <param name="Faction" value="$Faction"/>
                      </run_actions>
                      <do_if value="$shipmacro and $SuitableStation">
                        <generate_loadout result="$shiploadout" macro="$shipmacro" level="[0.3, 0.4, 0.5, 0.6, 0.7].random"/>
                        <set_value name="$MaxCrewCapacity" exact="$shipmacro.people.capacity"/>
                        <set_value name="$RewardShip" exact="table[                             $macro        = $shipmacro,                             $loadout      = $shiploadout,                              $cargo        = $shipcargo,                              $station      = $SuitableStation,                              $pilot        = [faction.argon, [tag.pilot], [8,10].random],                             $bulkcrew     = [$MaxCrewCapacity, ['argon_military_crew', 'argon_freighter_crew'].random, 100],                              $mods         = [ware.mod_shield_capacity_01_mk3, ware.mod_engine_travelthrust_02_mk2],                             $paintmod     = [ware.paintmod_0072].random,                         ]"/>
                        <append_to_list name="this.$RewardObject" exact="$RewardShip"/>
                      </do_if>
                    </do_else>
                    <run_actions ref="md.LIB_Generic.GenerateRewardText" result="this.$RewardText">
                      <param name="RewardObject" value="this.$RewardObject"/>
                    </run_actions>
                  </actions>
                </library>
              </cues>
            </cue>
            <cue name="ARG_VS_XENON_Secure_Resources">
              <cues>
                <cue name="ARG_VS_XENON_Secure_Resources_Register" version="3">
                  <actions>
                    <!--Argon Vs Xenon - Secure Resources-->
                    <set_value name="$ThreadID" exact="'$arg_vs_xenon_secure_resources'"/>
                    <set_value name="$Thread" exact="table[                            $ID = $ThreadID,                            $Faction = $Faction,                            $EnemyFaction = $EnemyFaction,                            $MissionGroup = $MissionGroup,                            $ThreadConditionLibs = [Situation__Cold_War, Situation__Contention, Situation__Defence_Prep, Situation__Invasion_Prep],                            $ThreadType = 'sequential',                            $MissionType = missiontype.trade,                            $Difficulty = level.medium,                            $SubMissionLib = ARG_VS_XENON_Secure_Resources_Get_Submissions,                            $NameLib = ARG_VS_XENON_Secure_Resources_Construct_Name,                            $DescriptionLib = ARG_VS_XENON_Secure_Resources_Construct_Description,                            $RewardLib = ARG_VS_XENON_Secure_Resources_Construct_Reward,                            $MinMissions = 4,                            $MaxMissions = 5,                            $ThreadAbortRelation = -0.00064]"/>
                    <assert value="not $ManagerCue.$ThreadDefinitions.{$ThreadID}?" text="'Thread definition ' + $ThreadID + ' already exists in this table [Owen]'"/>
                    <set_value name="$ManagerCue.$ThreadDefinitions.{$ThreadID}" exact="$Thread"/>
                  </actions>
                  <patch sinceversion="3" state="complete">
                    <set_value name="$ManagerCue.$ThreadDefinitions.$arg_vs_xenon_secure_resources.$RewardLib" exact="ARG_VS_XENON_Secure_Resources_Construct_Reward"/>
                  </patch>
                </cue>
                <!--Called from CalculateThreads. Result saved to $New_Thread. Namespace is not this parent.-->
                <library name="ARG_VS_XENON_Secure_Resources_Get_Submissions">
                  <actions>
                    <set_value name="$Submissions" exact="table[]"/>
                    <set_value name="$Submissions.$large_supply__food" exact="table[$Cue = md.X4Ep1_War_Subscriptions.Large_Supply__Standard,     $MissionType = missiontype.trade, $Page = 30210, $TextOffset = [100000], $Sequence = -1 ]"/>
                    <set_value name="$Submissions.$large_supply__shiptech" exact="table[$Cue = md.X4Ep1_War_Subscriptions.Large_Supply__Standard,     $MissionType = missiontype.trade, $Page = 30210, $TextOffset = [100100], $Sequence = -1 ]"/>
                    <set_value name="$Submissions.$deploy_lasertowers_at_resources" exact="table[$Cue = md.X4Ep1_War_Subscriptions.DeployInPlace__Standard,    $MissionType = missiontype.drop,  $Page = 30210, $TextOffset = [101300], $Sequence = -1 ]"/>
                    <set_value name="$Submissions.$find_resources__ores" exact="table[$Cue = md.X4Ep1_War_Subscriptions.Find_Resources__Standard,   $MissionType = missiontype.find,  $Page = 30210, $TextOffset = [106000], $Sequence = -1 ]"/>
                    <set_value name="$Submissions.$supply_station" exact="table[$Cue = md.X4Ep1_War_Subscriptions.Supply_Factory__Standard,   $MissionType = missiontype.restock,  $Page = 30210, $TextOffset = [130000], $Sequence = -1 ]"/>
                    <set_value name="$New_Thread.$Submissions" exact="$Submissions"/>
                  </actions>
                </library>
                <!--Called from CalculateThreads. Result saved to $New_Thread. Namespace is not this parent.-->
                <library name="ARG_VS_XENON_Secure_Resources_Construct_Name">
                  <actions>
                    <do_any>
                      <set_value name="this.$Name" exact="{30210, 5000}"/>
                      <set_value name="this.$Name" exact="{30210, 5001}"/>
                    </do_any>
                  </actions>
                </library>
                <!--Called from CalculateThreads where several values are set to help decide the briefing text. Result saved to $New_Thread. Namespace is not this parent.-->
                <library name="ARG_VS_XENON_Secure_Resources_Construct_Description">
                  <actions>
                    <do_if value="$ThreadMood == 'negative'">
                      <do_any>
                        <set_value name="this.$Description" exact="{30210, 5101}"/>
                        <set_value name="this.$Description" exact="{30210, 5102}"/>
                      </do_any>
                      <set_value name="this.$Description" operation="add" exact="' ' + {30210, 5111}"/>
                      <do_any>
                        <set_value name="this.$Description" operation="add" exact="'\n' + {30210, 5121}"/>
                        <set_value name="this.$Description" operation="add" exact="'\n' + {30210, 5122}"/>
                      </do_any>
                    </do_if>
                    <do_elseif value="$ThreadMood == 'positive'">
                      <do_any>
                        <set_value name="this.$Description" exact="{30210, 5201}"/>
                        <set_value name="this.$Description" exact="{30210, 5202}"/>
                      </do_any>
                      <set_value name="this.$Description" operation="add" exact="' ' + {30210, 5211}"/>
                      <set_value name="this.$Description" operation="add" exact="'\n' + {30210, 5221}"/>
                    </do_elseif>
                  </actions>
                </library>
                <library name="ARG_VS_XENON_Secure_Resources_Construct_Reward">
                  <actions>
                    <do_any>
                      <set_value name="this.$RewardObject" exact="[ware.paintmod_0076]" weight="15" comment="special arg vs xen subscription paint"/>
                      <set_value name="this.$RewardObject" exact="[ware.paintmod_0002]" weight="15" comment="basic argon faction paint"/>
                      <set_value name="this.$RewardObject" exact="[[ware.modpart_extendedfuelcontainer, ware.modpart_nividiumoxide, ware.modpart_enginefuelinjector_t1, ware.modpart_enginefuelinjector_t2].random]" weight="15" comment="modpart"/>
                      <set_value name="this.$RewardObject" exact="[ware.modpart_extendedfuelcontainer, ware.modpart_nividiumoxide, [ware.modpart_enginefuelinjector_t1, ware.modpart_enginefuelinjector_t2].random]" weight="15" comment="complete mod"/>
                      <set_value name="this.$RewardObject" exact="[ware.modpart_enginefuelinjector_t3]" weight="5" comment="rare modpart"/>
                      <set_value name="this.$RewardObject" exact="[[ware.inv_seminar_piloting_2, ware.inv_seminar_piloting_2, ware.inv_seminar_management_2].random]" weight="15"/>
                      <set_value name="this.$RewardObject" exact="[[ware.inv_seminar_piloting_3, ware.inv_seminar_piloting_3, ware.inv_seminar_management_3].random]" weight="4"/>
                      <set_value name="this.$RewardObject" exact="[[ware.inv_seminar_piloting_4, ware.inv_seminar_management_4].random]" weight="1"/>
                    </do_any>
                    <run_actions ref="md.LIB_Generic.GenerateRewardText" result="this.$RewardText">
                      <param name="RewardObject" value="this.$RewardObject"/>
                    </run_actions>
                  </actions>
                </library>
              </cues>
            </cue>
            <cue name="ARG_VS_XENON_Preemptive_Offensive">
              <cues>
                <cue name="ARG_VS_XENON_Preemptive_Offensive_Register" version="3">
                  <actions>
                    <!--Argon Vs Xenon - Preemptive Offensive-->
                    <set_value name="$ThreadID" exact="'$arg_vs_xenon_preemptive_offensive'"/>
                    <set_value name="$Thread" exact="table[                            $ID = $ThreadID,                            $Faction = $Faction,                            $EnemyFaction = $EnemyFaction,                            $MissionGroup = $MissionGroup,                            $ThreadConditionLibs = [Situation__Cold_War, Situation__Invasion_Prep],                            $ThreadType = 'sequential',                            $MissionType = missiontype.fight,                            $Difficulty = level.hard,                            $SubMissionLib = ARG_VS_XENON_Preemptive_Offensive_Get_Submissions,                            $NameLib = ARG_VS_XENON_Preemptive_Offensive_Construct_Name,                            $DescriptionLib = ARG_VS_XENON_Preemptive_Offensive_Construct_Description,                            $RewardLib = ARG_VS_XENON_Preemptive_Offensive_Construct_Reward,                            $MinMissions = 4,                            $MaxMissions = 5,                            $ThreadAbortRelation = -0.00064]"/>
                    <assert value="not $ManagerCue.$ThreadDefinitions.{$ThreadID}?" text="'Thread definition ' + $ThreadID + ' already exists in this table [Owen]'"/>
                    <set_value name="$ManagerCue.$ThreadDefinitions.{$ThreadID}" exact="$Thread"/>
                  </actions>
                  <patch sinceversion="3" state="complete">
                    <set_value name="$ManagerCue.$ThreadDefinitions.$arg_vs_xenon_preemptive_offensive.$RewardLib" exact="ARG_VS_XENON_Preemptive_Offensive_Construct_Reward"/>
                  </patch>
                </cue>
                <!--Called from CalculateThreads. Result saved to $New_Thread. Namespace is not this parent.-->
                <library name="ARG_VS_XENON_Preemptive_Offensive_Get_Submissions">
                  <actions>
                    <set_value name="$Submissions" exact="table[]"/>
                    <!--Assassinate missions are never Valid if the target is Xenon, since they do not have a pilot to kill-->
                    <!--<set_value name="$Submissions.$assassination"
                                 exact="table[$Cue = md.X4Ep1_War_Subscriptions.Assassinate__Standard, $MissionType = missiontype.kill,  $Page = 30210, $TextOffset = [107000, 107100], $Sequence = -1 ]"/>-->
                    <set_value name="$Submissions.$board_ship" exact="table[$Cue = md.X4Ep1_War_Subscriptions.BoardShip__Standard,   $MissionType = missiontype.board, $Page = 30210, $TextOffset = [108000], $Sequence = -1 ]"/>
                    <set_value name="$Submissions.$destroy_rare_ship" exact="table[$Cue = md.X4Ep1_War_Subscriptions.DestroyRarelyOnSight__Standard,   $MissionType = missiontype.destroy, $Page = 30210, $TextOffset = [140000], $Sequence = -1 ]"/>
                    <set_value name="$Submissions.$destroy_station_turrets" exact="table[$Cue = md.X4Ep1_War_Subscriptions.DestroyStation__Standard,   $MissionType = missiontype.destroy, $Page = 30210, $TextOffset = [180000], $Sequence = -1 ]"/>
                    <set_value name="$Submissions.$destroy_objects_mines" exact="table[$Cue = md.X4Ep1_War_Subscriptions.Destroy_Objects__Clear_Explosives, $MissionType = missiontype.destroy, $Page = 30210, $TextOffset = [160300, 160400], $Sequence = -1 ]"/>
                    <set_value name="$New_Thread.$Submissions" exact="$Submissions"/>
                  </actions>
                </library>
                <!--Called from CalculateThreads. Result saved to $New_Thread. Namespace is not this parent.-->
                <library name="ARG_VS_XENON_Preemptive_Offensive_Construct_Name">
                  <actions>
                    <do_any>
                      <set_value name="this.$Name" exact="{30210, 6000}"/>
                      <set_value name="this.$Name" exact="{30210, 6001}"/>
                    </do_any>
                  </actions>
                </library>
                <!--Called from CalculateThreads where several values are set to help decide the briefing text. Result saved to $New_Thread. Namespace is not this parent.-->
                <library name="ARG_VS_XENON_Preemptive_Offensive_Construct_Description">
                  <actions>
                    <do_if value="$ThreadMood == 'negative'">
                      <do_any>
                        <set_value name="this.$Description" exact="{30210, 6101}"/>
                        <set_value name="this.$Description" exact="{30210, 6102}"/>
                      </do_any>
                      <set_value name="this.$Description" operation="add" exact="' ' + {30210, 6111}"/>
                      <do_any>
                        <set_value name="this.$Description" operation="add" exact="'\n' + {30210, 6121}"/>
                        <set_value name="this.$Description" operation="add" exact="'\n' + {30210, 6122}"/>
                      </do_any>
                    </do_if>
                    <do_elseif value="$ThreadMood == 'positive'">
                      <do_any>
                        <set_value name="this.$Description" exact="{30210, 6201}"/>
                        <set_value name="this.$Description" exact="{30210, 6202}"/>
                      </do_any>
                      <set_value name="this.$Description" operation="add" exact="' ' + {30210, 6211}"/>
                      <set_value name="this.$Description" operation="add" exact="'\n' + {30210, 6221}"/>
                    </do_elseif>
                  </actions>
                </library>
                <library name="ARG_VS_XENON_Preemptive_Offensive_Construct_Reward">
                  <actions>
                    <do_any>
                      <set_value name="this.$RewardObject" exact="[ware.paintmod_0076]" weight="15" comment="special arg vs xen subscription paint"/>
                      <set_value name="this.$RewardObject" exact="[ware.paintmod_0002]" weight="15" comment="basic argon faction paint"/>
                      <set_value name="this.$RewardObject" exact="[[ware.modpart_highenergycatalyst, ware.modpart_tuningsoftware, ware.modpart_weaponchamber_t1, ware.modpart_weaponchamber_t2].random]" weight="15" comment="modpart"/>
                      <set_value name="this.$RewardObject" exact="[ware.modpart_highenergycatalyst, ware.modpart_tuningsoftware, [ware.modpart_weaponchamber_t1, ware.modpart_weaponchamber_t2].random]" weight="15" comment="complete mod"/>
                      <set_value name="this.$RewardObject" exact="[ware.modpart_weaponchamber_t3]" weight="5" comment="rare modpart"/>
                      <set_value name="this.$RewardObject" exact="[[ware.inv_seminar_piloting_2, ware.inv_seminar_piloting_2, ware.inv_seminar_management_2].random]" weight="15"/>
                      <set_value name="this.$RewardObject" exact="[[ware.inv_seminar_piloting_3, ware.inv_seminar_piloting_3, ware.inv_seminar_management_3].random]" weight="4"/>
                      <set_value name="this.$RewardObject" exact="[[ware.inv_seminar_piloting_4, ware.inv_seminar_management_4].random]" weight="1"/>
                    </do_any>
                    <run_actions ref="md.LIB_Generic.GenerateRewardText" result="this.$RewardText">
                      <param name="RewardObject" value="this.$RewardObject"/>
                    </run_actions>
                  </actions>
                </library>
              </cues>
            </cue>
            <cue name="ARG_VS_XENON_Station_Offensive">
              <cues>
                <cue name="ARG_VS_XENON_Station_Offensive_Register">
                  <actions>
                    <!--Argon Vs Xenon - Station Offensive-->
                    <set_value name="$ThreadID" exact="'$arg_vs_xenon_station_offensive'"/>
                    <set_value name="$Thread" exact="table[                            $ID = $ThreadID,                            $Faction = $Faction,                            $EnemyFaction = $EnemyFaction,                            $MissionGroup = $MissionGroup,                            $ThreadConditionLibs = [Situation__Invasion_Prep, Situation__Invading, Situation__Pushback],                            $ThreadType = 'sequential',                            $MissionType = missiontype.destroy,                            $Difficulty = level.veryhard,                            $SubMissionLib = ARG_VS_XENON_Station_Offensive_Get_Submissions,                            $NameLib = ARG_VS_XENON_Station_Offensive_Construct_Name,                            $DescriptionLib = ARG_VS_XENON_Station_Offensive_Construct_Description,                            $RewardLib = ARG_VS_XENON_Station_Offensive_Construct_Reward,                            $MinMissions = 1,                            $MaxMissions = 1,                            $ThreadAbortRelation = -0.00064]"/>
                    <assert value="not $ManagerCue.$ThreadDefinitions.{$ThreadID}?" text="'Thread definition ' + $ThreadID + ' already exists in this table [Owen]'"/>
                    <set_value name="$ManagerCue.$ThreadDefinitions.{$ThreadID}" exact="$Thread"/>
                  </actions>
                </cue>
                <!--Called from CalculateThreads. Result saved to $New_Thread. Namespace is not this parent.-->
                <library name="ARG_VS_XENON_Station_Offensive_Get_Submissions">
                  <actions>
                    <set_value name="$Submissions" exact="table[]"/>
                    <set_value name="$Submissions.$destroy_station" exact="table[$Cue = md.X4Ep1_War_Subscriptions.DestroyStation__Standard,   $MissionType = missiontype.destroy, $Page = 30210, $TextOffset = [170000], $Sequence = -1 ]"/>
                    <set_value name="$New_Thread.$Submissions" exact="$Submissions"/>
                  </actions>
                </library>
                <!--Called from CalculateThreads. Result saved to $New_Thread. Namespace is not this parent.-->
                <library name="ARG_VS_XENON_Station_Offensive_Construct_Name">
                  <actions>
                    <do_any>
                      <set_value name="this.$Name" exact="{30210, 9000}"/>
                    </do_any>
                  </actions>
                </library>
                <!--Called from CalculateThreads where several values are set to help decide the briefing text. Result saved to $New_Thread. Namespace is not this parent.-->
                <library name="ARG_VS_XENON_Station_Offensive_Construct_Description">
                  <actions>
                    <do_if value="$ThreadMood == 'negative'">
                      <do_any>
                        <set_value name="this.$Description" exact="{30210, 9101}"/>
                        <set_value name="this.$Description" exact="{30210, 9102}"/>
                      </do_any>
                      <set_value name="this.$Description" operation="add" exact="' ' + {30210, 9111}"/>
                      <do_any>
                        <set_value name="this.$Description" operation="add" exact="'\n' + {30210, 9121}"/>
                        <set_value name="this.$Description" operation="add" exact="'\n' + {30210, 9122}"/>
                      </do_any>
                    </do_if>
                    <do_elseif value="$ThreadMood == 'positive'">
                      <do_any>
                        <set_value name="this.$Description" exact="{30210, 9201}"/>
                        <set_value name="this.$Description" exact="{30210, 9202}"/>
                      </do_any>
                      <set_value name="this.$Description" operation="add" exact="' ' + {30210, 9211}"/>
                      <set_value name="this.$Description" operation="add" exact="'\n' + {30210, 9221}"/>
                    </do_elseif>
                  </actions>
                </library>
                <library name="ARG_VS_XENON_Station_Offensive_Construct_Reward">
                  <actions>
                    <do_any>
                      <set_value name="this.$RewardObject" exact="[ware.paintmod_0076]" weight="10" comment="special arg vs xen subscription paint"/>
                      <set_value name="this.$RewardObject" exact="[ware.paintmod_0002]" weight="10" comment="basic argon faction paint"/>
                      <set_value name="this.$RewardObject" exact="[[ware.modpart_highenergycatalyst, ware.modpart_tuningsoftware, ware.modpart_weaponchamber_t1, ware.modpart_weaponchamber_t2].random]" weight="5" comment="modpart"/>
                      <set_value name="this.$RewardObject" exact="[ware.modpart_highenergycatalyst, ware.modpart_tuningsoftware, [ware.modpart_weaponchamber_t1, ware.modpart_weaponchamber_t2].random]" weight="10" comment="complete mod"/>
                      <set_value name="this.$RewardObject" exact="[ware.modpart_weaponchamber_t3]" weight="10" comment="rare modpart"/>
                      <set_value name="this.$RewardObject" exact="[[ware.inv_seminar_piloting_3, ware.inv_seminar_piloting_3, ware.inv_seminar_management_3].random]" weight="6"/>
                      <set_value name="this.$RewardObject" exact="[[ware.inv_seminar_piloting_4, ware.inv_seminar_piloting_4, ware.inv_seminar_management_4].random]" weight="4"/>
                    </do_any>
                    <run_actions ref="md.LIB_Generic.GenerateRewardText" result="this.$RewardText">
                      <param name="RewardObject" value="this.$RewardObject"/>
                    </run_actions>
                  </actions>
                </library>
              </cues>
            </cue>
            <cue name="ARG_VS_XENON_Gather_Intel">
              <cues>
                <cue name="ARG_VS_XENON_Preemptive_Gather_Intel" version="3">
                  <actions>
                    <!--Argon Vs Xenon - Gather Intel-->
                    <set_value name="$ThreadID" exact="'$arg_vs_xenon_gather_intel'"/>
                    <set_value name="$Thread" exact="table[                            $ID = $ThreadID,                            $Faction = $Faction,                            $EnemyFaction = $EnemyFaction,                            $MissionGroup = $MissionGroup,                            $ThreadConditionLibs = [Situation__Cold_War, Situation__Contention, Situation__Invasion_Prep],                            $ThreadType = 'sequential',                            $MissionType = missiontype.intelligence,                            $Difficulty = level.easy,                            $SubMissionLib = ARG_VS_XENON_Gather_Intel_Get_Submissions,                            $NameLib = ARG_VS_XENON_Gather_Intel_Construct_Name,                            $DescriptionLib = ARG_VS_XENON_Gather_Intel_Construct_Description,                            $RewardLib = ARG_VS_XENON_Gather_Intel_Construct_Reward,                            $MinMissions = 2,                            $MaxMissions = 3,                            $ThreadAbortRelation = -0.00064]"/>
                    <assert value="not $ManagerCue.$ThreadDefinitions.{$ThreadID}?" text="'Thread definition ' + $ThreadID + ' already exists in this table [Owen]'"/>
                    <set_value name="$ManagerCue.$ThreadDefinitions.{$ThreadID}" exact="$Thread"/>
                  </actions>
                  <patch sinceversion="3" state="complete">
                    <set_value name="$ManagerCue.$ThreadDefinitions.$arg_vs_xenon_gather_intel.$RewardLib" exact="ARG_VS_XENON_Gather_Intel_Construct_Reward"/>
                  </patch>
                </cue>
                <!--Called from CalculateThreads. Result saved to $New_Thread. Namespace is not this parent.-->
                <library name="ARG_VS_XENON_Gather_Intel_Get_Submissions">
                  <actions>
                    <set_value name="$Submissions" exact="table[]"/>
                    <set_value name="$Submissions.$deploy_satellite" exact="table[$Cue = md.X4Ep1_War_Subscriptions.DeployInPlace__Standard,    $MissionType = missiontype.drop,  $Page = 30210, $TextOffset = [101400], $Sequence = -1 ]"/>
                    <set_value name="$Submissions.$achieve_coverage__enemy_sector" exact="table[$Cue = md.X4Ep1_War_Subscriptions.Achieve_Coverage__Standard, $MissionType = missiontype.drop,  $Page = 30210, $TextOffset = [102100], $Sequence = -1 ]"/>
                    <set_value name="$Submissions.$find_resources__enemy_sector" exact="table[$Cue = md.X4Ep1_War_Subscriptions.Find_Resources__Standard,   $MissionType = missiontype.find,  $Page = 30210, $TextOffset = [106100], $Sequence = -1 ]"/>
                    <set_value name="$Submissions.$scan__ship" exact="table[$Cue = md.X4Ep1_War_Subscriptions.Scan__Standard,             $MissionType = missiontype.find,  $Page = 30210, $TextOffset = [150000, 150700, 150800, 150900], $Sequence = -1 ]"/>
                    <set_value name="$Submissions.$scan__station" exact="table[$Cue = md.X4Ep1_War_Subscriptions.Scan__Standard,             $MissionType = missiontype.find,  $Page = 30210, $TextOffset = [150100], $Sequence = -1 ]"/>
                    <set_value name="$Submissions.$scan__module" exact="table[$Cue = md.X4Ep1_War_Subscriptions.Scan__Standard,             $MissionType = missiontype.find,  $Page = 30210, $TextOffset = [150200], $Sequence = -1 ]"/>
                    <!--<set_value name="$Submissions.$scan__for_idcode"
                                 exact="table[$Cue = md.X4Ep1_War_Subscriptions.Scan__Standard,             $MissionType = missiontype.find,  $Page = 30210, $TextOffset = [150600], $Sequence = -1 ]"/>-->
                    <set_value name="$New_Thread.$Submissions" exact="$Submissions"/>
                  </actions>
                </library>
                <!--Called from CalculateThreads. Result saved to $New_Thread. Namespace is not this parent.-->
                <library name="ARG_VS_XENON_Gather_Intel_Construct_Name">
                  <actions>
                    <do_any>
                      <set_value name="this.$Name" exact="{30210, 7000}"/>
                      <set_value name="this.$Name" exact="{30210, 7001}"/>
                    </do_any>
                  </actions>
                </library>
                <!--Called from CalculateThreads where several values are set to help decide the briefing text. Result saved to $New_Thread. Namespace is not this parent.-->
                <library name="ARG_VS_XENON_Gather_Intel_Construct_Description">
                  <actions>
                    <do_if value="$ThreadMood == 'negative'">
                      <do_any>
                        <set_value name="this.$Description" exact="{30210, 7101}"/>
                        <set_value name="this.$Description" exact="{30210, 7102}"/>
                      </do_any>
                      <do_any>
                        <set_value name="this.$Description" operation="add" exact="' ' + {30210, 7111}"/>
                        <set_value name="this.$Description" operation="add" exact="' ' + {30210, 7112}"/>
                      </do_any>
                      <do_any>
                        <set_value name="this.$Description" operation="add" exact="'\n' + {30210, 7121}"/>
                        <set_value name="this.$Description" operation="add" exact="'\n' + {30210, 7122}"/>
                      </do_any>
                    </do_if>
                    <do_elseif value="$ThreadMood == 'positive'">
                      <do_any>
                        <set_value name="this.$Description" exact="{30210, 7201}"/>
                        <set_value name="this.$Description" exact="{30210, 7202}"/>
                      </do_any>
                      <set_value name="this.$Description" operation="add" exact="' ' + {30210, 7211}"/>
                      <set_value name="this.$Description" operation="add" exact="'\n' + {30210, 7221}"/>
                    </do_elseif>
                  </actions>
                </library>
                <library name="ARG_VS_XENON_Gather_Intel_Construct_Reward">
                  <actions>
                    <do_any>
                      <set_value name="this.$RewardObject" exact="[ware.paintmod_0076]" weight="15" comment="special arg vs xen subscription paint"/>
                      <set_value name="this.$RewardObject" exact="[ware.paintmod_0002]" weight="15" comment="basic argon faction paint"/>
                      <set_value name="this.$RewardObject" exact="[[ware.modpart_nividiumcrystallite, ware.modpart_shipnanoweave_t1, ware.modpart_shipnanoweave_t2].random]" weight="9" comment="modpart"/>
                      <set_value name="this.$RewardObject" exact="[ware.modpart_nividiumcrystallite, [ware.modpart_shipnanoweave_t1, ware.modpart_shipnanoweave_t2].random]" weight="8" comment="complete mod"/>
                      <set_value name="this.$RewardObject" exact="[[ware.modpart_extendedfuelcontainer, ware.modpart_nividiumoxide, ware.modpart_enginefuelinjector_t1, ware.modpart_enginefuelinjector_t2].random]" weight="9" comment="modpart"/>
                      <set_value name="this.$RewardObject" exact="[ware.modpart_extendedfuelcontainer, ware.modpart_nividiumoxide, [ware.modpart_enginefuelinjector_t1, ware.modpart_enginefuelinjector_t2].random]" weight="8" comment="complete mod"/>
                      <set_value name="this.$RewardObject" exact="[[ware.modpart_shipnanoweave_t3, ware.modpart_enginefuelinjector_t3].random]" weight="4" comment="rare modpart"/>
                      <set_value name="this.$RewardObject" exact="[[ware.inv_seminar_piloting_2, ware.inv_seminar_piloting_2, ware.inv_seminar_management_2].random]" weight="14"/>
                      <set_value name="this.$RewardObject" exact="[[ware.inv_seminar_piloting_3, ware.inv_seminar_piloting_3, ware.inv_seminar_management_3].random]" weight="4"/>
                      <set_value name="this.$RewardObject" exact="[[ware.inv_seminar_piloting_4, ware.inv_seminar_management_4].random]" weight="1"/>
                    </do_any>
                    <run_actions ref="md.LIB_Generic.GenerateRewardText" result="this.$RewardText">
                      <param name="RewardObject" value="this.$RewardObject"/>
                    </run_actions>
                  </actions>
                </library>
              </cues>
            </cue>
            <cue name="ARG_VS_XENON_Support_Invasion">
              <cues>
                <cue name="ARG_VS_XENON_Preemptive_Support_Invasion" version="3">
                  <actions>
                    <!--Argon Vs Xenon - Support Invasion-->
                    <set_value name="$ThreadID" exact="'$arg_vs_xenon_support_invasion'"/>
                    <set_value name="$Thread" exact="table[                            $ID = $ThreadID,                            $Faction = $Faction,                            $EnemyFaction = $EnemyFaction,                            $MissionGroup = $MissionGroup,                            $ThreadConditionLibs = [Situation__Invading],                            $ThreadType = 'sequential',                            $MissionType = missiontype.fight,                            $Difficulty = level.hard,                            $SubMissionLib = ARG_VS_XENON_Support_Invasion_Get_Submissions,                            $NameLib = ARG_VS_XENON_Support_Invasion_Construct_Name,                            $DescriptionLib = ARG_VS_XENON_Support_Invasion_Construct_Description,                            $RewardLib = ARG_VS_XENON_Support_Invasion_Construct_Reward,                            $MinMissions = 1,                            $MaxMissions = 1,                            $ThreadAbortRelation = -0.00064]"/>
                    <assert value="not $ManagerCue.$ThreadDefinitions.{$ThreadID}?" text="'Thread definition ' + $ThreadID + ' already exists in this table [Owen]'"/>
                    <set_value name="$ManagerCue.$ThreadDefinitions.{$ThreadID}" exact="$Thread"/>
                  </actions>
                  <patch sinceversion="3" state="complete">
                    <set_value name="$ManagerCue.$ThreadDefinitions.$arg_vs_xenon_support_invasion.$RewardLib" exact="ARG_VS_XENON_Support_Invasion_Construct_Reward"/>
                  </patch>
                </cue>
                <!--Called from CalculateThreads. Result saved to $New_Thread. Namespace is not this parent.-->
                <library name="ARG_VS_XENON_Support_Invasion_Get_Submissions">
                  <actions>
                    <set_value name="$Submissions" exact="table[]"/>
                    <!--<set_value name="$Submissions.$support_invasion"
                                 exact="table[$Cue = md.X4Ep1_War_Subscriptions.Support_Invasion__Standard,    $MissionType = missiontype.fight,  $Page = 30210, $TextOffset = [109000], $Sequence = -1 ]"/>-->
                    <set_value name="$New_Thread.$Submissions" exact="$Submissions"/>
                  </actions>
                </library>
                <!--Called from CalculateThreads. Result saved to $New_Thread. Namespace is not this parent.-->
                <library name="ARG_VS_XENON_Support_Invasion_Construct_Name">
                  <actions>
                    <do_any>
                      <set_value name="this.$Name" exact="{30210, 8000}"/>
                    </do_any>
                  </actions>
                </library>
                <!--Called from CalculateThreads where several values are set to help decide the briefing text. Result saved to $New_Thread. Namespace is not this parent.-->
                <library name="ARG_VS_XENON_Support_Invasion_Construct_Description">
                  <actions>
                    <do_if value="$ThreadMood == 'negative'">
                      <do_any>
                        <set_value name="this.$Description" exact="{30210, 8101}"/>
                      </do_any>
                      <set_value name="this.$Description" operation="add" exact="' ' + {30210, 8111}"/>
                      <do_any>
                        <set_value name="this.$Description" operation="add" exact="'\n' + {30210, 8121}"/>
                      </do_any>
                    </do_if>
                    <do_elseif value="$ThreadMood == 'positive'">
                      <do_any>
                        <set_value name="this.$Description" exact="{30210, 8201}"/>
                      </do_any>
                      <set_value name="this.$Description" operation="add" exact="' ' + {30210, 8211}"/>
                      <set_value name="this.$Description" operation="add" exact="'\n' + {30210, 8221}"/>
                    </do_elseif>
                  </actions>
                </library>
                <library name="ARG_VS_XENON_Support_Invasion_Construct_Reward">
                  <actions>
                    <do_any>
                      <set_value name="this.$RewardObject" exact="[ware.paintmod_0076]" weight="15" comment="special arg vs xen subscription paint"/>
                      <set_value name="this.$RewardObject" exact="[ware.paintmod_0002]" weight="15" comment="basic argon faction paint"/>
                      <set_value name="this.$RewardObject" exact="[[ware.modpart_nividiumcrystallite, ware.modpart_shipnanoweave_t1, ware.modpart_shipnanoweave_t2].random]" weight="9"/>
                      <set_value name="this.$RewardObject" exact="[[ware.modpart_highenergycatalyst, ware.modpart_tuningsoftware, ware.modpart_weaponchamber_t1, ware.modpart_weaponchamber_t2].random]" weight="8"/>
                      <set_value name="this.$RewardObject" exact="[ware.modpart_nividiumcrystallite, [ware.modpart_shipnanoweave_t1, ware.modpart_shipnanoweave_t2].random]" weight="9"/>
                      <set_value name="this.$RewardObject" exact="[ware.modpart_highenergycatalyst, ware.modpart_tuningsoftware, [ware.modpart_weaponchamber_t1, ware.modpart_weaponchamber_t2].random]" weight="8"/>
                      <set_value name="this.$RewardObject" exact="[[ware.modpart_shipnanoweave_t3, ware.modpart_weaponchamber_t3].random]" weight="4"/>
                      <set_value name="this.$RewardObject" exact="[[ware.inv_seminar_piloting_2, ware.inv_seminar_piloting_2, ware.inv_seminar_management_2].random]" weight="14"/>
                      <set_value name="this.$RewardObject" exact="[[ware.inv_seminar_piloting_3, ware.inv_seminar_piloting_3, ware.inv_seminar_management_3].random]" weight="4"/>
                      <set_value name="this.$RewardObject" exact="[[ware.inv_seminar_piloting_4, ware.inv_seminar_management_4].random]" weight="1"/>
                    </do_any>
                    <run_actions ref="md.LIB_Generic.GenerateRewardText" result="this.$RewardText">
                      <param name="RewardObject" value="this.$RewardObject"/>
                    </run_actions>
                  </actions>
                </library>
              </cues>
            </cue>
          </cues>
        </cue>
        <!--
        ###################################
        ARGON VS HOLY ORDER
        ###################################-->
        <cue name="ARG_VS_HOL" namespace="this" version="4">
          <actions>
            <!--Common values-->
            <set_value name="$ManagerCue" exact="parent.namespace"/>
            <set_value name="$Faction" exact="faction.argon"/>
            <set_value name="$EnemyFaction" exact="faction.holyorder"/>
            <set_value name="$MissionGroup" exact="missiongroup.argon_war_holyorder"/>
            <set_value name="$Mission_Contact" exact="null"/>
            <set_value name="$Page" exact="30211" comment="Argon-HolyOrder-War page"/>
            <set_value name="$ManagerCue.$MissionGroupCues.{$MissionGroup}" exact="this"/>
            <set_value name="$SubscriptionMinRel" exact="$Faction.relation.friend.min"/>
            <set_value name="$SubscriptionLossRel" exact="-0.00064" comment="for UI-value -1"/>
            <set_value name="$HasIntroMission" exact="false"/>
            <set_value name="$DebugChance" exact="$ManagerCue.$DebugChance"/>
            <!--Status-->
            <set_value name="$SubscriptionStatus" exact="null"/>
            <set_value name="$IntroducedToContact" exact="false"/>
            <set_value name="$JobsDescribed" exact="false"/>
            <set_value name="$ConflictDescribed" exact="false"/>
            <set_value name="$IntroMissionSuccessful" exact="false"/>
            <set_value name="$CooldownTime" exact="-1s"/>
            <!--Stats-->
            <set_value name="$ThreadsCompleted" exact="0"/>
            <set_value name="$ThreadsFailed" exact="0"/>
            <set_value name="$MissionsCompleted" exact="0"/>
            <set_value name="$MissionsFailed" exact="0"/>
          </actions>
          <patch sinceversion="2" state="complete">
            <do_if value="$CooldownTime gt (player.age + 5min)">
              <debug_text text="'Reducing mission subscription cooldowntime from ' + $CooldownTime + ' to ' + player.age + 5min" filter="savegame"/>
              <set_value name="$CooldownTime" exact="player.age + 5min"/>
            </do_if>
          </patch>
          <patch sinceversion="3" state="complete">
            <do_if value="not md.$SubscribedMissionGroups?">
              <create_list name="md.$SubscribedMissionGroups"/>
            </do_if>
            <do_if value="$SubscriptionStatus == 'subscribed'">
              <append_to_list name="md.$SubscribedMissionGroups" exact="$MissionGroup"/>
            </do_if>
          </patch>
          <patch sinceversion="4" state="complete">
            <set_value name="$HasIntroMission" exact="false"/>
          </patch>
          <cues>
            <cue name="ARG_VS_HOL_Init">
              <actions>
                <set_value name="$ContactCreatorCue" exact="ARG_VS_HOL_Create_Contact"/>
                <set_value name="$IntroMissionCue" exact="ARG_VS_HOL_Introduction"/>
                <!--$SubscriptionStatus:
                - 'unsubscribed'
                - 'probation'
                - 'subscribed'
                - 'cooldown'-->
                <signal_cue_instantly cue="ARG_VS_HOL_Set_Subscription_Status" param="'unsubscribed'" comment="TODO: @Owen, @Roger - temporary, change back to unsubscribed!"/>
              </actions>
            </cue>
            <!--
            ####################
            DEBUG
            ####################-->
            <cue name="ARG_VS_HOL_Debug_Reset">
              <conditions>
                <event_cue_signalled/>
              </conditions>
              <actions>
                <do_all exact="$ManagerCue.$Threads.count" counter="$i" reverse="true">
                  <do_if value="$ManagerCue.$Threads.{$i}.$ThreadCue.$Definition.$MissionGroup == $MissionGroup">
                    <signal_cue_instantly cue="$ManagerCue.$Threads.{$i}.$CleanupCue"/>
                  </do_if>
                </do_all>
                <set_value name="$DefinitionKeys" exact="$ManagerCue.$ThreadDefinitions.keys.list"/>
                <do_all exact="$DefinitionKeys.count" counter="$i" reverse="true">
                  <do_if value="$ManagerCue.$ThreadDefinitions.{$DefinitionKeys.{$i}}.$MissionGroup == $MissionGroup">
                    <remove_value name="$ManagerCue.$ThreadDefinitions.{$DefinitionKeys.{$i}}"/>
                  </do_if>
                </do_all>
                <do_if value="$Mission_Contact.isclass.npc">
                  <destroy_object object="$Mission_Contact"/>
                </do_if>
                <set_value name="$Mission_Contact" exact="null"/>
                <reset_cue cue="namespace"/>
                <reset_cue cue="Gamestart" comment="Trigger CalculateThreads again"/>
              </actions>
            </cue>
            <cue name="ARG_VS_HOL_Debug_Subscribe" instantiate="true">
              <conditions>
                <event_cue_signalled/>
              </conditions>
              <actions>
                <signal_cue_instantly cue="ARG_VS_HOL_Set_Subscription_Status" param="'subscribed'"/>
              </actions>
            </cue>
            <!--
            ####################
            SUBSCRIPTION
            ####################-->
            <!--event.param == new status-->
            <cue name="ARG_VS_HOL_Set_Subscription_Status" instantiate="true">
              <conditions>
                <event_cue_signalled/>
              </conditions>
              <actions>
                <do_if value="                        event.param == 'unsubscribed' or                        event.param == 'probation' or                        event.param == 'subscribed' or                        event.param == 'cooldown'">
                  <debug_text text="'Changing subscription status from ' + $SubscriptionStatus + ' to ' + event.param" chance="$DebugChance"/>
                  <set_value name="$SubscriptionStatus" exact="event.param"/>
                  <!--Be careful with state change handlers here if the requested state was the same as the previous one-->
                  <do_if value="event.param == 'subscribed' and Gamestart.state == cuestate.complete">
                    <signal_cue_instantly cue="Player_Subscribed_To_War" param="$MissionGroup"/>
                    <signal_cue cue="CalculateThreads"/>
                  </do_if>
                  <do_elseif value="event.param == 'cooldown'">
                    <!--TODO @Owen balance cooldown. Have a harsher cooldown in certain situations?-->
                    <set_value name="$CooldownTime" exact="player.age + 5min"/>
                  </do_elseif>
                  <!-- update global missiongroup-registry -->
                  <do_if value="$SubscriptionStatus == 'subscribed'">
                    <assert value="not md.$SubscribedMissionGroups.indexof.{$MissionGroup}"/>
                    <do_if value="not md.$SubscribedMissionGroups.indexof.{$MissionGroup}">
                      <append_to_list name="md.$SubscribedMissionGroups" exact="$MissionGroup"/>
                    </do_if>
                  </do_if>
                  <do_else>
                    <remove_from_list name="md.$SubscribedMissionGroups" exact="$MissionGroup"/>
                  </do_else>
                </do_if>
                <do_else>
                  <assert value="false" text="'Unknown subscription status: ' + event.param + ' [Owen]'"/>
                </do_else>
              </actions>
            </cue>
            <cue name="ARG_VS_HOL_Check_Cooldown" instantiate="true" checkinterval="5s">
              <conditions>
                <check_value value="$SubscriptionStatus == 'cooldown' and player.age gt $CooldownTime"/>
              </conditions>
              <actions>
                <debug_text text="player.age + ' Ending  cooldown'" chance="$DebugChance"/>
                <signal_cue_instantly cue="ARG_VS_HOL_Set_Subscription_Status" param="'subscribed'"/>
              </actions>
            </cue>
            <!--
            ####################
            CONTACT
            ####################-->
            <!--event.param == Cloned table of the host sectors for this war front in which to search for a placement object (or null to fallback to any owned space in the galaxy)-->
            <cue name="ARG_VS_HOL_Create_Contact">
              <conditions>
                <event_cue_signalled/>
                <check_value value="$Faction.isactive"/>
              </conditions>
              <actions>
                <set_value name="this.$SelectedSpace" exact="null"/>
                <do_if value="event.param and typeof event.param == datatype.table">
                  <set_value name="this.$HostSectorKeys" exact="event.param.keys.sorted"/>
                  <do_all exact="this.$HostSectorKeys.count" counter="$i">
                    <do_if value="this.$HostSectorKeys.{$i}.security ge 0.75f">
                      <!--Select a sector with stations and a high security value-->
                      <find_station name="this.$PotentialStation" owner="$Faction" space="this.$HostSectorKeys.{$i}">
                        <match_content class="class.walkablemodule" checkoperational="true"/>
                      </find_station>
                      <do_if value="this.$PotentialStation">
                        <set_value name="this.$SelectedSpace" exact="this.$HostSectorKeys.{$i}"/>
                        <break/>
                      </do_if>
                    </do_if>
                  </do_all>
                  <do_if value="not this.$SelectedSpace">
                    <!--Simply select the furthest sector with stations-->
                    <do_all exact="this.$HostSectorKeys.count" counter="$i" reverse="true">
                      <find_station name="this.$PotentialStation" owner="$Faction" space="this.$HostSectorKeys.{$i}">
                        <match_content class="class.walkablemodule" checkoperational="true"/>
                      </find_station>
                      <do_if value="this.$PotentialStation">
                        <set_value name="this.$SelectedSpace" exact="this.$HostSectorKeys.{$i}"/>
                        <break/>
                      </do_if>
                    </do_all>
                  </do_if>
                </do_if>
                <do_if value="not this.$SelectedSpace">
                  <find_station name="this.$PotentialStation" owner="$Faction" space="player.galaxy">
                    <match_content class="class.walkablemodule" checkoperational="true"/>
                  </find_station>
                  <do_if value="this.$PotentialStation">
                    <set_value name="this.$SelectedSpace" exact="this.$PotentialStation.sector"/>
                    <debug_text text="'Fallback case for not finding suitable sector to place mission contact for ' + $MissionGroup + '. Placing on ' + this.$PotentialStation + ' ' + this.$PotentialStation.knownname + ' in ' + this.$SelectedSpace.knownname" filter="error"/>
                  </do_if>
                </do_if>
                <do_if value="this.$SelectedSpace">
                  <find_station name="$PlacementObject" owner="$Faction" space="this.$SelectedSpace" required="true">
                    <match_content class="class.walkablemodule" checkoperational="true"/>
                  </find_station>
                  <assert value="$PlacementObject.exists" text="'Station was unable to be found in ' + this.$SelectedSpace.knownname + ' even when it should have [Owen]'"/>
                  <do_if value="$PlacementObject">
                    <do_if value="not $Mission_Contact.isclass.npc">
                      <create_cue_actor name="$Mission_Contact" cue="namespace" group="argon.factionrepresentative.male">
                        <page exact="10101"/>
                        <owner exact="$Faction"/>
                        <skills>
                          <skill type="management" min="12" max="15"/>
                          <skill type="morale" min="12" max="15"/>
                          <skill type="piloting" min="6" max="15"/>
                          <skill type="engineering" min="6" max="15"/>
                          <skill type="boarding" min="6" max="15"/>
                        </skills>
                      </create_cue_actor>
                      <do_if value="$Mission_Contact">
                        <set_entity_type entity="$Mission_Contact" type="entitytype.crowd"/>
                        <set_entity_traits entity="$Mission_Contact" missionactor="true" remote="false" customhandler="true"/>
                        <set_entity_overrides entity="$Mission_Contact" title="'{30211,201}'"/>
                        <debug_text text="'Created mission contact ' + $Mission_Contact + ' ' + $Mission_Contact.knownname + ' for placement on ' + $PlacementObject + ' ' + $PlacementObject.knownname" chance="$DebugChance"/>
                      </do_if>
                    </do_if>
                  </do_if>
                </do_if>
                <assert value="$Mission_Contact.isclass.npc" text="'Unable to generate mission contact [Owen]'"/>
                <do_if value="not $Mission_Contact.isclass.npc or not $PlacementObject.exists">
                  <reset_cue cue="this"/>
                </do_if>
              </actions>
              <cues>
                <cue name="ARG_VS_HOL_Place_Contact_Init" version="2">
                  <actions>
                    <do_if value="$PlacementObject.attention ge attention.nearby">
                      <signal_cue cue="ARG_VS_HOL_Place_Contact_Create_Interior"/>
                    </do_if>
                  </actions>
                  <patch sinceversion="2" state="complete">
                    <do_if value="not $PlacementObject.isoperational">
                      <set_value name="$PlacementObject" exact="null"/>
                      <reset_cue cue="$ContactCreatorCue"/>
                    </do_if>
                  </patch>
                </cue>
                <cue name="ARG_VS_HOL_Place_Contact_Create_Interior">
                  <conditions>
                    <check_any>
                      <event_cue_signalled/>
                      <check_all>
                        <event_object_changed_attention object="$PlacementObject"/>
                        <check_value value="event.param ge attention.nearby"/>
                      </check_all>
                    </check_any>
                  </conditions>
                  <actions>
                    <debug_text text="'Attempting to create dynamic interior to place NPC'" chance="$DebugChance"/>
                    <get_room_definition macro="$StartCorridorMacro" tags="tag.corridor" race="$Faction.primaryrace"/>
                    <get_room_definition macro="$StartRoomMacro" doors="$RoomDoors" tags="tag.warroom" race="$Faction.primaryrace"/>
                    <create_dynamic_interior object="$PlacementObject" corridor="$StartCorridorMacro" room="$StartRoomMacro" name="'{30211,3}'" interiorname="$DynamicInterior" corridorname="$DynamicCorridor" roomname="$DynamicRoom"/>
                    <assert value="$DynamicInterior" text="'Unable to create dynamic interior for contact ' + $Mission_Contact + ' ' + $Mission_Contact.knownname + ' [Owen]'"/>
                    <do_if value="$DynamicInterior">
                      <find_npc_slot name="$NPC_Slot" object="$DynamicRoom" tags="tag.stand"/>
                      <do_if value="not $NPC_Slot">
                        <find_npc_slot name="$NPC_Slot" object="$DynamicRoom"/>
                      </do_if>
                      <assert value="$NPC_Slot" text="'Can not find slot for mission contact in ' + $DynamicInterior + ' ' + $DynamicInterior.knownname + ' [Owen]'"/>
                      <do_if value="$NPC_Slot">
                        <add_actor_to_room actor="$Mission_Contact" slot="$NPC_Slot"/>
                        <debug_text text="'Added mission contact ' + $Mission_Contact + ' ' + $Mission_Contact.knownname + ' to ' + $PlacementObject + ' ' + $PlacementObject.knownname" chance="$DebugChance"/>
                      </do_if>
                    </do_if>
                  </actions>
                  <cues>
                    <cue name="ARG_VS_HOL_Place_Contact_WithinDynamicInterior_Destroy">
                      <conditions>
                        <event_object_interiors_despawning object="$PlacementObject"/>
                      </conditions>
                      <actions>
                        <remove_actor_from_room actor="$Mission_Contact"/>
                        <include_actions ref="Remove_Dynamic_Interior"/>
                        <do_if value="$Faction.isactive">
                          <reset_cue cue="ARG_VS_HOL_Place_Contact_Create_Interior"/>
                        </do_if>
                        <do_else>
                          <debug_text text="'Faction is now inactive. Deactivating contact handling.'"/>
                          <reset_cue cue="$ContactCreatorCue"/>
                        </do_else>
                      </actions>
                    </cue>
                  </cues>
                </cue>
                <cue name="ARG_VS_HOL_Contact_Killed">
                  <conditions>
                    <event_object_destroyed object="$Mission_Contact"/>
                  </conditions>
                  <actions>
                    <set_value name="$Mission_Contact" exact="null"/>
                    <reset_cue cue="ARG_VS_HOL_Create_Contact"/>
                  </actions>
                </cue>
                <cue name="ARG_VS_HOL_Placement_Object_Destroyed">
                  <conditions>
                    <event_object_destroyed object="$PlacementObject"/>
                  </conditions>
                  <actions>
                    <include_actions ref="Remove_Dynamic_Interior"/>
                    <set_value name="$PlacementObject" exact="null"/>
                    <reset_cue cue="$ContactCreatorCue"/>
                  </actions>
                </cue>
                <cue name="ARG_VS_HOL_Contact__Faction_Deactivated">
                  <conditions>
                    <event_faction_deactivated faction="$Faction"/>
                  </conditions>
                  <actions>
                    <do_if value="ARG_VS_HOL_Place_Contact_Create_Interior.state == cuestate.waiting">
                      <debug_text text="'Faction is now inactive. Deactivating contact handling.'"/>
                      <reset_cue cue="$ContactCreatorCue"/>
                    </do_if>
                    <!--else, the depawning of the interior must happen-->
                  </actions>
                </cue>
                <cue name="ARG_VS_HOL_Contact_Conversation_Started" instantiate="true">
                  <conditions>
                    <check_any>
                      <event_conversation_started actor="$Mission_Contact"/>
                      <event_conversation_returned_to_section actor="$Mission_Contact"/>
                    </check_any>
                    <check_value value="event.param == 'default' and $Faction.isactive"/>
                  </conditions>
                  <actions>
                    <do_if value="event.name == 'event_conversation_started'">
                      <do_if value="$SubscriptionStatus == 'unsubscribed' or $SubscriptionStatus == 'cooldown'">
                        <do_if value="player.entity.isfemale">
                          <add_npc_line speaker="$Mission_Contact" line="3007" comment="Pilot. (female)"/>
                        </do_if>
                        <do_else>
                          <add_npc_line speaker="$Mission_Contact" line="3006" comment="Pilot. (male)"/>
                        </do_else>
                      </do_if>
                      <do_else>
                        <!--More familiar greeting-->
                        <add_npc_line speaker="$Mission_Contact" line="3003" comment="Captain."/>
                      </do_else>
                    </do_if>
                    <include_actions ref="ARG_VS_HOL_Contact_Player_Lines"/>
                  </actions>
                </cue>
                <library name="ARG_VS_HOL_Contact_Player_Lines">
                  <actions>
                    <!--Specific sections-->
                    <do_if value="event.name == 'event_conversation_next_section' and event.param == 'war_subscribe_request'">
                      <do_if value="$Faction.relationto.{faction.player} ge $SubscriptionMinRel">
                        <add_player_choice text="{1002,3000401}" section="war_subscribe_ask_intro" comment="What kind of jobs can I expect?"/>
                      </do_if>
                    </do_if>
                    <do_elseif value="event.name == 'event_conversation_next_section' and (event.param == 'war_subscribe_ask_intro' or event.param == 'war_subscribe_request_2')">
                      <add_player_choice text="{1002,3021102}" section="war_subscribe_ask_conflict" comment="What can you tell me about the conflict itself?"/>
                      <add_player_choice text="{1002,3000402}" section="war_subscribe_start_intro" position="top_right" comment="Let's get started."/>
                    </do_elseif>
                    <do_elseif value="event.name == 'event_conversation_next_section' and event.param == 'war_subscribe_ask_conflict'">
                      <add_player_choice text="{1002,3021103}" section="war_subscribe_ask_conflict_2" comment="And the Argon?"/>
                      <add_player_choice text="{1002,3000402}" section="war_subscribe_start_intro" position="top_right" comment="Let's get started."/>
                    </do_elseif>
                    <do_elseif value="event.name == 'event_conversation_next_section' and event.param == 'war_subscribe_ask_conflict_2'">
                      <add_player_choice text="{1002,3000402}" section="war_subscribe_start_intro" position="top_right" comment="Let's get started."/>
                    </do_elseif>
                    <!--Start or other sections-->
                    <do_else>
                      <do_if value="$SubscriptionStatus == 'unsubscribed'">
                        <do_if value="ARG_VS_HOL_Introduction.state == cuestate.waiting">
                          <!--Intro mission is not in a state where the player can take it.-->
                          <!--TODO @Owen - voice lines on rejecting the player?-->
                          <add_player_choice text="{1002,3021101}" section="war_subscribe_request_2" comment="I'm here about the Holy Order."/>
                        </do_if>
                        <do_elseif value="$IntroducedToContact">
                          <do_if value="$JobsDescribed">
                            <add_player_choice text="{1002,3000402}" section="war_subscribe_start_intro" position="top_right" comment="Let's get started."/>
                            <add_player_choice text="{1002,3021102}" section="war_subscribe_ask_conflict" comment="What can you tell me about the conflict itself?"/>
                          </do_if>
                          <do_else>
                            <add_player_choice text="{1002,3000401}" section="war_subscribe_ask_intro" comment="What kind of jobs can I expect?"/>
                          </do_else>
                        </do_elseif>
                        <do_else>
                          <add_player_choice text="{1002,3021101}" section="war_subscribe_request" comment="I'm here about the Holy Order."/>
                        </do_else>
                      </do_if>
                      <do_elseif value="$SubscriptionStatus == 'probation'">
                        <do_if value="$IntroMissionSuccessful">
                          <add_player_choice text="{1002,3000404}" section="war_intro_complete" comment="I completed the task."/>
                        </do_if>
                        <do_else>
                          <add_player_choice text="{1002,3000405}" section="war_abort_intro" comment="I would like to stop."/>
                        </do_else>
                      </do_elseif>
                    </do_else>
                  </actions>
                </library>
                <cue name="ARG_VS_HOL_Contact_NextSection" instantiate="true">
                  <conditions>
                    <event_conversation_next_section actor="$Mission_Contact" sectionprefix="war_"/>
                  </conditions>
                  <actions>
                    <set_value name="$AddPlayerChoices" exact="true"/>
                    <do_if value="event.param == 'war_subscribe_request'">
                      <do_if value="$Faction.relationto.{faction.player} ge $SubscriptionMinRel">
                        <set_value name="$IntroducedToContact" exact="true"/>
                        <add_npc_line speaker="$Mission_Contact" line="30211001" hidechoices="true" comment="Ah, very good."/>
                        <add_npc_line speaker="$Mission_Contact" line="30211002" hidechoices="true"/>
                        <do_if value="player.entity.race == race.argon">
                          <!--Argon citizen-->
                          <add_npc_line speaker="$Mission_Contact" line="30211004" hidechoices="true"/>
                        </do_if>
                        <do_else>
                          <!--Argon friend-->
                          <add_npc_line speaker="$Mission_Contact" line="30211003" hidechoices="true"/>
                        </do_else>
                        <add_npc_line speaker="$Mission_Contact" line="30211005" hidechoices="true"/>
                        <add_npc_line speaker="$Mission_Contact" line="30211006" hidechoices="true"/>
                        <add_npc_line speaker="$Mission_Contact" line="30211007" hidechoices="true"/>
                        <do_if value="player.entity.race == race.paranid">
                          <!--Paranid player line-->
                          <add_npc_line speaker="$Mission_Contact" line="30211008" hidechoices="true"/>
                        </do_if>
                        <do_else>
                          <add_npc_line speaker="$Mission_Contact" line="30211009" hidechoices="true"/>
                          <add_npc_line speaker="$Mission_Contact" line="30211010" hidechoices="true"/>
                        </do_else>
                      </do_if>
                      <do_else>
                        <add_npc_line speaker="$Mission_Contact" line="30211026" comment="Sorry, but that is a very sensitive situation. We require pilots who have proven themselves to the Argon Federation."/>
                      </do_else>
                    </do_if>
                    <do_elseif value="event.param == 'war_subscribe_ask_intro'">
                      <set_value name="$JobsDescribed" exact="true"/>
                      <add_npc_line speaker="$Mission_Contact" line="30211011" hidechoices="true"/>
                      <add_npc_line speaker="$Mission_Contact" line="30211012" hidechoices="true"/>
                    </do_elseif>
                    <do_elseif value="event.param == 'war_subscribe_ask_conflict'">
                      <set_value name="$ConflictDescribed" exact="true"/>
                      <do_if value="player.entity.race == race.paranid">
                        <!--Paranid player line-->
                        <add_npc_line speaker="$Mission_Contact" line="30211013" hidechoices="true"/>
                      </do_if>
                      <add_npc_line speaker="$Mission_Contact" line="30211014" hidechoices="true"/>
                      <add_npc_line speaker="$Mission_Contact" line="30211015" hidechoices="true"/>
                    </do_elseif>
                    <do_elseif value="event.param == 'war_subscribe_ask_conflict_2'">
                      <add_npc_line speaker="$Mission_Contact" line="30211016" hidechoices="true"/>
                      <add_npc_line speaker="$Mission_Contact" line="30211017" hidechoices="true"/>
                      <add_npc_line speaker="$Mission_Contact" line="30211018" hidechoices="true"/>
                      <add_npc_line speaker="$Mission_Contact" line="30211019" hidechoices="true"/>
                    </do_elseif>
                    <do_elseif value="event.param == 'war_subscribe_request_2'">
                      <!--This section is for when the intro mission is not currently active for the player to accept it. Either reject the player or signal the intro mission to activate.-->
                      <include_actions ref="ARG_VS_HOL_Can_Activate_Introduction"/>
                      <do_if value="$CanActivateIntro">
                        <signal_cue cue="ARG_VS_HOL_Introduction"/>
                        <add_npc_line speaker="$Mission_Contact" line="30211001" hidechoices="true" comment="Ah, very good."/>
                      </do_if>
                      <do_else>
                        <set_value name="$AddPlayerChoices" exact="false"/>
                        <add_npc_line speaker="$Mission_Contact" line="30211027" hidechoices="true"/>
                      </do_else>
                    </do_elseif>
                    <do_elseif value="event.param == 'war_subscribe_start_intro'">
                      <do_if value="$HasIntroMission">
                        <set_value name="$AddPlayerChoices" exact="false"/>
                        <signal_cue cue="ARG_VS_HOL_Player_Requested_Subscription"/>
                        <add_npc_line speaker="$Mission_Contact" line="30211020" hidechoices="true"/>
                        <add_npc_line speaker="$Mission_Contact" line="30211021" hidechoices="true"/>
                      </do_if>
                      <do_else>
                        <set_value name="$AddPlayerChoices" exact="false"/>
                        <add_npc_line speaker="$Mission_Contact" line="2113" hidechoices="true" comment="Excellent."/>
                        <add_npc_line speaker="$Mission_Contact" line="30211023" hidechoices="true" comment="You will now find tasks related to the Holy Order conflict in your mission interface."/>
                        <signal_cue cue="ARG_VS_HOL_Cancel_Intro_Talkto"/>
                        <reset_cue cue="ARG_VS_HOL_Introduction"/>
                        <signal_cue_instantly cue="ARG_VS_HOL_Set_Subscription_Status" param="'subscribed'"/>
                      </do_else>
                    </do_elseif>
                    <do_elseif value="event.param == 'war_intro_complete'">
                      <set_value name="$AddPlayerChoices" exact="false"/>
                      <add_npc_line speaker="$Mission_Contact" line="30211022" hidechoices="true" comment="Yes, I saw. Very good."/>
                      <add_npc_line speaker="$Mission_Contact" line="30211023" hidechoices="true" comment="You will now find tasks related to the Holy Order conflict in your mission interface."/>
                      <signal_cue_instantly cue="ARG_VS_HOL_Set_Subscription_Status" param="'subscribed'"/>
                    </do_elseif>
                    <do_elseif value="event.param == 'war_abort_intro'">
                      <set_value name="$AddPlayerChoices" exact="false"/>
                      <signal_cue cue="ARG_VS_HOL_Player_Requests_Intro_Abort"/>
                    </do_elseif>
                    <do_if value="$AddPlayerChoices">
                      <include_actions ref="ARG_VS_HOL_Contact_Player_Lines"/>
                    </do_if>
                  </actions>
                </cue>
              </cues>
            </cue>
            <!--event.param = table[
            $cue                = thread cue namespace,
            $completedmissions  = number of completed missions,
            $failedmissions     = number of failed missions]-->
            <cue name="ARG_VS_HOL_Thread_Finished" instantiate="true">
              <conditions>
                <event_cue_signalled cue="Cleanup_Thread"/>
                <check_value value="event.param.$cue.$Definition.$MissionGroup == $MissionGroup"/>
                <check_value value="$ManagerCue.$ActiveThreads.indexof.{event.param.$cue}"/>
              </conditions>
              <actions>
                <!--TODO @Owen spoken feedback?-->
                <debug_text text="'player finished ' + event.param.$cue + ' for ' + $MissionGroup + '. Completed missions: ' + event.param.$completedmissions + ' - Failed missions: ' + event.param.$failedmissions" chance="$DebugChance"/>
                <set_value name="$MissionsCompleted" operation="add" exact="event.param.$completedmissions"/>
                <set_value name="$MissionsFailed" operation="add" exact="event.param.$completedmissions"/>
                <do_if value="$MissionsCompleted ge 20">
                  <unlock_achievement name="WAR_MISSIONS"/>
                </do_if>
                <do_if value="event.param.$failed">
                  <set_value name="$ThreadsFailed" operation="add"/>
                  <do_if value="not event.param.$interrupted">
                    <signal_cue_instantly cue="ARG_VS_HOL_Set_Subscription_Status" param="'cooldown'"/>
                  </do_if>
                </do_if>
                <do_else>
                  <set_value name="$ThreadsCompleted" operation="add"/>
                  <signal_cue cue="CalculateThreads"/>
                </do_else>
              </actions>
            </cue>
            <!--
            ####################
            INTRODUCTION
            ####################-->
            <cue name="ARG_VS_HOL_Player_Requested_Subscription" instantiate="true">
              <conditions>
                <event_cue_signalled/>
              </conditions>
            </cue>
            <cue name="ARG_VS_HOL_Player_Requests_Intro_Abort" instantiate="true">
              <conditions>
                <event_cue_signalled/>
              </conditions>
            </cue>
            <library name="ARG_VS_HOL_Can_Activate_Introduction">
              <actions>
                <!--TODO @Owen other conditions based on if they failed a previous intro mission and need a cooldown-->
                <set_value name="$CanActivateIntro" exact="false"/>
                <do_if value="$Faction.relationto.{faction.player} ge $SubscriptionMinRel">
                  <set_value name="$CanActivateIntro" exact="true"/>
                </do_if>
              </actions>
            </library>
            <cue name="ARG_VS_HOL_Introduction" version="4">
              <conditions>
                <event_cue_signalled/>
                <check_value value="$Faction.isactive"/>
              </conditions>
              <actions>
                <debug_text text="'Starting intro mission handling for ' + $MissionGroup" chance="$DebugChance"/>
                <set_value name="$MissionIntroCue" exact="this"/>
                <signal_cue_instantly cue="ARG_VS_HOL_Set_Subscription_Status" param="'unsubscribed'"/>
              </actions>
              <patch sinceversion="2" state="complete">
                <do_if value="$SubscriptionStatus == 'cooldown'">
                  <debug_text text="'Fixing war mission which is still of state cooldown when it should be unsubscribed'" filter="savegame"/>
                  <signal_cue_instantly cue="ARG_VS_HOL_Set_Subscription_Status" param="'unsubscribed'"/>
                </do_if>
              </patch>
              <patch sinceversion="4" state="waiting">
                <do_if value="$SubscriptionStatus == 'probation'">
                  <debug_text text="'Fixing war mission which is still of state probation when it should be unsubscribed'" filter="savegame"/>
                  <signal_cue_instantly cue="ARG_VS_HOL_Set_Subscription_Status" param="'unsubscribed'"/>
                </do_if>
              </patch>
              <cues>
                <cue name="ARG_VS_HOL_Introduction_Init">
                  <actions>
                    <do_if value="$Faction.relationto.{faction.player} ge $SubscriptionMinRel">
                      <signal_cue cue="ARG_VS_HOL_Introduction_Create_Offer"/>
                    </do_if>
                  </actions>
                </cue>
                <cue name="ARG_VS_HOL_Introduction_Create_Offer">
                  <conditions>
                    <check_any>
                      <check_all>
                        <event_player_relation_changed faction="$Faction"/>
                        <check_value value="event.param2.{1} ge $SubscriptionMinRel"/>
                      </check_all>
                      <event_cue_signalled/>
                    </check_any>
                  </conditions>
                  <actions>
                    <do_if value="not $Mission_Contact.isclass.npc or not $PlacementObject.isoperational">
                      <debug_text text="'Mission contact was not yet created for ' + $MissionGroup + '. Triggering creation now but location may not be near a war front. [Owen]'" filter="error"/>
                      <signal_cue_instantly cue="$ContactCreatorCue"/>
                    </do_if>
                    <do_if value="$Mission_Contact.isclass.npc and $PlacementObject.isoperational">
                      <debug_text text="'Player has passed the conditions for the intro mission to be available for group: ' + $MissionGroup" chance="$DebugChance"/>
                      <create_offer cue="$MissionIntroCue" actor="$Mission_Contact" type="missiontype.fight" name="{30211,1}" description="{30211,2}" difficulty="level.trivial" faction="$Faction" group="$MissionGroup">
                        <briefing>
                          <objective step="1" action="objective.talkto" object="$Mission_Contact"/>
                        </briefing>
                      </create_offer>
                      <!-- Guild Notification Mail -->
                      <run_actions ref="md.X4Ep1_War_Subscriptions.SendSubscriptionMail">
                        <param name="Page" value="30211"/>
                        <param name="Faction" value="$Faction"/>
                        <param name="Mission_Contact" value="$Mission_Contact"/>
                      </run_actions>
                    </do_if>
                    <do_else>
                      <debug_text text="'Unable to start intro mission due to missing mission client [Owen]'" filter="error"/>
                      <reset_cue cue="$MissionIntroCue"/>
                    </do_else>
                  </actions>
                  <cues>
                    <cue name="ARG_VS_HOL_Introduction_Offer_Accepted">
                      <conditions>
                        <event_object_signalled object="$Mission_Contact" param="'accept'"/>
                      </conditions>
                      <actions>
                        <create_mission cue="$MissionIntroCue" offercue="$MissionIntroCue"/>
                        <update_mission cue="$MissionIntroCue">
                          <briefing>
                            <objective step="1" action="objective.talkto" text="$Mission_Contact.knownname"/>
                          </briefing>
                        </update_mission>
                        <remove_offer cue="$MissionIntroCue"/>
                        <signal_cue_instantly cue="md.GenericMissions.DisconnectedActorObjectiveLibrary" param="table[                                               $actor = $Mission_Contact,                                               $object = $PlacementObject,                                               $missioncue = $MissionIntroCue,                                               $cancelcue = ARG_VS_HOL_Cancel_Intro_Talkto,                                               $libfailedcue = ARG_VS_HOL_Intro_Abort,                                               $objective = objective.talkto,                                               $debugchance = $DebugChance]"/>
                      </actions>
                    </cue>
                  </cues>
                </cue>
                <cue name="ARG_VS_HOL_Intro_Abort" version="2">
                  <conditions>
                    <check_any>
                      <event_mission_aborted cue="ARG_VS_HOL_Introduction"/>
                      <event_cue_signalled cue="ARG_VS_HOL_Player_Requests_Intro_Abort"/>
                      <event_cue_signalled/>
                      <event_object_destroyed object="$Mission_Contact"/>
                      <event_object_destroyed object="$PlacementObject"/>
                      <event_faction_deactivated faction="$Faction"/>
                    </check_any>
                  </conditions>
                  <actions>
                    <debug_text text="'Aborting due to ' + event.name" chance="$DebugChance"/>
                    <do_if value="$MissionIntroCue.hasmission">
                      <remove_mission cue="$MissionIntroCue" type="aborted"/>
                    </do_if>
                    <signal_cue_instantly cue="ARG_VS_HOL_Set_Subscription_Status" param="'unsubscribed'"/>
                    <reset_cue cue="ARG_VS_HOL_Introduction"/>
                  </actions>
                  <patch sinceversion="2" state="waiting">
                    <do_if value="ARG_VS_HOL_Introduction_Offer_Accepted.state == cuestate.complete and (not $TestShip? or not $TestShip.isoperational)">
                      <set_value name="$Patch_CheckLibraryInstance" exact="true"/>
                    </do_if>
                  </patch>
                </cue>
                <cue name="ARG_VS_HOL_Patch_Check_Talkto_Lib" onfail="cancel">
                  <conditions>
                    <check_value value="@$Patch_CheckLibraryInstance"/>
                  </conditions>
                  <actions>
                    <do_if value="not @md.GenericMissions.DisconnectedActorObjectiveLibrary.$Patch_ActiveMissionCues.indexof.{$MissionIntroCue}">
                      <debug_text text="'Talkto helper instance no longer exists for ' + $MissionIntroCue + ' - aborting intro mission'" filter="savegame"/>
                      <signal_cue cue="ARG_VS_HOL_Intro_Abort"/>
                    </do_if>
                    <remove_value name="$Patch_CheckLibraryInstance"/>
                  </actions>
                </cue>
                <cue name="ARG_VS_HOL_Cancel_Intro_Talkto" instantiate="true">
                  <conditions>
                    <event_cue_signalled/>
                  </conditions>
                </cue>
                <cue name="ARG_VS_HOL_Start_Intro_Mission" version="2">
                  <conditions>
                    <event_cue_signalled cue="ARG_VS_HOL_Player_Requested_Subscription"/>
                  </conditions>
                  <actions>
                    <signal_cue cue="ARG_VS_HOL_Cancel_Intro_Talkto"/>
                    <signal_cue_instantly cue="ARG_VS_HOL_Set_Subscription_Status" param="'probation'"/>
                    <set_value name="$IntroMissionSuccessful" exact="false"/>
                    <do_if value="$MissionIntroCue.hasmissionoffer">
                      <remove_offer cue="$MissionIntroCue"/>
                    </do_if>
                    <do_if value="not $MissionIntroCue.hasmission">
                      <create_mission cue="$MissionIntroCue" type="missiontype.fight" name="readtext.{30211}.{1}" description="readtext.{30211}.{2}" difficulty="level.trivial" faction="faction.argon" group="$MissionGroup"/>
                    </do_if>
                    <create_ship name="$TestShip" sector="player.sector">
                      <select faction="faction.holyorder" size="class.ship_s"/>
                      <owner exact="faction.holyorder"/>
                      <pilot actor="null"/>
                      <safepos object="player.entity" min="30km" max="40km"/>
                    </create_ship>
                    <update_mission cue="$MissionIntroCue">
                      <briefing>
                        <objective step="1" action="objective.destroy" object="$TestShip"/>
                      </briefing>
                    </update_mission>
                    <set_objective cue="$MissionIntroCue" action="objective.destroy" object="$TestShip"/>
                  </actions>
                  <patch sinceversion="2" state="complete">
                    <do_if value="$TestShip.isoperational">
                      <set_value name="$TestShip_Pos" exact="$TestShip.position"/>
                      <do_if value="[$TestShip_Pos.x, $TestShip_Pos.y, $TestShip_Pos.z].min lt 50km or [$TestShip_Pos.x, $TestShip_Pos.y, $TestShip_Pos.z].max gt 50km">
                        <debug_text text="'Warping ship ' + $TestShip + ' ' + $TestShip.knownname + ' to valid position'" filter="savegame"/>
                        <warp object="$TestShip" sector="$TestShip.sector">
                          <position object="$TestShip" space="$TestShip.sector"/>
                        </warp>
                      </do_if>
                      <remove_value name="$TestShip_Pos"/>
                    </do_if>
                  </patch>
                  <cues>
                    <cue name="ARG_VS_HOL_Start_Intro_Mission_Successful">
                      <conditions>
                        <event_object_destroyed object="$TestShip"/>
                      </conditions>
                      <actions>
                        <update_mission cue="$MissionIntroCue">
                          <briefing>
                            <objective step="2" action="objective.talkto" object="$Mission_Contact"/>
                          </briefing>
                        </update_mission>
                        <set_value name="$IntroMissionSuccessful" exact="true"/>
                        <signal_cue_instantly cue="md.GenericMissions.DisconnectedActorObjectiveLibrary" param="table[                                               $actor = $Mission_Contact,                                               $object = $PlacementObject,                                               $missioncue = $MissionIntroCue,                                               $cancelcue = ARG_VS_HOL_Start_Intro_Mission_Remove_Mission,                                               $libfailedcue = ARG_VS_HOL_Intro_Abort,                                               $objective = objective.talkto,                                               $step = 2,                                               $debugchance = $DebugChance]"/>
                      </actions>
                    </cue>
                    <cue name="ARG_VS_HOL_Start_Intro_Mission_Remove_Mission">
                      <conditions>
                        <event_cue_signalled/>
                      </conditions>
                      <actions>
                        <remove_mission cue="$MissionIntroCue" type="completed"/>
                        <reset_cue cue="ARG_VS_HOL_Introduction"/>
                      </actions>
                    </cue>
                    <cue name="ARG_VS_HOL_Start_Intro_Mission_End">
                      <conditions>
                        <event_conversation_started actor="$Mission_Contact"/>
                        <check_value value="$IntroMissionSuccessful"/>
                      </conditions>
                      <actions>
                        <allow_conversation_escape enabled="false"/>
                        <signal_cue cue="ARG_VS_HOL_Start_Intro_Mission_Remove_Mission"/>
                      </actions>
                    </cue>
                  </cues>
                </cue>
              </cues>
            </cue>
            <!--
            ####################
            THREADS
            ####################-->
            <cue name="ARG_VS_HOL_Reinforce_Defence">
              <cues>
                <cue name="ARG_VS_HOL_Reinforce_Defence_Register" version="3">
                  <actions>
                    <!--Argon Vs Holy Order - Reinforce Defence-->
                    <set_value name="$ThreadID" exact="'$arg_vs_hol_reinforce_defence'"/>
                    <set_value name="$Thread" exact="table[                            $ID = $ThreadID,                            $Faction = $Faction,                            $EnemyFaction = $EnemyFaction,                            $MissionGroup = $MissionGroup,                            $ThreadConditionLibs = [Situation__Cold_War, Situation__Contention, Situation__Defence_Prep],                            $ThreadType = 'sequential',                            $MissionType = missiontype.protect,                            $Difficulty = level.medium,                            $SubMissionLib = ARG_VS_HOL_Reinforce_Defence_Get_Submissions,                            $NameLib = ARG_VS_HOL_Reinforce_Defence_Construct_Name,                            $DescriptionLib = ARG_VS_HOL_Reinforce_Defence_Construct_Description,                            $RewardLib = ARG_VS_HOL_Reinforce_Defence_Construct_Reward,                            $MinMissions = 4,                            $MaxMissions = 5,                            $ThreadAbortRelation = -0.00064]"/>
                    <assert value="not $ManagerCue.$ThreadDefinitions.{$ThreadID}?" text="'Thread definition ' + $ThreadID + ' already exists in this table [Owen]'"/>
                    <set_value name="$ManagerCue.$ThreadDefinitions.{$ThreadID}" exact="$Thread"/>
                  </actions>
                  <patch sinceversion="3" state="complete">
                    <set_value name="$ManagerCue.$ThreadDefinitions.$arg_vs_hol_reinforce_defence.$RewardLib" exact="ARG_VS_HOL_Reinforce_Defence_Construct_Reward"/>
                  </patch>
                </cue>
                <!--Called from CalculateThreads. Result saved to $New_Thread. Namespace is not this parent.-->
                <library name="ARG_VS_HOL_Reinforce_Defence_Get_Submissions">
                  <actions>
                    <set_value name="$Submissions" exact="table[]"/>
                    <set_value name="$Submissions.$deploy_lasertowers" exact="table[$Cue = md.X4Ep1_War_Subscriptions.DeployInPlace__Standard,    $MissionType = missiontype.drop,  $Page = 30211, $TextOffset = [101000], $Sequence = -1 ]"/>
                    <set_value name="$Submissions.$deploy_mines" exact="table[$Cue = md.X4Ep1_War_Subscriptions.DeployInPlace__Standard,    $MissionType = missiontype.drop,  $Page = 30211, $TextOffset = [101100, 101200], $Sequence = -1 ]"/>
                    <set_value name="$Submissions.$achieve_coverage__host_sector" exact="table[$Cue = md.X4Ep1_War_Subscriptions.Achieve_Coverage__Standard, $MissionType = missiontype.drop,  $Page = 30211, $TextOffset = [102000], $Sequence = -1 ]"/>
                    <set_value name="$Submissions.$repair__damagedship" exact="table[$Cue = md.X4Ep1_War_Subscriptions.RepairObject__Standard,     $MissionType = missiontype.repair,  $Page = 30211, $TextOffset = [103000], $Sequence = -1 ]"/>
                    <set_value name="$Submissions.$taxi__specialist" exact="table[$Cue = md.X4Ep1_War_Subscriptions.Passenger_Transport__Standard, $MissionType = missiontype.transport, $Page = 30211, $TextOffset = [104000], $Sequence = -1 ]"/>
                    <set_value name="$Submissions.$deliver__crew" exact="table[$Cue = md.X4Ep1_War_Subscriptions.Get_Exact_Crew__Standard, $MissionType = missiontype.deliver, $Page = 30211, $TextOffset = [110000, 110100], $Sequence = -1 ]"/>
                    <set_value name="$New_Thread.$Submissions" exact="$Submissions"/>
                  </actions>
                </library>
                <!--Called from CalculateThreads. Result saved to $New_Thread. Namespace is not this parent.-->
                <library name="ARG_VS_HOL_Reinforce_Defence_Construct_Name">
                  <actions>
                    <do_any>
                      <set_value name="this.$Name" exact="{30211, 3000}"/>
                      <set_value name="this.$Name" exact="{30211, 3001}"/>
                      <set_value name="this.$Name" exact="{30211, 3002}"/>
                    </do_any>
                  </actions>
                </library>
                <!--Called from CalculateThreads where several values are set to help decide the briefing text. Result saved to $New_Thread. Namespace is not this parent.-->
                <library name="ARG_VS_HOL_Reinforce_Defence_Construct_Description">
                  <actions>
                    <do_if value="$ThreadMood == 'negative'">
                      <do_any>
                        <set_value name="this.$Description" exact="{30211, 3101}"/>
                        <set_value name="this.$Description" exact="{30211, 3102}"/>
                      </do_any>
                      <set_value name="this.$Description" operation="add" exact="' ' + {30211, 3111}"/>
                      <do_any>
                        <set_value name="this.$Description" operation="add" exact="'\n' + {30211, 3121}"/>
                        <set_value name="this.$Description" operation="add" exact="'\n' + {30211, 3122}"/>
                      </do_any>
                    </do_if>
                    <do_elseif value="$ThreadMood == 'positive'">
                      <do_any>
                        <set_value name="this.$Description" exact="{30211, 3201}"/>
                        <set_value name="this.$Description" exact="{30211, 3202}"/>
                      </do_any>
                      <set_value name="this.$Description" operation="add" exact="' ' + {30211, 3211}"/>
                      <set_value name="this.$Description" operation="add" exact="'\n' + {30211, 3221}"/>
                    </do_elseif>
                  </actions>
                </library>
                <library name="ARG_VS_HOL_Reinforce_Defence_Construct_Reward">
                  <actions>
                    <do_any>
                      <set_value name="this.$RewardObject" exact="[ware.paintmod_0087]" weight="15" comment="special arg vs hol subscription paint"/>
                      <set_value name="this.$RewardObject" exact="[ware.paintmod_0002]" weight="15" comment="basic argon faction paint"/>
                      <set_value name="this.$RewardObject" exact="[[ware.modpart_tuningsoftware, ware.modpart_shieldgeneratorcoil_t1, ware.modpart_shieldgeneratorcoil_t2].random]" weight="15" comment="modpart"/>
                      <set_value name="this.$RewardObject" exact="[ware.modpart_tuningsoftware, [ware.modpart_shieldgeneratorcoil_t1, ware.modpart_shieldgeneratorcoil_t2].random]" weight="15" comment="complete mod"/>
                      <set_value name="this.$RewardObject" exact="[ware.modpart_shieldgeneratorcoil_t3]" weight="5" comment="rare modpart"/>
                      <set_value name="this.$RewardObject" exact="[[ware.inv_seminar_piloting_2, ware.inv_seminar_piloting_2, ware.inv_seminar_management_2].random]" weight="15"/>
                      <set_value name="this.$RewardObject" exact="[[ware.inv_seminar_piloting_3, ware.inv_seminar_piloting_3, ware.inv_seminar_management_3].random]" weight="4"/>
                      <set_value name="this.$RewardObject" exact="[[ware.inv_seminar_piloting_4, ware.inv_seminar_management_4].random]" weight="1"/>
                    </do_any>
                    <run_actions ref="md.LIB_Generic.GenerateRewardText" result="this.$RewardText">
                      <param name="RewardObject" value="this.$RewardObject"/>
                    </run_actions>
                  </actions>
                </library>
              </cues>
            </cue>
            <cue name="ARG_VS_HOL_Construct_Defence">
              <cues>
                <cue name="ARG_VS_HOL_Construct_Defence_Register" version="3">
                  <actions>
                    <!--Argon Vs Holy Order - Construct Defence-->
                    <set_value name="$ThreadID" exact="'$arg_vs_hol_construct_defence'"/>
                    <set_value name="$Thread" exact="table[                            $ID = $ThreadID,                            $Faction = $Faction,                            $EnemyFaction = $EnemyFaction,                            $MissionGroup = $MissionGroup,                            $ThreadConditionLibs = [Situation__Cold_War, Situation__Contention, Situation__Defence_Prep, Situation__Pushback],                            $ThreadType = 'sequential',                            $MissionType = missiontype.build,                            $Difficulty = level.hard,                            $SubMissionLib = ARG_VS_HOL_Construct_Defence_Get_Submissions,                            $NameLib = ARG_VS_HOL_Construct_Defence_Construct_Name,                            $DescriptionLib = ARG_VS_HOL_Construct_Defence_Construct_Description,                            $RewardLib = ARG_VS_HOL_Construct_Defence_Construct_Reward,                            $MinMissions = 1,                            $MaxMissions = 2,                            $ThreadAbortRelation = -0.00064]"/>
                    <assert value="not $ManagerCue.$ThreadDefinitions.{$ThreadID}?" text="'Thread definition ' + $ThreadID + ' already exists in this table [Owen]'"/>
                    <set_value name="$ManagerCue.$ThreadDefinitions.{$ThreadID}" exact="$Thread"/>
                  </actions>
                  <patch sinceversion="2">
                    <append_to_list name="$Thread.$ThreadConditionLibs" exact="Situation__Pushback"/>
                  </patch>
                  <patch sinceversion="3" state="complete">
                    <set_value name="$ManagerCue.$ThreadDefinitions.$arg_vs_hol_construct_defence.$RewardLib" exact="ARG_VS_HOL_Construct_Defence_Construct_Reward"/>
                  </patch>
                </cue>
                <!--Called from CalculateThreads. Result saved to $New_Thread. Namespace is not this parent.-->
                <library name="ARG_VS_HOL_Construct_Defence_Get_Submissions">
                  <actions>
                    <set_value name="$Submissions" exact="table[]"/>
                    <set_value name="$Submissions.$build__defencestation" exact="table[$Cue = md.X4Ep1_War_Subscriptions.Build_Station__Standard, $MissionType = missiontype.build, $Page = 30211, $TextOffset = [105000], $Sequence = -1 ]"/>
                    <set_value name="$Submissions.$build__fleet" exact="table[$Cue = md.X4Ep1_War_Subscriptions.Get_Exact_Fleet__Standard, $MissionType = missiontype.build, $Page = 30211, $TextOffset = [120000], $Sequence = -1 ]"/>
                    <set_value name="$New_Thread.$Submissions" exact="$Submissions"/>
                  </actions>
                </library>
                <!--Called from CalculateThreads. Result saved to $New_Thread. Namespace is not this parent.-->
                <library name="ARG_VS_HOL_Construct_Defence_Construct_Name">
                  <actions>
                    <do_any>
                      <set_value name="this.$Name" exact="{30211, 4000}"/>
                      <set_value name="this.$Name" exact="{30211, 4001}"/>
                    </do_any>
                  </actions>
                </library>
                <!--Called from CalculateThreads where several values are set to help decide the briefing text. Result saved to $New_Thread. Namespace is not this parent.-->
                <library name="ARG_VS_HOL_Construct_Defence_Construct_Description">
                  <actions>
                    <do_if value="$ThreadMood == 'negative'">
                      <do_any>
                        <set_value name="this.$Description" exact="{30211, 4101}"/>
                        <set_value name="this.$Description" exact="{30211, 4102}"/>
                      </do_any>
                      <set_value name="this.$Description" operation="add" exact="' ' + {30211, 4111}"/>
                      <do_any>
                        <set_value name="this.$Description" operation="add" exact="'\n' + {30211, 4121}"/>
                        <set_value name="this.$Description" operation="add" exact="'\n' + {30211, 4122}"/>
                      </do_any>
                    </do_if>
                    <do_elseif value="$ThreadMood == 'positive'">
                      <do_any>
                        <set_value name="this.$Description" exact="{30211, 4201}"/>
                        <set_value name="this.$Description" exact="{30211, 4202}"/>
                      </do_any>
                      <set_value name="this.$Description" operation="add" exact="' ' + {30211, 4211}"/>
                      <set_value name="this.$Description" operation="add" exact="'\n' + {30211, 4221}"/>
                    </do_elseif>
                  </actions>
                </library>
                <library name="ARG_VS_HOL_Construct_Defence_Construct_Reward">
                  <actions>
                    <do_if value="true" chance="70">
                      <!-- mod(part) reward-->
                      <do_any>
                        <set_value name="this.$RewardObject" exact="[ware.paintmod_0087]" weight="15" comment="special arg vs hol subscription paint"/>
                        <set_value name="this.$RewardObject" exact="[ware.paintmod_0002]" weight="15" comment="basic argon faction paint"/>
                        <set_value name="this.$RewardObject" exact="[[ware.modpart_tuningsoftware, ware.modpart_shieldgeneratorcoil_t1, ware.modpart_shieldgeneratorcoil_t2].random]" weight="15" comment="modpart"/>
                        <set_value name="this.$RewardObject" exact="[ware.modpart_tuningsoftware, [ware.modpart_shieldgeneratorcoil_t1, ware.modpart_shieldgeneratorcoil_t2].random]" weight="15" comment="complete mod"/>
                        <set_value name="this.$RewardObject" exact="[ware.modpart_shieldgeneratorcoil_t3]" weight="5" comment="rare modpart"/>
                        <set_value name="this.$RewardObject" exact="[[ware.inv_seminar_piloting_2, ware.inv_seminar_piloting_2, ware.inv_seminar_management_2].random]" weight="15"/>
                        <set_value name="this.$RewardObject" exact="[[ware.inv_seminar_piloting_3, ware.inv_seminar_piloting_3, ware.inv_seminar_management_3].random]" weight="4"/>
                        <set_value name="this.$RewardObject" exact="[[ware.inv_seminar_piloting_4, ware.inv_seminar_management_4].random]" weight="1"/>
                      </do_any>
                    </do_if>
                    <do_else>
                      <!-- setup the ship-reward -->
                      <set_value name="this.$RewardObject" exact="[]"/>
                      <set_value name="$shipcargo" exact="[[2500, ware.nividium]]"/>
                      <set_value name="$Faction" exact="faction.argon"/>
                      <run_actions ref="md.LIB_Generic.FindShipMacroForCargo" result="$shipmacro">
                        <param name="shipcargo" value="$shipcargo"/>
                        <param name="Faction" value="$Faction"/>
                      </run_actions>
                      <run_actions ref="md.LIB_Generic.FindNearestStationForFaction" result="$SuitableStation">
                        <param name="Faction" value="$Faction"/>
                      </run_actions>
                      <do_if value="$shipmacro and $SuitableStation">
                        <generate_loadout result="$shiploadout" macro="$shipmacro" level="[0.3, 0.4, 0.5, 0.6, 0.7].random"/>
                        <set_value name="$MaxCrewCapacity" exact="$shipmacro.people.capacity"/>
                        <set_value name="$RewardShip" exact="table[                             $macro        = $shipmacro,                             $loadout      = $shiploadout,                              $cargo        = $shipcargo,                              $station      = $SuitableStation,                              $pilot        = [faction.argon, [tag.pilot], [8,10].random],                             $bulkcrew     = [$MaxCrewCapacity, ['argon_military_crew', 'argon_freighter_crew'].random, 100],                              $mods         = [ware.mod_shield_capacity_01_mk3, ware.mod_engine_travelthrust_02_mk2],                             $paintmod     = [ware.paintmod_0072].random,                         ]"/>
                        <append_to_list name="this.$RewardObject" exact="$RewardShip"/>
                      </do_if>
                    </do_else>
                    <run_actions ref="md.LIB_Generic.GenerateRewardText" result="this.$RewardText">
                      <param name="RewardObject" value="this.$RewardObject"/>
                    </run_actions>
                  </actions>
                </library>
              </cues>
            </cue>
            <cue name="ARG_VS_HOL_Secure_Resources">
              <cues>
                <cue name="ARG_VS_HOL_Secure_Resources_Register" version="3">
                  <actions>
                    <!--Argon Vs Holy Order - Secure Resources-->
                    <set_value name="$ThreadID" exact="'$arg_vs_hol_secure_resources'"/>
                    <set_value name="$Thread" exact="table[                            $ID = $ThreadID,                            $Faction = $Faction,                            $EnemyFaction = $EnemyFaction,                            $MissionGroup = $MissionGroup,                            $ThreadConditionLibs = [Situation__Cold_War, Situation__Contention, Situation__Defence_Prep, Situation__Invasion_Prep],                            $ThreadType = 'sequential',                            $MissionType = missiontype.trade,                            $Difficulty = level.medium,                            $SubMissionLib = ARG_VS_HOL_Secure_Resources_Get_Submissions,                            $NameLib = ARG_VS_HOL_Secure_Resources_Construct_Name,                            $DescriptionLib = ARG_VS_HOL_Secure_Resources_Construct_Description,                            $RewardLib = ARG_VS_HOL_Secure_Resources_Construct_Reward,                            $MinMissions = 4,                            $MaxMissions = 5,                            $ThreadAbortRelation = -0.00064]"/>
                    <assert value="not $ManagerCue.$ThreadDefinitions.{$ThreadID}?" text="'Thread definition ' + $ThreadID + ' already exists in this table [Owen]'"/>
                    <set_value name="$ManagerCue.$ThreadDefinitions.{$ThreadID}" exact="$Thread"/>
                  </actions>
                  <patch sinceversion="3" state="complete">
                    <set_value name="$ManagerCue.$ThreadDefinitions.$arg_vs_hol_secure_resources.$RewardLib" exact="ARG_VS_HOL_Secure_Resources_Construct_Reward"/>
                  </patch>
                </cue>
                <!--Called from CalculateThreads. Result saved to $New_Thread. Namespace is not this parent.-->
                <library name="ARG_VS_HOL_Secure_Resources_Get_Submissions">
                  <actions>
                    <set_value name="$Submissions" exact="table[]"/>
                    <set_value name="$Submissions.$large_supply__food" exact="table[$Cue = md.X4Ep1_War_Subscriptions.Large_Supply__Standard,     $MissionType = missiontype.trade, $Page = 30211, $TextOffset = [100000], $Sequence = -1 ]"/>
                    <set_value name="$Submissions.$large_supply__shiptech" exact="table[$Cue = md.X4Ep1_War_Subscriptions.Large_Supply__Standard,     $MissionType = missiontype.trade, $Page = 30211, $TextOffset = [100100], $Sequence = -1 ]"/>
                    <set_value name="$Submissions.$deploy_lasertowers_at_resources" exact="table[$Cue = md.X4Ep1_War_Subscriptions.DeployInPlace__Standard,    $MissionType = missiontype.drop,  $Page = 30211, $TextOffset = [101300], $Sequence = -1 ]"/>
                    <set_value name="$Submissions.$find_resources__ores" exact="table[$Cue = md.X4Ep1_War_Subscriptions.Find_Resources__Standard,   $MissionType = missiontype.find,  $Page = 30211, $TextOffset = [106000], $Sequence = -1 ]"/>
                    <set_value name="$Submissions.$supply_station" exact="table[$Cue = md.X4Ep1_War_Subscriptions.Supply_Factory__Standard,   $MissionType = missiontype.find,  $Page = 30211, $TextOffset = [130000], $Sequence = -1 ]"/>
                    <set_value name="$New_Thread.$Submissions" exact="$Submissions"/>
                  </actions>
                </library>
                <!--Called from CalculateThreads. Result saved to $New_Thread. Namespace is not this parent.-->
                <library name="ARG_VS_HOL_Secure_Resources_Construct_Name">
                  <actions>
                    <do_any>
                      <set_value name="this.$Name" exact="{30211, 5000}"/>
                      <set_value name="this.$Name" exact="{30211, 5001}"/>
                    </do_any>
                  </actions>
                </library>
                <!--Called from CalculateThreads where several values are set to help decide the briefing text. Result saved to $New_Thread. Namespace is not this parent.-->
                <library name="ARG_VS_HOL_Secure_Resources_Construct_Description">
                  <actions>
                    <do_if value="$ThreadMood == 'negative'">
                      <do_any>
                        <set_value name="this.$Description" exact="{30211, 5101}"/>
                        <set_value name="this.$Description" exact="{30211, 5102}"/>
                      </do_any>
                      <set_value name="this.$Description" operation="add" exact="' ' + {30211, 5111}"/>
                      <do_any>
                        <set_value name="this.$Description" operation="add" exact="'\n' + {30211, 5121}"/>
                        <set_value name="this.$Description" operation="add" exact="'\n' + {30211, 5122}"/>
                      </do_any>
                    </do_if>
                    <do_elseif value="$ThreadMood == 'positive'">
                      <do_any>
                        <set_value name="this.$Description" exact="{30211, 5201}"/>
                        <set_value name="this.$Description" exact="{30211, 5202}"/>
                      </do_any>
                      <set_value name="this.$Description" operation="add" exact="' ' + {30211, 5211}"/>
                      <set_value name="this.$Description" operation="add" exact="'\n' + {30211, 5221}"/>
                    </do_elseif>
                  </actions>
                </library>
                <library name="ARG_VS_HOL_Secure_Resources_Construct_Reward">
                  <actions>
                    <do_any>
                      <set_value name="this.$RewardObject" exact="[ware.paintmod_0087]" weight="15" comment="special arg vs hol subscription paint"/>
                      <set_value name="this.$RewardObject" exact="[ware.paintmod_0002]" weight="15" comment="basic argon faction paint"/>
                      <set_value name="this.$RewardObject" exact="[[ware.modpart_extendedfuelcontainer, ware.modpart_nividiumoxide, ware.modpart_enginefuelinjector_t1, ware.modpart_enginefuelinjector_t2].random]" weight="15" comment="modpart"/>
                      <set_value name="this.$RewardObject" exact="[ware.modpart_extendedfuelcontainer, ware.modpart_nividiumoxide, [ware.modpart_enginefuelinjector_t1, ware.modpart_enginefuelinjector_t2].random]" weight="15" comment="complete mod"/>
                      <set_value name="this.$RewardObject" exact="[ware.modpart_enginefuelinjector_t3]" weight="5" comment="rare modpart"/>
                      <set_value name="this.$RewardObject" exact="[[ware.inv_seminar_piloting_2, ware.inv_seminar_piloting_2, ware.inv_seminar_management_2].random]" weight="15"/>
                      <set_value name="this.$RewardObject" exact="[[ware.inv_seminar_piloting_3, ware.inv_seminar_piloting_3, ware.inv_seminar_management_3].random]" weight="4"/>
                      <set_value name="this.$RewardObject" exact="[[ware.inv_seminar_piloting_4, ware.inv_seminar_management_4].random]" weight="1"/>
                    </do_any>
                    <run_actions ref="md.LIB_Generic.GenerateRewardText" result="this.$RewardText">
                      <param name="RewardObject" value="this.$RewardObject"/>
                    </run_actions>
                  </actions>
                </library>
              </cues>
            </cue>
            <cue name="ARG_VS_HOL_Preemptive_Offensive">
              <cues>
                <cue name="ARG_VS_HOL_Preemptive_Offensive_Register" version="3">
                  <actions>
                    <!--Argon Vs Holy Order - Preemptive Offensive-->
                    <set_value name="$ThreadID" exact="'$arg_vs_hol_preemptive_offensive'"/>
                    <set_value name="$Thread" exact="table[                            $ID = $ThreadID,                            $Faction = $Faction,                            $EnemyFaction = $EnemyFaction,                            $MissionGroup = $MissionGroup,                            $ThreadConditionLibs = [Situation__Cold_War, Situation__Invasion_Prep],                            $ThreadType = 'sequential',                            $MissionType = missiontype.fight,                            $Difficulty = level.hard,                            $SubMissionLib = ARG_VS_HOL_Preemptive_Offensive_Get_Submissions,                            $NameLib = ARG_VS_HOL_Preemptive_Offensive_Construct_Name,                            $DescriptionLib = ARG_VS_HOL_Preemptive_Offensive_Construct_Description,                            $RewardLib = ARG_VS_HOL_Preemptive_Offensive_Construct_Reward,                            $MinMissions = 4,                            $MaxMissions = 6,                            $ThreadAbortRelation = -0.00064]"/>
                    <assert value="not $ManagerCue.$ThreadDefinitions.{$ThreadID}?" text="'Thread definition ' + $ThreadID + ' already exists in this table [Owen]'"/>
                    <set_value name="$ManagerCue.$ThreadDefinitions.{$ThreadID}" exact="$Thread"/>
                  </actions>
                  <patch sinceversion="3" state="complete">
                    <set_value name="$ManagerCue.$ThreadDefinitions.$arg_vs_hol_preemptive_offensive.$RewardLib" exact="ARG_VS_HOL_Preemptive_Offensive_Construct_Reward"/>
                  </patch>
                </cue>
                <!--Called from CalculateThreads. Result saved to $New_Thread. Namespace is not this parent.-->
                <library name="ARG_VS_HOL_Preemptive_Offensive_Get_Submissions">
                  <actions>
                    <set_value name="$Submissions" exact="table[]"/>
                    <set_value name="$Submissions.$assassination__informant" exact="table[$Cue = md.X4Ep1_War_Subscriptions.Assassinate__Standard, $MissionType = missiontype.kill,  $Page = 30211, $TextOffset = [107000, 107100], $Sequence = -1 ]"/>
                    <set_value name="$Submissions.$board_ship" exact="table[$Cue = md.X4Ep1_War_Subscriptions.BoardShip__Standard,   $MissionType = missiontype.board, $Page = 30211, $TextOffset = [108000], $Sequence = -1 ]"/>
                    <set_value name="$Submissions.$destroy_rare_ship" exact="table[$Cue = md.X4Ep1_War_Subscriptions.DestroyRarelyOnSight__Standard,   $MissionType = missiontype.destroy, $Page = 30211, $TextOffset = [140000], $Sequence = -1 ]"/>
                    <set_value name="$Submissions.$destroy_objects_mines" exact="table[$Cue = md.X4Ep1_War_Subscriptions.Destroy_Objects__Clear_Explosives, $MissionType = missiontype.destroy, $Page = 30211, $TextOffset = [160000, 160100], $Sequence = -1 ]"/>
                    <set_value name="$Submissions.$destroy_objects_lasertowers" exact="table[$Cue = md.X4Ep1_War_Subscriptions.Destroy_Objects__Clear_Explosives, $MissionType = missiontype.destroy, $Page = 30211, $TextOffset = [161000, 161100], $Sequence = -1 ]"/>
                    <set_value name="$Submissions.$destroy_station_turrets" exact="table[$Cue = md.X4Ep1_War_Subscriptions.DestroyStation__Standard,   $MissionType = missiontype.destroy, $Page = 30211, $TextOffset = [180000], $Sequence = -1 ]"/>
                    <set_value name="$New_Thread.$Submissions" exact="$Submissions"/>
                  </actions>
                </library>
                <!--Called from CalculateThreads. Result saved to $New_Thread. Namespace is not this parent.-->
                <library name="ARG_VS_HOL_Preemptive_Offensive_Construct_Name">
                  <actions>
                    <do_any>
                      <set_value name="this.$Name" exact="{30211, 6000}"/>
                      <set_value name="this.$Name" exact="{30211, 6001}"/>
                    </do_any>
                  </actions>
                </library>
                <!--Called from CalculateThreads where several values are set to help decide the briefing text. Result saved to $New_Thread. Namespace is not this parent.-->
                <library name="ARG_VS_HOL_Preemptive_Offensive_Construct_Description">
                  <actions>
                    <do_if value="$ThreadMood == 'negative'">
                      <do_any>
                        <set_value name="this.$Description" exact="{30211, 6101}"/>
                        <set_value name="this.$Description" exact="{30211, 6102}"/>
                      </do_any>
                      <set_value name="this.$Description" operation="add" exact="' ' + {30211, 6111}"/>
                      <do_any>
                        <set_value name="this.$Description" operation="add" exact="'\n' + {30211, 6121}"/>
                        <set_value name="this.$Description" operation="add" exact="'\n' + {30211, 6122}"/>
                      </do_any>
                    </do_if>
                    <do_elseif value="$ThreadMood == 'positive'">
                      <do_any>
                        <set_value name="this.$Description" exact="{30211, 6201}"/>
                        <set_value name="this.$Description" exact="{30211, 6202}"/>
                      </do_any>
                      <set_value name="this.$Description" operation="add" exact="' ' + {30211, 6211}"/>
                      <set_value name="this.$Description" operation="add" exact="'\n' + {30211, 6221}"/>
                    </do_elseif>
                  </actions>
                </library>
                <library name="ARG_VS_HOL_Preemptive_Offensive_Construct_Reward">
                  <actions>
                    <do_any>
                      <set_value name="this.$RewardObject" exact="[ware.paintmod_0087]" weight="15" comment="special arg vs hol subscription paint"/>
                      <set_value name="this.$RewardObject" exact="[ware.paintmod_0002]" weight="15" comment="basic argon faction paint"/>
                      <set_value name="this.$RewardObject" exact="[[ware.modpart_highenergycatalyst, ware.modpart_tuningsoftware, ware.modpart_weaponchamber_t1, ware.modpart_weaponchamber_t2].random]" weight="15" comment="modpart"/>
                      <set_value name="this.$RewardObject" exact="[ware.modpart_highenergycatalyst, ware.modpart_tuningsoftware, [ware.modpart_weaponchamber_t1, ware.modpart_weaponchamber_t2].random]" weight="15" comment="complete mod"/>
                      <set_value name="this.$RewardObject" exact="[ware.modpart_weaponchamber_t3]" weight="5" comment="rare modpart"/>
                      <set_value name="this.$RewardObject" exact="[[ware.inv_seminar_piloting_2, ware.inv_seminar_piloting_2, ware.inv_seminar_management_2].random]" weight="15"/>
                      <set_value name="this.$RewardObject" exact="[[ware.inv_seminar_piloting_3, ware.inv_seminar_piloting_3, ware.inv_seminar_management_3].random]" weight="4"/>
                      <set_value name="this.$RewardObject" exact="[[ware.inv_seminar_piloting_4, ware.inv_seminar_management_4].random]" weight="1"/>
                    </do_any>
                    <run_actions ref="md.LIB_Generic.GenerateRewardText" result="this.$RewardText">
                      <param name="RewardObject" value="this.$RewardObject"/>
                    </run_actions>
                  </actions>
                </library>
              </cues>
            </cue>
            <cue name="ARG_VS_HOL_Station_Offensive">
              <cues>
                <cue name="ARG_VS_HOL_Station_Offensive_Register">
                  <actions>
                    <!--Argon Vs Holy Order - Station Offensive-->
                    <set_value name="$ThreadID" exact="'$arg_vs_hol_station_offensive'"/>
                    <set_value name="$Thread" exact="table[                            $ID = $ThreadID,                            $Faction = $Faction,                            $EnemyFaction = $EnemyFaction,                            $MissionGroup = $MissionGroup,                            $ThreadConditionLibs = [Situation__Invasion_Prep, Situation__Invading, Situation__Pushback],                            $ThreadType = 'sequential',                            $MissionType = missiontype.destroy,                            $Difficulty = level.veryhard,                            $SubMissionLib = ARG_VS_HOL_Station_Offensive_Get_Submissions,                            $NameLib = ARG_VS_HOL_Station_Offensive_Construct_Name,                            $DescriptionLib = ARG_VS_HOL_Station_Offensive_Construct_Description,                            $RewardLib = ARG_VS_HOL_Station_Offensive_Construct_Reward,                            $MinMissions = 1,                            $MaxMissions = 1,                            $ThreadAbortRelation = -0.00064]"/>
                    <assert value="not $ManagerCue.$ThreadDefinitions.{$ThreadID}?" text="'Thread definition ' + $ThreadID + ' already exists in this table [Owen]'"/>
                    <set_value name="$ManagerCue.$ThreadDefinitions.{$ThreadID}" exact="$Thread"/>
                  </actions>
                </cue>
                <!--Called from CalculateThreads. Result saved to $New_Thread. Namespace is not this parent.-->
                <library name="ARG_VS_HOL_Station_Offensive_Get_Submissions">
                  <actions>
                    <set_value name="$Submissions" exact="table[]"/>
                    <set_value name="$Submissions.$destroy_station" exact="table[$Cue = md.X4Ep1_War_Subscriptions.DestroyStation__Standard,   $MissionType = missiontype.destroy, $Page = 30211, $TextOffset = [170000], $Sequence = -1 ]"/>
                    <set_value name="$New_Thread.$Submissions" exact="$Submissions"/>
                  </actions>
                </library>
                <!--Called from CalculateThreads. Result saved to $New_Thread. Namespace is not this parent.-->
                <library name="ARG_VS_HOL_Station_Offensive_Construct_Name">
                  <actions>
                    <do_any>
                      <set_value name="this.$Name" exact="{30211, 9000}"/>
                    </do_any>
                  </actions>
                </library>
                <!--Called from CalculateThreads where several values are set to help decide the briefing text. Result saved to $New_Thread. Namespace is not this parent.-->
                <library name="ARG_VS_HOL_Station_Offensive_Construct_Description">
                  <actions>
                    <do_if value="$ThreadMood == 'negative'">
                      <do_any>
                        <set_value name="this.$Description" exact="{30211, 9101}"/>
                        <set_value name="this.$Description" exact="{30211, 9102}"/>
                      </do_any>
                      <set_value name="this.$Description" operation="add" exact="' ' + {30211, 9111}"/>
                      <do_any>
                        <set_value name="this.$Description" operation="add" exact="'\n' + {30211, 9121}"/>
                        <set_value name="this.$Description" operation="add" exact="'\n' + {30211, 9122}"/>
                      </do_any>
                    </do_if>
                    <do_elseif value="$ThreadMood == 'positive'">
                      <do_any>
                        <set_value name="this.$Description" exact="{30211, 9201}"/>
                        <set_value name="this.$Description" exact="{30211, 9202}"/>
                      </do_any>
                      <set_value name="this.$Description" operation="add" exact="' ' + {30211, 9211}"/>
                      <set_value name="this.$Description" operation="add" exact="'\n' + {30211, 9221}"/>
                    </do_elseif>
                  </actions>
                </library>
                <library name="ARG_VS_HOL_Station_Offensive_Construct_Reward">
                  <actions>
                    <do_any>
                      <set_value name="this.$RewardObject" exact="[ware.paintmod_0087]" weight="10" comment="special arg vs hol subscription paint"/>
                      <set_value name="this.$RewardObject" exact="[ware.paintmod_0002]" weight="10" comment="basic argon faction paint"/>
                      <set_value name="this.$RewardObject" exact="[[ware.modpart_highenergycatalyst, ware.modpart_tuningsoftware, ware.modpart_weaponchamber_t1, ware.modpart_weaponchamber_t2].random]" weight="5" comment="modpart"/>
                      <set_value name="this.$RewardObject" exact="[ware.modpart_highenergycatalyst, ware.modpart_tuningsoftware, [ware.modpart_weaponchamber_t1, ware.modpart_weaponchamber_t2].random]" weight="10" comment="complete mod"/>
                      <set_value name="this.$RewardObject" exact="[ware.modpart_weaponchamber_t3]" weight="10" comment="rare modpart"/>
                      <set_value name="this.$RewardObject" exact="[[ware.inv_seminar_piloting_3, ware.inv_seminar_piloting_3, ware.inv_seminar_management_3].random]" weight="6"/>
                      <set_value name="this.$RewardObject" exact="[[ware.inv_seminar_piloting_4, ware.inv_seminar_piloting_4, ware.inv_seminar_management_4].random]" weight="4"/>
                    </do_any>
                    <run_actions ref="md.LIB_Generic.GenerateRewardText" result="this.$RewardText">
                      <param name="RewardObject" value="this.$RewardObject"/>
                    </run_actions>
                  </actions>
                </library>
              </cues>
            </cue>
            <cue name="ARG_VS_HOL_Gather_Intel">
              <cues>
                <cue name="ARG_VS_HOL_Preemptive_Gather_Intel" version="3">
                  <actions>
                    <!--Argon Vs Holy Order - Gather Intel-->
                    <set_value name="$ThreadID" exact="'$arg_vs_hol_gather_intel'"/>
                    <set_value name="$Thread" exact="table[                            $ID = $ThreadID,                            $Faction = $Faction,                            $EnemyFaction = $EnemyFaction,                            $MissionGroup = $MissionGroup,                            $ThreadConditionLibs = [Situation__Cold_War, Situation__Contention, Situation__Invasion_Prep],                            $ThreadType = 'sequential',                            $MissionType = missiontype.intelligence,                            $Difficulty = level.easy,                            $SubMissionLib = ARG_VS_HOL_Gather_Intel_Get_Submissions,                            $NameLib = ARG_VS_HOL_Gather_Intel_Construct_Name,                            $DescriptionLib = ARG_VS_HOL_Gather_Intel_Construct_Description,                            $RewardLib = ARG_VS_HOL_Preemptive_Gather_Intel_Construct_Reward,                            $MinMissions = 2,                            $MaxMissions = 3,                            $ThreadAbortRelation = -0.00064]"/>
                    <assert value="not $ManagerCue.$ThreadDefinitions.{$ThreadID}?" text="'Thread definition ' + $ThreadID + ' already exists in this table [Owen]'"/>
                    <set_value name="$ManagerCue.$ThreadDefinitions.{$ThreadID}" exact="$Thread"/>
                  </actions>
                  <patch sinceversion="3" state="complete">
                    <set_value name="$ManagerCue.$ThreadDefinitions.$arg_vs_hol_gather_intel.$RewardLib" exact="ARG_VS_HOL_Preemptive_Gather_Intel_Construct_Reward"/>
                  </patch>
                </cue>
                <!--Called from CalculateThreads. Result saved to $New_Thread. Namespace is not this parent.-->
                <library name="ARG_VS_HOL_Gather_Intel_Get_Submissions">
                  <actions>
                    <set_value name="$Submissions" exact="table[]"/>
                    <set_value name="$Submissions.$deploy_satellite" exact="table[$Cue = md.X4Ep1_War_Subscriptions.DeployInPlace__Standard,    $MissionType = missiontype.drop,  $Page = 30211, $TextOffset = [101400], $Sequence = -1 ]"/>
                    <set_value name="$Submissions.$achieve_coverage__enemy_sector" exact="table[$Cue = md.X4Ep1_War_Subscriptions.Achieve_Coverage__Standard, $MissionType = missiontype.drop,  $Page = 30211, $TextOffset = [102100], $Sequence = -1 ]"/>
                    <set_value name="$Submissions.$find_resources__enemy_sector" exact="table[$Cue = md.X4Ep1_War_Subscriptions.Find_Resources__Standard,   $MissionType = missiontype.find,  $Page = 30211, $TextOffset = [106100], $Sequence = -1 ]"/>
                    <set_value name="$Submissions.$scan__ship" exact="table[$Cue = md.X4Ep1_War_Subscriptions.Scan__Standard,             $MissionType = missiontype.find,  $Page = 30211, $TextOffset = [150000], $Sequence = -1 ]"/>
                    <set_value name="$Submissions.$scan__station" exact="table[$Cue = md.X4Ep1_War_Subscriptions.Scan__Standard,             $MissionType = missiontype.find,  $Page = 30211, $TextOffset = [150100], $Sequence = -1 ]"/>
                    <set_value name="$Submissions.$scan__module" exact="table[$Cue = md.X4Ep1_War_Subscriptions.Scan__Standard,             $MissionType = missiontype.find,  $Page = 30211, $TextOffset = [150200], $Sequence = -1 ]"/>
                    <set_value name="$Submissions.$scan__for_ware" exact="table[$Cue = md.X4Ep1_War_Subscriptions.Scan__Standard,             $MissionType = missiontype.find,  $Page = 30211, $TextOffset = [150300, 150700, 150800], $Sequence = -1 ]"/>
                    <!--<set_value name="$Submissions.$scan__for_inventory"
                                 exact="table[$Cue = md.X4Ep1_War_Subscriptions.Scan__Standard,             $MissionType = missiontype.find,  $Page = 30211, $TextOffset = [150400], $Sequence = -1 ]"/>-->
                    <!--$scan__for_entity currently disabled as it's quite a chore-->
                    <!--<set_value name="$Submissions.$scan__for_entity"
                                 exact="table[$Cue = md.X4Ep1_War_Subscriptions.Scan__Standard,             $MissionType = missiontype.find,  $Page = 30211, $TextOffset = [150500], $Sequence = -1 ]"/>-->
                    <!--<set_value name="$Submissions.$scan__for_idcode"
                                 exact="table[$Cue = md.X4Ep1_War_Subscriptions.Scan__Standard,             $MissionType = missiontype.find,  $Page = 30211, $TextOffset = [150600], $Sequence = -1 ]"/>-->
                    <set_value name="$New_Thread.$Submissions" exact="$Submissions"/>
                  </actions>
                </library>
                <!--Called from CalculateThreads. Result saved to $New_Thread. Namespace is not this parent.-->
                <library name="ARG_VS_HOL_Gather_Intel_Construct_Name">
                  <actions>
                    <do_any>
                      <set_value name="this.$Name" exact="{30211, 7000}"/>
                      <set_value name="this.$Name" exact="{30211, 7001}"/>
                    </do_any>
                  </actions>
                </library>
                <!--Called from CalculateThreads where several values are set to help decide the briefing text. Result saved to $New_Thread. Namespace is not this parent.-->
                <library name="ARG_VS_HOL_Gather_Intel_Construct_Description">
                  <actions>
                    <do_if value="$ThreadMood == 'negative'">
                      <do_any>
                        <set_value name="this.$Description" exact="{30211, 7101}"/>
                        <set_value name="this.$Description" exact="{30211, 7102}"/>
                      </do_any>
                      <set_value name="this.$Description" operation="add" exact="' ' + {30211, 7111}"/>
                      <do_any>
                        <set_value name="this.$Description" operation="add" exact="'\n' + {30211, 7121}"/>
                        <set_value name="this.$Description" operation="add" exact="'\n' + {30211, 7122}"/>
                      </do_any>
                    </do_if>
                    <do_elseif value="$ThreadMood == 'positive'">
                      <do_any>
                        <set_value name="this.$Description" exact="{30211, 7201}"/>
                        <set_value name="this.$Description" exact="{30211, 7202}"/>
                      </do_any>
                      <set_value name="this.$Description" operation="add" exact="' ' + {30211, 7211}"/>
                      <set_value name="this.$Description" operation="add" exact="'\n' + {30211, 7221}"/>
                    </do_elseif>
                  </actions>
                </library>
                <library name="ARG_VS_HOL_Preemptive_Gather_Intel_Construct_Reward">
                  <actions>
                    <do_any>
                      <set_value name="this.$RewardObject" exact="[ware.paintmod_0087]" weight="15" comment="special arg vs hol subscription paint"/>
                      <set_value name="this.$RewardObject" exact="[ware.paintmod_0002]" weight="15" comment="basic argon faction paint"/>
                      <set_value name="this.$RewardObject" exact="[[ware.modpart_extendedfuelcontainer, ware.modpart_nividiumoxide, ware.modpart_enginefuelinjector_t1, ware.modpart_enginefuelinjector_t2].random]" weight="9" comment="modpart"/>
                      <set_value name="this.$RewardObject" exact="[ware.modpart_extendedfuelcontainer, ware.modpart_nividiumoxide, [ware.modpart_enginefuelinjector_t1, ware.modpart_enginefuelinjector_t2].random]" weight="8" comment="complete mod"/>
                      <set_value name="this.$RewardObject" exact="[[ware.modpart_nividiumcrystallite, ware.modpart_shipnanoweave_t1, ware.modpart_shipnanoweave_t2].random]" weight="9" comment="modpart"/>
                      <set_value name="this.$RewardObject" exact="[ware.modpart_nividiumcrystallite, [ware.modpart_shipnanoweave_t1, ware.modpart_shipnanoweave_t2].random]" weight="8" comment="complete mod"/>
                      <set_value name="this.$RewardObject" exact="[[ware.modpart_shipnanoweave_t3, ware.modpart_enginefuelinjector_t3].random]" weight="4" comment="rare modpart"/>
                      <set_value name="this.$RewardObject" exact="[[ware.inv_seminar_piloting_2, ware.inv_seminar_piloting_2, ware.inv_seminar_management_2].random]" weight="14"/>
                      <set_value name="this.$RewardObject" exact="[[ware.inv_seminar_piloting_3, ware.inv_seminar_piloting_3, ware.inv_seminar_management_3].random]" weight="4"/>
                      <set_value name="this.$RewardObject" exact="[[ware.inv_seminar_piloting_4, ware.inv_seminar_management_4].random]" weight="1"/>
                    </do_any>
                    <run_actions ref="md.LIB_Generic.GenerateRewardText" result="this.$RewardText">
                      <param name="RewardObject" value="this.$RewardObject"/>
                    </run_actions>
                  </actions>
                </library>
              </cues>
            </cue>
            <cue name="ARG_VS_HOL_Support_Invasion">
              <cues>
                <cue name="ARG_VS_HOL_Preemptive_Support_Invasion" version="3">
                  <actions>
                    <!--Argon Vs Holy Order - Support Invasion-->
                    <set_value name="$ThreadID" exact="'$arg_vs_hol_support_invasion'"/>
                    <set_value name="$Thread" exact="table[                            $ID = $ThreadID,                            $Faction = $Faction,                            $EnemyFaction = $EnemyFaction,                            $MissionGroup = $MissionGroup,                            $ThreadConditionLibs = [Situation__Invading],                            $ThreadType = 'sequential',                            $MissionType = missiontype.fight,                            $Difficulty = level.hard,                            $SubMissionLib = ARG_VS_HOL_Support_Invasion_Get_Submissions,                            $NameLib = ARG_VS_HOL_Support_Invasion_Construct_Name,                            $DescriptionLib = ARG_VS_HOL_Support_Invasion_Construct_Description,                            $RewardLib = ARG_VS_HOL_Support_Invasion_Construct_Reward,                            $MinMissions = 1,                            $MaxMissions = 1,                            $ThreadAbortRelation = -0.00064]"/>
                    <assert value="not $ManagerCue.$ThreadDefinitions.{$ThreadID}?" text="'Thread definition ' + $ThreadID + ' already exists in this table [Owen]'"/>
                    <set_value name="$ManagerCue.$ThreadDefinitions.{$ThreadID}" exact="$Thread"/>
                  </actions>
                  <patch sinceversion="3" state="complete">
                    <set_value name="$ManagerCue.$ThreadDefinitions.$arg_vs_hol_support_invasion.$RewardLib" exact="ARG_VS_HOL_Support_Invasion_Construct_Reward"/>
                  </patch>
                </cue>
                <!--Called from CalculateThreads. Result saved to $New_Thread. Namespace is not this parent.-->
                <library name="ARG_VS_HOL_Support_Invasion_Get_Submissions">
                  <actions>
                    <set_value name="$Submissions" exact="table[]"/>
                    <!--<set_value name="$Submissions.$support_invasion"
                                 exact="table[$Cue = md.X4Ep1_War_Subscriptions.Support_Invasion__Standard,    $MissionType = missiontype.fight,  $Page = 30211, $TextOffset = [109000], $Sequence = -1 ]"/>-->
                    <set_value name="$New_Thread.$Submissions" exact="$Submissions"/>
                  </actions>
                </library>
                <!--Called from CalculateThreads. Result saved to $New_Thread. Namespace is not this parent.-->
                <library name="ARG_VS_HOL_Support_Invasion_Construct_Name">
                  <actions>
                    <do_any>
                      <set_value name="this.$Name" exact="{30211, 8000}"/>
                    </do_any>
                  </actions>
                </library>
                <!--Called from CalculateThreads where several values are set to help decide the briefing text. Result saved to $New_Thread. Namespace is not this parent.-->
                <library name="ARG_VS_HOL_Support_Invasion_Construct_Description">
                  <actions>
                    <do_if value="$ThreadMood == 'negative'">
                      <do_any>
                        <set_value name="this.$Description" exact="{30211, 8101}"/>
                      </do_any>
                      <set_value name="this.$Description" operation="add" exact="' ' + {30211, 8111}"/>
                      <do_any>
                        <set_value name="this.$Description" operation="add" exact="'\n' + {30211, 8121}"/>
                      </do_any>
                    </do_if>
                    <do_elseif value="$ThreadMood == 'positive'">
                      <do_any>
                        <set_value name="this.$Description" exact="{30211, 8201}"/>
                      </do_any>
                      <set_value name="this.$Description" operation="add" exact="' ' + {30211, 8211}"/>
                      <set_value name="this.$Description" operation="add" exact="'\n' + {30211, 8221}"/>
                    </do_elseif>
                  </actions>
                </library>
                <library name="ARG_VS_HOL_Support_Invasion_Construct_Reward">
                  <actions>
                    <do_any>
                      <set_value name="this.$RewardObject" exact="[ware.paintmod_0087]" weight="15" comment="special arg vs hol subscription paint"/>
                      <set_value name="this.$RewardObject" exact="[ware.paintmod_0002]" weight="15" comment="basic argon faction paint"/>
                      <set_value name="this.$RewardObject" exact="[[ware.modpart_nividiumcrystallite, ware.modpart_shipnanoweave_t1, ware.modpart_shipnanoweave_t2].random]" weight="9"/>
                      <set_value name="this.$RewardObject" exact="[[ware.modpart_highenergycatalyst, ware.modpart_tuningsoftware, ware.modpart_weaponchamber_t1, ware.modpart_weaponchamber_t2].random]" weight="8"/>
                      <set_value name="this.$RewardObject" exact="[ware.modpart_nividiumcrystallite, [ware.modpart_shipnanoweave_t1, ware.modpart_shipnanoweave_t2].random]" weight="9"/>
                      <set_value name="this.$RewardObject" exact="[ware.modpart_highenergycatalyst, ware.modpart_tuningsoftware, [ware.modpart_weaponchamber_t1, ware.modpart_weaponchamber_t2].random]" weight="8"/>
                      <set_value name="this.$RewardObject" exact="[[ware.modpart_shipnanoweave_t3, ware.modpart_weaponchamber_t3].random]" weight="4"/>
                      <set_value name="this.$RewardObject" exact="[[ware.inv_seminar_piloting_2, ware.inv_seminar_piloting_2, ware.inv_seminar_management_2].random]" weight="14"/>
                      <set_value name="this.$RewardObject" exact="[[ware.inv_seminar_piloting_3, ware.inv_seminar_piloting_3, ware.inv_seminar_management_3].random]" weight="4"/>
                      <set_value name="this.$RewardObject" exact="[[ware.inv_seminar_piloting_4, ware.inv_seminar_management_4].random]" weight="1"/>
                    </do_any>
                    <run_actions ref="md.LIB_Generic.GenerateRewardText" result="this.$RewardText">
                      <param name="RewardObject" value="this.$RewardObject"/>
                    </run_actions>
                  </actions>
                </library>
              </cues>
            </cue>
          </cues>
        </cue>
        <!--
        ###################################
        PARANID VS HOLY ORDER
        ###################################-->
        <cue name="PAR_VS_HOL" namespace="this" version="4">
          <actions>
            <!--Common values-->
            <set_value name="$ManagerCue" exact="parent.namespace"/>
            <set_value name="$Faction" exact="faction.paranid"/>
            <set_value name="$EnemyFaction" exact="faction.holyorder"/>
            <set_value name="$MissionGroup" exact="missiongroup.paranid_war_holyorder"/>
            <set_value name="$Mission_Contact" exact="null"/>
            <set_value name="$Page" exact="30212" comment="Paranid-HolyOrder-War page"/>
            <set_value name="$ManagerCue.$MissionGroupCues.{$MissionGroup}" exact="this"/>
            <set_value name="$SubscriptionMinRel" exact="$Faction.relation.friend.min"/>
            <set_value name="$SubscriptionLossRel" exact="-0.00064" comment="for UI-value -1"/>
            <set_value name="$HasIntroMission" exact="false"/>
            <set_value name="$DebugChance" exact="$ManagerCue.$DebugChance"/>
            <!--Status-->
            <set_value name="$SubscriptionStatus" exact="null"/>
            <set_value name="$IntroducedToContact" exact="false"/>
            <set_value name="$JobsDescribed" exact="false"/>
            <set_value name="$ConflictDescribed" exact="false"/>
            <set_value name="$IntroMissionSuccessful" exact="false"/>
            <set_value name="$CooldownTime" exact="-1s"/>
            <!--Stats-->
            <set_value name="$ThreadsCompleted" exact="0"/>
            <set_value name="$ThreadsFailed" exact="0"/>
            <set_value name="$MissionsCompleted" exact="0"/>
            <set_value name="$MissionsFailed" exact="0"/>
          </actions>
          <patch sinceversion="2" state="complete">
            <do_if value="$CooldownTime gt (player.age + 5min)">
              <debug_text text="'Reducing mission subscription cooldowntime from ' + $CooldownTime + ' to ' + player.age + 5min" filter="savegame"/>
              <set_value name="$CooldownTime" exact="player.age + 5min"/>
            </do_if>
          </patch>
          <patch sinceversion="3" state="complete">
            <do_if value="not md.$SubscribedMissionGroups?">
              <create_list name="md.$SubscribedMissionGroups"/>
            </do_if>
            <do_if value="$SubscriptionStatus == 'subscribed'">
              <append_to_list name="md.$SubscribedMissionGroups" exact="$MissionGroup"/>
            </do_if>
          </patch>
          <patch sinceversion="4" state="complete">
            <set_value name="$HasIntroMission" exact="false"/>
          </patch>
          <cues>
            <cue name="PAR_VS_HOL_Init">
              <actions>
                <set_value name="$ContactCreatorCue" exact="PAR_VS_HOL_Create_Contact"/>
                <set_value name="$IntroMissionCue" exact="PAR_VS_HOL_Introduction"/>
                <!--$SubscriptionStatus:
                - 'unsubscribed'
                - 'probation'
                - 'subscribed'
                - 'cooldown'-->
                <signal_cue_instantly cue="PAR_VS_HOL_Set_Subscription_Status" param="'unsubscribed'" comment="TODO: @Owen, @Roger - temporary, change back to unsubscribed!"/>
              </actions>
            </cue>
            <!--
            ####################
            DEBUG
            ####################-->
            <cue name="PAR_VS_HOL_Debug_Reset">
              <conditions>
                <event_cue_signalled/>
              </conditions>
              <actions>
                <do_all exact="$ManagerCue.$Threads.count" counter="$i" reverse="true">
                  <do_if value="$ManagerCue.$Threads.{$i}.$ThreadCue.$Definition.$MissionGroup == $MissionGroup">
                    <signal_cue_instantly cue="$ManagerCue.$Threads.{$i}.$CleanupCue"/>
                  </do_if>
                </do_all>
                <set_value name="$DefinitionKeys" exact="$ManagerCue.$ThreadDefinitions.keys.list"/>
                <do_all exact="$DefinitionKeys.count" counter="$i" reverse="true">
                  <do_if value="$ManagerCue.$ThreadDefinitions.{$DefinitionKeys.{$i}}.$MissionGroup == $MissionGroup">
                    <remove_value name="$ManagerCue.$ThreadDefinitions.{$DefinitionKeys.{$i}}"/>
                  </do_if>
                </do_all>
                <do_if value="$Mission_Contact.isclass.npc">
                  <destroy_object object="$Mission_Contact"/>
                </do_if>
                <set_value name="$Mission_Contact" exact="null"/>
                <reset_cue cue="namespace"/>
                <reset_cue cue="Gamestart" comment="Trigger CalculateThreads again"/>
              </actions>
            </cue>
            <cue name="PAR_VS_HOL_Debug_Subscribe" instantiate="true">
              <conditions>
                <event_cue_signalled/>
              </conditions>
              <actions>
                <signal_cue_instantly cue="PAR_VS_HOL_Set_Subscription_Status" param="'subscribed'"/>
              </actions>
            </cue>
            <!--
            ####################
            SUBSCRIPTION
            ####################-->
            <!--event.param == new status-->
            <cue name="PAR_VS_HOL_Set_Subscription_Status" instantiate="true">
              <conditions>
                <event_cue_signalled/>
              </conditions>
              <actions>
                <do_if value="                        event.param == 'unsubscribed' or                        event.param == 'probation' or                        event.param == 'subscribed' or                        event.param == 'cooldown'">
                  <debug_text text="'Changing subscription status from ' + $SubscriptionStatus + ' to ' + event.param" chance="$DebugChance"/>
                  <set_value name="$SubscriptionStatus" exact="event.param"/>
                  <!--Be careful with state change handlers here if the requested state was the same as the previous one-->
                  <do_if value="event.param == 'subscribed' and Gamestart.state == cuestate.complete">
                    <signal_cue_instantly cue="Player_Subscribed_To_War" param="$MissionGroup"/>
                    <signal_cue cue="CalculateThreads"/>
                  </do_if>
                  <do_elseif value="event.param == 'cooldown'">
                    <!--TODO @Owen balance cooldown. Have a harsher cooldown in certain situations?-->
                    <set_value name="$CooldownTime" exact="player.age + 5min"/>
                  </do_elseif>
                  <!-- update global missiongroup-registry -->
                  <do_if value="$SubscriptionStatus == 'subscribed'">
                    <assert value="not md.$SubscribedMissionGroups.indexof.{$MissionGroup}"/>
                    <do_if value="not md.$SubscribedMissionGroups.indexof.{$MissionGroup}">
                      <append_to_list name="md.$SubscribedMissionGroups" exact="$MissionGroup"/>
                    </do_if>
                  </do_if>
                  <do_else>
                    <remove_from_list name="md.$SubscribedMissionGroups" exact="$MissionGroup"/>
                  </do_else>
                </do_if>
                <do_else>
                  <assert value="false" text="'Unknown subscription status: ' + event.param + ' [Owen]'"/>
                </do_else>
              </actions>
            </cue>
            <cue name="PAR_VS_HOL_Check_Cooldown" instantiate="true" checkinterval="5s">
              <conditions>
                <check_value value="$SubscriptionStatus == 'cooldown' and player.age gt $CooldownTime"/>
              </conditions>
              <actions>
                <debug_text text="player.age + ' Ending  cooldown'" chance="$DebugChance"/>
                <signal_cue_instantly cue="PAR_VS_HOL_Set_Subscription_Status" param="'subscribed'"/>
              </actions>
            </cue>
            <!--
            ####################
            CONTACT
            ####################-->
            <!--event.param == Cloned table of the host sectors for this war front in which to search for a placement object (or null to fallback to any owned space in the galaxy)-->
            <cue name="PAR_VS_HOL_Create_Contact">
              <conditions>
                <event_cue_signalled/>
                <check_value value="$Faction.isactive"/>
              </conditions>
              <actions>
                <set_value name="this.$SelectedSpace" exact="null"/>
                <do_if value="event.param and typeof event.param == datatype.table">
                  <set_value name="this.$HostSectorKeys" exact="event.param.keys.sorted"/>
                  <do_all exact="this.$HostSectorKeys.count" counter="$i">
                    <do_if value="this.$HostSectorKeys.{$i}.security ge 0.75f">
                      <!--Select a sector with stations and a high security value-->
                      <find_station name="this.$PotentialStation" owner="$Faction" space="this.$HostSectorKeys.{$i}">
                        <match_content class="class.walkablemodule" checkoperational="true"/>
                      </find_station>
                      <do_if value="this.$PotentialStation">
                        <set_value name="this.$SelectedSpace" exact="this.$HostSectorKeys.{$i}"/>
                        <break/>
                      </do_if>
                    </do_if>
                  </do_all>
                  <do_if value="not this.$SelectedSpace">
                    <!--Simply select the furthest sector with stations-->
                    <do_all exact="this.$HostSectorKeys.count" counter="$i" reverse="true">
                      <find_station name="this.$PotentialStation" owner="$Faction" space="this.$HostSectorKeys.{$i}">
                        <match_content class="class.walkablemodule" checkoperational="true"/>
                      </find_station>
                      <do_if value="this.$PotentialStation">
                        <set_value name="this.$SelectedSpace" exact="this.$HostSectorKeys.{$i}"/>
                        <break/>
                      </do_if>
                    </do_all>
                  </do_if>
                </do_if>
                <do_if value="not this.$SelectedSpace">
                  <find_station name="this.$PotentialStation" owner="$Faction" space="player.galaxy">
                    <match_content class="class.walkablemodule" checkoperational="true"/>
                  </find_station>
                  <do_if value="this.$PotentialStation">
                    <set_value name="this.$SelectedSpace" exact="this.$PotentialStation.sector"/>
                    <debug_text text="'Fallback case for not finding suitable sector to place mission contact for ' + $MissionGroup + '. Placing on ' + this.$PotentialStation + ' ' + this.$PotentialStation.knownname + ' in ' + this.$SelectedSpace.knownname" filter="error"/>
                  </do_if>
                </do_if>
                <do_if value="this.$SelectedSpace">
                  <find_station name="$PlacementObject" owner="$Faction" space="this.$SelectedSpace" required="true">
                    <match_content class="class.walkablemodule" checkoperational="true"/>
                  </find_station>
                  <assert value="$PlacementObject.exists" text="'Station was unable to be found in ' + this.$SelectedSpace.knownname + ' even when it should have [Owen]'"/>
                  <do_if value="$PlacementObject">
                    <do_if value="not $Mission_Contact.isclass.npc">
                      <create_cue_actor name="$Mission_Contact" cue="namespace" group="paranid.factionrepresentative">
                        <page exact="10304"/>
                        <owner exact="$Faction"/>
                        <skills>
                          <skill type="management" min="12" max="15"/>
                          <skill type="morale" min="12" max="15"/>
                          <skill type="piloting" min="6" max="15"/>
                          <skill type="engineering" min="6" max="15"/>
                          <skill type="boarding" min="6" max="15"/>
                        </skills>
                      </create_cue_actor>
                      <do_if value="$Mission_Contact">
                        <set_entity_type entity="$Mission_Contact" type="entitytype.crowd"/>
                        <set_entity_traits entity="$Mission_Contact" missionactor="true" remote="false" customhandler="true"/>
                        <set_entity_overrides entity="$Mission_Contact" title="'{30212,201}'"/>
                        <debug_text text="'Created mission contact ' + $Mission_Contact + ' ' + $Mission_Contact.knownname + ' for placement on ' + $PlacementObject + ' ' + $PlacementObject.knownname" chance="$DebugChance"/>
                      </do_if>
                    </do_if>
                  </do_if>
                </do_if>
                <assert value="$Mission_Contact.isclass.npc" text="'Unable to generate mission contact [Owen]'"/>
                <do_if value="not $Mission_Contact.isclass.npc or not $PlacementObject.exists">
                  <reset_cue cue="this"/>
                </do_if>
              </actions>
              <cues>
                <cue name="PAR_VS_HOL_Place_Contact_Init" version="2">
                  <actions>
                    <do_if value="$PlacementObject.attention ge attention.nearby">
                      <signal_cue cue="PAR_VS_HOL_Place_Contact_Create_Interior"/>
                    </do_if>
                  </actions>
                  <patch sinceversion="2" state="complete">
                    <do_if value="not $PlacementObject.isoperational">
                      <set_value name="$PlacementObject" exact="null"/>
                      <reset_cue cue="$ContactCreatorCue"/>
                    </do_if>
                  </patch>
                </cue>
                <cue name="PAR_VS_HOL_Place_Contact_Create_Interior">
                  <conditions>
                    <check_any>
                      <event_cue_signalled/>
                      <check_all>
                        <event_object_changed_attention object="$PlacementObject"/>
                        <check_value value="event.param ge attention.nearby"/>
                      </check_all>
                    </check_any>
                  </conditions>
                  <actions>
                    <debug_text text="'Attempting to create dynamic interior to place NPC'" chance="$DebugChance"/>
                    <get_room_definition macro="$StartCorridorMacro" tags="tag.corridor" race="$Faction.primaryrace"/>
                    <get_room_definition macro="$StartRoomMacro" doors="$RoomDoors" tags="tag.warroom" race="$Faction.primaryrace"/>
                    <create_dynamic_interior object="$PlacementObject" corridor="$StartCorridorMacro" room="$StartRoomMacro" name="'{30212,3}'" interiorname="$DynamicInterior" corridorname="$DynamicCorridor" roomname="$DynamicRoom"/>
                    <assert value="$DynamicInterior" text="'Unable to create dynamic interior for contact ' + $Mission_Contact + ' ' + $Mission_Contact.knownname + ' [Owen]'"/>
                    <do_if value="$DynamicInterior">
                      <find_npc_slot name="$NPC_Slot" object="$DynamicRoom" tags="tag.stand"/>
                      <do_if value="not $NPC_Slot">
                        <find_npc_slot name="$NPC_Slot" object="$DynamicRoom"/>
                      </do_if>
                      <assert value="$NPC_Slot" text="'Can not find slot for mission contact in ' + $DynamicInterior + ' ' + $DynamicInterior.knownname + ' [Owen]'"/>
                      <do_if value="$NPC_Slot">
                        <add_actor_to_room actor="$Mission_Contact" slot="$NPC_Slot"/>
                        <debug_text text="'Added mission contact ' + $Mission_Contact + ' ' + $Mission_Contact.knownname + ' to ' + $PlacementObject + ' ' + $PlacementObject.knownname" chance="$DebugChance"/>
                      </do_if>
                    </do_if>
                  </actions>
                  <cues>
                    <cue name="PAR_VS_HOL_Place_Contact_WithinDynamicInterior_Destroy">
                      <conditions>
                        <event_object_interiors_despawning object="$PlacementObject"/>
                      </conditions>
                      <actions>
                        <remove_actor_from_room actor="$Mission_Contact"/>
                        <include_actions ref="Remove_Dynamic_Interior"/>
                        <do_if value="$Faction.isactive">
                          <reset_cue cue="PAR_VS_HOL_Place_Contact_Create_Interior"/>
                        </do_if>
                        <do_else>
                          <debug_text text="'Faction is now inactive. Deactivating contact handling.'"/>
                          <reset_cue cue="$ContactCreatorCue"/>
                        </do_else>
                      </actions>
                    </cue>
                  </cues>
                </cue>
                <cue name="PAR_VS_HOL_Contact_Killed">
                  <conditions>
                    <event_object_destroyed object="$Mission_Contact"/>
                  </conditions>
                  <actions>
                    <set_value name="$Mission_Contact" exact="null"/>
                    <reset_cue cue="PAR_VS_HOL_Create_Contact"/>
                  </actions>
                </cue>
                <cue name="PAR_VS_HOL_Placement_Object_Destroyed">
                  <conditions>
                    <event_object_destroyed object="$PlacementObject"/>
                  </conditions>
                  <actions>
                    <include_actions ref="Remove_Dynamic_Interior"/>
                    <set_value name="$PlacementObject" exact="null"/>
                    <reset_cue cue="$ContactCreatorCue"/>
                  </actions>
                </cue>
                <cue name="PAR_VS_HOL_Contact__Faction_Deactivated">
                  <conditions>
                    <event_faction_deactivated faction="$Faction"/>
                  </conditions>
                  <actions>
                    <do_if value="PAR_VS_HOL_Place_Contact_Create_Interior.state == cuestate.waiting">
                      <debug_text text="'Faction is now inactive. Deactivating contact handling.'"/>
                      <reset_cue cue="$ContactCreatorCue"/>
                    </do_if>
                    <!--else, the depawning of the interior must happen-->
                  </actions>
                </cue>
                <cue name="PAR_VS_HOL_Contact_Conversation_Started" instantiate="true">
                  <conditions>
                    <check_any>
                      <event_conversation_started actor="$Mission_Contact"/>
                      <event_conversation_returned_to_section actor="$Mission_Contact"/>
                    </check_any>
                    <check_value value="event.param == 'default' and $Faction.isactive"/>
                  </conditions>
                  <actions>
                    <do_if value="event.name == 'event_conversation_started'">
                      <do_if value="$SubscriptionStatus == 'unsubscribed' or $SubscriptionStatus == 'cooldown'">
                        <do_if value="player.entity.isfemale">
                          <add_npc_line speaker="$Mission_Contact" line="3007" comment="Pilot. (female)"/>
                        </do_if>
                        <do_else>
                          <add_npc_line speaker="$Mission_Contact" line="3006" comment="Pilot. (male)"/>
                        </do_else>
                      </do_if>
                      <do_else>
                        <!--More familiar greeting-->
                        <add_npc_line speaker="$Mission_Contact" line="3003" comment="Captain."/>
                      </do_else>
                    </do_if>
                    <include_actions ref="PAR_VS_HOL_Contact_Player_Lines"/>
                  </actions>
                </cue>
                <library name="PAR_VS_HOL_Contact_Player_Lines">
                  <actions>
                    <!--Specific sections-->
                    <do_if value="event.name == 'event_conversation_next_section' and event.param == 'war_subscribe_request'">
                      <do_if value="$Faction.relationto.{faction.player} ge $SubscriptionMinRel">
                        <add_player_choice text="{1002,3000401}" section="war_subscribe_ask_intro" comment="What kind of jobs can I expect?"/>
                      </do_if>
                    </do_if>
                    <do_elseif value="event.name == 'event_conversation_next_section' and (event.param == 'war_subscribe_ask_intro' or event.param == 'war_subscribe_request_2')">
                      <add_player_choice text="{1002,3021202}" section="war_subscribe_ask_conflict" comment="What can you tell me about the conflict itself?"/>
                      <add_player_choice text="{1002,3000402}" section="war_subscribe_start_intro" position="top_right" comment="Let's get started."/>
                    </do_elseif>
                    <do_elseif value="event.name == 'event_conversation_next_section' and event.param == 'war_subscribe_ask_conflict'">
                      <add_player_choice text="{1002,3000402}" section="war_subscribe_start_intro" position="top_right" comment="Let's get started."/>
                    </do_elseif>
                    <!--Start or other sections-->
                    <do_else>
                      <do_if value="$SubscriptionStatus == 'unsubscribed'">
                        <do_if value="PAR_VS_HOL_Introduction.state == cuestate.waiting">
                          <!--Intro mission is not in a state where the player can take it.-->
                          <!--TODO @Owen - voice lines on rejecting the player?-->
                          <add_player_choice text="{1002,3021201}" section="war_subscribe_request_2" comment="I'm here about the Holy Order."/>
                        </do_if>
                        <do_elseif value="$IntroducedToContact">
                          <do_if value="$JobsDescribed">
                            <add_player_choice text="{1002,3000402}" section="war_subscribe_start_intro" position="top_right" comment="Let's get started."/>
                            <add_player_choice text="{1002,3021202}" section="war_subscribe_ask_conflict" comment="What can you tell me about the conflict?"/>
                          </do_if>
                          <do_else>
                            <add_player_choice text="{1002,3000401}" section="war_subscribe_ask_intro" comment="What kind of jobs can I expect?"/>
                          </do_else>
                        </do_elseif>
                        <do_else>
                          <add_player_choice text="{1002,3021201}" section="war_subscribe_request" comment="I'm here about The Order."/>
                        </do_else>
                      </do_if>
                      <do_elseif value="$SubscriptionStatus == 'probation'">
                        <do_if value="$IntroMissionSuccessful">
                          <add_player_choice text="{1002,3000404}" section="war_intro_complete" comment="I completed the task."/>
                        </do_if>
                        <do_else>
                          <add_player_choice text="{1002,3000405}" section="war_abort_intro" comment="I would like to stop."/>
                        </do_else>
                      </do_elseif>
                    </do_else>
                  </actions>
                </library>
                <cue name="PAR_VS_HOL_Contact_NextSection" instantiate="true">
                  <conditions>
                    <event_conversation_next_section actor="$Mission_Contact" sectionprefix="war_"/>
                  </conditions>
                  <actions>
                    <set_value name="$AddPlayerChoices" exact="true"/>
                    <do_if value="event.param == 'war_subscribe_request'">
                      <do_if value="$Faction.relationto.{faction.player} ge $SubscriptionMinRel">
                        <set_value name="$IntroducedToContact" exact="true"/>
                        <add_npc_line speaker="$Mission_Contact" line="30212001" hidechoices="true" comment="Ah, very good."/>
                        <add_npc_line speaker="$Mission_Contact" line="30212002" hidechoices="true" comment="My responsibility is to coordinate our forces in our campaign against the heretics of the so-called 'Holy Order'..."/>
                        <do_if value="player.entity.race == race.paranid">
                          <!--Paranid citizen-->
                          <add_npc_line speaker="$Mission_Contact" line="30212004" hidechoices="true" comment="Your being here means that you have gained recognition as a true champion of the Paranid Empire."/>
                        </do_if>
                        <do_else>
                          <!--Paranid friend-->
                          <add_npc_line speaker="$Mission_Contact" line="30212003" hidechoices="true" comment="Your being here means that you have gained recognition as a worthy friend of the Paranid Empire."/>
                        </do_else>
                        <add_npc_line speaker="$Mission_Contact" line="30212005" hidechoices="true" comment="There will always be place for pilots who share our ideals."/>
                        <add_npc_line speaker="$Mission_Contact" line="30212006" hidechoices="true" comment="Probation line 1"/>
                        <add_npc_line speaker="$Mission_Contact" line="30212007" hidechoices="true" comment="Probation line 2"/>
                        <do_if value="player.entity.race != race.paranid">
                          <!--non-Paranid player line-->
                          <add_npc_line speaker="$Mission_Contact" line="30212008" hidechoices="true" comment="I am curious to see how you fare compared to my Paranid brethren."/>
                        </do_if>
                        <do_else>
                          <add_npc_line speaker="$Mission_Contact" line="30212009" hidechoices="true" comment="Probation line 3"/>
                          <add_npc_line speaker="$Mission_Contact" line="30212010" hidechoices="true" comment="Do you have questions?"/>
                        </do_else>
                      </do_if>
                      <do_else>
                        <add_npc_line speaker="$Mission_Contact" line="30212026" comment="Sorry, but that is a very sensitive situation. We require pilots who have proven themselves to the Argon Federation."/>
                      </do_else>
                    </do_if>
                    <do_elseif value="event.param == 'war_subscribe_ask_intro'">
                      <set_value name="$JobsDescribed" exact="true"/>
                      <add_npc_line speaker="$Mission_Contact" line="30212011" hidechoices="true"/>
                      <add_npc_line speaker="$Mission_Contact" line="30212012" hidechoices="true"/>
                    </do_elseif>
                    <do_elseif value="event.param == 'war_subscribe_ask_conflict'">
                      <set_value name="$ConflictDescribed" exact="true"/>
                      <do_if value="player.entity.race == race.paranid">
                        <!--Paranid player line-->
                        <add_npc_line speaker="$Mission_Contact" line="30212013" hidechoices="true" comment="We will not simply have anyone interfere in our matters. Do not bother us unless you have proven yourself worth our time."/>
                      </do_if>
                      <add_npc_line speaker="$Mission_Contact" line="30212014" hidechoices="true" comment="Conflict desc 1"/>
                      <add_npc_line speaker="$Mission_Contact" line="30212015" hidechoices="true" comment="Conflict desc 2"/>
                      <add_npc_line speaker="$Mission_Contact" line="30212016" hidechoices="true" comment="Conflict desc 3"/>
                      <add_npc_line speaker="$Mission_Contact" line="30212017" hidechoices="true" comment="Conflict desc 4"/>
                      <add_npc_line speaker="$Mission_Contact" line="30212018" hidechoices="true" comment="Conflict desc 5"/>
                      <add_npc_line speaker="$Mission_Contact" line="30212019" hidechoices="true" comment="Shall we begin?"/>
                    </do_elseif>
                    <do_elseif value="event.param == 'war_subscribe_request_2'">
                      <!--This section is for when the intro mission is not currently active for the player to accept it. Either reject the player or signal the intro mission to activate.-->
                      <include_actions ref="PAR_VS_HOL_Can_Activate_Introduction"/>
                      <do_if value="$CanActivateIntro">
                        <signal_cue cue="PAR_VS_HOL_Introduction"/>
                        <add_npc_line speaker="$Mission_Contact" line="30212001" hidechoices="true" comment="Ah, very good."/>
                      </do_if>
                      <do_else>
                        <set_value name="$AddPlayerChoices" exact="false"/>
                        <add_npc_line speaker="$Mission_Contact" line="30212027" hidechoices="true" comment="We are still passing judgement on your previous performance. Leave us."/>
                      </do_else>
                    </do_elseif>
                    <do_elseif value="event.param == 'war_subscribe_start_intro'">
                      <do_if value="$HasIntroMission">
                        <set_value name="$AddPlayerChoices" exact="false"/>
                        <signal_cue cue="PAR_VS_HOL_Player_Requested_Subscription"/>
                        <add_npc_line speaker="$Mission_Contact" line="30212020" hidechoices="true" comment="I will select a suitable task for you momentarily."/>
                        <add_npc_line speaker="$Mission_Contact" line="30212021" hidechoices="true" comment="I look forward to your return."/>
                      </do_if>
                      <do_else>
                        <set_value name="$AddPlayerChoices" exact="false"/>
                        <add_npc_line speaker="$Mission_Contact" line="2113" hidechoices="true" comment="Excellent."/>
                        <add_npc_line speaker="$Mission_Contact" line="30212023" hidechoices="true" comment="You will now find tasks related to the Holy Order conflict in your mission interface."/>
                        <signal_cue cue="PAR_VS_HOL_Cancel_Intro_Talkto"/>
                        <reset_cue cue="PAR_VS_HOL_Introduction"/>
                        <signal_cue_instantly cue="PAR_VS_HOL_Set_Subscription_Status" param="'subscribed'"/>
                      </do_else>
                    </do_elseif>
                    <do_elseif value="event.param == 'war_intro_complete'">
                      <set_value name="$AddPlayerChoices" exact="false"/>
                      <add_npc_line speaker="$Mission_Contact" line="30212022" hidechoices="true" comment="Yes, I saw. Very good."/>
                      <add_npc_line speaker="$Mission_Contact" line="30212023" hidechoices="true" comment="You will now find tasks related to the Holy Order conflict in your mission interface."/>
                      <signal_cue_instantly cue="PAR_VS_HOL_Set_Subscription_Status" param="'subscribed'"/>
                    </do_elseif>
                    <do_elseif value="event.param == 'war_abort_intro'">
                      <set_value name="$AddPlayerChoices" exact="false"/>
                      <signal_cue cue="PAR_VS_HOL_Player_Requests_Intro_Abort"/>
                    </do_elseif>
                    <do_if value="$AddPlayerChoices">
                      <include_actions ref="PAR_VS_HOL_Contact_Player_Lines"/>
                    </do_if>
                  </actions>
                </cue>
              </cues>
            </cue>
            <!--event.param = table[
            $cue                = thread cue namespace,
            $completedmissions  = number of completed missions,
            $failedmissions     = number of failed missions]-->
            <cue name="PAR_VS_HOL_Thread_Finished" instantiate="true">
              <conditions>
                <event_cue_signalled cue="Cleanup_Thread"/>
                <check_value value="event.param.$cue.$Definition.$MissionGroup == $MissionGroup"/>
                <check_value value="$ManagerCue.$ActiveThreads.indexof.{event.param.$cue}"/>
              </conditions>
              <actions>
                <!--TODO @Owen spoken feedback?-->
                <debug_text text="'player finished ' + event.param.$cue + ' for ' + $MissionGroup + '. Completed missions: ' + event.param.$completedmissions + ' - Failed missions: ' + event.param.$failedmissions" chance="$DebugChance"/>
                <set_value name="$MissionsCompleted" operation="add" exact="event.param.$completedmissions"/>
                <set_value name="$MissionsFailed" operation="add" exact="event.param.$completedmissions"/>
                <do_if value="$MissionsCompleted ge 20">
                  <unlock_achievement name="WAR_MISSIONS"/>
                </do_if>
                <do_if value="event.param.$failed">
                  <set_value name="$ThreadsFailed" operation="add"/>
                  <do_if value="not event.param.$interrupted">
                    <signal_cue_instantly cue="PAR_VS_HOL_Set_Subscription_Status" param="'cooldown'"/>
                  </do_if>
                </do_if>
                <do_else>
                  <set_value name="$ThreadsCompleted" operation="add"/>
                  <signal_cue cue="CalculateThreads"/>
                </do_else>
              </actions>
            </cue>
            <!--
            ####################
            INTRODUCTION
            ####################-->
            <cue name="PAR_VS_HOL_Player_Requested_Subscription" instantiate="true">
              <conditions>
                <event_cue_signalled/>
              </conditions>
            </cue>
            <cue name="PAR_VS_HOL_Player_Requests_Intro_Abort" instantiate="true">
              <conditions>
                <event_cue_signalled/>
              </conditions>
            </cue>
            <library name="PAR_VS_HOL_Can_Activate_Introduction">
              <actions>
                <!--TODO @Owen other conditions based on if they failed a previous intro mission and need a cooldown-->
                <set_value name="$CanActivateIntro" exact="false"/>
                <do_if value="$Faction.relationto.{faction.player} ge $SubscriptionMinRel">
                  <set_value name="$CanActivateIntro" exact="true"/>
                </do_if>
              </actions>
            </library>
            <cue name="PAR_VS_HOL_Introduction" version="4">
              <conditions>
                <event_cue_signalled/>
                <check_value value="$Faction.isactive"/>
              </conditions>
              <actions>
                <debug_text text="'Starting intro mission handling for ' + $MissionGroup" chance="$DebugChance"/>
                <set_value name="$MissionIntroCue" exact="this"/>
                <signal_cue_instantly cue="PAR_VS_HOL_Set_Subscription_Status" param="'unsubscribed'"/>
              </actions>
              <patch sinceversion="2" state="complete">
                <do_if value="$SubscriptionStatus == 'cooldown'">
                  <debug_text text="'Fixing war mission which is still of state cooldown when it should be unsubscribed'" filter="savegame"/>
                  <signal_cue_instantly cue="PAR_VS_HOL_Set_Subscription_Status" param="'unsubscribed'"/>
                </do_if>
              </patch>
              <patch sinceversion="4" state="waiting">
                <do_if value="$SubscriptionStatus == 'probation'">
                  <debug_text text="'Fixing war mission which is still of state probation when it should be unsubscribed'" filter="savegame"/>
                  <signal_cue_instantly cue="PAR_VS_HOL_Set_Subscription_Status" param="'unsubscribed'"/>
                </do_if>
              </patch>
              <cues>
                <cue name="PAR_VS_HOL_Introduction_Init">
                  <actions>
                    <do_if value="$Faction.relationto.{faction.player} ge $SubscriptionMinRel">
                      <signal_cue cue="PAR_VS_HOL_Introduction_Create_Offer"/>
                    </do_if>
                  </actions>
                </cue>
                <cue name="PAR_VS_HOL_Introduction_Create_Offer">
                  <conditions>
                    <check_any>
                      <check_all>
                        <event_player_relation_changed faction="$Faction"/>
                        <check_value value="event.param2.{1} ge $SubscriptionMinRel"/>
                      </check_all>
                      <event_cue_signalled/>
                    </check_any>
                  </conditions>
                  <actions>
                    <do_if value="not $Mission_Contact.isclass.npc or not $PlacementObject.isoperational">
                      <debug_text text="'Mission contact was not yet created for ' + $MissionGroup + '. Triggering creation now but location may not be near a war front. [Owen]'" filter="error"/>
                      <signal_cue_instantly cue="$ContactCreatorCue"/>
                    </do_if>
                    <do_if value="$Mission_Contact.isclass.npc and $PlacementObject.isoperational">
                      <debug_text text="'Player has passed the conditions for the intro mission to be available for group: ' + $MissionGroup" chance="$DebugChance"/>
                      <create_offer cue="$MissionIntroCue" actor="$Mission_Contact" type="missiontype.fight" name="readtext.{30212}.{1}" description="readtext.{30212}.{2}" difficulty="level.trivial" faction="$Faction" group="$MissionGroup">
                        <briefing>
                          <objective step="1" action="objective.talkto" object="$Mission_Contact"/>
                        </briefing>
                      </create_offer>
                      <!-- Guild Notification Mail -->
                      <run_actions ref="md.X4Ep1_War_Subscriptions.SendSubscriptionMail">
                        <param name="Page" value="30212"/>
                        <param name="Faction" value="$Faction"/>
                        <param name="Mission_Contact" value="$Mission_Contact"/>
                      </run_actions>
                    </do_if>
                    <do_else>
                      <debug_text text="'Unable to start intro mission due to missing mission client [Owen]'" filter="error"/>
                      <reset_cue cue="$MissionIntroCue"/>
                    </do_else>
                  </actions>
                  <cues>
                    <cue name="PAR_VS_HOL_Introduction_Offer_Accepted">
                      <conditions>
                        <event_object_signalled object="$Mission_Contact" param="'accept'"/>
                      </conditions>
                      <actions>
                        <create_mission cue="$MissionIntroCue" offercue="$MissionIntroCue"/>
                        <update_mission cue="$MissionIntroCue">
                          <briefing>
                            <objective step="1" action="objective.talkto" text="$Mission_Contact.knownname"/>
                          </briefing>
                        </update_mission>
                        <remove_offer cue="$MissionIntroCue"/>
                        <signal_cue_instantly cue="md.GenericMissions.DisconnectedActorObjectiveLibrary" param="table[                                               $actor = $Mission_Contact,                                               $object = $PlacementObject,                                               $missioncue = $MissionIntroCue,                                               $cancelcue = PAR_VS_HOL_Cancel_Intro_Talkto,                                               $libfailedcue = PAR_VS_HOL_Intro_Abort,                                               $objective = objective.talkto,                                               $debugchance = $DebugChance]"/>
                      </actions>
                    </cue>
                  </cues>
                </cue>
                <cue name="PAR_VS_HOL_Intro_Abort" version="2">
                  <conditions>
                    <check_any>
                      <event_mission_aborted cue="PAR_VS_HOL_Introduction"/>
                      <event_cue_signalled cue="PAR_VS_HOL_Player_Requests_Intro_Abort"/>
                      <event_cue_signalled/>
                      <event_object_destroyed object="$Mission_Contact"/>
                      <event_object_destroyed object="$PlacementObject"/>
                      <event_faction_deactivated faction="$Faction"/>
                    </check_any>
                  </conditions>
                  <actions>
                    <debug_text text="'Aborting due to ' + event.name" chance="$DebugChance"/>
                    <do_if value="$MissionIntroCue.hasmission">
                      <remove_mission cue="$MissionIntroCue" type="aborted"/>
                    </do_if>
                    <signal_cue_instantly cue="PAR_VS_HOL_Set_Subscription_Status" param="'unsubscribed'"/>
                    <reset_cue cue="PAR_VS_HOL_Introduction"/>
                  </actions>
                  <patch sinceversion="2" state="waiting">
                    <do_if value="PAR_VS_HOL_Introduction_Offer_Accepted.state == cuestate.complete and (not $TestShip? or not $TestShip.isoperational)">
                      <set_value name="$Patch_CheckLibraryInstance" exact="true"/>
                    </do_if>
                  </patch>
                </cue>
                <cue name="PAR_VS_HOL_Patch_Check_Talkto_Lib" onfail="cancel">
                  <conditions>
                    <check_value value="@$Patch_CheckLibraryInstance"/>
                  </conditions>
                  <actions>
                    <do_if value="not @md.GenericMissions.DisconnectedActorObjectiveLibrary.$Patch_ActiveMissionCues.indexof.{$MissionIntroCue}">
                      <debug_text text="'Talkto helper instance no longer exists for ' + $MissionIntroCue + ' - aborting intro mission'" filter="savegame"/>
                      <signal_cue cue="PAR_VS_HOL_Intro_Abort"/>
                    </do_if>
                    <remove_value name="$Patch_CheckLibraryInstance"/>
                  </actions>
                </cue>
                <cue name="PAR_VS_HOL_Cancel_Intro_Talkto" instantiate="true">
                  <conditions>
                    <event_cue_signalled/>
                  </conditions>
                </cue>
                <cue name="PAR_VS_HOL_Start_Intro_Mission" version="2">
                  <conditions>
                    <event_cue_signalled cue="PAR_VS_HOL_Player_Requested_Subscription"/>
                  </conditions>
                  <actions>
                    <signal_cue cue="PAR_VS_HOL_Cancel_Intro_Talkto"/>
                    <signal_cue_instantly cue="PAR_VS_HOL_Set_Subscription_Status" param="'probation'"/>
                    <set_value name="$IntroMissionSuccessful" exact="false"/>
                    <do_if value="$MissionIntroCue.hasmissionoffer">
                      <remove_offer cue="$MissionIntroCue"/>
                    </do_if>
                    <do_if value="not $MissionIntroCue.hasmission">
                      <create_mission cue="$MissionIntroCue" type="missiontype.fight" name="readtext.{30212}.{1}" description="readtext.{30212}.{2}" difficulty="level.trivial" faction="$Faction" group="$MissionGroup"/>
                    </do_if>
                    <create_ship name="$TestShip" sector="player.sector">
                      <select faction="faction.holyorder" size="class.ship_s"/>
                      <owner exact="faction.holyorder"/>
                      <pilot actor="null"/>
                      <safepos object="player.entity" min="30km" max="40km"/>
                    </create_ship>
                    <update_mission cue="$MissionIntroCue">
                      <briefing>
                        <objective step="1" action="objective.destroy" object="$TestShip"/>
                      </briefing>
                    </update_mission>
                    <set_objective cue="$MissionIntroCue" action="objective.destroy" object="$TestShip"/>
                  </actions>
                  <patch sinceversion="2" state="complete">
                    <do_if value="$TestShip.isoperational">
                      <set_value name="$TestShip_Pos" exact="$TestShip.position"/>
                      <do_if value="[$TestShip_Pos.x, $TestShip_Pos.y, $TestShip_Pos.z].min lt 50km or [$TestShip_Pos.x, $TestShip_Pos.y, $TestShip_Pos.z].max gt 50km">
                        <debug_text text="'Warping ship ' + $TestShip + ' ' + $TestShip.knownname + ' to valid position'" filter="savegame"/>
                        <warp object="$TestShip" sector="$TestShip.sector">
                          <position object="$TestShip" space="$TestShip.sector"/>
                        </warp>
                      </do_if>
                      <remove_value name="$TestShip_Pos"/>
                    </do_if>
                  </patch>
                  <cues>
                    <cue name="PAR_VS_HOL_Start_Intro_Mission_Successful">
                      <conditions>
                        <event_object_destroyed object="$TestShip"/>
                      </conditions>
                      <actions>
                        <update_mission cue="$MissionIntroCue">
                          <briefing>
                            <objective step="2" action="objective.talkto" object="$Mission_Contact"/>
                          </briefing>
                        </update_mission>
                        <set_value name="$IntroMissionSuccessful" exact="true"/>
                        <signal_cue_instantly cue="md.GenericMissions.DisconnectedActorObjectiveLibrary" param="table[                                               $actor = $Mission_Contact,                                               $object = $PlacementObject,                                               $missioncue = $MissionIntroCue,                                               $cancelcue = PAR_VS_HOL_Start_Intro_Mission_Remove_Mission,                                               $libfailedcue = PAR_VS_HOL_Intro_Abort,                                               $objective = objective.talkto,                                               $step = 2,                                               $debugchance = $DebugChance]"/>
                      </actions>
                    </cue>
                    <cue name="PAR_VS_HOL_Start_Intro_Mission_Remove_Mission">
                      <conditions>
                        <event_cue_signalled/>
                      </conditions>
                      <actions>
                        <remove_mission cue="$MissionIntroCue" type="completed"/>
                        <reset_cue cue="PAR_VS_HOL_Introduction"/>
                      </actions>
                    </cue>
                    <cue name="PAR_VS_HOL_Start_Intro_Mission_End">
                      <conditions>
                        <event_conversation_started actor="$Mission_Contact"/>
                        <check_value value="$IntroMissionSuccessful"/>
                      </conditions>
                      <actions>
                        <allow_conversation_escape enabled="false"/>
                        <signal_cue cue="PAR_VS_HOL_Start_Intro_Mission_Remove_Mission"/>
                      </actions>
                    </cue>
                  </cues>
                </cue>
              </cues>
            </cue>
            <!--
            ####################
            THREADS
            ####################-->
            <cue name="PAR_VS_HOL_Reinforce_Defence">
              <cues>
                <cue name="PAR_VS_HOL_Reinforce_Defence_Register" version="3">
                  <actions>
                    <!--Paranid Vs Holy Order - Reinforce Defence-->
                    <set_value name="$ThreadID" exact="'$par_vs_hol_reinforce_defence'"/>
                    <set_value name="$Thread" exact="table[                            $ID = $ThreadID,                            $Faction = $Faction,                            $EnemyFaction = $EnemyFaction,                            $MissionGroup = $MissionGroup,                            $ThreadConditionLibs = [Situation__Cold_War, Situation__Contention, Situation__Defence_Prep],                            $ThreadType = 'sequential',                            $MissionType = missiontype.protect,                            $Difficulty = level.medium,                            $SubMissionLib = PAR_VS_HOL_Reinforce_Defence_Get_Submissions,                            $NameLib = PAR_VS_HOL_Reinforce_Defence_Construct_Name,                            $DescriptionLib = PAR_VS_HOL_Reinforce_Defence_Construct_Description,                            $RewardLib = PAR_VS_HOL_Reinforce_Defence_Construct_Reward,                            $MinMissions = 4,                            $MaxMissions = 5,                            $ThreadAbortRelation = -0.00064]"/>
                    <assert value="not $ManagerCue.$ThreadDefinitions.{$ThreadID}?" text="'Thread definition ' + $ThreadID + ' already exists in this table [Owen]'"/>
                    <set_value name="$ManagerCue.$ThreadDefinitions.{$ThreadID}" exact="$Thread"/>
                  </actions>
                  <patch sinceversion="3" state="complete">
                    <set_value name="$ManagerCue.$ThreadDefinitions.$par_vs_hol_reinforce_defence.$RewardLib" exact="PAR_VS_HOL_Reinforce_Defence_Construct_Reward"/>
                  </patch>
                </cue>
                <!--Called from CalculateThreads. Result saved to $New_Thread. Namespace is not this parent.-->
                <library name="PAR_VS_HOL_Reinforce_Defence_Get_Submissions">
                  <actions>
                    <set_value name="$Submissions" exact="table[]"/>
                    <set_value name="$Submissions.$deploy_lasertowers" exact="table[$Cue = md.X4Ep1_War_Subscriptions.DeployInPlace__Standard,    $MissionType = missiontype.drop,  $Page = 30212, $TextOffset = [101000], $Sequence = -1 ]"/>
                    <set_value name="$Submissions.$deploy_mines" exact="table[$Cue = md.X4Ep1_War_Subscriptions.DeployInPlace__Standard,    $MissionType = missiontype.drop,  $Page = 30212, $TextOffset = [101100, 101200], $Sequence = -1 ]"/>
                    <set_value name="$Submissions.$achieve_coverage__host_sector" exact="table[$Cue = md.X4Ep1_War_Subscriptions.Achieve_Coverage__Standard, $MissionType = missiontype.drop,  $Page = 30212, $TextOffset = [102000], $Sequence = -1 ]"/>
                    <set_value name="$Submissions.$repair__damagedship" exact="table[$Cue = md.X4Ep1_War_Subscriptions.RepairObject__Standard,     $MissionType = missiontype.repair,  $Page = 30212, $TextOffset = [103000], $Sequence = -1 ]"/>
                    <set_value name="$Submissions.$taxi__specialist" exact="table[$Cue = md.X4Ep1_War_Subscriptions.Passenger_Transport__Standard, $MissionType = missiontype.transport, $Page = 30212, $TextOffset = [104000], $Sequence = 1 ]"/>
                    <set_value name="$Submissions.$deliver__crew" exact="table[$Cue = md.X4Ep1_War_Subscriptions.Get_Exact_Crew__Standard, $MissionType = missiontype.deliver, $Page = 30212, $TextOffset = [110000, 110100], $Sequence = -1 ]"/>
                    <set_value name="$New_Thread.$Submissions" exact="$Submissions"/>
                  </actions>
                </library>
                <!--Called from CalculateThreads. Result saved to $New_Thread. Namespace is not this parent.-->
                <library name="PAR_VS_HOL_Reinforce_Defence_Construct_Name">
                  <actions>
                    <do_any>
                      <set_value name="this.$Name" exact="{30212, 3000}"/>
                      <set_value name="this.$Name" exact="{30212, 3001}"/>
                      <set_value name="this.$Name" exact="{30212, 3002}"/>
                    </do_any>
                  </actions>
                </library>
                <!--Called from CalculateThreads where several values are set to help decide the briefing text. Result saved to $New_Thread. Namespace is not this parent.-->
                <library name="PAR_VS_HOL_Reinforce_Defence_Construct_Description">
                  <actions>
                    <do_if value="$ThreadMood == 'negative'">
                      <do_any>
                        <set_value name="this.$Description" exact="{30212, 3101}"/>
                        <set_value name="this.$Description" exact="{30212, 3102}"/>
                      </do_any>
                      <set_value name="this.$Description" operation="add" exact="' ' + {30212, 3111}"/>
                      <do_any>
                        <set_value name="this.$Description" operation="add" exact="'\n' + {30212, 3121}"/>
                        <set_value name="this.$Description" operation="add" exact="'\n' + {30212, 3122}"/>
                      </do_any>
                    </do_if>
                    <do_elseif value="$ThreadMood == 'positive'">
                      <do_any>
                        <set_value name="this.$Description" exact="{30212, 3201}"/>
                        <set_value name="this.$Description" exact="{30212, 3202}"/>
                      </do_any>
                      <set_value name="this.$Description" operation="add" exact="' ' + {30212, 3211}"/>
                      <set_value name="this.$Description" operation="add" exact="'\n' + {30212, 3221}"/>
                    </do_elseif>
                  </actions>
                </library>
                <library name="PAR_VS_HOL_Reinforce_Defence_Construct_Reward">
                  <actions>
                    <do_any>
                      <set_value name="this.$RewardObject" exact="[ware.paintmod_0085]" weight="15" comment="special par vs hol subscription paint"/>
                      <set_value name="this.$RewardObject" exact="[ware.paintmod_0009]" weight="15" comment="basic godrealm faction paint"/>
                      <set_value name="this.$RewardObject" exact="[[ware.modpart_tuningsoftware, ware.modpart_shieldgeneratorcoil_t1, ware.modpart_shieldgeneratorcoil_t2].random]" weight="15" comment="modpart"/>
                      <set_value name="this.$RewardObject" exact="[ware.modpart_tuningsoftware, [ware.modpart_shieldgeneratorcoil_t1, ware.modpart_shieldgeneratorcoil_t2].random]" weight="15" comment="complete mod"/>
                      <set_value name="this.$RewardObject" exact="[ware.modpart_shieldgeneratorcoil_t3]" weight="5" comment="rare modpart"/>
                      <set_value name="this.$RewardObject" exact="[[ware.inv_seminar_piloting_2, ware.inv_seminar_piloting_2, ware.inv_seminar_management_2].random]" weight="15"/>
                      <set_value name="this.$RewardObject" exact="[[ware.inv_seminar_piloting_3, ware.inv_seminar_piloting_3, ware.inv_seminar_management_3].random]" weight="4"/>
                      <set_value name="this.$RewardObject" exact="[[ware.inv_seminar_piloting_4, ware.inv_seminar_management_4].random]" weight="1"/>
                    </do_any>
                    <run_actions ref="md.LIB_Generic.GenerateRewardText" result="this.$RewardText">
                      <param name="RewardObject" value="this.$RewardObject"/>
                    </run_actions>
                  </actions>
                </library>
              </cues>
            </cue>
            <cue name="PAR_VS_HOL_Construct_Defence">
              <cues>
                <cue name="PAR_VS_HOL_Construct_Defence_Register" version="3">
                  <actions>
                    <!--Paranid Vs Holy Order - Construct Defence-->
                    <set_value name="$ThreadID" exact="'$par_vs_hol_construct_defence'"/>
                    <set_value name="$Thread" exact="table[                            $ID = $ThreadID,                            $Faction = $Faction,                            $EnemyFaction = $EnemyFaction,                            $MissionGroup = $MissionGroup,                            $ThreadConditionLibs = [Situation__Cold_War, Situation__Contention, Situation__Defence_Prep, Situation__Pushback],                            $ThreadType = 'sequential',                            $MissionType = missiontype.build,                            $Difficulty = level.hard,                            $SubMissionLib = PAR_VS_HOL_Construct_Defence_Get_Submissions,                            $NameLib = PAR_VS_HOL_Construct_Defence_Construct_Name,                            $DescriptionLib = PAR_VS_HOL_Construct_Defence_Construct_Description,                            $RewardLib = PAR_VS_HOL_Construct_Defence_Construct_Reward,                            $MinMissions = 1,                            $MaxMissions = 2,                            $ThreadAbortRelation = -0.00064]"/>
                    <assert value="not $ManagerCue.$ThreadDefinitions.{$ThreadID}?" text="'Thread definition ' + $ThreadID + ' already exists in this table [Owen]'"/>
                    <set_value name="$ManagerCue.$ThreadDefinitions.{$ThreadID}" exact="$Thread"/>
                  </actions>
                  <patch sinceversion="2">
                    <append_to_list name="$Thread.$ThreadConditionLibs" exact="Situation__Pushback"/>
                  </patch>
                  <patch sinceversion="3" state="complete">
                    <set_value name="$ManagerCue.$ThreadDefinitions.$par_vs_hol_construct_defence.$RewardLib" exact="PAR_VS_HOL_Construct_Defence_Construct_Reward"/>
                  </patch>
                </cue>
                <!--Called from CalculateThreads. Result saved to $New_Thread. Namespace is not this parent.-->
                <library name="PAR_VS_HOL_Construct_Defence_Get_Submissions">
                  <actions>
                    <set_value name="$Submissions" exact="table[]"/>
                    <set_value name="$Submissions.$build__defencestation" exact="table[$Cue = md.X4Ep1_War_Subscriptions.Build_Station__Standard, $MissionType = missiontype.build, $Page = 30212, $TextOffset = [105000], $Sequence = -1 ]"/>
                    <set_value name="$Submissions.$build__fleet" exact="table[$Cue = md.X4Ep1_War_Subscriptions.Get_Exact_Fleet__Standard, $MissionType = missiontype.build, $Page = 30212, $TextOffset = [120000], $Sequence = -1 ]"/>
                    <set_value name="$New_Thread.$Submissions" exact="$Submissions"/>
                  </actions>
                </library>
                <!--Called from CalculateThreads. Result saved to $New_Thread. Namespace is not this parent.-->
                <library name="PAR_VS_HOL_Construct_Defence_Construct_Name">
                  <actions>
                    <do_any>
                      <set_value name="this.$Name" exact="{30212, 4000}"/>
                    </do_any>
                  </actions>
                </library>
                <!--Called from CalculateThreads where several values are set to help decide the briefing text. Result saved to $New_Thread. Namespace is not this parent.-->
                <library name="PAR_VS_HOL_Construct_Defence_Construct_Description">
                  <actions>
                    <do_if value="$ThreadMood == 'negative'">
                      <do_any>
                        <set_value name="this.$Description" exact="{30212, 4101}"/>
                        <set_value name="this.$Description" exact="{30212, 4102}"/>
                      </do_any>
                      <set_value name="this.$Description" operation="add" exact="' ' + {30212, 4111}"/>
                      <do_any>
                        <set_value name="this.$Description" operation="add" exact="'\n' + {30212, 4121}"/>
                        <set_value name="this.$Description" operation="add" exact="'\n' + {30212, 4122}"/>
                      </do_any>
                    </do_if>
                    <do_elseif value="$ThreadMood == 'positive'">
                      <do_any>
                        <set_value name="this.$Description" exact="{30212, 4201}"/>
                        <set_value name="this.$Description" exact="{30212, 4202}"/>
                      </do_any>
                      <set_value name="this.$Description" operation="add" exact="' ' + {30212, 4211}"/>
                      <set_value name="this.$Description" operation="add" exact="'\n' + {30212, 4221}"/>
                    </do_elseif>
                  </actions>
                </library>
                <library name="PAR_VS_HOL_Construct_Defence_Construct_Reward">
                  <actions>
                    <do_if value="true" chance="70">
                      <!-- mod(part) reward-->
                      <do_any>
                        <set_value name="this.$RewardObject" exact="[ware.paintmod_0085]" weight="15" comment="special par vs hol subscription paint"/>
                        <set_value name="this.$RewardObject" exact="[ware.paintmod_0009]" weight="15" comment="basic godrealm faction paint"/>
                        <set_value name="this.$RewardObject" exact="[[ware.modpart_tuningsoftware, ware.modpart_shieldgeneratorcoil_t1, ware.modpart_shieldgeneratorcoil_t2].random]" weight="15" comment="modpart"/>
                        <set_value name="this.$RewardObject" exact="[ware.modpart_tuningsoftware, [ware.modpart_shieldgeneratorcoil_t1, ware.modpart_shieldgeneratorcoil_t2].random]" weight="15" comment="complete mod"/>
                        <set_value name="this.$RewardObject" exact="[ware.modpart_shieldgeneratorcoil_t3]" weight="5" comment="rare modpart"/>
                        <set_value name="this.$RewardObject" exact="[[ware.inv_seminar_piloting_2, ware.inv_seminar_piloting_2, ware.inv_seminar_management_2].random]" weight="15"/>
                        <set_value name="this.$RewardObject" exact="[[ware.inv_seminar_piloting_3, ware.inv_seminar_piloting_3, ware.inv_seminar_management_3].random]" weight="4"/>
                        <set_value name="this.$RewardObject" exact="[[ware.inv_seminar_piloting_4, ware.inv_seminar_management_4].random]" weight="1"/>
                      </do_any>
                    </do_if>
                    <do_else>
                      <!-- setup the ship-reward -->
                      <set_value name="this.$RewardObject" exact="[]"/>
                      <set_value name="$shipcargo" exact="[[2500, ware.nividium]]"/>
                      <set_value name="$Faction" exact="faction.paranid"/>
                      <run_actions ref="md.LIB_Generic.FindShipMacroForCargo" result="$shipmacro">
                        <param name="shipcargo" value="$shipcargo"/>
                        <param name="Faction" value="$Faction"/>
                      </run_actions>
                      <run_actions ref="md.LIB_Generic.FindNearestStationForFaction" result="$SuitableStation">
                        <param name="Faction" value="$Faction"/>
                      </run_actions>
                      <do_if value="$shipmacro and $SuitableStation">
                        <generate_loadout result="$shiploadout" macro="$shipmacro" level="[0.3, 0.4, 0.5, 0.6, 0.7].random"/>
                        <set_value name="$MaxCrewCapacity" exact="$shipmacro.people.capacity"/>
                        <set_value name="$RewardShip" exact="table[                             $macro        = $shipmacro,                             $loadout      = $shiploadout,                              $cargo        = $shipcargo,                              $station      = $SuitableStation,                              $pilot        = [faction.paranid, [tag.pilot], [8,10].random],                             $bulkcrew     = [$MaxCrewCapacity, ['paranid_military_crew', 'paranid_freighter_crew'].random, 100],                              $mods         = [ware.mod_shield_capacity_01_mk3, ware.mod_engine_travelthrust_02_mk2],                             $paintmod     = [ware.paintmod_0072].random,                         ]"/>
                        <append_to_list name="this.$RewardObject" exact="$RewardShip"/>
                      </do_if>
                    </do_else>
                    <run_actions ref="md.LIB_Generic.GenerateRewardText" result="this.$RewardText">
                      <param name="RewardObject" value="this.$RewardObject"/>
                    </run_actions>
                  </actions>
                </library>
              </cues>
            </cue>
            <cue name="PAR_VS_HOL_Secure_Resources">
              <cues>
                <cue name="PAR_VS_HOL_Secure_Resources_Register" version="3">
                  <actions>
                    <!--Paranid Vs Holy Order - Secure Resources-->
                    <set_value name="$ThreadID" exact="'$par_vs_hol_secure_resources'"/>
                    <set_value name="$Thread" exact="table[                            $ID = $ThreadID,                            $Faction = $Faction,                            $EnemyFaction = $EnemyFaction,                            $MissionGroup = $MissionGroup,                            $ThreadConditionLibs = [Situation__Cold_War, Situation__Contention, Situation__Defence_Prep, Situation__Invasion_Prep],                            $ThreadType = 'sequential',                            $MissionType = missiontype.trade,                            $Difficulty = level.medium,                            $SubMissionLib = PAR_VS_HOL_Secure_Resources_Get_Submissions,                            $NameLib = PAR_VS_HOL_Secure_Resources_Construct_Name,                            $DescriptionLib = PAR_VS_HOL_Secure_Resources_Construct_Description,                            $RewardLib = PAR_VS_HOL_Secure_Resources_Construct_Reward,                            $MinMissions = 4,                            $MaxMissions = 5,                            $ThreadAbortRelation = -0.00064]"/>
                    <assert value="not $ManagerCue.$ThreadDefinitions.{$ThreadID}?" text="'Thread definition ' + $ThreadID + ' already exists in this table [Owen]'"/>
                    <set_value name="$ManagerCue.$ThreadDefinitions.{$ThreadID}" exact="$Thread"/>
                  </actions>
                  <patch sinceversion="3" state="complete">
                    <set_value name="$ManagerCue.$ThreadDefinitions.$par_vs_hol_secure_resources.$RewardLib" exact="PAR_VS_HOL_Secure_Resources_Construct_Reward"/>
                  </patch>
                </cue>
                <!--Called from CalculateThreads. Result saved to $New_Thread. Namespace is not this parent.-->
                <library name="PAR_VS_HOL_Secure_Resources_Get_Submissions">
                  <actions>
                    <set_value name="$Submissions" exact="table[]"/>
                    <set_value name="$Submissions.$large_supply__food" exact="table[$Cue = md.X4Ep1_War_Subscriptions.Large_Supply__Standard,     $MissionType = missiontype.trade, $Page = 30212, $TextOffset = [100000], $Sequence = -1 ]"/>
                    <set_value name="$Submissions.$large_supply__shiptech" exact="table[$Cue = md.X4Ep1_War_Subscriptions.Large_Supply__Standard,     $MissionType = missiontype.trade, $Page = 30212, $TextOffset = [100100], $Sequence = -1 ]"/>
                    <set_value name="$Submissions.$deploy_lasertowers_at_resources" exact="table[$Cue = md.X4Ep1_War_Subscriptions.DeployInPlace__Standard,    $MissionType = missiontype.drop,  $Page = 30212, $TextOffset = [101300], $Sequence = -1 ]"/>
                    <set_value name="$Submissions.$find_resources__ores" exact="table[$Cue = md.X4Ep1_War_Subscriptions.Find_Resources__Standard,   $MissionType = missiontype.find,  $Page = 30212, $TextOffset = [106000], $Sequence = -1 ]"/>
                    <set_value name="$Submissions.$supply_station" exact="table[$Cue = md.X4Ep1_War_Subscriptions.Supply_Factory__Standard,   $MissionType = missiontype.find,  $Page = 30212, $TextOffset = [130000], $Sequence = -1 ]"/>
                    <set_value name="$New_Thread.$Submissions" exact="$Submissions"/>
                  </actions>
                </library>
                <!--Called from CalculateThreads. Result saved to $New_Thread. Namespace is not this parent.-->
                <library name="PAR_VS_HOL_Secure_Resources_Construct_Name">
                  <actions>
                    <do_any>
                      <set_value name="this.$Name" exact="{30212, 5000}"/>
                      <set_value name="this.$Name" exact="{30212, 5001}"/>
                    </do_any>
                  </actions>
                </library>
                <!--Called from CalculateThreads where several values are set to help decide the briefing text. Result saved to $New_Thread. Namespace is not this parent.-->
                <library name="PAR_VS_HOL_Secure_Resources_Construct_Description">
                  <actions>
                    <do_if value="$ThreadMood == 'negative'">
                      <do_any>
                        <set_value name="this.$Description" exact="{30212, 5101}"/>
                        <set_value name="this.$Description" exact="{30212, 5102}"/>
                      </do_any>
                      <set_value name="this.$Description" operation="add" exact="' ' + {30212, 5111}"/>
                      <do_any>
                        <set_value name="this.$Description" operation="add" exact="'\n' + {30212, 5121}"/>
                        <set_value name="this.$Description" operation="add" exact="'\n' + {30212, 5122}"/>
                      </do_any>
                    </do_if>
                    <do_elseif value="$ThreadMood == 'positive'">
                      <do_any>
                        <set_value name="this.$Description" exact="{30212, 5201}"/>
                        <set_value name="this.$Description" exact="{30212, 5202}"/>
                      </do_any>
                      <set_value name="this.$Description" operation="add" exact="' ' + {30212, 5211}"/>
                      <set_value name="this.$Description" operation="add" exact="'\n' + {30212, 5221}"/>
                    </do_elseif>
                  </actions>
                </library>
                <library name="PAR_VS_HOL_Secure_Resources_Construct_Reward">
                  <actions>
                    <do_any>
                      <set_value name="this.$RewardObject" exact="[ware.paintmod_0085]" weight="15" comment="special par vs hol subscription paint"/>
                      <set_value name="this.$RewardObject" exact="[ware.paintmod_0009]" weight="15" comment="basic godrealm faction paint"/>
                      <set_value name="this.$RewardObject" exact="[[ware.modpart_extendedfuelcontainer, ware.modpart_nividiumoxide, ware.modpart_enginefuelinjector_t1, ware.modpart_enginefuelinjector_t2].random]" weight="15" comment="modpart"/>
                      <set_value name="this.$RewardObject" exact="[ware.modpart_extendedfuelcontainer, ware.modpart_nividiumoxide, [ware.modpart_enginefuelinjector_t1, ware.modpart_enginefuelinjector_t2].random]" weight="15" comment="complete mod"/>
                      <set_value name="this.$RewardObject" exact="[ware.modpart_enginefuelinjector_t3]" weight="5" comment="rare modpart"/>
                      <set_value name="this.$RewardObject" exact="[[ware.inv_seminar_piloting_2, ware.inv_seminar_piloting_2, ware.inv_seminar_management_2].random]" weight="15"/>
                      <set_value name="this.$RewardObject" exact="[[ware.inv_seminar_piloting_3, ware.inv_seminar_piloting_3, ware.inv_seminar_management_3].random]" weight="4"/>
                      <set_value name="this.$RewardObject" exact="[[ware.inv_seminar_piloting_4, ware.inv_seminar_management_4].random]" weight="1"/>
                    </do_any>
                    <run_actions ref="md.LIB_Generic.GenerateRewardText" result="this.$RewardText">
                      <param name="RewardObject" value="this.$RewardObject"/>
                    </run_actions>
                  </actions>
                </library>
              </cues>
            </cue>
            <cue name="PAR_VS_HOL_Preemptive_Offensive">
              <cues>
                <cue name="PAR_VS_HOL_Preemptive_Offensive_Register" version="3">
                  <actions>
                    <!--Paranid Vs Holy Order - Preemptive Offensive-->
                    <set_value name="$ThreadID" exact="'$par_vs_hol_preemptive_offensive'"/>
                    <set_value name="$Thread" exact="table[                            $ID = $ThreadID,                            $Faction = $Faction,                            $EnemyFaction = $EnemyFaction,                            $MissionGroup = $MissionGroup,                            $ThreadConditionLibs = [Situation__Cold_War, Situation__Invasion_Prep],                            $ThreadType = 'sequential',                            $MissionType = missiontype.fight,                            $Difficulty = level.hard,                            $SubMissionLib = PAR_VS_HOL_Preemptive_Offensive_Get_Submissions,                            $NameLib = PAR_VS_HOL_Preemptive_Offensive_Construct_Name,                            $DescriptionLib = PAR_VS_HOL_Preemptive_Offensive_Construct_Description,                            $RewardLib = PAR_VS_HOL_Preemptive_Offensive_Construct_Reward,                            $MinMissions = 4,                            $MaxMissions = 6,                            $ThreadAbortRelation = -0.00064]"/>
                    <assert value="not $ManagerCue.$ThreadDefinitions.{$ThreadID}?" text="'Thread definition ' + $ThreadID + ' already exists in this table [Owen]'"/>
                    <set_value name="$ManagerCue.$ThreadDefinitions.{$ThreadID}" exact="$Thread"/>
                  </actions>
                  <patch sinceversion="3" state="complete">
                    <set_value name="$ManagerCue.$ThreadDefinitions.$par_vs_hol_preemptive_offensive.$RewardLib" exact="PAR_VS_HOL_Preemptive_Offensive_Construct_Reward"/>
                  </patch>
                </cue>
                <!--Called from CalculateThreads. Result saved to $New_Thread. Namespace is not this parent.-->
                <library name="PAR_VS_HOL_Preemptive_Offensive_Get_Submissions">
                  <actions>
                    <set_value name="$Submissions" exact="table[]"/>
                    <set_value name="$Submissions.$assassination__informant" exact="table[$Cue = md.X4Ep1_War_Subscriptions.Assassinate__Standard, $MissionType = missiontype.kill,  $Page = 30212, $TextOffset = [107000, 107100], $Sequence = -1 ]"/>
                    <set_value name="$Submissions.$board_ship" exact="table[$Cue = md.X4Ep1_War_Subscriptions.BoardShip__Standard,   $MissionType = missiontype.board, $Page = 30212, $TextOffset = [108000], $Sequence = -1 ]"/>
                    <set_value name="$Submissions.$destroy_rare_ship" exact="table[$Cue = md.X4Ep1_War_Subscriptions.DestroyRarelyOnSight__Standard,   $MissionType = missiontype.destroy, $Page = 30212, $TextOffset = [140000], $Sequence = -1 ]"/>
                    <set_value name="$Submissions.$destroy_objects_mines" exact="table[$Cue = md.X4Ep1_War_Subscriptions.Destroy_Objects__Clear_Explosives, $MissionType = missiontype.destroy, $Page = 30212, $TextOffset = [160000, 160100], $Sequence = -1 ]"/>
                    <set_value name="$Submissions.$destroy_objects_lasertowers" exact="table[$Cue = md.X4Ep1_War_Subscriptions.Destroy_Objects__Clear_Explosives, $MissionType = missiontype.destroy, $Page = 30212, $TextOffset = [161000, 161100], $Sequence = -1 ]"/>
                    <set_value name="$Submissions.$destroy_station_turrets" exact="table[$Cue = md.X4Ep1_War_Subscriptions.DestroyStation__Standard,   $MissionType = missiontype.destroy, $Page = 30212, $TextOffset = [180000], $Sequence = -1 ]"/>
                    <set_value name="$New_Thread.$Submissions" exact="$Submissions"/>
                  </actions>
                </library>
                <!--Called from CalculateThreads. Result saved to $New_Thread. Namespace is not this parent.-->
                <library name="PAR_VS_HOL_Preemptive_Offensive_Construct_Name">
                  <actions>
                    <do_any>
                      <set_value name="this.$Name" exact="{30212, 6000}"/>
                    </do_any>
                  </actions>
                </library>
                <!--Called from CalculateThreads where several values are set to help decide the briefing text. Result saved to $New_Thread. Namespace is not this parent.-->
                <library name="PAR_VS_HOL_Preemptive_Offensive_Construct_Description">
                  <actions>
                    <do_if value="$ThreadMood == 'negative'">
                      <do_any>
                        <set_value name="this.$Description" exact="{30212, 6101}"/>
                        <set_value name="this.$Description" exact="{30212, 6102}"/>
                      </do_any>
                      <set_value name="this.$Description" operation="add" exact="' ' + {30212, 6111}"/>
                      <do_any>
                        <set_value name="this.$Description" operation="add" exact="'\n' + {30212, 6121}"/>
                        <set_value name="this.$Description" operation="add" exact="'\n' + {30212, 6122}"/>
                      </do_any>
                    </do_if>
                    <do_elseif value="$ThreadMood == 'positive'">
                      <do_any>
                        <set_value name="this.$Description" exact="{30212, 6201}"/>
                        <set_value name="this.$Description" exact="{30212, 6202}"/>
                      </do_any>
                      <set_value name="this.$Description" operation="add" exact="' ' + {30212, 6211}"/>
                      <set_value name="this.$Description" operation="add" exact="'\n' + {30212, 6221}"/>
                    </do_elseif>
                  </actions>
                </library>
                <library name="PAR_VS_HOL_Preemptive_Offensive_Construct_Reward">
                  <actions>
                    <do_any>
                      <set_value name="this.$RewardObject" exact="[ware.paintmod_0085]" weight="15" comment="special par vs hol subscription paint"/>
                      <set_value name="this.$RewardObject" exact="[ware.paintmod_0009]" weight="15" comment="basic godrealm faction paint"/>
                      <set_value name="this.$RewardObject" exact="[[ware.modpart_highenergycatalyst, ware.modpart_tuningsoftware, ware.modpart_weaponchamber_t1, ware.modpart_weaponchamber_t2].random]" weight="15" comment="modpart"/>
                      <set_value name="this.$RewardObject" exact="[ware.modpart_highenergycatalyst, ware.modpart_tuningsoftware, [ware.modpart_weaponchamber_t1, ware.modpart_weaponchamber_t2].random]" weight="15" comment="complete mod"/>
                      <set_value name="this.$RewardObject" exact="[ware.modpart_weaponchamber_t3]" weight="5" comment="rare modpart"/>
                      <set_value name="this.$RewardObject" exact="[[ware.inv_seminar_piloting_2, ware.inv_seminar_piloting_2, ware.inv_seminar_management_2].random]" weight="15"/>
                      <set_value name="this.$RewardObject" exact="[[ware.inv_seminar_piloting_3, ware.inv_seminar_piloting_3, ware.inv_seminar_management_3].random]" weight="4"/>
                      <set_value name="this.$RewardObject" exact="[[ware.inv_seminar_piloting_4, ware.inv_seminar_management_4].random]" weight="1"/>
                    </do_any>
                    <run_actions ref="md.LIB_Generic.GenerateRewardText" result="this.$RewardText">
                      <param name="RewardObject" value="this.$RewardObject"/>
                    </run_actions>
                  </actions>
                </library>
              </cues>
            </cue>
            <cue name="PAR_VS_HOL_Station_Offensive">
              <cues>
                <cue name="PAR_VS_HOL_Station_Offensive_Register">
                  <actions>
                    <!--Argon Vs Xenon - Station Offensive-->
                    <set_value name="$ThreadID" exact="'$par_vs_hol_station_offensive'"/>
                    <set_value name="$Thread" exact="table[                            $ID = $ThreadID,                            $Faction = $Faction,                            $EnemyFaction = $EnemyFaction,                            $MissionGroup = $MissionGroup,                            $ThreadConditionLibs = [Situation__Invasion_Prep, Situation__Invading, Situation__Pushback],                            $ThreadType = 'sequential',                            $MissionType = missiontype.destroy,                            $Difficulty = level.veryhard,                            $SubMissionLib = PAR_VS_HOL_Station_Offensive_Get_Submissions,                            $NameLib = PAR_VS_HOL_Station_Offensive_Construct_Name,                            $DescriptionLib = PAR_VS_HOL_Station_Offensive_Construct_Description,                            $RewardLib = PAR_VS_HOL_Station_Offensive_Construct_Reward,                            $MinMissions = 1,                            $MaxMissions = 1,                            $ThreadAbortRelation = -0.00064]"/>
                    <assert value="not $ManagerCue.$ThreadDefinitions.{$ThreadID}?" text="'Thread definition ' + $ThreadID + ' already exists in this table [Owen]'"/>
                    <set_value name="$ManagerCue.$ThreadDefinitions.{$ThreadID}" exact="$Thread"/>
                  </actions>
                </cue>
                <!--Called from CalculateThreads. Result saved to $New_Thread. Namespace is not this parent.-->
                <library name="PAR_VS_HOL_Station_Offensive_Get_Submissions">
                  <actions>
                    <set_value name="$Submissions" exact="table[]"/>
                    <set_value name="$Submissions.$destroy_station" exact="table[$Cue = md.X4Ep1_War_Subscriptions.DestroyStation__Standard,   $MissionType = missiontype.destroy, $Page = 30212, $TextOffset = [170000], $Sequence = -1 ]"/>
                    <set_value name="$New_Thread.$Submissions" exact="$Submissions"/>
                  </actions>
                </library>
                <!--Called from CalculateThreads. Result saved to $New_Thread. Namespace is not this parent.-->
                <library name="PAR_VS_HOL_Station_Offensive_Construct_Name">
                  <actions>
                    <do_any>
                      <set_value name="this.$Name" exact="{30212, 9000}"/>
                    </do_any>
                  </actions>
                </library>
                <!--Called from CalculateThreads where several values are set to help decide the briefing text. Result saved to $New_Thread. Namespace is not this parent.-->
                <library name="PAR_VS_HOL_Station_Offensive_Construct_Description">
                  <actions>
                    <do_if value="$ThreadMood == 'negative'">
                      <do_any>
                        <set_value name="this.$Description" exact="{30212, 9101}"/>
                        <set_value name="this.$Description" exact="{30212, 9102}"/>
                      </do_any>
                      <set_value name="this.$Description" operation="add" exact="' ' + {30212, 9111}"/>
                      <do_any>
                        <set_value name="this.$Description" operation="add" exact="'\n' + {30212, 9121}"/>
                        <set_value name="this.$Description" operation="add" exact="'\n' + {30212, 9122}"/>
                      </do_any>
                    </do_if>
                    <do_elseif value="$ThreadMood == 'positive'">
                      <do_any>
                        <set_value name="this.$Description" exact="{30212, 9201}"/>
                        <set_value name="this.$Description" exact="{30212, 9202}"/>
                      </do_any>
                      <set_value name="this.$Description" operation="add" exact="' ' + {30212, 9211}"/>
                      <set_value name="this.$Description" operation="add" exact="'\n' + {30212, 9221}"/>
                    </do_elseif>
                  </actions>
                </library>
                <library name="PAR_VS_HOL_Station_Offensive_Construct_Reward">
                  <actions>
                    <do_any>
                      <set_value name="this.$RewardObject" exact="[ware.paintmod_0085]" weight="10" comment="special par vs hol subscription paint"/>
                      <set_value name="this.$RewardObject" exact="[ware.paintmod_0009]" weight="10" comment="basic godrealm faction paint"/>
                      <set_value name="this.$RewardObject" exact="[[ware.modpart_highenergycatalyst, ware.modpart_tuningsoftware, ware.modpart_weaponchamber_t1, ware.modpart_weaponchamber_t2].random]" weight="5" comment="modpart"/>
                      <set_value name="this.$RewardObject" exact="[ware.modpart_highenergycatalyst, ware.modpart_tuningsoftware, [ware.modpart_weaponchamber_t1, ware.modpart_weaponchamber_t2].random]" weight="10" comment="complete mod"/>
                      <set_value name="this.$RewardObject" exact="[ware.modpart_weaponchamber_t3]" weight="10" comment="rare modpart"/>
                      <set_value name="this.$RewardObject" exact="[[ware.inv_seminar_piloting_3, ware.inv_seminar_piloting_3, ware.inv_seminar_management_3].random]" weight="6"/>
                      <set_value name="this.$RewardObject" exact="[[ware.inv_seminar_piloting_4, ware.inv_seminar_piloting_4, ware.inv_seminar_management_4].random]" weight="4"/>
                    </do_any>
                    <run_actions ref="md.LIB_Generic.GenerateRewardText" result="this.$RewardText">
                      <param name="RewardObject" value="this.$RewardObject"/>
                    </run_actions>
                  </actions>
                </library>
              </cues>
            </cue>
            <cue name="PAR_VS_HOL_Gather_Intel">
              <cues>
                <cue name="PAR_VS_HOL_Preemptive_Gather_Intel" version="3">
                  <actions>
                    <!--Paranid Vs Holy Order - Gather Intel-->
                    <set_value name="$ThreadID" exact="'$par_vs_hol_gather_intel'"/>
                    <set_value name="$Thread" exact="table[                            $ID = $ThreadID,                            $Faction = $Faction,                            $EnemyFaction = $EnemyFaction,                            $MissionGroup = $MissionGroup,                            $ThreadConditionLibs = [Situation__Cold_War, Situation__Contention, Situation__Invasion_Prep],                            $ThreadType = 'sequential',                            $MissionType = missiontype.intelligence,                            $Difficulty = level.easy,                            $SubMissionLib = PAR_VS_HOL_Gather_Intel_Get_Submissions,                            $NameLib = PAR_VS_HOL_Gather_Intel_Construct_Name,                            $DescriptionLib = PAR_VS_HOL_Gather_Intel_Construct_Description,                            $RewardLib = PAR_VS_HOL_Gather_Intel_Construct_Reward,                            $MinMissions = 2,                            $MaxMissions = 3,                            $ThreadAbortRelation = -0.00064]"/>
                    <assert value="not $ManagerCue.$ThreadDefinitions.{$ThreadID}?" text="'Thread definition ' + $ThreadID + ' already exists in this table [Owen]'"/>
                    <set_value name="$ManagerCue.$ThreadDefinitions.{$ThreadID}" exact="$Thread"/>
                  </actions>
                  <patch sinceversion="3" state="complete">
                    <set_value name="$ManagerCue.$ThreadDefinitions.$par_vs_hol_gather_intel.$RewardLib" exact="PAR_VS_HOL_Gather_Intel_Construct_Reward"/>
                  </patch>
                </cue>
                <!--Called from CalculateThreads. Result saved to $New_Thread. Namespace is not this parent.-->
                <library name="PAR_VS_HOL_Gather_Intel_Get_Submissions">
                  <actions>
                    <set_value name="$Submissions" exact="table[]"/>
                    <set_value name="$Submissions.$deploy_satellite" exact="table[$Cue = md.X4Ep1_War_Subscriptions.DeployInPlace__Standard,    $MissionType = missiontype.drop,  $Page = 30212, $TextOffset = [101400], $Sequence = -1 ]"/>
                    <set_value name="$Submissions.$achieve_coverage__enemy_sector" exact="table[$Cue = md.X4Ep1_War_Subscriptions.Achieve_Coverage__Standard, $MissionType = missiontype.drop,  $Page = 30212, $TextOffset = [102100], $Sequence = 1 ]"/>
                    <set_value name="$Submissions.$find_resources__enemy_sector" exact="table[$Cue = md.X4Ep1_War_Subscriptions.Find_Resources__Standard,   $MissionType = missiontype.find,  $Page = 30212, $TextOffset = [106100], $Sequence = -1 ]"/>
                    <set_value name="$Submissions.$scan__ship" exact="table[$Cue = md.X4Ep1_War_Subscriptions.Scan__Standard,             $MissionType = missiontype.find,  $Page = 30212, $TextOffset = [150000], $Sequence = -1 ]"/>
                    <set_value name="$Submissions.$scan__station" exact="table[$Cue = md.X4Ep1_War_Subscriptions.Scan__Standard,             $MissionType = missiontype.find,  $Page = 30212, $TextOffset = [150100], $Sequence = -1 ]"/>
                    <set_value name="$Submissions.$scan__module" exact="table[$Cue = md.X4Ep1_War_Subscriptions.Scan__Standard,             $MissionType = missiontype.find,  $Page = 30212, $TextOffset = [150200], $Sequence = -1 ]"/>
                    <set_value name="$Submissions.$scan__for_ware" exact="table[$Cue = md.X4Ep1_War_Subscriptions.Scan__Standard,             $MissionType = missiontype.find,  $Page = 30212, $TextOffset = [150700, 150800, 150900], $Sequence = -1 ]"/>
                    <!--<set_value name="$Submissions.$scan__for_inventory"
                                 exact="table[$Cue = md.X4Ep1_War_Subscriptions.Scan__Standard,             $MissionType = missiontype.find,  $Page = 30212, $TextOffset = [150400], $Sequence = -1 ]"/>-->
                    <!--$scan__for_entity currently disabled as it's quite a chore-->
                    <!--<set_value name="$Submissions.$scan__for_entity"
                                 exact="table[$Cue = md.X4Ep1_War_Subscriptions.Scan__Standard,             $MissionType = missiontype.find,  $Page = 30212, $TextOffset = [150500], $Sequence = -1 ]"/>-->
                    <!--<set_value name="$Submissions.$scan__for_idcode"
                                 exact="table[$Cue = md.X4Ep1_War_Subscriptions.Scan__Standard,             $MissionType = missiontype.find,  $Page = 30212, $TextOffset = [150600], $Sequence = -1 ]"/>-->
                    <set_value name="$New_Thread.$Submissions" exact="$Submissions"/>
                  </actions>
                </library>
                <!--Called from CalculateThreads. Result saved to $New_Thread. Namespace is not this parent.-->
                <library name="PAR_VS_HOL_Gather_Intel_Construct_Name">
                  <actions>
                    <do_any>
                      <set_value name="this.$Name" exact="{30212, 7000}"/>
                    </do_any>
                  </actions>
                </library>
                <!--Called from CalculateThreads where several values are set to help decide the briefing text. Result saved to $New_Thread. Namespace is not this parent.-->
                <library name="PAR_VS_HOL_Gather_Intel_Construct_Description">
                  <actions>
                    <do_if value="$ThreadMood == 'negative'">
                      <do_any>
                        <set_value name="this.$Description" exact="{30212, 7101}"/>
                        <set_value name="this.$Description" exact="{30212, 7102}"/>
                      </do_any>
                      <set_value name="this.$Description" operation="add" exact="' ' + {30212, 7111}"/>
                      <do_any>
                        <set_value name="this.$Description" operation="add" exact="'\n' + {30212, 7121}"/>
                        <set_value name="this.$Description" operation="add" exact="'\n' + {30212, 7122}"/>
                      </do_any>
                    </do_if>
                    <do_elseif value="$ThreadMood == 'positive'">
                      <do_any>
                        <set_value name="this.$Description" exact="{30212, 7201}"/>
                        <set_value name="this.$Description" exact="{30212, 7202}"/>
                      </do_any>
                      <set_value name="this.$Description" operation="add" exact="' ' + {30212, 7211}"/>
                      <set_value name="this.$Description" operation="add" exact="'\n' + {30212, 7221}"/>
                    </do_elseif>
                  </actions>
                </library>
                <library name="PAR_VS_HOL_Gather_Intel_Construct_Reward">
                  <actions>
                    <do_any>
                      <set_value name="this.$RewardObject" exact="[ware.paintmod_0085]" weight="15" comment="special par vs hol subscription paint"/>
                      <set_value name="this.$RewardObject" exact="[ware.paintmod_0009]" weight="15" comment="basic godrealm faction paint"/>
                      <set_value name="this.$RewardObject" exact="[[ware.modpart_extendedfuelcontainer, ware.modpart_nividiumoxide, ware.modpart_enginefuelinjector_t1, ware.modpart_enginefuelinjector_t2].random]" weight="9" comment="modpart"/>
                      <set_value name="this.$RewardObject" exact="[ware.modpart_extendedfuelcontainer, ware.modpart_nividiumoxide, [ware.modpart_enginefuelinjector_t1, ware.modpart_enginefuelinjector_t2].random]" weight="8" comment="complete mod"/>
                      <set_value name="this.$RewardObject" exact="[[ware.modpart_nividiumcrystallite, ware.modpart_shipnanoweave_t1, ware.modpart_shipnanoweave_t2].random]" weight="9" comment="modpart"/>
                      <set_value name="this.$RewardObject" exact="[ware.modpart_nividiumcrystallite, [ware.modpart_shipnanoweave_t1, ware.modpart_shipnanoweave_t2].random]" weight="8" comment="complete mod"/>
                      <set_value name="this.$RewardObject" exact="[[ware.modpart_shipnanoweave_t3, ware.modpart_enginefuelinjector_t3].random]" weight="4" comment="rare modpart"/>
                      <set_value name="this.$RewardObject" exact="[[ware.inv_seminar_piloting_2, ware.inv_seminar_piloting_2, ware.inv_seminar_management_2].random]" weight="14"/>
                      <set_value name="this.$RewardObject" exact="[[ware.inv_seminar_piloting_3, ware.inv_seminar_piloting_3, ware.inv_seminar_management_3].random]" weight="4"/>
                      <set_value name="this.$RewardObject" exact="[[ware.inv_seminar_piloting_4, ware.inv_seminar_management_4].random]" weight="1"/>
                    </do_any>
                    <run_actions ref="md.LIB_Generic.GenerateRewardText" result="this.$RewardText">
                      <param name="RewardObject" value="this.$RewardObject"/>
                    </run_actions>
                  </actions>
                </library>
              </cues>
            </cue>
            <cue name="PAR_VS_HOL_Support_Invasion">
              <cues>
                <cue name="PAR_VS_HOL_Preemptive_Support_Invasion" version="3">
                  <actions>
                    <!--Paranid Vs Holy Order - Support Invasion-->
                    <set_value name="$ThreadID" exact="'$par_vs_hol_support_invasion'"/>
                    <set_value name="$Thread" exact="table[                            $ID = $ThreadID,                            $Faction = $Faction,                            $EnemyFaction = $EnemyFaction,                            $MissionGroup = $MissionGroup,                            $ThreadConditionLibs = [Situation__Invading],                            $ThreadType = 'sequential',                            $MissionType = missiontype.fight,                            $Difficulty = level.hard,                            $SubMissionLib = PAR_VS_HOL_Support_Invasion_Get_Submissions,                            $NameLib = PAR_VS_HOL_Support_Invasion_Construct_Name,                            $DescriptionLib = PAR_VS_HOL_Support_Invasion_Construct_Description,                            $RewardLib = PAR_VS_HOL_Support_Invasion_Construct_Reward,                            $MinMissions = 1,                            $MaxMissions = 1,                            $ThreadAbortRelation = -0.00064]"/>
                    <assert value="not $ManagerCue.$ThreadDefinitions.{$ThreadID}?" text="'Thread definition ' + $ThreadID + ' already exists in this table [Owen]'"/>
                    <set_value name="$ManagerCue.$ThreadDefinitions.{$ThreadID}" exact="$Thread"/>
                  </actions>
                  <patch sinceversion="3" state="complete">
                    <set_value name="$ManagerCue.$ThreadDefinitions.$par_vs_hol_support_invasion.$RewardLib" exact="PAR_VS_HOL_Support_Invasion_Construct_Reward"/>
                  </patch>
                </cue>
                <!--Called from CalculateThreads. Result saved to $New_Thread. Namespace is not this parent.-->
                <library name="PAR_VS_HOL_Support_Invasion_Get_Submissions">
                  <actions>
                    <set_value name="$Submissions" exact="table[]"/>
                    <!--<set_value name="$Submissions.$support_invasion"
                                 exact="table[$Cue = md.X4Ep1_War_Subscriptions.Support_Invasion__Standard,    $MissionType = missiontype.fight,  $Page = 30212, $TextOffset = [109000], $Sequence = -1 ]"/>-->
                    <set_value name="$New_Thread.$Submissions" exact="$Submissions"/>
                  </actions>
                </library>
                <!--Called from CalculateThreads. Result saved to $New_Thread. Namespace is not this parent.-->
                <library name="PAR_VS_HOL_Support_Invasion_Construct_Name">
                  <actions>
                    <do_any>
                      <set_value name="this.$Name" exact="{30212, 8000}"/>
                    </do_any>
                  </actions>
                </library>
                <!--Called from CalculateThreads where several values are set to help decide the briefing text. Result saved to $New_Thread. Namespace is not this parent.-->
                <library name="PAR_VS_HOL_Support_Invasion_Construct_Description">
                  <actions>
                    <do_if value="$ThreadMood == 'negative'">
                      <do_any>
                        <set_value name="this.$Description" exact="{30212, 8101}"/>
                      </do_any>
                      <set_value name="this.$Description" operation="add" exact="' ' + {30212, 8111}"/>
                      <do_any>
                        <set_value name="this.$Description" operation="add" exact="'\n' + {30212, 8121}"/>
                      </do_any>
                    </do_if>
                    <do_elseif value="$ThreadMood == 'positive'">
                      <do_any>
                        <set_value name="this.$Description" exact="{30212, 8201}"/>
                      </do_any>
                      <set_value name="this.$Description" operation="add" exact="' ' + {30212, 8211}"/>
                      <set_value name="this.$Description" operation="add" exact="'\n' + {30212, 8221}"/>
                    </do_elseif>
                  </actions>
                </library>
                <library name="PAR_VS_HOL_Support_Invasion_Construct_Reward">
                  <actions>
                    <do_any>
                      <set_value name="this.$RewardObject" exact="[ware.paintmod_0085]" weight="15" comment="special par vs hol subscription paint"/>
                      <set_value name="this.$RewardObject" exact="[ware.paintmod_0009]" weight="15" comment="basic godrealm faction paint"/>
                      <set_value name="this.$RewardObject" exact="[[ware.modpart_nividiumcrystallite, ware.modpart_shipnanoweave_t1, ware.modpart_shipnanoweave_t2].random]" weight="9"/>
                      <set_value name="this.$RewardObject" exact="[ware.modpart_nividiumcrystallite, [ware.modpart_shipnanoweave_t1, ware.modpart_shipnanoweave_t2].random]" weight="8"/>
                      <set_value name="this.$RewardObject" exact="[[ware.modpart_highenergycatalyst, ware.modpart_tuningsoftware, ware.modpart_weaponchamber_t1, ware.modpart_weaponchamber_t2].random]" weight="9"/>
                      <set_value name="this.$RewardObject" exact="[ware.modpart_highenergycatalyst, ware.modpart_tuningsoftware, [ware.modpart_weaponchamber_t1, ware.modpart_weaponchamber_t2].random]" weight="8"/>
                      <set_value name="this.$RewardObject" exact="[[ware.modpart_shipnanoweave_t3, ware.modpart_weaponchamber_t3].random]" weight="4"/>
                      <set_value name="this.$RewardObject" exact="[[ware.inv_seminar_piloting_2, ware.inv_seminar_piloting_2, ware.inv_seminar_management_2].random]" weight="14"/>
                      <set_value name="this.$RewardObject" exact="[[ware.inv_seminar_piloting_3, ware.inv_seminar_piloting_3, ware.inv_seminar_management_3].random]" weight="4"/>
                      <set_value name="this.$RewardObject" exact="[[ware.inv_seminar_piloting_4, ware.inv_seminar_management_4].random]" weight="1"/>
                    </do_any>
                    <run_actions ref="md.LIB_Generic.GenerateRewardText" result="this.$RewardText">
                      <param name="RewardObject" value="this.$RewardObject"/>
                    </run_actions>
                  </actions>
                </library>
              </cues>
            </cue>
          </cues>
        </cue>
        <!--
        ###################################
        HOLY ORDER VS ARGON
        ###################################-->
        <cue name="HOL_VS_ARG" namespace="this" version="4">
          <actions>
            <!--Common values-->
            <set_value name="$ManagerCue" exact="parent.namespace"/>
            <set_value name="$Faction" exact="faction.holyorder"/>
            <set_value name="$EnemyFaction" exact="faction.argon"/>
            <set_value name="$MissionGroup" exact="missiongroup.holyorder_war_argon"/>
            <set_value name="$Mission_Contact" exact="null"/>
            <set_value name="$Page" exact="30213" comment="HolyOrder-Argon-War page"/>
            <set_value name="$ManagerCue.$MissionGroupCues.{$MissionGroup}" exact="this"/>
            <set_value name="$SubscriptionMinRel" exact="$Faction.relation.friend.min"/>
            <set_value name="$SubscriptionLossRel" exact="-0.00064" comment="for UI-value -1"/>
            <set_value name="$HasIntroMission" exact="false"/>
            <set_value name="$DebugChance" exact="$ManagerCue.$DebugChance"/>
            <!--Status-->
            <set_value name="$SubscriptionStatus" exact="null"/>
            <set_value name="$IntroducedToContact" exact="false"/>
            <set_value name="$JobsDescribed" exact="false"/>
            <set_value name="$ConflictDescribed" exact="false"/>
            <set_value name="$IntroMissionSuccessful" exact="false"/>
            <set_value name="$CooldownTime" exact="-1s"/>
            <!--Stats-->
            <set_value name="$ThreadsCompleted" exact="0"/>
            <set_value name="$ThreadsFailed" exact="0"/>
            <set_value name="$MissionsCompleted" exact="0"/>
            <set_value name="$MissionsFailed" exact="0"/>
          </actions>
          <patch sinceversion="2" state="complete">
            <do_if value="$CooldownTime gt (player.age + 5min)">
              <debug_text text="'Reducing mission subscription cooldowntime from ' + $CooldownTime + ' to ' + player.age + 5min" filter="savegame"/>
              <set_value name="$CooldownTime" exact="player.age + 5min"/>
            </do_if>
          </patch>
          <patch sinceversion="3" state="complete">
            <do_if value="not md.$SubscribedMissionGroups?">
              <create_list name="md.$SubscribedMissionGroups"/>
            </do_if>
            <do_if value="$SubscriptionStatus == 'subscribed'">
              <append_to_list name="md.$SubscribedMissionGroups" exact="$MissionGroup"/>
            </do_if>
          </patch>
          <patch sinceversion="4" state="complete">
            <set_value name="$HasIntroMission" exact="false"/>
          </patch>
          <cues>
            <cue name="HOL_VS_ARG_Init">
              <actions>
                <set_value name="$ContactCreatorCue" exact="HOL_VS_ARG_Create_Contact"/>
                <set_value name="$IntroMissionCue" exact="HOL_VS_ARG_Introduction"/>
                <!--$SubscriptionStatus:
                - 'unsubscribed'
                - 'probation'
                - 'subscribed'
                - 'cooldown'-->
                <signal_cue_instantly cue="HOL_VS_ARG_Set_Subscription_Status" param="'unsubscribed'" comment="TODO: @Owen, @Roger - temporary, change back to unsubscribed!"/>
              </actions>
            </cue>
            <!--
            ####################
            DEBUG
            ####################-->
            <cue name="HOL_VS_ARG_Debug_Reset">
              <conditions>
                <event_cue_signalled/>
              </conditions>
              <actions>
                <do_all exact="$ManagerCue.$Threads.count" counter="$i" reverse="true">
                  <do_if value="$ManagerCue.$Threads.{$i}.$ThreadCue.$Definition.$MissionGroup == $MissionGroup">
                    <signal_cue_instantly cue="$ManagerCue.$Threads.{$i}.$CleanupCue"/>
                  </do_if>
                </do_all>
                <set_value name="$DefinitionKeys" exact="$ManagerCue.$ThreadDefinitions.keys.list"/>
                <do_all exact="$DefinitionKeys.count" counter="$i" reverse="true">
                  <do_if value="$ManagerCue.$ThreadDefinitions.{$DefinitionKeys.{$i}}.$MissionGroup == $MissionGroup">
                    <remove_value name="$ManagerCue.$ThreadDefinitions.{$DefinitionKeys.{$i}}"/>
                  </do_if>
                </do_all>
                <do_if value="$Mission_Contact.isclass.npc">
                  <destroy_object object="$Mission_Contact"/>
                </do_if>
                <set_value name="$Mission_Contact" exact="null"/>
                <reset_cue cue="namespace"/>
                <reset_cue cue="Gamestart" comment="Trigger CalculateThreads again"/>
              </actions>
            </cue>
            <cue name="HOL_VS_ARG_Debug_Subscribe" instantiate="true">
              <conditions>
                <event_cue_signalled/>
              </conditions>
              <actions>
                <signal_cue_instantly cue="HOL_VS_ARG_Set_Subscription_Status" param="'subscribed'"/>
              </actions>
            </cue>
            <!--
            ####################
            SUBSCRIPTION
            ####################-->
            <!--event.param == new status-->
            <cue name="HOL_VS_ARG_Set_Subscription_Status" instantiate="true">
              <conditions>
                <event_cue_signalled/>
              </conditions>
              <actions>
                <do_if value="                        event.param == 'unsubscribed' or                        event.param == 'probation' or                        event.param == 'subscribed' or                        event.param == 'cooldown'">
                  <debug_text text="'Changing subscription status from ' + $SubscriptionStatus + ' to ' + event.param" chance="$DebugChance"/>
                  <set_value name="$SubscriptionStatus" exact="event.param"/>
                  <!--Be careful with state change handlers here if the requested state was the same as the previous one-->
                  <do_if value="event.param == 'subscribed' and Gamestart.state == cuestate.complete">
                    <signal_cue_instantly cue="Player_Subscribed_To_War" param="$MissionGroup"/>
                    <signal_cue cue="CalculateThreads"/>
                  </do_if>
                  <do_elseif value="event.param == 'cooldown'">
                    <!--TODO @Owen balance cooldown. Have a harsher cooldown in certain situations?-->
                    <set_value name="$CooldownTime" exact="player.age + 5min"/>
                  </do_elseif>
                  <!-- update global missiongroup-registry -->
                  <do_if value="$SubscriptionStatus == 'subscribed'">
                    <assert value="not md.$SubscribedMissionGroups.indexof.{$MissionGroup}"/>
                    <do_if value="not md.$SubscribedMissionGroups.indexof.{$MissionGroup}">
                      <append_to_list name="md.$SubscribedMissionGroups" exact="$MissionGroup"/>
                    </do_if>
                  </do_if>
                  <do_else>
                    <remove_from_list name="md.$SubscribedMissionGroups" exact="$MissionGroup"/>
                  </do_else>
                </do_if>
                <do_else>
                  <assert value="false" text="'Unknown subscription status: ' + event.param + ' [Owen]'"/>
                </do_else>
              </actions>
            </cue>
            <cue name="HOL_VS_ARG_Check_Cooldown" instantiate="true" checkinterval="5s">
              <conditions>
                <check_value value="$SubscriptionStatus == 'cooldown' and player.age gt $CooldownTime"/>
              </conditions>
              <actions>
                <debug_text text="player.age + ' Ending  cooldown'" chance="$DebugChance"/>
                <signal_cue_instantly cue="HOL_VS_ARG_Set_Subscription_Status" param="'subscribed'"/>
              </actions>
            </cue>
            <!--
            ####################
            CONTACT
            ####################-->
            <!--event.param == Cloned table of the host sectors for this war front in which to search for a placement object (or null to fallback to any owned space in the galaxy)-->
            <cue name="HOL_VS_ARG_Create_Contact">
              <conditions>
                <event_cue_signalled/>
                <check_value value="$Faction.isactive"/>
              </conditions>
              <actions>
                <set_value name="this.$SelectedSpace" exact="null"/>
                <do_if value="event.param and typeof event.param == datatype.table">
                  <set_value name="this.$HostSectorKeys" exact="event.param.keys.sorted"/>
                  <do_all exact="this.$HostSectorKeys.count" counter="$i">
                    <do_if value="this.$HostSectorKeys.{$i}.security ge 0.75f">
                      <!--Select a sector with stations and a high security value-->
                      <find_station name="this.$PotentialStation" owner="$Faction" space="this.$HostSectorKeys.{$i}">
                        <match_content class="class.walkablemodule" checkoperational="true"/>
                      </find_station>
                      <do_if value="this.$PotentialStation">
                        <set_value name="this.$SelectedSpace" exact="this.$HostSectorKeys.{$i}"/>
                        <break/>
                      </do_if>
                    </do_if>
                  </do_all>
                  <do_if value="not this.$SelectedSpace">
                    <!--Simply select the furthest sector with stations-->
                    <do_all exact="this.$HostSectorKeys.count" counter="$i" reverse="true">
                      <find_station name="this.$PotentialStation" owner="$Faction" space="this.$HostSectorKeys.{$i}">
                        <match_content class="class.walkablemodule" checkoperational="true"/>
                      </find_station>
                      <do_if value="this.$PotentialStation">
                        <set_value name="this.$SelectedSpace" exact="this.$HostSectorKeys.{$i}"/>
                        <break/>
                      </do_if>
                    </do_all>
                  </do_if>
                </do_if>
                <do_if value="not this.$SelectedSpace">
                  <find_station name="this.$PotentialStation" owner="$Faction" space="player.galaxy">
                    <match_content class="class.walkablemodule" checkoperational="true"/>
                  </find_station>
                  <do_if value="this.$PotentialStation">
                    <set_value name="this.$SelectedSpace" exact="this.$PotentialStation.sector"/>
                    <debug_text text="'Fallback case for not finding suitable sector to place mission contact for ' + $MissionGroup + '. Placing on ' + this.$PotentialStation + ' ' + this.$PotentialStation.knownname + ' in ' + this.$SelectedSpace.knownname" filter="error"/>
                  </do_if>
                </do_if>
                <do_if value="this.$SelectedSpace">
                  <find_station name="$PlacementObject" owner="$Faction" space="this.$SelectedSpace" required="true">
                    <match_content class="class.walkablemodule" checkoperational="true"/>
                  </find_station>
                  <assert value="$PlacementObject.exists" text="'Station was unable to be found in ' + this.$SelectedSpace.knownname + ' even when it should have [Owen]'"/>
                  <do_if value="$PlacementObject">
                    <do_if value="not $Mission_Contact.isclass.npc">
                      <create_cue_actor name="$Mission_Contact" cue="namespace" group="paranid.factionrepresentative">
                        <page exact="10305"/>
                        <owner exact="$Faction"/>
                        <skills>
                          <skill type="management" min="12" max="15"/>
                          <skill type="morale" min="12" max="15"/>
                          <skill type="piloting" min="6" max="15"/>
                          <skill type="engineering" min="6" max="15"/>
                          <skill type="boarding" min="6" max="15"/>
                        </skills>
                      </create_cue_actor>
                      <do_if value="$Mission_Contact">
                        <set_entity_type entity="$Mission_Contact" type="entitytype.crowd"/>
                        <set_entity_traits entity="$Mission_Contact" missionactor="true" remote="false" customhandler="true"/>
                        <set_entity_overrides entity="$Mission_Contact" title="'{30213,201}'"/>
                        <debug_text text="'Created mission contact ' + $Mission_Contact + ' ' + $Mission_Contact.knownname + ' for placement on ' + $PlacementObject + ' ' + $PlacementObject.knownname" chance="$DebugChance"/>
                      </do_if>
                    </do_if>
                  </do_if>
                </do_if>
                <assert value="$Mission_Contact.isclass.npc" text="'Unable to generate mission contact [Owen]'"/>
                <do_if value="not $Mission_Contact.isclass.npc or not $PlacementObject.exists">
                  <reset_cue cue="this"/>
                </do_if>
              </actions>
              <cues>
                <cue name="HOL_VS_ARG_Place_Contact_Init" version="2">
                  <actions>
                    <do_if value="$PlacementObject.attention ge attention.nearby">
                      <signal_cue cue="HOL_VS_ARG_Place_Contact_Create_Interior"/>
                    </do_if>
                  </actions>
                  <patch sinceversion="2" state="complete">
                    <do_if value="not $PlacementObject.isoperational">
                      <set_value name="$PlacementObject" exact="null"/>
                      <reset_cue cue="$ContactCreatorCue"/>
                    </do_if>
                  </patch>
                </cue>
                <cue name="HOL_VS_ARG_Place_Contact_Create_Interior">
                  <conditions>
                    <check_any>
                      <event_cue_signalled/>
                      <check_all>
                        <event_object_changed_attention object="$PlacementObject"/>
                        <check_value value="event.param ge attention.nearby"/>
                      </check_all>
                    </check_any>
                  </conditions>
                  <actions>
                    <debug_text text="'Attempting to create dynamic interior to place NPC'" chance="$DebugChance"/>
                    <get_room_definition macro="$StartCorridorMacro" tags="tag.corridor" race="$Faction.primaryrace"/>
                    <get_room_definition macro="$StartRoomMacro" doors="$RoomDoors" tags="tag.warroom" race="$Faction.primaryrace"/>
                    <create_dynamic_interior object="$PlacementObject" corridor="$StartCorridorMacro" room="$StartRoomMacro" name="'{30213,3}'" interiorname="$DynamicInterior" corridorname="$DynamicCorridor" roomname="$DynamicRoom"/>
                    <assert value="$DynamicInterior" text="'Unable to create dynamic interior for contact ' + $Mission_Contact + ' ' + $Mission_Contact.knownname + ' [Owen]'"/>
                    <do_if value="$DynamicInterior">
                      <find_npc_slot name="$NPC_Slot" object="$DynamicRoom" tags="tag.stand"/>
                      <do_if value="not $NPC_Slot">
                        <find_npc_slot name="$NPC_Slot" object="$DynamicRoom"/>
                      </do_if>
                      <assert value="$NPC_Slot" text="'Can not find slot for mission contact in ' + $DynamicInterior + ' ' + $DynamicInterior.knownname + ' [Owen]'"/>
                      <do_if value="$NPC_Slot">
                        <add_actor_to_room actor="$Mission_Contact" slot="$NPC_Slot"/>
                        <debug_text text="'Added mission contact ' + $Mission_Contact + ' ' + $Mission_Contact.knownname + ' to ' + $PlacementObject + ' ' + $PlacementObject.knownname" chance="$DebugChance"/>
                      </do_if>
                    </do_if>
                  </actions>
                  <cues>
                    <cue name="HOL_VS_ARG_Place_Contact_WithinDynamicInterior_Destroy">
                      <conditions>
                        <event_object_interiors_despawning object="$PlacementObject"/>
                      </conditions>
                      <actions>
                        <remove_actor_from_room actor="$Mission_Contact"/>
                        <include_actions ref="Remove_Dynamic_Interior"/>
                        <do_if value="$Faction.isactive">
                          <reset_cue cue="HOL_VS_ARG_Place_Contact_Create_Interior"/>
                        </do_if>
                        <do_else>
                          <debug_text text="'Faction is now inactive. Deactivating contact handling.'"/>
                          <reset_cue cue="$ContactCreatorCue"/>
                        </do_else>
                      </actions>
                    </cue>
                  </cues>
                </cue>
                <cue name="HOL_VS_ARG_Contact_Killed">
                  <conditions>
                    <event_object_destroyed object="$Mission_Contact"/>
                  </conditions>
                  <actions>
                    <set_value name="$Mission_Contact" exact="null"/>
                    <reset_cue cue="HOL_VS_ARG_Create_Contact"/>
                  </actions>
                </cue>
                <cue name="HOL_VS_ARG_Placement_Object_Destroyed">
                  <conditions>
                    <event_object_destroyed object="$PlacementObject"/>
                  </conditions>
                  <actions>
                    <include_actions ref="Remove_Dynamic_Interior"/>
                    <set_value name="$PlacementObject" exact="null"/>
                    <reset_cue cue="$ContactCreatorCue"/>
                  </actions>
                </cue>
                <cue name="HOL_VS_ARG_Contact__Faction_Deactivated">
                  <conditions>
                    <event_faction_deactivated faction="$Faction"/>
                  </conditions>
                  <actions>
                    <do_if value="HOL_VS_ARG_Place_Contact_Create_Interior.state == cuestate.waiting">
                      <debug_text text="'Faction is now inactive. Deactivating contact handling.'"/>
                      <reset_cue cue="$ContactCreatorCue"/>
                    </do_if>
                    <!--else, the depawning of the interior must happen-->
                  </actions>
                </cue>
                <cue name="HOL_VS_ARG_Contact_Conversation_Started" instantiate="true">
                  <conditions>
                    <check_any>
                      <event_conversation_started actor="$Mission_Contact"/>
                      <event_conversation_returned_to_section actor="$Mission_Contact"/>
                    </check_any>
                    <check_value value="event.param == 'default' and $Faction.isactive"/>
                  </conditions>
                  <actions>
                    <do_if value="event.name == 'event_conversation_started'">
                      <do_if value="$SubscriptionStatus == 'unsubscribed' or $SubscriptionStatus == 'cooldown'">
                        <do_if value="player.entity.isfemale">
                          <add_npc_line speaker="$Mission_Contact" line="3007" comment="Pilot. (female)"/>
                        </do_if>
                        <do_else>
                          <add_npc_line speaker="$Mission_Contact" line="3006" comment="Pilot. (male)"/>
                        </do_else>
                      </do_if>
                      <do_else>
                        <!--More familiar greeting-->
                        <add_npc_line speaker="$Mission_Contact" line="3003" comment="Captain."/>
                      </do_else>
                    </do_if>
                    <include_actions ref="HOL_VS_ARG_Contact_Player_Lines"/>
                  </actions>
                </cue>
                <library name="HOL_VS_ARG_Contact_Player_Lines">
                  <actions>
                    <!--Specific sections-->
                    <do_if value="event.name == 'event_conversation_next_section' and event.param == 'war_subscribe_request'">
                      <do_if value="$Faction.relationto.{faction.player} ge $SubscriptionMinRel">
                        <add_player_choice text="{1002,3000401}" section="war_subscribe_ask_intro" comment="What kind of jobs can I expect?"/>
                      </do_if>
                    </do_if>
                    <do_elseif value="event.name == 'event_conversation_next_section' and (event.param == 'war_subscribe_ask_intro' or event.param == 'war_subscribe_request_2')">
                      <add_player_choice text="{1002,3021302}" section="war_subscribe_ask_conflict" comment="What can you tell me about the conflict?"/>
                      <add_player_choice text="{1002,3000402}" section="war_subscribe_start_intro" position="top_right" comment="Let's get started."/>
                    </do_elseif>
                    <do_elseif value="event.name == 'event_conversation_next_section' and event.param == 'war_subscribe_ask_conflict'">
                      <add_player_choice text="{1002,3000402}" section="war_subscribe_start_intro" position="top_right" comment="Let's get started."/>
                    </do_elseif>
                    <!--Start or other sections-->
                    <do_else>
                      <do_if value="$SubscriptionStatus == 'unsubscribed'">
                        <do_if value="HOL_VS_ARG_Introduction.state == cuestate.waiting">
                          <!--Intro mission is not in a state where the player can take it.-->
                          <!--TODO @Owen - voice lines on rejecting the player?-->
                          <add_player_choice text="{1002,3021301}" section="war_subscribe_request_2" comment="I'm here about the Holy Order."/>
                        </do_if>
                        <do_elseif value="$IntroducedToContact">
                          <do_if value="$JobsDescribed">
                            <add_player_choice text="{1002,3000402}" section="war_subscribe_start_intro" position="top_right" comment="Let's get started."/>
                            <add_player_choice text="{1002,3021302}" section="war_subscribe_ask_conflict" comment="What can you tell me about the conflict?"/>
                          </do_if>
                          <do_else>
                            <add_player_choice text="{1002,3000401}" section="war_subscribe_ask_intro" comment="What kind of jobs can I expect?"/>
                          </do_else>
                        </do_elseif>
                        <do_else>
                          <add_player_choice text="{1002,3021301}" section="war_subscribe_request" comment="I'm here about the Argon."/>
                        </do_else>
                      </do_if>
                      <do_elseif value="$SubscriptionStatus == 'probation'">
                        <do_if value="$IntroMissionSuccessful">
                          <add_player_choice text="{1002,3000404}" section="war_intro_complete" comment="I completed the task."/>
                        </do_if>
                        <do_else>
                          <add_player_choice text="{1002,3000405}" section="war_abort_intro" comment="I would like to stop."/>
                        </do_else>
                      </do_elseif>
                    </do_else>
                  </actions>
                </library>
                <cue name="HOL_VS_ARG_Contact_NextSection" instantiate="true">
                  <conditions>
                    <event_conversation_next_section actor="$Mission_Contact" sectionprefix="war_"/>
                  </conditions>
                  <actions>
                    <set_value name="$AddPlayerChoices" exact="true"/>
                    <do_if value="event.param == 'war_subscribe_request'">
                      <do_if value="$Faction.relationto.{faction.player} ge $SubscriptionMinRel">
                        <set_value name="$IntroducedToContact" exact="true"/>
                        <add_npc_line speaker="$Mission_Contact" line="30213001" hidechoices="true" comment="Ah, very good."/>
                        <add_npc_line speaker="$Mission_Contact" line="30213002" hidechoices="true"/>
                        <do_if value="player.entity.race == race.argon">
                          <!--Holy Order citizen-->
                          <add_npc_line speaker="$Mission_Contact" line="30213004" hidechoices="true"/>
                        </do_if>
                        <do_else>
                          <!--Holy Order friend-->
                          <add_npc_line speaker="$Mission_Contact" line="30213003" hidechoices="true"/>
                        </do_else>
                        <add_npc_line speaker="$Mission_Contact" line="30213005" hidechoices="true"/>
                        <add_npc_line speaker="$Mission_Contact" line="30213006" hidechoices="true"/>
                        <add_npc_line speaker="$Mission_Contact" line="30213007" hidechoices="true"/>
                        <do_if value="player.entity.race == race.argon">
                          <!--Argon player line-->
                          <add_npc_line speaker="$Mission_Contact" line="30213008" hidechoices="true"/>
                        </do_if>
                        <do_else>
                          <add_npc_line speaker="$Mission_Contact" line="30213009" hidechoices="true"/>
                          <add_npc_line speaker="$Mission_Contact" line="30213010" hidechoices="true"/>
                        </do_else>
                      </do_if>
                      <do_else>
                        <add_npc_line speaker="$Mission_Contact" line="30213026" comment="Sorry, but that is a very sensitive situation. We require pilots who have proven themselves to the Argon Federation."/>
                      </do_else>
                    </do_if>
                    <do_elseif value="event.param == 'war_subscribe_ask_intro'">
                      <set_value name="$JobsDescribed" exact="true"/>
                      <add_npc_line speaker="$Mission_Contact" line="30213011" hidechoices="true"/>
                      <add_npc_line speaker="$Mission_Contact" line="30213012" hidechoices="true"/>
                    </do_elseif>
                    <do_elseif value="event.param == 'war_subscribe_ask_conflict'">
                      <set_value name="$ConflictDescribed" exact="true"/>
                      <do_if value="player.entity.race == race.argon">
                        <!--Argon player line-->
                        <add_npc_line speaker="$Mission_Contact" line="30213013" hidechoices="true"/>
                      </do_if>
                      <add_npc_line speaker="$Mission_Contact" line="30213014" hidechoices="true"/>
                      <add_npc_line speaker="$Mission_Contact" line="30213015" hidechoices="true"/>
                      <add_npc_line speaker="$Mission_Contact" line="30213016" hidechoices="true"/>
                      <add_npc_line speaker="$Mission_Contact" line="30213017" hidechoices="true"/>
                      <add_npc_line speaker="$Mission_Contact" line="30213018" hidechoices="true"/>
                      <add_npc_line speaker="$Mission_Contact" line="30213019" hidechoices="true"/>
                    </do_elseif>
                    <do_elseif value="event.param == 'war_subscribe_request_2'">
                      <!--This section is for when the intro mission is not currently active for the player to accept it. Either reject the player or signal the intro mission to activate.-->
                      <include_actions ref="HOL_VS_ARG_Can_Activate_Introduction"/>
                      <do_if value="$CanActivateIntro">
                        <signal_cue cue="HOL_VS_ARG_Introduction"/>
                        <add_npc_line speaker="$Mission_Contact" line="30213001" hidechoices="true" comment="Ah, very good."/>
                      </do_if>
                      <do_else>
                        <set_value name="$AddPlayerChoices" exact="false"/>
                        <add_npc_line speaker="$Mission_Contact" line="30213027" hidechoices="true"/>
                      </do_else>
                    </do_elseif>
                    <do_elseif value="event.param == 'war_subscribe_start_intro'">
                      <do_if value="$HasIntroMission">
                        <set_value name="$AddPlayerChoices" exact="false"/>
                        <signal_cue cue="HOL_VS_ARG_Player_Requested_Subscription"/>
                        <add_npc_line speaker="$Mission_Contact" line="30213020" hidechoices="true"/>
                        <add_npc_line speaker="$Mission_Contact" line="30213021" hidechoices="true"/>
                      </do_if>
                      <do_else>
                        <set_value name="$AddPlayerChoices" exact="false"/>
                        <add_npc_line speaker="$Mission_Contact" line="2113" hidechoices="true" comment="Excellent."/>
                        <add_npc_line speaker="$Mission_Contact" line="30213023" hidechoices="true" comment="You will now find tasks related to the Holy Order conflict in your mission interface."/>
                        <signal_cue cue="HOL_VS_ARG_Cancel_Intro_Talkto"/>
                        <reset_cue cue="HOL_VS_ARG_Introduction"/>
                        <signal_cue_instantly cue="HOL_VS_ARG_Set_Subscription_Status" param="'subscribed'"/>
                      </do_else>
                    </do_elseif>
                    <do_elseif value="event.param == 'war_intro_complete'">
                      <set_value name="$AddPlayerChoices" exact="false"/>
                      <add_npc_line speaker="$Mission_Contact" line="30213022" hidechoices="true" comment="Yes, I saw. Very good."/>
                      <add_npc_line speaker="$Mission_Contact" line="30213023" hidechoices="true" comment="You will now find tasks related to the Holy Order conflict in your mission interface."/>
                      <signal_cue_instantly cue="HOL_VS_ARG_Set_Subscription_Status" param="'subscribed'"/>
                    </do_elseif>
                    <do_elseif value="event.param == 'war_abort_intro'">
                      <set_value name="$AddPlayerChoices" exact="false"/>
                      <signal_cue cue="HOL_VS_ARG_Player_Requests_Intro_Abort"/>
                    </do_elseif>
                    <do_if value="$AddPlayerChoices">
                      <include_actions ref="HOL_VS_ARG_Contact_Player_Lines"/>
                    </do_if>
                  </actions>
                </cue>
              </cues>
            </cue>
            <!--event.param = table[
            $cue                = thread cue namespace,
            $completedmissions  = number of completed missions,
            $failedmissions     = number of failed missions]-->
            <cue name="HOL_VS_ARG_Thread_Finished" instantiate="true">
              <conditions>
                <event_cue_signalled cue="Cleanup_Thread"/>
                <check_value value="event.param.$cue.$Definition.$MissionGroup == $MissionGroup"/>
                <check_value value="$ManagerCue.$ActiveThreads.indexof.{event.param.$cue}"/>
              </conditions>
              <actions>
                <!--TODO @Owen spoken feedback?-->
                <debug_text text="'player finished ' + event.param.$cue + ' for ' + $MissionGroup + '. Completed missions: ' + event.param.$completedmissions + ' - Failed missions: ' + event.param.$failedmissions" chance="$DebugChance"/>
                <set_value name="$MissionsCompleted" operation="add" exact="event.param.$completedmissions"/>
                <set_value name="$MissionsFailed" operation="add" exact="event.param.$completedmissions"/>
                <do_if value="$MissionsCompleted ge 20">
                  <unlock_achievement name="WAR_MISSIONS"/>
                </do_if>
                <do_if value="event.param.$failed">
                  <set_value name="$ThreadsFailed" operation="add"/>
                  <do_if value="not event.param.$interrupted">
                    <signal_cue_instantly cue="HOL_VS_ARG_Set_Subscription_Status" param="'cooldown'"/>
                  </do_if>
                </do_if>
                <do_else>
                  <set_value name="$ThreadsCompleted" operation="add"/>
                  <signal_cue cue="CalculateThreads"/>
                </do_else>
              </actions>
            </cue>
            <!--
            ####################
            INTRODUCTION
            ####################-->
            <cue name="HOL_VS_ARG_Player_Requested_Subscription" instantiate="true">
              <conditions>
                <event_cue_signalled/>
              </conditions>
            </cue>
            <cue name="HOL_VS_ARG_Player_Requests_Intro_Abort" instantiate="true">
              <conditions>
                <event_cue_signalled/>
              </conditions>
            </cue>
            <library name="HOL_VS_ARG_Can_Activate_Introduction">
              <actions>
                <!--TODO @Owen other conditions based on if they failed a previous intro mission and need a cooldown-->
                <set_value name="$CanActivateIntro" exact="false"/>
                <do_if value="$Faction.relationto.{faction.player} ge $SubscriptionMinRel">
                  <set_value name="$CanActivateIntro" exact="true"/>
                </do_if>
              </actions>
            </library>
            <cue name="HOL_VS_ARG_Introduction" version="4">
              <conditions>
                <event_cue_signalled/>
                <check_value value="$Faction.isactive"/>
              </conditions>
              <actions>
                <debug_text text="'Starting intro mission handling for ' + $MissionGroup" chance="$DebugChance"/>
                <set_value name="$MissionIntroCue" exact="this"/>
                <signal_cue_instantly cue="HOL_VS_ARG_Set_Subscription_Status" param="'unsubscribed'"/>
              </actions>
              <patch sinceversion="2" state="complete">
                <do_if value="$SubscriptionStatus == 'cooldown'">
                  <debug_text text="'Fixing war mission which is still of state cooldown when it should be unsubscribed'" filter="savegame"/>
                  <signal_cue_instantly cue="HOL_VS_ARG_Set_Subscription_Status" param="'unsubscribed'"/>
                </do_if>
              </patch>
              <patch sinceversion="4" state="waiting">
                <do_if value="$SubscriptionStatus == 'probation'">
                  <debug_text text="'Fixing war mission which is still of state probation when it should be unsubscribed'" filter="savegame"/>
                  <signal_cue_instantly cue="HOL_VS_ARG_Set_Subscription_Status" param="'unsubscribed'"/>
                </do_if>
              </patch>
              <cues>
                <cue name="HOL_VS_ARG_Introduction_Init">
                  <actions>
                    <do_if value="$Faction.relationto.{faction.player} ge $SubscriptionMinRel">
                      <signal_cue cue="HOL_VS_ARG_Introduction_Create_Offer"/>
                    </do_if>
                  </actions>
                </cue>
                <cue name="HOL_VS_ARG_Introduction_Create_Offer">
                  <conditions>
                    <check_any>
                      <check_all>
                        <event_player_relation_changed faction="$Faction"/>
                        <check_value value="event.param2.{1} ge $SubscriptionMinRel"/>
                      </check_all>
                      <event_cue_signalled/>
                    </check_any>
                  </conditions>
                  <actions>
                    <do_if value="not $Mission_Contact.isclass.npc or not $PlacementObject.isoperational">
                      <debug_text text="'Mission contact was not yet created for ' + $MissionGroup + '. Triggering creation now but location may not be near a war front. [Owen]'" filter="error"/>
                      <signal_cue_instantly cue="$ContactCreatorCue"/>
                    </do_if>
                    <do_if value="$Mission_Contact.isclass.npc and $PlacementObject.isoperational">
                      <debug_text text="'Player has passed the conditions for the intro mission to be available for group: ' + $MissionGroup" chance="$DebugChance"/>
                      <create_offer cue="$MissionIntroCue" actor="$Mission_Contact" type="missiontype.fight" name="readtext.{30213}.{1}" description="readtext.{30213}.{2}" difficulty="level.trivial" faction="$Faction" group="$MissionGroup">
                        <briefing>
                          <objective step="1" action="objective.talkto" object="$Mission_Contact"/>
                        </briefing>
                      </create_offer>
                      <!-- Guild Notification Mail -->
                      <run_actions ref="md.X4Ep1_War_Subscriptions.SendSubscriptionMail">
                        <param name="Page" value="30213"/>
                        <param name="Faction" value="$Faction"/>
                        <param name="Mission_Contact" value="$Mission_Contact"/>
                      </run_actions>
                    </do_if>
                    <do_else>
                      <debug_text text="'Unable to start intro mission due to missing mission client [Owen]'" filter="error"/>
                      <reset_cue cue="$MissionIntroCue"/>
                    </do_else>
                  </actions>
                  <cues>
                    <cue name="HOL_VS_ARG_Introduction_Offer_Accepted">
                      <conditions>
                        <event_object_signalled object="$Mission_Contact" param="'accept'"/>
                      </conditions>
                      <actions>
                        <create_mission cue="$MissionIntroCue" offercue="$MissionIntroCue"/>
                        <update_mission cue="$MissionIntroCue">
                          <briefing>
                            <objective step="1" action="objective.talkto" text="$Mission_Contact.knownname"/>
                          </briefing>
                        </update_mission>
                        <remove_offer cue="$MissionIntroCue"/>
                        <signal_cue_instantly cue="md.GenericMissions.DisconnectedActorObjectiveLibrary" param="table[                                               $actor = $Mission_Contact,                                               $object = $PlacementObject,                                               $missioncue = $MissionIntroCue,                                               $cancelcue = HOL_VS_ARG_Cancel_Intro_Talkto,                                               $libfailedcue = HOL_VS_ARG_Intro_Abort,                                               $objective = objective.talkto,                                               $debugchance = $DebugChance]"/>
                      </actions>
                    </cue>
                  </cues>
                </cue>
                <cue name="HOL_VS_ARG_Intro_Abort" version="2">
                  <conditions>
                    <check_any>
                      <event_mission_aborted cue="HOL_VS_ARG_Introduction"/>
                      <event_cue_signalled cue="HOL_VS_ARG_Player_Requests_Intro_Abort"/>
                      <event_cue_signalled/>
                      <event_object_destroyed object="$Mission_Contact"/>
                      <event_object_destroyed object="$PlacementObject"/>
                      <event_faction_deactivated faction="$Faction"/>
                    </check_any>
                  </conditions>
                  <actions>
                    <debug_text text="'Aborting due to ' + event.name" chance="$DebugChance"/>
                    <do_if value="$MissionIntroCue.hasmission">
                      <remove_mission cue="$MissionIntroCue" type="aborted"/>
                    </do_if>
                    <signal_cue_instantly cue="HOL_VS_ARG_Set_Subscription_Status" param="'unsubscribed'"/>
                    <reset_cue cue="HOL_VS_ARG_Introduction"/>
                  </actions>
                  <patch sinceversion="2" state="waiting">
                    <do_if value="HOL_VS_ARG_Introduction_Offer_Accepted.state == cuestate.complete and (not $TestShip? or not $TestShip.isoperational)">
                      <set_value name="$Patch_CheckLibraryInstance" exact="true"/>
                    </do_if>
                  </patch>
                </cue>
                <cue name="HOL_VS_ARG_Patch_Check_Talkto_Lib" onfail="cancel">
                  <conditions>
                    <check_value value="@$Patch_CheckLibraryInstance"/>
                  </conditions>
                  <actions>
                    <do_if value="not @md.GenericMissions.DisconnectedActorObjectiveLibrary.$Patch_ActiveMissionCues.indexof.{$MissionIntroCue}">
                      <debug_text text="'Talkto helper instance no longer exists for ' + $MissionIntroCue + ' - aborting intro mission'" filter="savegame"/>
                      <signal_cue cue="HOL_VS_ARG_Intro_Abort"/>
                    </do_if>
                    <remove_value name="$Patch_CheckLibraryInstance"/>
                  </actions>
                </cue>
                <cue name="HOL_VS_ARG_Cancel_Intro_Talkto" instantiate="true">
                  <conditions>
                    <event_cue_signalled/>
                  </conditions>
                </cue>
                <cue name="HOL_VS_ARG_Start_Intro_Mission" version="2">
                  <conditions>
                    <event_cue_signalled cue="HOL_VS_ARG_Player_Requested_Subscription"/>
                  </conditions>
                  <actions>
                    <signal_cue cue="HOL_VS_ARG_Cancel_Intro_Talkto"/>
                    <signal_cue_instantly cue="HOL_VS_ARG_Set_Subscription_Status" param="'probation'"/>
                    <set_value name="$IntroMissionSuccessful" exact="false"/>
                    <do_if value="$MissionIntroCue.hasmissionoffer">
                      <remove_offer cue="$MissionIntroCue"/>
                    </do_if>
                    <do_if value="not $MissionIntroCue.hasmission">
                      <create_mission cue="$MissionIntroCue" type="missiontype.fight" name="readtext.{30213}.{1}" description="readtext.{30213}.{2}" difficulty="level.trivial" faction="$Faction" group="$MissionGroup"/>
                    </do_if>
                    <create_ship name="$TestShip" sector="player.sector">
                      <select faction="faction.argon" size="class.ship_s"/>
                      <owner exact="faction.argon"/>
                      <pilot actor="null"/>
                      <safepos object="player.entity" min="30km" max="40km"/>
                    </create_ship>
                    <update_mission cue="$MissionIntroCue">
                      <briefing>
                        <objective step="1" action="objective.destroy" object="$TestShip"/>
                      </briefing>
                    </update_mission>
                    <set_objective cue="$MissionIntroCue" action="objective.destroy" object="$TestShip"/>
                  </actions>
                  <patch sinceversion="2" state="complete">
                    <do_if value="$TestShip.isoperational">
                      <set_value name="$TestShip_Pos" exact="$TestShip.position"/>
                      <do_if value="[$TestShip_Pos.x, $TestShip_Pos.y, $TestShip_Pos.z].min lt 50km or [$TestShip_Pos.x, $TestShip_Pos.y, $TestShip_Pos.z].max gt 50km">
                        <debug_text text="'Warping ship ' + $TestShip + ' ' + $TestShip.knownname + ' to valid position'" filter="savegame"/>
                        <warp object="$TestShip" sector="$TestShip.sector">
                          <position object="$TestShip" space="$TestShip.sector"/>
                        </warp>
                      </do_if>
                      <remove_value name="$TestShip_Pos"/>
                    </do_if>
                  </patch>
                  <cues>
                    <cue name="HOL_VS_ARG_Start_Intro_Mission_Successful">
                      <conditions>
                        <event_object_destroyed object="$TestShip"/>
                      </conditions>
                      <actions>
                        <update_mission cue="$MissionIntroCue">
                          <briefing>
                            <objective step="2" action="objective.talkto" object="$Mission_Contact"/>
                          </briefing>
                        </update_mission>
                        <set_value name="$IntroMissionSuccessful" exact="true"/>
                        <signal_cue_instantly cue="md.GenericMissions.DisconnectedActorObjectiveLibrary" param="table[                                               $actor = $Mission_Contact,                                               $object = $PlacementObject,                                               $missioncue = $MissionIntroCue,                                               $cancelcue = HOL_VS_ARG_Start_Intro_Mission_Remove_Mission,                                               $libfailedcue = HOL_VS_ARG_Intro_Abort,                                               $objective = objective.talkto,                                               $step = 2,                                               $debugchance = $DebugChance]"/>
                      </actions>
                    </cue>
                    <cue name="HOL_VS_ARG_Start_Intro_Mission_Remove_Mission">
                      <conditions>
                        <event_cue_signalled/>
                      </conditions>
                      <actions>
                        <remove_mission cue="$MissionIntroCue" type="completed"/>
                        <reset_cue cue="HOL_VS_ARG_Introduction"/>
                      </actions>
                    </cue>
                    <cue name="HOL_VS_ARG_Start_Intro_Mission_End">
                      <conditions>
                        <event_conversation_started actor="$Mission_Contact"/>
                        <check_value value="$IntroMissionSuccessful"/>
                      </conditions>
                      <actions>
                        <allow_conversation_escape enabled="false"/>
                        <signal_cue cue="HOL_VS_ARG_Start_Intro_Mission_Remove_Mission"/>
                      </actions>
                    </cue>
                  </cues>
                </cue>
              </cues>
            </cue>
            <!--
            ####################
            THREADS
            ####################-->
            <cue name="HOL_VS_ARG_Reinforce_Defence">
              <cues>
                <cue name="HOL_VS_ARG_Reinforce_Defence_Register" version="3">
                  <actions>
                    <!--Holy Order Vs Argon - Reinforce Defence-->
                    <set_value name="$ThreadID" exact="'$hol_vs_arg_reinforce_defence'"/>
                    <set_value name="$Thread" exact="table[                            $ID = $ThreadID,                            $Faction = $Faction,                            $EnemyFaction = $EnemyFaction,                            $MissionGroup = $MissionGroup,                            $ThreadConditionLibs = [Situation__Cold_War, Situation__Contention, Situation__Defence_Prep],                            $ThreadType = 'sequential',                            $MissionType = missiontype.protect,                            $Difficulty = level.medium,                            $SubMissionLib = HOL_VS_ARG_Reinforce_Defence_Get_Submissions,                            $NameLib = HOL_VS_ARG_Reinforce_Defence_Construct_Name,                            $DescriptionLib = HOL_VS_ARG_Reinforce_Defence_Construct_Description,                            $RewardLib = HOL_VS_ARG_Reinforce_Defence_Construct_Reward,                            $MinMissions = 4,                            $MaxMissions = 5,                            $ThreadAbortRelation = -0.00064]"/>
                    <assert value="not $ManagerCue.$ThreadDefinitions.{$ThreadID}?" text="'Thread definition ' + $ThreadID + ' already exists in this table [Owen]'"/>
                    <set_value name="$ManagerCue.$ThreadDefinitions.{$ThreadID}" exact="$Thread"/>
                  </actions>
                  <patch sinceversion="3" state="complete">
                    <set_value name="$ManagerCue.$ThreadDefinitions.$hol_vs_arg_reinforce_defence.$RewardLib" exact="HOL_VS_ARG_Reinforce_Defence_Construct_Reward"/>
                  </patch>
                </cue>
                <!--Called from CalculateThreads. Result saved to $New_Thread. Namespace is not this parent.-->
                <library name="HOL_VS_ARG_Reinforce_Defence_Get_Submissions">
                  <actions>
                    <set_value name="$Submissions" exact="table[]"/>
                    <set_value name="$Submissions.$deploy_lasertowers" exact="table[$Cue = md.X4Ep1_War_Subscriptions.DeployInPlace__Standard,    $MissionType = missiontype.drop,  $Page = 30213, $TextOffset = [101000], $Sequence = -1 ]"/>
                    <set_value name="$Submissions.$deploy_mines" exact="table[$Cue = md.X4Ep1_War_Subscriptions.DeployInPlace__Standard,    $MissionType = missiontype.drop,  $Page = 30213, $TextOffset = [101100, 101200], $Sequence = -1 ]"/>
                    <set_value name="$Submissions.$achieve_coverage__host_sector" exact="table[$Cue = md.X4Ep1_War_Subscriptions.Achieve_Coverage__Standard, $MissionType = missiontype.drop,  $Page = 30213, $TextOffset = [102000], $Sequence = -1 ]"/>
                    <set_value name="$Submissions.$repair__damagedship" exact="table[$Cue = md.X4Ep1_War_Subscriptions.RepairObject__Standard,     $MissionType = missiontype.repair,  $Page = 30213, $TextOffset = [103000], $Sequence = -1 ]"/>
                    <set_value name="$Submissions.$taxi__specialist" exact="table[$Cue = md.X4Ep1_War_Subscriptions.Passenger_Transport__Standard, $MissionType = missiontype.transport, $Page = 30213, $TextOffset = [104000], $Sequence = 1 ]"/>
                    <set_value name="$Submissions.$deliver__crew" exact="table[$Cue = md.X4Ep1_War_Subscriptions.Get_Exact_Crew__Standard, $MissionType = missiontype.deliver, $Page = 30213, $TextOffset = [110000, 110100], $Sequence = -1 ]"/>
                    <set_value name="$New_Thread.$Submissions" exact="$Submissions"/>
                  </actions>
                </library>
                <!--Called from CalculateThreads. Result saved to $New_Thread. Namespace is not this parent.-->
                <library name="HOL_VS_ARG_Reinforce_Defence_Construct_Name">
                  <actions>
                    <do_any>
                      <set_value name="this.$Name" exact="{30213, 3000}"/>
                      <set_value name="this.$Name" exact="{30213, 3001}"/>
                      <set_value name="this.$Name" exact="{30213, 3002}"/>
                    </do_any>
                  </actions>
                </library>
                <!--Called from CalculateThreads where several values are set to help decide the briefing text. Result saved to $New_Thread. Namespace is not this parent.-->
                <library name="HOL_VS_ARG_Reinforce_Defence_Construct_Description">
                  <actions>
                    <do_if value="$ThreadMood == 'negative'">
                      <do_any>
                        <set_value name="this.$Description" exact="{30213, 3101}"/>
                        <set_value name="this.$Description" exact="{30213, 3102}"/>
                      </do_any>
                      <set_value name="this.$Description" operation="add" exact="' ' + {30213, 3111}"/>
                      <do_any>
                        <set_value name="this.$Description" operation="add" exact="'\n' + {30213, 3121}"/>
                        <set_value name="this.$Description" operation="add" exact="'\n' + {30213, 3122}"/>
                      </do_any>
                    </do_if>
                    <do_elseif value="$ThreadMood == 'positive'">
                      <do_any>
                        <set_value name="this.$Description" exact="{30213, 3201}"/>
                        <set_value name="this.$Description" exact="{30213, 3202}"/>
                      </do_any>
                      <set_value name="this.$Description" operation="add" exact="' ' + {30213, 3211}"/>
                      <set_value name="this.$Description" operation="add" exact="'\n' + {30213, 3221}"/>
                    </do_elseif>
                  </actions>
                </library>
                <library name="HOL_VS_ARG_Reinforce_Defence_Construct_Reward">
                  <actions>
                    <do_any>
                      <set_value name="this.$RewardObject" exact="[ware.paintmod_0077]" weight="15" comment="special hol vs arg subscription paint"/>
                      <set_value name="this.$RewardObject" exact="[ware.paintmod_0010]" weight="15" comment="basic holy order faction paint"/>
                      <set_value name="this.$RewardObject" exact="[[ware.modpart_tuningsoftware, ware.modpart_shieldgeneratorcoil_t1, ware.modpart_shieldgeneratorcoil_t2].random]" weight="15" comment="modpart"/>
                      <set_value name="this.$RewardObject" exact="[ware.modpart_tuningsoftware, [ware.modpart_shieldgeneratorcoil_t1, ware.modpart_shieldgeneratorcoil_t2].random]" weight="15" comment="complete mod"/>
                      <set_value name="this.$RewardObject" exact="[ware.modpart_shieldgeneratorcoil_t3]" weight="5" comment="rare modpart"/>
                      <set_value name="this.$RewardObject" exact="[[ware.inv_seminar_piloting_2, ware.inv_seminar_piloting_2, ware.inv_seminar_management_2].random]" weight="15"/>
                      <set_value name="this.$RewardObject" exact="[[ware.inv_seminar_piloting_3, ware.inv_seminar_piloting_3, ware.inv_seminar_management_3].random]" weight="4"/>
                      <set_value name="this.$RewardObject" exact="[[ware.inv_seminar_piloting_4, ware.inv_seminar_management_4].random]" weight="1"/>
                    </do_any>
                    <run_actions ref="md.LIB_Generic.GenerateRewardText" result="this.$RewardText">
                      <param name="RewardObject" value="this.$RewardObject"/>
                    </run_actions>
                  </actions>
                </library>
              </cues>
            </cue>
            <cue name="HOL_VS_ARG_Construct_Defence">
              <cues>
                <cue name="HOL_VS_ARG_Construct_Defence_Register" version="3">
                  <actions>
                    <!--Holy Order vs Argon - Construct Defence-->
                    <set_value name="$ThreadID" exact="'$hol_vs_arg_construct_defence'"/>
                    <set_value name="$Thread" exact="table[                            $ID = $ThreadID,                            $Faction = $Faction,                            $EnemyFaction = $EnemyFaction,                            $MissionGroup = $MissionGroup,                            $ThreadConditionLibs = [Situation__Cold_War, Situation__Contention, Situation__Defence_Prep, Situation__Pushback],                            $ThreadType = 'sequential',                            $MissionType = missiontype.build,                            $Difficulty = level.hard,                            $SubMissionLib = HOL_VS_ARG_Construct_Defence_Get_Submissions,                            $NameLib = HOL_VS_ARG_Construct_Defence_Construct_Name,                            $DescriptionLib = HOL_VS_ARG_Construct_Defence_Construct_Description,                            $RewardLib = HOL_VS_ARG_Construct_Defence_Construct_Reward,                            $MinMissions = 1,                            $MaxMissions = 2,                            $ThreadAbortRelation = -0.00064]"/>
                    <assert value="not $ManagerCue.$ThreadDefinitions.{$ThreadID}?" text="'Thread definition ' + $ThreadID + ' already exists in this table [Owen]'"/>
                    <set_value name="$ManagerCue.$ThreadDefinitions.{$ThreadID}" exact="$Thread"/>
                  </actions>
                  <patch sinceversion="2">
                    <append_to_list name="$Thread.$ThreadConditionLibs" exact="Situation__Pushback"/>
                  </patch>
                  <patch sinceversion="3" state="complete">
                    <set_value name="$ManagerCue.$ThreadDefinitions.$hol_vs_arg_construct_defence.$RewardLib" exact="HOL_VS_ARG_Construct_Defence_Construct_Reward"/>
                  </patch>
                </cue>
                <!--Called from CalculateThreads. Result saved to $New_Thread. Namespace is not this parent.-->
                <library name="HOL_VS_ARG_Construct_Defence_Get_Submissions">
                  <actions>
                    <set_value name="$Submissions" exact="table[]"/>
                    <set_value name="$Submissions.$build__defencestation" exact="table[$Cue = md.X4Ep1_War_Subscriptions.Build_Station__Standard, $MissionType = missiontype.build, $Page = 30213, $TextOffset = [105000], $Sequence = -1 ]"/>
                    <set_value name="$Submissions.$build__fleet" exact="table[$Cue = md.X4Ep1_War_Subscriptions.Get_Exact_Fleet__Standard, $MissionType = missiontype.build, $Page = 30213, $TextOffset = [120000], $Sequence = -1 ]"/>
                    <set_value name="$New_Thread.$Submissions" exact="$Submissions"/>
                  </actions>
                </library>
                <!--Called from CalculateThreads. Result saved to $New_Thread. Namespace is not this parent.-->
                <library name="HOL_VS_ARG_Construct_Defence_Construct_Name">
                  <actions>
                    <do_any>
                      <set_value name="this.$Name" exact="{30213, 4000}"/>
                    </do_any>
                  </actions>
                </library>
                <!--Called from CalculateThreads where several values are set to help decide the briefing text. Result saved to $New_Thread. Namespace is not this parent.-->
                <library name="HOL_VS_ARG_Construct_Defence_Construct_Description">
                  <actions>
                    <do_if value="$ThreadMood == 'negative'">
                      <do_any>
                        <set_value name="this.$Description" exact="{30213, 4101}"/>
                        <set_value name="this.$Description" exact="{30213, 4102}"/>
                      </do_any>
                      <set_value name="this.$Description" operation="add" exact="' ' + {30213, 4111}"/>
                      <do_any>
                        <set_value name="this.$Description" operation="add" exact="'\n' + {30213, 4121}"/>
                        <set_value name="this.$Description" operation="add" exact="'\n' + {30213, 4122}"/>
                      </do_any>
                    </do_if>
                    <do_elseif value="$ThreadMood == 'positive'">
                      <do_any>
                        <set_value name="this.$Description" exact="{30213, 4201}"/>
                        <set_value name="this.$Description" exact="{30213, 4202}"/>
                      </do_any>
                      <set_value name="this.$Description" operation="add" exact="' ' + {30213, 4211}"/>
                      <set_value name="this.$Description" operation="add" exact="'\n' + {30213, 4221}"/>
                    </do_elseif>
                  </actions>
                </library>
                <library name="HOL_VS_ARG_Construct_Defence_Construct_Reward">
                  <actions>
                    <do_if value="true" chance="70">
                      <!-- mod(part) reward-->
                      <do_any>
                        <set_value name="this.$RewardObject" exact="[ware.paintmod_0077]" weight="15" comment="special hol vs arg subscription paint"/>
                        <set_value name="this.$RewardObject" exact="[ware.paintmod_0010]" weight="15" comment="basic holy order faction paint"/>
                        <set_value name="this.$RewardObject" exact="[[ware.modpart_tuningsoftware, ware.modpart_shieldgeneratorcoil_t1, ware.modpart_shieldgeneratorcoil_t2].random]" weight="15" comment="modpart"/>
                        <set_value name="this.$RewardObject" exact="[ware.modpart_tuningsoftware, [ware.modpart_shieldgeneratorcoil_t1, ware.modpart_shieldgeneratorcoil_t2].random]" weight="15" comment="complete mod"/>
                        <set_value name="this.$RewardObject" exact="[ware.modpart_shieldgeneratorcoil_t3]" weight="5" comment="rare modpart"/>
                        <set_value name="this.$RewardObject" exact="[[ware.inv_seminar_piloting_2, ware.inv_seminar_piloting_2, ware.inv_seminar_management_2].random]" weight="15"/>
                        <set_value name="this.$RewardObject" exact="[[ware.inv_seminar_piloting_3, ware.inv_seminar_piloting_3, ware.inv_seminar_management_3].random]" weight="4"/>
                        <set_value name="this.$RewardObject" exact="[[ware.inv_seminar_piloting_4, ware.inv_seminar_management_4].random]" weight="1"/>
                      </do_any>
                    </do_if>
                    <do_else>
                      <!-- setup the ship-reward -->
                      <set_value name="this.$RewardObject" exact="[]"/>
                      <set_value name="$shipcargo" exact="[[2500, ware.nividium]]"/>
                      <set_value name="$Faction" exact="faction.holyorder"/>
                      <run_actions ref="md.LIB_Generic.FindShipMacroForCargo" result="$shipmacro">
                        <param name="shipcargo" value="$shipcargo"/>
                        <param name="Faction" value="$Faction"/>
                      </run_actions>
                      <run_actions ref="md.LIB_Generic.FindNearestStationForFaction" result="$SuitableStation">
                        <param name="Faction" value="$Faction"/>
                      </run_actions>
                      <do_if value="$shipmacro and $SuitableStation">
                        <generate_loadout result="$shiploadout" macro="$shipmacro" level="[0.3, 0.4, 0.5, 0.6, 0.7].random"/>
                        <set_value name="$MaxCrewCapacity" exact="$shipmacro.people.capacity"/>
                        <set_value name="$RewardShip" exact="table[                             $macro        = $shipmacro,                             $loadout      = $shiploadout,                              $cargo        = $shipcargo,                              $station      = $SuitableStation,                              $pilot        = [faction.holyorder, [tag.pilot], [8,10].random],                             $bulkcrew     = [$MaxCrewCapacity, ['paranid_military_crew', 'paranid_freighter_crew'].random, 100],                              $mods         = [ware.mod_shield_capacity_01_mk3, ware.mod_engine_travelthrust_02_mk2],                             $paintmod     = [ware.paintmod_0072].random,                         ]"/>
                        <append_to_list name="this.$RewardObject" exact="$RewardShip"/>
                      </do_if>
                    </do_else>
                    <run_actions ref="md.LIB_Generic.GenerateRewardText" result="this.$RewardText">
                      <param name="RewardObject" value="this.$RewardObject"/>
                    </run_actions>
                  </actions>
                </library>
              </cues>
            </cue>
            <cue name="HOL_VS_ARG_Secure_Resources">
              <cues>
                <cue name="HOL_VS_ARG_Secure_Resources_Register" version="3">
                  <actions>
                    <!--Holy Order vs Argon - Secure Resources-->
                    <set_value name="$ThreadID" exact="'$hol_vs_arg_secure_resources'"/>
                    <set_value name="$Thread" exact="table[                            $ID = $ThreadID,                            $Faction = $Faction,                            $EnemyFaction = $EnemyFaction,                            $MissionGroup = $MissionGroup,                            $ThreadConditionLibs = [Situation__Cold_War, Situation__Contention, Situation__Defence_Prep, Situation__Invasion_Prep],                            $ThreadType = 'sequential',                            $MissionType = missiontype.trade,                            $Difficulty = level.medium,                            $SubMissionLib = HOL_VS_ARG_Secure_Resources_Get_Submissions,                            $NameLib = HOL_VS_ARG_Secure_Resources_Construct_Name,                            $DescriptionLib = HOL_VS_ARG_Secure_Resources_Construct_Description,                            $RewardLib = HOL_VS_ARG_Secure_Resources_Construct_Reward,                            $MinMissions = 4,                            $MaxMissions = 5,                            $ThreadAbortRelation = -0.00064]"/>
                    <assert value="not $ManagerCue.$ThreadDefinitions.{$ThreadID}?" text="'Thread definition ' + $ThreadID + ' already exists in this table [Owen]'"/>
                    <set_value name="$ManagerCue.$ThreadDefinitions.{$ThreadID}" exact="$Thread"/>
                  </actions>
                  <patch sinceversion="3" state="complete">
                    <set_value name="$ManagerCue.$ThreadDefinitions.$hol_vs_arg_secure_resources.$RewardLib" exact="HOL_VS_ARG_Secure_Resources_Construct_Reward"/>
                  </patch>
                </cue>
                <!--Called from CalculateThreads. Result saved to $New_Thread. Namespace is not this parent.-->
                <library name="HOL_VS_ARG_Secure_Resources_Get_Submissions">
                  <actions>
                    <set_value name="$Submissions" exact="table[]"/>
                    <set_value name="$Submissions.$large_supply__food" exact="table[$Cue = md.X4Ep1_War_Subscriptions.Large_Supply__Standard,     $MissionType = missiontype.trade, $Page = 30213, $TextOffset = [100000], $Sequence = -1 ]"/>
                    <set_value name="$Submissions.$large_supply__shiptech" exact="table[$Cue = md.X4Ep1_War_Subscriptions.Large_Supply__Standard,     $MissionType = missiontype.trade, $Page = 30213, $TextOffset = [100100], $Sequence = -1 ]"/>
                    <set_value name="$Submissions.$deploy_lasertowers_at_resources" exact="table[$Cue = md.X4Ep1_War_Subscriptions.DeployInPlace__Standard,    $MissionType = missiontype.drop,  $Page = 30213, $TextOffset = [101300], $Sequence = -1 ]"/>
                    <set_value name="$Submissions.$find_resources__ores" exact="table[$Cue = md.X4Ep1_War_Subscriptions.Find_Resources__Standard,   $MissionType = missiontype.find,  $Page = 30213, $TextOffset = [106000], $Sequence = -1 ]"/>
                    <set_value name="$Submissions.$supply_station" exact="table[$Cue = md.X4Ep1_War_Subscriptions.Supply_Factory__Standard,   $MissionType = missiontype.find,  $Page = 30213, $TextOffset = [130000], $Sequence = -1 ]"/>
                    <set_value name="$New_Thread.$Submissions" exact="$Submissions"/>
                  </actions>
                </library>
                <!--Called from CalculateThreads. Result saved to $New_Thread. Namespace is not this parent.-->
                <library name="HOL_VS_ARG_Secure_Resources_Construct_Name">
                  <actions>
                    <do_any>
                      <set_value name="this.$Name" exact="{30213, 5000}"/>
                      <set_value name="this.$Name" exact="{30213, 5001}"/>
                    </do_any>
                  </actions>
                </library>
                <!--Called from CalculateThreads where several values are set to help decide the briefing text. Result saved to $New_Thread. Namespace is not this parent.-->
                <library name="HOL_VS_ARG_Secure_Resources_Construct_Description">
                  <actions>
                    <do_if value="$ThreadMood == 'negative'">
                      <do_any>
                        <set_value name="this.$Description" exact="{30213, 5101}"/>
                        <set_value name="this.$Description" exact="{30213, 5102}"/>
                      </do_any>
                      <set_value name="this.$Description" operation="add" exact="' ' + {30213, 5111}"/>
                      <do_any>
                        <set_value name="this.$Description" operation="add" exact="'\n' + {30213, 5121}"/>
                        <set_value name="this.$Description" operation="add" exact="'\n' + {30213, 5122}"/>
                      </do_any>
                    </do_if>
                    <do_elseif value="$ThreadMood == 'positive'">
                      <do_any>
                        <set_value name="this.$Description" exact="{30213, 5201}"/>
                        <set_value name="this.$Description" exact="{30213, 5202}"/>
                      </do_any>
                      <set_value name="this.$Description" operation="add" exact="' ' + {30213, 5211}"/>
                      <set_value name="this.$Description" operation="add" exact="'\n' + {30213, 5221}"/>
                    </do_elseif>
                  </actions>
                </library>
                <library name="HOL_VS_ARG_Secure_Resources_Construct_Reward">
                  <actions>
                    <do_any>
                      <set_value name="this.$RewardObject" exact="[ware.paintmod_0077]" weight="15" comment="special hol vs arg subscription paint"/>
                      <set_value name="this.$RewardObject" exact="[ware.paintmod_0010]" weight="15" comment="basic holy order faction paint"/>
                      <set_value name="this.$RewardObject" exact="[[ware.modpart_extendedfuelcontainer, ware.modpart_nividiumoxide, ware.modpart_enginefuelinjector_t1, ware.modpart_enginefuelinjector_t2].random]" weight="15" comment="modpart"/>
                      <set_value name="this.$RewardObject" exact="[ware.modpart_extendedfuelcontainer, ware.modpart_nividiumoxide, [ware.modpart_enginefuelinjector_t1, ware.modpart_enginefuelinjector_t2].random]" weight="15" comment="complete mod"/>
                      <set_value name="this.$RewardObject" exact="[ware.modpart_enginefuelinjector_t3]" weight="5" comment="rare modpart"/>
                      <set_value name="this.$RewardObject" exact="[[ware.inv_seminar_piloting_2, ware.inv_seminar_piloting_2, ware.inv_seminar_management_2].random]" weight="15"/>
                      <set_value name="this.$RewardObject" exact="[[ware.inv_seminar_piloting_3, ware.inv_seminar_piloting_3, ware.inv_seminar_management_3].random]" weight="4"/>
                      <set_value name="this.$RewardObject" exact="[[ware.inv_seminar_piloting_4, ware.inv_seminar_management_4].random]" weight="1"/>
                    </do_any>
                    <run_actions ref="md.LIB_Generic.GenerateRewardText" result="this.$RewardText">
                      <param name="RewardObject" value="this.$RewardObject"/>
                    </run_actions>
                  </actions>
                </library>
              </cues>
            </cue>
            <cue name="HOL_VS_ARG_Preemptive_Offensive">
              <cues>
                <cue name="HOL_VS_ARG_Preemptive_Offensive_Register" version="3">
                  <actions>
                    <!--Holy Order Vs Argon- Preemptive Offensive-->
                    <set_value name="$ThreadID" exact="'$hol_vs_arg_preemptive_offensive'"/>
                    <set_value name="$Thread" exact="table[                            $ID = $ThreadID,                            $Faction = $Faction,                            $EnemyFaction = $EnemyFaction,                            $MissionGroup = $MissionGroup,                            $ThreadConditionLibs = [Situation__Cold_War, Situation__Invasion_Prep],                            $ThreadType = 'sequential',                            $MissionType = missiontype.fight,                            $Difficulty = level.hard,                            $SubMissionLib = HOL_VS_ARG_Preemptive_Offensive_Get_Submissions,                            $NameLib = HOL_VS_ARG_Preemptive_Offensive_Construct_Name,                            $DescriptionLib = HOL_VS_ARG_Preemptive_Offensive_Construct_Description,                            $RewardLib = HOL_VS_ARG_Preemptive_Offensive_Construct_Reward,                            $MinMissions = 4,                            $MaxMissions = 6,                            $ThreadAbortRelation = -0.00064]"/>
                    <assert value="not $ManagerCue.$ThreadDefinitions.{$ThreadID}?" text="'Thread definition ' + $ThreadID + ' already exists in this table [Owen]'"/>
                    <set_value name="$ManagerCue.$ThreadDefinitions.{$ThreadID}" exact="$Thread"/>
                  </actions>
                  <patch sinceversion="3" state="complete">
                    <set_value name="$ManagerCue.$ThreadDefinitions.$hol_vs_arg_preemptive_offensive.$RewardLib" exact="HOL_VS_ARG_Preemptive_Offensive_Construct_Reward"/>
                  </patch>
                </cue>
                <!--Called from CalculateThreads. Result saved to $New_Thread. Namespace is not this parent.-->
                <library name="HOL_VS_ARG_Preemptive_Offensive_Get_Submissions">
                  <actions>
                    <set_value name="$Submissions" exact="table[]"/>
                    <set_value name="$Submissions.$assassination__informant" exact="table[$Cue = md.X4Ep1_War_Subscriptions.Assassinate__Standard, $MissionType = missiontype.kill,  $Page = 30213, $TextOffset = [107000, 107100], $Sequence = -1 ]"/>
                    <set_value name="$Submissions.$board_ship" exact="table[$Cue = md.X4Ep1_War_Subscriptions.BoardShip__Standard,   $MissionType = missiontype.board, $Page = 30213, $TextOffset = [108000], $Sequence = -1 ]"/>
                    <set_value name="$Submissions.$destroy_rare_ship" exact="table[$Cue = md.X4Ep1_War_Subscriptions.DestroyRarelyOnSight__Standard,   $MissionType = missiontype.destroy, $Page = 30213, $TextOffset = [140000], $Sequence = -1 ]"/>
                    <set_value name="$Submissions.$destroy_objects_lasertowers" exact="table[$Cue = md.X4Ep1_War_Subscriptions.Destroy_Objects__Clear_Explosives, $MissionType = missiontype.destroy, $Page = 30213, $TextOffset = [161000, 161100], $Sequence = -1 ]"/>
                    <set_value name="$Submissions.$destroy_station_turrets" exact="table[$Cue = md.X4Ep1_War_Subscriptions.DestroyStation__Standard,   $MissionType = missiontype.destroy, $Page = 30213, $TextOffset = [180000], $Sequence = -1 ]"/>
                    <set_value name="$New_Thread.$Submissions" exact="$Submissions"/>
                  </actions>
                </library>
                <!--Called from CalculateThreads. Result saved to $New_Thread. Namespace is not this parent.-->
                <library name="HOL_VS_ARG_Preemptive_Offensive_Construct_Name">
                  <actions>
                    <do_any>
                      <set_value name="this.$Name" exact="{30213, 6000}"/>
                    </do_any>
                  </actions>
                </library>
                <!--Called from CalculateThreads where several values are set to help decide the briefing text. Result saved to $New_Thread. Namespace is not this parent.-->
                <library name="HOL_VS_ARG_Preemptive_Offensive_Construct_Description">
                  <actions>
                    <do_if value="$ThreadMood == 'negative'">
                      <do_any>
                        <set_value name="this.$Description" exact="{30213, 6101}"/>
                        <set_value name="this.$Description" exact="{30213, 6102}"/>
                      </do_any>
                      <set_value name="this.$Description" operation="add" exact="' ' + {30213, 6111}"/>
                      <do_any>
                        <set_value name="this.$Description" operation="add" exact="'\n' + {30213, 6121}"/>
                        <set_value name="this.$Description" operation="add" exact="'\n' + {30213, 6122}"/>
                      </do_any>
                    </do_if>
                    <do_elseif value="$ThreadMood == 'positive'">
                      <do_any>
                        <set_value name="this.$Description" exact="{30213, 6201}"/>
                        <set_value name="this.$Description" exact="{30213, 6202}"/>
                      </do_any>
                      <set_value name="this.$Description" operation="add" exact="' ' + {30213, 6211}"/>
                      <set_value name="this.$Description" operation="add" exact="'\n' + {30213, 6221}"/>
                    </do_elseif>
                  </actions>
                </library>
                <library name="HOL_VS_ARG_Preemptive_Offensive_Construct_Reward">
                  <actions>
                    <do_any>
                      <set_value name="this.$RewardObject" exact="[ware.paintmod_0077]" weight="15" comment="special hol vs arg subscription paint"/>
                      <set_value name="this.$RewardObject" exact="[ware.paintmod_0010]" weight="15" comment="basic holy order faction paint"/>
                      <set_value name="this.$RewardObject" exact="[[ware.modpart_highenergycatalyst, ware.modpart_tuningsoftware, ware.modpart_weaponchamber_t1, ware.modpart_weaponchamber_t2].random]" weight="15" comment="modpart"/>
                      <set_value name="this.$RewardObject" exact="[ware.modpart_highenergycatalyst, ware.modpart_tuningsoftware, [ware.modpart_weaponchamber_t1, ware.modpart_weaponchamber_t2].random]" weight="15" comment="complete mod"/>
                      <set_value name="this.$RewardObject" exact="[ware.modpart_weaponchamber_t3]" weight="5" comment="rare modpart"/>
                      <set_value name="this.$RewardObject" exact="[[ware.inv_seminar_piloting_2, ware.inv_seminar_piloting_2, ware.inv_seminar_management_2].random]" weight="15"/>
                      <set_value name="this.$RewardObject" exact="[[ware.inv_seminar_piloting_3, ware.inv_seminar_piloting_3, ware.inv_seminar_management_3].random]" weight="4"/>
                      <set_value name="this.$RewardObject" exact="[[ware.inv_seminar_piloting_4, ware.inv_seminar_management_4].random]" weight="1"/>
                    </do_any>
                    <run_actions ref="md.LIB_Generic.GenerateRewardText" result="this.$RewardText">
                      <param name="RewardObject" value="this.$RewardObject"/>
                    </run_actions>
                  </actions>
                </library>
              </cues>
            </cue>
            <cue name="HOL_VS_ARG_Station_Offensive">
              <cues>
                <cue name="HOL_VS_ARG_Station_Offensive_Register">
                  <actions>
                    <!--Argon Vs Xenon - Station Offensive-->
                    <set_value name="$ThreadID" exact="'$hol_vs_arg_station_offensive'"/>
                    <set_value name="$Thread" exact="table[                            $ID = $ThreadID,                            $Faction = $Faction,                            $EnemyFaction = $EnemyFaction,                            $MissionGroup = $MissionGroup,                            $ThreadConditionLibs = [Situation__Invasion_Prep, Situation__Invading, Situation__Pushback],                            $ThreadType = 'sequential',                            $MissionType = missiontype.destroy,                            $Difficulty = level.veryhard,                            $SubMissionLib = HOL_VS_ARG_Station_Offensive_Get_Submissions,                            $NameLib = HOL_VS_ARG_Station_Offensive_Construct_Name,                            $DescriptionLib = HOL_VS_ARG_Station_Offensive_Construct_Description,                            $RewardLib = HOL_VS_ARG_Station_Offensive_Construct_Reward,                            $MinMissions = 1,                            $MaxMissions = 1,                            $ThreadAbortRelation = -0.00064]"/>
                    <assert value="not $ManagerCue.$ThreadDefinitions.{$ThreadID}?" text="'Thread definition ' + $ThreadID + ' already exists in this table [Owen]'"/>
                    <set_value name="$ManagerCue.$ThreadDefinitions.{$ThreadID}" exact="$Thread"/>
                  </actions>
                </cue>
                <!--Called from CalculateThreads. Result saved to $New_Thread. Namespace is not this parent.-->
                <library name="HOL_VS_ARG_Station_Offensive_Get_Submissions">
                  <actions>
                    <set_value name="$Submissions" exact="table[]"/>
                    <set_value name="$Submissions.$destroy_station" exact="table[$Cue = md.X4Ep1_War_Subscriptions.DestroyStation__Standard,   $MissionType = missiontype.destroy, $Page = 30213, $TextOffset = [170000], $Sequence = -1 ]"/>
                    <set_value name="$New_Thread.$Submissions" exact="$Submissions"/>
                  </actions>
                </library>
                <!--Called from CalculateThreads. Result saved to $New_Thread. Namespace is not this parent.-->
                <library name="HOL_VS_ARG_Station_Offensive_Construct_Name">
                  <actions>
                    <do_any>
                      <set_value name="this.$Name" exact="{30213, 9000}"/>
                    </do_any>
                  </actions>
                </library>
                <!--Called from CalculateThreads where several values are set to help decide the briefing text. Result saved to $New_Thread. Namespace is not this parent.-->
                <library name="HOL_VS_ARG_Station_Offensive_Construct_Description">
                  <actions>
                    <do_if value="$ThreadMood == 'negative'">
                      <do_any>
                        <set_value name="this.$Description" exact="{30213, 9101}"/>
                        <set_value name="this.$Description" exact="{30213, 9102}"/>
                      </do_any>
                      <set_value name="this.$Description" operation="add" exact="' ' + {30213, 9111}"/>
                      <do_any>
                        <set_value name="this.$Description" operation="add" exact="'\n' + {30213, 9121}"/>
                        <set_value name="this.$Description" operation="add" exact="'\n' + {30213, 9122}"/>
                      </do_any>
                    </do_if>
                    <do_elseif value="$ThreadMood == 'positive'">
                      <do_any>
                        <set_value name="this.$Description" exact="{30213, 9201}"/>
                        <set_value name="this.$Description" exact="{30213, 9202}"/>
                      </do_any>
                      <set_value name="this.$Description" operation="add" exact="' ' + {30213, 9211}"/>
                      <set_value name="this.$Description" operation="add" exact="'\n' + {30213, 9221}"/>
                    </do_elseif>
                  </actions>
                </library>
                <library name="HOL_VS_ARG_Station_Offensive_Construct_Reward">
                  <actions>
                    <do_any>
                      <set_value name="this.$RewardObject" exact="[ware.paintmod_0077]" weight="10" comment="special hol vs arg subscription paint"/>
                      <set_value name="this.$RewardObject" exact="[ware.paintmod_0010]" weight="10" comment="basic holy order faction paint"/>
                      <set_value name="this.$RewardObject" exact="[[ware.modpart_highenergycatalyst, ware.modpart_tuningsoftware, ware.modpart_weaponchamber_t1, ware.modpart_weaponchamber_t2].random]" weight="5" comment="modpart"/>
                      <set_value name="this.$RewardObject" exact="[ware.modpart_highenergycatalyst, ware.modpart_tuningsoftware, [ware.modpart_weaponchamber_t1, ware.modpart_weaponchamber_t2].random]" weight="10" comment="complete mod"/>
                      <set_value name="this.$RewardObject" exact="[ware.modpart_weaponchamber_t3]" weight="10" comment="rare modpart"/>
                      <set_value name="this.$RewardObject" exact="[[ware.inv_seminar_piloting_3, ware.inv_seminar_piloting_3, ware.inv_seminar_management_3].random]" weight="6"/>
                      <set_value name="this.$RewardObject" exact="[[ware.inv_seminar_piloting_4, ware.inv_seminar_piloting_4, ware.inv_seminar_management_4].random]" weight="4"/>
                    </do_any>
                    <run_actions ref="md.LIB_Generic.GenerateRewardText" result="this.$RewardText">
                      <param name="RewardObject" value="this.$RewardObject"/>
                    </run_actions>
                  </actions>
                </library>
              </cues>
            </cue>
            <cue name="HOL_VS_ARG_Gather_Intel">
              <cues>
                <cue name="HOL_VS_ARG_Preemptive_Gather_Intel" version="3">
                  <actions>
                    <!-- Holy Order Vs Argon - Gather Intel-->
                    <set_value name="$ThreadID" exact="'$hol_vs_arg_gather_intel'"/>
                    <set_value name="$Thread" exact="table[                            $ID = $ThreadID,                            $Faction = $Faction,                            $EnemyFaction = $EnemyFaction,                            $MissionGroup = $MissionGroup,                            $ThreadConditionLibs = [Situation__Cold_War, Situation__Contention, Situation__Invasion_Prep],                            $ThreadType = 'sequential',                            $MissionType = missiontype.intelligence,                            $Difficulty = level.easy,                            $SubMissionLib = HOL_VS_ARG_Gather_Intel_Get_Submissions,                            $NameLib = HOL_VS_ARG_Gather_Intel_Construct_Name,                            $DescriptionLib = HOL_VS_ARG_Gather_Intel_Construct_Description,                            $RewardLib = HOL_VS_ARG_Gather_Intel_Construct_Reward,                            $MinMissions = 2,                            $MaxMissions = 3,                            $ThreadAbortRelation = -0.00064]"/>
                    <assert value="not $ManagerCue.$ThreadDefinitions.{$ThreadID}?" text="'Thread definition ' + $ThreadID + ' already exists in this table [Owen]'"/>
                    <set_value name="$ManagerCue.$ThreadDefinitions.{$ThreadID}" exact="$Thread"/>
                  </actions>
                  <patch sinceversion="3" state="complete">
                    <set_value name="$ManagerCue.$ThreadDefinitions.$hol_vs_arg_gather_intel.$RewardLib" exact="HOL_VS_ARG_Gather_Intel_Construct_Reward"/>
                  </patch>
                </cue>
                <!--Called from CalculateThreads. Result saved to $New_Thread. Namespace is not this parent.-->
                <library name="HOL_VS_ARG_Gather_Intel_Get_Submissions">
                  <actions>
                    <set_value name="$Submissions" exact="table[]"/>
                    <set_value name="$Submissions.$deploy_satellite" exact="table[$Cue = md.X4Ep1_War_Subscriptions.DeployInPlace__Standard,    $MissionType = missiontype.drop,  $Page = 30213, $TextOffset = [101400], $Sequence = -1 ]"/>
                    <set_value name="$Submissions.$achieve_coverage__enemy_sector" exact="table[$Cue = md.X4Ep1_War_Subscriptions.Achieve_Coverage__Standard, $MissionType = missiontype.drop,  $Page = 30213, $TextOffset = [102100], $Sequence = 1 ]"/>
                    <set_value name="$Submissions.$find_resources__enemy_sector" exact="table[$Cue = md.X4Ep1_War_Subscriptions.Find_Resources__Standard,   $MissionType = missiontype.find,  $Page = 30213, $TextOffset = [106100], $Sequence = -1 ]"/>
                    <set_value name="$Submissions.$scan__ship" exact="table[$Cue = md.X4Ep1_War_Subscriptions.Scan__Standard,             $MissionType = missiontype.find,  $Page = 30213, $TextOffset = [150000], $Sequence = -1 ]"/>
                    <set_value name="$Submissions.$scan__station" exact="table[$Cue = md.X4Ep1_War_Subscriptions.Scan__Standard,             $MissionType = missiontype.find,  $Page = 30213, $TextOffset = [150100], $Sequence = -1 ]"/>
                    <set_value name="$Submissions.$scan__module" exact="table[$Cue = md.X4Ep1_War_Subscriptions.Scan__Standard,             $MissionType = missiontype.find,  $Page = 30213, $TextOffset = [150200], $Sequence = -1 ]"/>
                    <set_value name="$Submissions.$scan__for_ware" exact="table[$Cue = md.X4Ep1_War_Subscriptions.Scan__Standard,             $MissionType = missiontype.find,  $Page = 30213, $TextOffset = [150300, 150700], $Sequence = -1 ]"/>
                    <!--<set_value name="$Submissions.$scan__for_inventory"
                                 exact="table[$Cue = md.X4Ep1_War_Subscriptions.Scan__Standard,             $MissionType = missiontype.find,  $Page = 30213, $TextOffset = [150400], $Sequence = -1 ]"/>-->
                    <!--$scan__for_entity currently disabled as it's quite a chore-->
                    <!--<set_value name="$Submissions.$scan__for_entity"
                                 exact="table[$Cue = md.X4Ep1_War_Subscriptions.Scan__Standard,             $MissionType = missiontype.find,  $Page = 30213, $TextOffset = [150500], $Sequence = -1 ]"/>-->
                    <!--<set_value name="$Submissions.$scan__for_idcode"
                                 exact="table[$Cue = md.X4Ep1_War_Subscriptions.Scan__Standard,             $MissionType = missiontype.find,  $Page = 30213, $TextOffset = [150600], $Sequence = -1 ]"/>-->
                    <set_value name="$New_Thread.$Submissions" exact="$Submissions"/>
                  </actions>
                </library>
                <!--Called from CalculateThreads. Result saved to $New_Thread. Namespace is not this parent.-->
                <library name="HOL_VS_ARG_Gather_Intel_Construct_Name">
                  <actions>
                    <do_any>
                      <set_value name="this.$Name" exact="{30213, 7000}"/>
                    </do_any>
                  </actions>
                </library>
                <!--Called from CalculateThreads where several values are set to help decide the briefing text. Result saved to $New_Thread. Namespace is not this parent.-->
                <library name="HOL_VS_ARG_Gather_Intel_Construct_Description">
                  <actions>
                    <do_if value="$ThreadMood == 'negative'">
                      <do_any>
                        <set_value name="this.$Description" exact="{30213, 7101}"/>
                        <set_value name="this.$Description" exact="{30213, 7102}"/>
                      </do_any>
                      <set_value name="this.$Description" operation="add" exact="' ' + {30213, 7111}"/>
                      <do_any>
                        <set_value name="this.$Description" operation="add" exact="'\n' + {30213, 7121}"/>
                        <set_value name="this.$Description" operation="add" exact="'\n' + {30213, 7122}"/>
                      </do_any>
                    </do_if>
                    <do_elseif value="$ThreadMood == 'positive'">
                      <do_any>
                        <set_value name="this.$Description" exact="{30213, 7201}"/>
                        <set_value name="this.$Description" exact="{30213, 7202}"/>
                      </do_any>
                      <set_value name="this.$Description" operation="add" exact="' ' + {30213, 7211}"/>
                      <set_value name="this.$Description" operation="add" exact="'\n' + {30213, 7221}"/>
                    </do_elseif>
                  </actions>
                </library>
                <library name="HOL_VS_ARG_Gather_Intel_Construct_Reward">
                  <actions>
                    <do_any>
                      <set_value name="this.$RewardObject" exact="[ware.paintmod_0077]" weight="15" comment="special hol vs arg subscription paint"/>
                      <set_value name="this.$RewardObject" exact="[ware.paintmod_0010]" weight="15" comment="basic holy order faction paint"/>
                      <set_value name="this.$RewardObject" exact="[[ware.modpart_nividiumcrystallite, ware.modpart_shipnanoweave_t1, ware.modpart_shipnanoweave_t2].random]" weight="9" comment="modpart"/>
                      <set_value name="this.$RewardObject" exact="[ware.modpart_nividiumcrystallite, [ware.modpart_shipnanoweave_t1, ware.modpart_shipnanoweave_t2].random]" weight="8" comment="complete mod"/>
                      <set_value name="this.$RewardObject" exact="[[ware.modpart_extendedfuelcontainer, ware.modpart_nividiumoxide, ware.modpart_enginefuelinjector_t1, ware.modpart_enginefuelinjector_t2].random]" weight="9" comment="modpart"/>
                      <set_value name="this.$RewardObject" exact="[ware.modpart_extendedfuelcontainer, ware.modpart_nividiumoxide, [ware.modpart_enginefuelinjector_t1, ware.modpart_enginefuelinjector_t2].random]" weight="8" comment="complete mod"/>
                      <set_value name="this.$RewardObject" exact="[[ware.modpart_shipnanoweave_t3, ware.modpart_enginefuelinjector_t3].random]" weight="4" comment="rare modpart"/>
                      <set_value name="this.$RewardObject" exact="[[ware.inv_seminar_piloting_2, ware.inv_seminar_piloting_2, ware.inv_seminar_management_2].random]" weight="14"/>
                      <set_value name="this.$RewardObject" exact="[[ware.inv_seminar_piloting_3, ware.inv_seminar_piloting_3, ware.inv_seminar_management_3].random]" weight="4"/>
                      <set_value name="this.$RewardObject" exact="[[ware.inv_seminar_piloting_4, ware.inv_seminar_management_4].random]" weight="1"/>
                    </do_any>
                    <run_actions ref="md.LIB_Generic.GenerateRewardText" result="this.$RewardText">
                      <param name="RewardObject" value="this.$RewardObject"/>
                    </run_actions>
                  </actions>
                </library>
              </cues>
            </cue>
            <cue name="HOL_VS_ARG_Support_Invasion">
              <cues>
                <cue name="HOL_VS_ARG_Preemptive_Support_Invasion" version="3">
                  <actions>
                    <!--Argon Vs Holy Order - Support Invasion-->
                    <set_value name="$ThreadID" exact="'$hol_vs_arg_support_invasion'"/>
                    <set_value name="$Thread" exact="table[                            $ID = $ThreadID,                            $Faction = $Faction,                            $EnemyFaction = $EnemyFaction,                            $MissionGroup = $MissionGroup,                            $ThreadConditionLibs = [Situation__Invading],                            $ThreadType = 'sequential',                            $MissionType = missiontype.fight,                            $Difficulty = level.hard,                            $SubMissionLib = HOL_VS_ARG_Support_Invasion_Get_Submissions,                            $NameLib = HOL_VS_ARG_Support_Invasion_Construct_Name,                            $DescriptionLib = HOL_VS_ARG_Support_Invasion_Construct_Description,                            $RewardLib = HOL_VS_ARG_Support_Invasion_Construct_Reward,                            $MinMissions = 1,                            $MaxMissions = 1,                            $ThreadAbortRelation = -0.00064]"/>
                    <assert value="not $ManagerCue.$ThreadDefinitions.{$ThreadID}?" text="'Thread definition ' + $ThreadID + ' already exists in this table [Owen]'"/>
                    <set_value name="$ManagerCue.$ThreadDefinitions.{$ThreadID}" exact="$Thread"/>
                  </actions>
                  <patch sinceversion="3" state="complete">
                    <set_value name="$ManagerCue.$ThreadDefinitions.$hol_vs_arg_support_invasion.$RewardLib" exact="HOL_VS_ARG_Support_Invasion_Construct_Reward"/>
                  </patch>
                </cue>
                <!--Called from CalculateThreads. Result saved to $New_Thread. Namespace is not this parent.-->
                <library name="HOL_VS_ARG_Support_Invasion_Get_Submissions">
                  <actions>
                    <set_value name="$Submissions" exact="table[]"/>
                    <!--<set_value name="$Submissions.$support_invasion"
                                 exact="table[$Cue = md.X4Ep1_War_Subscriptions.Support_Invasion__Standard,    $MissionType = missiontype.fight,  $Page = 30213, $TextOffset = [109000], $Sequence = -1 ]"/>-->
                    <set_value name="$New_Thread.$Submissions" exact="$Submissions"/>
                  </actions>
                </library>
                <!--Called from CalculateThreads. Result saved to $New_Thread. Namespace is not this parent.-->
                <library name="HOL_VS_ARG_Support_Invasion_Construct_Name">
                  <actions>
                    <do_any>
                      <set_value name="this.$Name" exact="{30213, 8000}"/>
                    </do_any>
                  </actions>
                </library>
                <!--Called from CalculateThreads where several values are set to help decide the briefing text. Result saved to $New_Thread. Namespace is not this parent.-->
                <library name="HOL_VS_ARG_Support_Invasion_Construct_Description">
                  <actions>
                    <do_if value="$ThreadMood == 'negative'">
                      <do_any>
                        <set_value name="this.$Description" exact="{30213, 8101}"/>
                      </do_any>
                      <set_value name="this.$Description" operation="add" exact="' ' + {30213, 8111}"/>
                      <do_any>
                        <set_value name="this.$Description" operation="add" exact="'\n' + {30213, 8121}"/>
                      </do_any>
                    </do_if>
                    <do_elseif value="$ThreadMood == 'positive'">
                      <do_any>
                        <set_value name="this.$Description" exact="{30213, 8201}"/>
                      </do_any>
                      <set_value name="this.$Description" operation="add" exact="' ' + {30213, 8211}"/>
                      <set_value name="this.$Description" operation="add" exact="'\n' + {30213, 8221}"/>
                    </do_elseif>
                  </actions>
                </library>
                <library name="HOL_VS_ARG_Support_Invasion_Construct_Reward">
                  <actions>
                    <do_any>
                      <set_value name="this.$RewardObject" exact="[ware.paintmod_0077]" weight="15" comment="special hol vs arg subscription paint"/>
                      <set_value name="this.$RewardObject" exact="[ware.paintmod_0010]" weight="15" comment="basic holy order faction paint"/>
                      <set_value name="this.$RewardObject" exact="[[ware.modpart_nividiumcrystallite, ware.modpart_shipnanoweave_t1, ware.modpart_shipnanoweave_t2].random]" weight="9"/>
                      <set_value name="this.$RewardObject" exact="[[ware.modpart_highenergycatalyst, ware.modpart_tuningsoftware, ware.modpart_weaponchamber_t1, ware.modpart_weaponchamber_t2].random]" weight="8"/>
                      <set_value name="this.$RewardObject" exact="[ware.modpart_nividiumcrystallite, [ware.modpart_shipnanoweave_t1, ware.modpart_shipnanoweave_t2].random]" weight="9"/>
                      <set_value name="this.$RewardObject" exact="[ware.modpart_highenergycatalyst, ware.modpart_tuningsoftware, [ware.modpart_weaponchamber_t1, ware.modpart_weaponchamber_t2].random]" weight="8"/>
                      <set_value name="this.$RewardObject" exact="[[ware.modpart_shipnanoweave_t3, ware.modpart_weaponchamber_t3].random]" weight="4"/>
                      <set_value name="this.$RewardObject" exact="[[ware.inv_seminar_piloting_2, ware.inv_seminar_piloting_2, ware.inv_seminar_management_2].random]" weight="14"/>
                      <set_value name="this.$RewardObject" exact="[[ware.inv_seminar_piloting_3, ware.inv_seminar_piloting_3, ware.inv_seminar_management_3].random]" weight="4"/>
                      <set_value name="this.$RewardObject" exact="[[ware.inv_seminar_piloting_4, ware.inv_seminar_management_4].random]" weight="1"/>
                    </do_any>
                    <run_actions ref="md.LIB_Generic.GenerateRewardText" result="this.$RewardText">
                      <param name="RewardObject" value="this.$RewardObject"/>
                    </run_actions>
                  </actions>
                </library>
              </cues>
            </cue>
          </cues>
        </cue>
        <!--
        ###################################
        HOLY ORDER OF THE PARANID vs GODREALM OF THE PARANID
        ###################################-->
        <cue name="HOL_VS_PAR" namespace="this" version="4">
          <actions>
            <!--Common values-->
            <set_value name="$ManagerCue" exact="parent.namespace"/>
            <set_value name="$Faction" exact="faction.holyorder"/>
            <set_value name="$EnemyFaction" exact="faction.paranid"/>
            <set_value name="$MissionGroup" exact="missiongroup.holyorder_war_paranid"/>
            <set_value name="$Mission_Contact" exact="null"/>
            <set_value name="$Page" exact="30214" comment="HolyOrder-Paranid-War page"/>
            <set_value name="$ManagerCue.$MissionGroupCues.{$MissionGroup}" exact="this"/>
            <set_value name="$SubscriptionMinRel" exact="$Faction.relation.friend.min"/>
            <set_value name="$SubscriptionLossRel" exact="-0.00064" comment="for UI-value -1"/>
            <set_value name="$HasIntroMission" exact="false"/>
            <set_value name="$DebugChance" exact="$ManagerCue.$DebugChance"/>
            <!--Status-->
            <set_value name="$SubscriptionStatus" exact="null"/>
            <set_value name="$IntroducedToContact" exact="false"/>
            <set_value name="$JobsDescribed" exact="false"/>
            <set_value name="$ConflictDescribed" exact="false"/>
            <set_value name="$IntroMissionSuccessful" exact="false"/>
            <set_value name="$CooldownTime" exact="-1s"/>
            <!--Stats-->
            <set_value name="$ThreadsCompleted" exact="0"/>
            <set_value name="$ThreadsFailed" exact="0"/>
            <set_value name="$MissionsCompleted" exact="0"/>
            <set_value name="$MissionsFailed" exact="0"/>
          </actions>
          <patch sinceversion="2" state="complete">
            <do_if value="$CooldownTime gt (player.age + 5min)">
              <debug_text text="'Reducing mission subscription cooldowntime from ' + $CooldownTime + ' to ' + player.age + 5min" filter="savegame"/>
              <set_value name="$CooldownTime" exact="player.age + 5min"/>
            </do_if>
          </patch>
          <patch sinceversion="3" state="complete">
            <do_if value="not md.$SubscribedMissionGroups?">
              <create_list name="md.$SubscribedMissionGroups"/>
            </do_if>
            <do_if value="$SubscriptionStatus == 'subscribed'">
              <append_to_list name="md.$SubscribedMissionGroups" exact="$MissionGroup"/>
            </do_if>
          </patch>
          <patch sinceversion="4" state="complete">
            <set_value name="$HasIntroMission" exact="false"/>
          </patch>
          <cues>
            <cue name="HOL_VS_PAR_Init">
              <actions>
                <set_value name="$ContactCreatorCue" exact="HOL_VS_PAR_Create_Contact"/>
                <set_value name="$IntroMissionCue" exact="HOL_VS_PAR_Introduction"/>
                <!--$SubscriptionStatus:
                - 'unsubscribed'
                - 'probation'
                - 'subscribed'
                - 'cooldown'-->
                <signal_cue_instantly cue="HOL_VS_PAR_Set_Subscription_Status" param="'unsubscribed'" comment="TODO: @Owen, @Roger - temporary, change back to unsubscribed!"/>
              </actions>
            </cue>
            <!--
            ####################
            DEBUG
            ####################-->
            <cue name="HOL_VS_PAR_Debug_Reset">
              <conditions>
                <event_cue_signalled/>
              </conditions>
              <actions>
                <do_all exact="$ManagerCue.$Threads.count" counter="$i" reverse="true">
                  <do_if value="$ManagerCue.$Threads.{$i}.$ThreadCue.$Definition.$MissionGroup == $MissionGroup">
                    <signal_cue_instantly cue="$ManagerCue.$Threads.{$i}.$CleanupCue"/>
                  </do_if>
                </do_all>
                <set_value name="$DefinitionKeys" exact="$ManagerCue.$ThreadDefinitions.keys.list"/>
                <do_all exact="$DefinitionKeys.count" counter="$i" reverse="true">
                  <do_if value="$ManagerCue.$ThreadDefinitions.{$DefinitionKeys.{$i}}.$MissionGroup == $MissionGroup">
                    <remove_value name="$ManagerCue.$ThreadDefinitions.{$DefinitionKeys.{$i}}"/>
                  </do_if>
                </do_all>
                <do_if value="$Mission_Contact.isclass.npc">
                  <destroy_object object="$Mission_Contact"/>
                </do_if>
                <set_value name="$Mission_Contact" exact="null"/>
                <reset_cue cue="namespace"/>
                <reset_cue cue="Gamestart" comment="Trigger CalculateThreads again"/>
              </actions>
            </cue>
            <cue name="HOL_VS_PAR_Debug_Subscribe" instantiate="true">
              <conditions>
                <event_cue_signalled/>
              </conditions>
              <actions>
                <signal_cue_instantly cue="HOL_VS_PAR_Set_Subscription_Status" param="'subscribed'"/>
              </actions>
            </cue>
            <!--
            ####################
            SUBSCRIPTION
            ####################-->
            <!--event.param == new status-->
            <cue name="HOL_VS_PAR_Set_Subscription_Status" instantiate="true">
              <conditions>
                <event_cue_signalled/>
              </conditions>
              <actions>
                <do_if value="                        event.param == 'unsubscribed' or                        event.param == 'probation' or                        event.param == 'subscribed' or                        event.param == 'cooldown'">
                  <debug_text text="'Changing subscription status from ' + $SubscriptionStatus + ' to ' + event.param" chance="$DebugChance"/>
                  <set_value name="$SubscriptionStatus" exact="event.param"/>
                  <!--Be careful with state change handlers here if the requested state was the same as the previous one-->
                  <do_if value="event.param == 'subscribed' and Gamestart.state == cuestate.complete">
                    <signal_cue_instantly cue="Player_Subscribed_To_War" param="$MissionGroup"/>
                    <signal_cue cue="CalculateThreads"/>
                  </do_if>
                  <do_elseif value="event.param == 'cooldown'">
                    <!--TODO @Owen balance cooldown. Have a harsher cooldown in certain situations?-->
                    <set_value name="$CooldownTime" exact="player.age + 5min"/>
                  </do_elseif>
                  <!-- update global missiongroup-registry -->
                  <do_if value="$SubscriptionStatus == 'subscribed'">
                    <assert value="not md.$SubscribedMissionGroups.indexof.{$MissionGroup}"/>
                    <do_if value="not md.$SubscribedMissionGroups.indexof.{$MissionGroup}">
                      <append_to_list name="md.$SubscribedMissionGroups" exact="$MissionGroup"/>
                    </do_if>
                  </do_if>
                  <do_else>
                    <remove_from_list name="md.$SubscribedMissionGroups" exact="$MissionGroup"/>
                  </do_else>
                </do_if>
                <do_else>
                  <assert value="false" text="'Unknown subscription status: ' + event.param + ' [Owen]'"/>
                </do_else>
              </actions>
            </cue>
            <cue name="HOL_VS_PAR_Check_Cooldown" instantiate="true" checkinterval="5s">
              <conditions>
                <check_value value="$SubscriptionStatus == 'cooldown' and player.age gt $CooldownTime"/>
              </conditions>
              <actions>
                <debug_text text="player.age + ' Ending  cooldown'" chance="$DebugChance"/>
                <signal_cue_instantly cue="HOL_VS_PAR_Set_Subscription_Status" param="'subscribed'"/>
              </actions>
            </cue>
            <!--
            ####################
            CONTACT
            ####################-->
            <!--event.param == Cloned table of the host sectors for this war front in which to search for a placement object (or null to fallback to any owned space in the galaxy)-->
            <cue name="HOL_VS_PAR_Create_Contact">
              <conditions>
                <event_cue_signalled/>
                <check_value value="$Faction.isactive"/>
              </conditions>
              <actions>
                <set_value name="this.$SelectedSpace" exact="null"/>
                <do_if value="event.param and typeof event.param == datatype.table">
                  <set_value name="this.$HostSectorKeys" exact="event.param.keys.sorted"/>
                  <do_all exact="this.$HostSectorKeys.count" counter="$i">
                    <do_if value="this.$HostSectorKeys.{$i}.security ge 0.75f">
                      <!--Select a sector with stations and a high security value-->
                      <find_station name="this.$PotentialStation" owner="$Faction" space="this.$HostSectorKeys.{$i}">
                        <match_content class="class.walkablemodule" checkoperational="true"/>
                      </find_station>
                      <do_if value="this.$PotentialStation">
                        <set_value name="this.$SelectedSpace" exact="this.$HostSectorKeys.{$i}"/>
                        <break/>
                      </do_if>
                    </do_if>
                  </do_all>
                  <do_if value="not this.$SelectedSpace">
                    <!--Simply select the furthest sector with stations-->
                    <do_all exact="this.$HostSectorKeys.count" counter="$i" reverse="true">
                      <find_station name="this.$PotentialStation" owner="$Faction" space="this.$HostSectorKeys.{$i}">
                        <match_content class="class.walkablemodule" checkoperational="true"/>
                      </find_station>
                      <do_if value="this.$PotentialStation">
                        <set_value name="this.$SelectedSpace" exact="this.$HostSectorKeys.{$i}"/>
                        <break/>
                      </do_if>
                    </do_all>
                  </do_if>
                </do_if>
                <do_if value="not this.$SelectedSpace">
                  <find_station name="this.$PotentialStation" owner="$Faction" space="player.galaxy">
                    <match_content class="class.walkablemodule" checkoperational="true"/>
                  </find_station>
                  <do_if value="this.$PotentialStation">
                    <set_value name="this.$SelectedSpace" exact="this.$PotentialStation.sector"/>
                    <debug_text text="'Fallback case for not finding suitable sector to place mission contact for ' + $MissionGroup + '. Placing on ' + this.$PotentialStation + ' ' + this.$PotentialStation.knownname + ' in ' + this.$SelectedSpace.knownname" filter="error"/>
                  </do_if>
                </do_if>
                <do_if value="this.$SelectedSpace">
                  <find_station name="$PlacementObject" owner="$Faction" space="this.$SelectedSpace" required="true">
                    <match_content class="class.walkablemodule" checkoperational="true"/>
                  </find_station>
                  <assert value="$PlacementObject.exists" text="'Station was unable to be found in ' + this.$SelectedSpace.knownname + ' even when it should have [Owen]'"/>
                  <do_if value="$PlacementObject">
                    <do_if value="not $Mission_Contact.isclass.npc">
                      <create_cue_actor name="$Mission_Contact" cue="namespace" group="paranid.factionrepresentative">
                        <page exact="10307"/>
                        <owner exact="$Faction"/>
                        <skills>
                          <skill type="management" min="12" max="15"/>
                          <skill type="morale" min="12" max="15"/>
                          <skill type="piloting" min="6" max="15"/>
                          <skill type="engineering" min="6" max="15"/>
                          <skill type="boarding" min="6" max="15"/>
                        </skills>
                      </create_cue_actor>
                      <do_if value="$Mission_Contact">
                        <set_entity_type entity="$Mission_Contact" type="entitytype.crowd"/>
                        <set_entity_traits entity="$Mission_Contact" missionactor="true" remote="false" customhandler="true"/>
                        <set_entity_overrides entity="$Mission_Contact" title="'{30214,201}'"/>
                        <debug_text text="'Created mission contact ' + $Mission_Contact + ' ' + $Mission_Contact.knownname + ' for placement on ' + $PlacementObject + ' ' + $PlacementObject.knownname" chance="$DebugChance"/>
                      </do_if>
                    </do_if>
                  </do_if>
                </do_if>
                <assert value="$Mission_Contact.isclass.npc" text="'Unable to generate mission contact [Owen]'"/>
                <do_if value="not $Mission_Contact.isclass.npc or not $PlacementObject.exists">
                  <reset_cue cue="this"/>
                </do_if>
              </actions>
              <cues>
                <cue name="HOL_VS_PAR_Place_Contact_Init" version="2">
                  <actions>
                    <do_if value="$PlacementObject.attention ge attention.nearby">
                      <signal_cue cue="HOL_VS_PAR_Place_Contact_Create_Interior"/>
                    </do_if>
                  </actions>
                  <patch sinceversion="2" state="complete">
                    <do_if value="not $PlacementObject.isoperational">
                      <set_value name="$PlacementObject" exact="null"/>
                      <reset_cue cue="$ContactCreatorCue"/>
                    </do_if>
                  </patch>
                </cue>
                <cue name="HOL_VS_PAR_Place_Contact_Create_Interior">
                  <conditions>
                    <check_any>
                      <event_cue_signalled/>
                      <check_all>
                        <event_object_changed_attention object="$PlacementObject"/>
                        <check_value value="event.param ge attention.nearby"/>
                      </check_all>
                    </check_any>
                  </conditions>
                  <actions>
                    <debug_text text="'Attempting to create dynamic interior to place NPC'" chance="$DebugChance"/>
                    <get_room_definition macro="$StartCorridorMacro" tags="tag.corridor" race="$Faction.primaryrace"/>
                    <get_room_definition macro="$StartRoomMacro" doors="$RoomDoors" tags="tag.warroom" race="$Faction.primaryrace"/>
                    <create_dynamic_interior object="$PlacementObject" corridor="$StartCorridorMacro" room="$StartRoomMacro" name="'{30214,3}'" interiorname="$DynamicInterior" corridorname="$DynamicCorridor" roomname="$DynamicRoom"/>
                    <assert value="$DynamicInterior" text="'Unable to create dynamic interior for contact ' + $Mission_Contact + ' ' + $Mission_Contact.knownname + ' [Owen]'"/>
                    <do_if value="$DynamicInterior">
                      <find_npc_slot name="$NPC_Slot" object="$DynamicRoom" tags="tag.stand"/>
                      <do_if value="not $NPC_Slot">
                        <find_npc_slot name="$NPC_Slot" object="$DynamicRoom"/>
                      </do_if>
                      <assert value="$NPC_Slot" text="'Can not find slot for mission contact in ' + $DynamicInterior + ' ' + $DynamicInterior.knownname + ' [Owen]'"/>
                      <do_if value="$NPC_Slot">
                        <add_actor_to_room actor="$Mission_Contact" slot="$NPC_Slot"/>
                        <debug_text text="'Added mission contact ' + $Mission_Contact + ' ' + $Mission_Contact.knownname + ' to ' + $PlacementObject + ' ' + $PlacementObject.knownname" chance="$DebugChance"/>
                      </do_if>
                    </do_if>
                  </actions>
                  <cues>
                    <cue name="HOL_VS_PAR_Place_Contact_WithinDynamicInterior_Destroy">
                      <conditions>
                        <event_object_interiors_despawning object="$PlacementObject"/>
                      </conditions>
                      <actions>
                        <remove_actor_from_room actor="$Mission_Contact"/>
                        <include_actions ref="Remove_Dynamic_Interior"/>
                        <do_if value="$Faction.isactive">
                          <reset_cue cue="HOL_VS_PAR_Place_Contact_Create_Interior"/>
                        </do_if>
                        <do_else>
                          <debug_text text="'Faction is now inactive. Deactivating contact handling.'"/>
                          <reset_cue cue="$ContactCreatorCue"/>
                        </do_else>
                      </actions>
                    </cue>
                  </cues>
                </cue>
                <cue name="HOL_VS_PAR_Contact_Killed">
                  <conditions>
                    <event_object_destroyed object="$Mission_Contact"/>
                  </conditions>
                  <actions>
                    <set_value name="$Mission_Contact" exact="null"/>
                    <reset_cue cue="HOL_VS_PAR_Create_Contact"/>
                  </actions>
                </cue>
                <cue name="HOL_VS_PAR_Placement_Object_Destroyed">
                  <conditions>
                    <event_object_destroyed object="$PlacementObject"/>
                  </conditions>
                  <actions>
                    <include_actions ref="Remove_Dynamic_Interior"/>
                    <set_value name="$PlacementObject" exact="null"/>
                    <reset_cue cue="$ContactCreatorCue"/>
                  </actions>
                </cue>
                <cue name="HOL_VS_PAR_Contact__Faction_Deactivated">
                  <conditions>
                    <event_faction_deactivated faction="$Faction"/>
                  </conditions>
                  <actions>
                    <do_if value="HOL_VS_PAR_Place_Contact_Create_Interior.state == cuestate.waiting">
                      <debug_text text="'Faction is now inactive. Deactivating contact handling.'"/>
                      <reset_cue cue="$ContactCreatorCue"/>
                    </do_if>
                    <!--else, the depawning of the interior must happen-->
                  </actions>
                </cue>
                <cue name="HOL_VS_PAR_Contact_Conversation_Started" instantiate="true">
                  <conditions>
                    <check_any>
                      <event_conversation_started actor="$Mission_Contact"/>
                      <event_conversation_returned_to_section actor="$Mission_Contact"/>
                    </check_any>
                    <check_value value="event.param == 'default' and $Faction.isactive"/>
                  </conditions>
                  <actions>
                    <do_if value="event.name == 'event_conversation_started'">
                      <do_if value="$SubscriptionStatus == 'unsubscribed' or $SubscriptionStatus == 'cooldown'">
                        <do_if value="player.entity.isfemale">
                          <add_npc_line speaker="$Mission_Contact" line="3007" comment="Pilot. (female)"/>
                        </do_if>
                        <do_else>
                          <add_npc_line speaker="$Mission_Contact" line="3006" comment="Pilot. (male)"/>
                        </do_else>
                      </do_if>
                      <do_else>
                        <!--More familiar greeting-->
                        <add_npc_line speaker="$Mission_Contact" line="3003" comment="Captain."/>
                      </do_else>
                    </do_if>
                    <include_actions ref="HOL_VS_PAR_Contact_Player_Lines"/>
                  </actions>
                </cue>
                <library name="HOL_VS_PAR_Contact_Player_Lines">
                  <actions>
                    <!--Specific sections-->
                    <do_if value="event.name == 'event_conversation_next_section' and event.param == 'war_subscribe_request'">
                      <do_if value="$Faction.relationto.{faction.player} ge $SubscriptionMinRel">
                        <add_player_choice text="{1002,3000401}" section="war_subscribe_ask_intro" comment="What kind of jobs can I expect?"/>
                      </do_if>
                    </do_if>
                    <do_elseif value="event.name == 'event_conversation_next_section' and (event.param == 'war_subscribe_ask_intro' or event.param == 'war_subscribe_request_2')">
                      <add_player_choice text="{1002,3021402}" section="war_subscribe_ask_conflict" comment="What can you tell me about the conflict itself?"/>
                      <add_player_choice text="{1002,3000402}" section="war_subscribe_start_intro" position="top_right" comment="Let's get started."/>
                    </do_elseif>
                    <do_elseif value="event.name == 'event_conversation_next_section' and event.param == 'war_subscribe_ask_conflict'">
                      <add_player_choice text="{1002,3021403}" section="war_subscribe_ask_conflict_2" comment="What will you do?"/>
                      <add_player_choice text="{1002,3000402}" section="war_subscribe_start_intro" position="top_right" comment="Let's get started."/>
                    </do_elseif>
                    <do_elseif value="event.name == 'event_conversation_next_section' and event.param == 'war_subscribe_ask_conflict_2'">
                      <add_player_choice text="{1002,3000402}" section="war_subscribe_start_intro" position="top_right" comment="Let's get started."/>
                    </do_elseif>
                    <!--Start or other sections-->
                    <do_else>
                      <do_if value="$SubscriptionStatus == 'unsubscribed'">
                        <do_if value="HOL_VS_PAR_Introduction.state == cuestate.waiting">
                          <!--Intro mission is not in a state where the player can take it.-->
                          <!--TODO @Owen - voice lines on rejecting the player?-->
                          <add_player_choice text="{1002,3021401}" section="war_subscribe_request_2" comment="I'm here about the Holy Order."/>
                        </do_if>
                        <do_elseif value="$IntroducedToContact">
                          <do_if value="$JobsDescribed">
                            <add_player_choice text="{1002,3000402}" section="war_subscribe_start_intro" position="top_right" comment="Let's get started."/>
                            <add_player_choice text="{1002,3021402}" section="war_subscribe_ask_conflict" comment="What can you tell me about the conflict itself?"/>
                          </do_if>
                          <do_else>
                            <add_player_choice text="{1002,3000401}" section="war_subscribe_ask_intro" comment="What kind of jobs can I expect?"/>
                          </do_else>
                        </do_elseif>
                        <do_else>
                          <add_player_choice text="{1002,3021401}" section="war_subscribe_request" comment="I'm here about the Holy Order."/>
                        </do_else>
                      </do_if>
                      <do_elseif value="$SubscriptionStatus == 'probation'">
                        <do_if value="$IntroMissionSuccessful">
                          <add_player_choice text="{1002,3000404}" section="war_intro_complete" comment="I completed the task."/>
                        </do_if>
                        <do_else>
                          <add_player_choice text="{1002,3000405}" section="war_abort_intro" comment="I would like to stop."/>
                        </do_else>
                      </do_elseif>
                    </do_else>
                  </actions>
                </library>
                <cue name="HOL_VS_PAR_Contact_NextSection" instantiate="true">
                  <conditions>
                    <event_conversation_next_section actor="$Mission_Contact" sectionprefix="war_"/>
                  </conditions>
                  <actions>
                    <set_value name="$AddPlayerChoices" exact="true"/>
                    <do_if value="event.param == 'war_subscribe_request'">
                      <do_if value="$Faction.relationto.{faction.player} ge $SubscriptionMinRel">
                        <set_value name="$IntroducedToContact" exact="true"/>
                        <add_npc_line speaker="$Mission_Contact" line="30214001" hidechoices="true" comment="Ah, very good."/>
                        <add_npc_line speaker="$Mission_Contact" line="30214002" hidechoices="true"/>
                        <do_if value="player.entity.race == race.argon">
                          <!--Holy Order citizen-->
                          <add_npc_line speaker="$Mission_Contact" line="30214004" hidechoices="true"/>
                        </do_if>
                        <do_else>
                          <!--Holy Order friend-->
                          <add_npc_line speaker="$Mission_Contact" line="30214003" hidechoices="true"/>
                        </do_else>
                        <add_npc_line speaker="$Mission_Contact" line="30214005" hidechoices="true"/>
                        <add_npc_line speaker="$Mission_Contact" line="30214006" hidechoices="true"/>
                        <add_npc_line speaker="$Mission_Contact" line="30214007" hidechoices="true"/>
                        <do_if value="player.entity.race != race.paranid">
                          <!--Non-Paranid player line-->
                          <add_npc_line speaker="$Mission_Contact" line="30214008" hidechoices="true"/>
                        </do_if>
                        <do_else>
                          <add_npc_line speaker="$Mission_Contact" line="30214009" hidechoices="true"/>
                          <add_npc_line speaker="$Mission_Contact" line="30214010" hidechoices="true"/>
                        </do_else>
                      </do_if>
                      <do_else>
                        <add_npc_line speaker="$Mission_Contact" line="30214026" comment="Sorry, but that is a very sensitive situation. We require pilots who have proven themselves to the Argon Federation."/>
                      </do_else>
                    </do_if>
                    <do_elseif value="event.param == 'war_subscribe_ask_intro'">
                      <set_value name="$JobsDescribed" exact="true"/>
                      <add_npc_line speaker="$Mission_Contact" line="30214011" hidechoices="true"/>
                      <add_npc_line speaker="$Mission_Contact" line="30214012" hidechoices="true"/>
                    </do_elseif>
                    <do_elseif value="event.param == 'war_subscribe_ask_conflict'">
                      <set_value name="$ConflictDescribed" exact="true"/>
                      <do_if value="player.entity.race != race.paranid">
                        <!--Non-Paranid player line-->
                        <add_npc_line speaker="$Mission_Contact" line="30214013" hidechoices="true"/>
                      </do_if>
                      <add_npc_line speaker="$Mission_Contact" line="30214014" hidechoices="true"/>
                      <add_npc_line speaker="$Mission_Contact" line="30214015" hidechoices="true"/>
                    </do_elseif>
                    <do_elseif value="event.param == 'war_subscribe_ask_conflict_2'">
                      <add_npc_line speaker="$Mission_Contact" line="30214016" hidechoices="true"/>
                      <add_npc_line speaker="$Mission_Contact" line="30214017" hidechoices="true"/>
                      <add_npc_line speaker="$Mission_Contact" line="30214018" hidechoices="true"/>
                      <add_npc_line speaker="$Mission_Contact" line="30214019" hidechoices="true"/>
                    </do_elseif>
                    <do_elseif value="event.param == 'war_subscribe_request_2'">
                      <!--This section is for when the intro mission is not currently active for the player to accept it. Either reject the player or signal the intro mission to activate.-->
                      <include_actions ref="HOL_VS_PAR_Can_Activate_Introduction"/>
                      <do_if value="$CanActivateIntro">
                        <signal_cue cue="HOL_VS_PAR_Introduction"/>
                        <add_npc_line speaker="$Mission_Contact" line="30214001" hidechoices="true" comment="Ah, very good."/>
                      </do_if>
                      <do_else>
                        <set_value name="$AddPlayerChoices" exact="false"/>
                        <add_npc_line speaker="$Mission_Contact" line="30214027" hidechoices="true"/>
                      </do_else>
                    </do_elseif>
                    <do_elseif value="event.param == 'war_subscribe_start_intro'">
                      <do_if value="$HasIntroMission">
                        <set_value name="$AddPlayerChoices" exact="false"/>
                        <signal_cue cue="HOL_VS_PAR_Player_Requested_Subscription"/>
                        <add_npc_line speaker="$Mission_Contact" line="30214020" hidechoices="true"/>
                        <add_npc_line speaker="$Mission_Contact" line="30214021" hidechoices="true"/>
                      </do_if>
                      <do_else>
                        <set_value name="$AddPlayerChoices" exact="false"/>
                        <add_npc_line speaker="$Mission_Contact" line="2113" hidechoices="true" comment="Excellent."/>
                        <add_npc_line speaker="$Mission_Contact" line="30214023" hidechoices="true" comment="You will now find tasks related to the Holy Order conflict in your mission interface."/>
                        <signal_cue cue="HOL_VS_PAR_Cancel_Intro_Talkto"/>
                        <reset_cue cue="HOL_VS_PAR_Introduction"/>
                        <signal_cue_instantly cue="HOL_VS_PAR_Set_Subscription_Status" param="'subscribed'"/>
                      </do_else>
                    </do_elseif>
                    <do_elseif value="event.param == 'war_intro_complete'">
                      <set_value name="$AddPlayerChoices" exact="false"/>
                      <add_npc_line speaker="$Mission_Contact" line="30214022" hidechoices="true" comment="Yes, I saw. Very good."/>
                      <add_npc_line speaker="$Mission_Contact" line="30214023" hidechoices="true" comment="You will now find tasks related to the Holy Order conflict in your mission interface."/>
                      <signal_cue_instantly cue="HOL_VS_PAR_Set_Subscription_Status" param="'subscribed'"/>
                    </do_elseif>
                    <do_elseif value="event.param == 'war_abort_intro'">
                      <set_value name="$AddPlayerChoices" exact="false"/>
                      <signal_cue cue="HOL_VS_PAR_Player_Requests_Intro_Abort"/>
                    </do_elseif>
                    <do_if value="$AddPlayerChoices">
                      <include_actions ref="HOL_VS_PAR_Contact_Player_Lines"/>
                    </do_if>
                  </actions>
                </cue>
              </cues>
            </cue>
            <!--event.param = table[
            $cue                = thread cue namespace,
            $completedmissions  = number of completed missions,
            $failedmissions     = number of failed missions]-->
            <cue name="HOL_VS_PAR_Thread_Finished" instantiate="true">
              <conditions>
                <event_cue_signalled cue="Cleanup_Thread"/>
                <check_value value="event.param.$cue.$Definition.$MissionGroup == $MissionGroup"/>
                <check_value value="$ManagerCue.$ActiveThreads.indexof.{event.param.$cue}"/>
              </conditions>
              <actions>
                <!--TODO @Owen spoken feedback?-->
                <debug_text text="'player finished ' + event.param.$cue + ' for ' + $MissionGroup + '. Completed missions: ' + event.param.$completedmissions + ' - Failed missions: ' + event.param.$failedmissions" chance="$DebugChance"/>
                <set_value name="$MissionsCompleted" operation="add" exact="event.param.$completedmissions"/>
                <set_value name="$MissionsFailed" operation="add" exact="event.param.$completedmissions"/>
                <do_if value="$MissionsCompleted ge 20">
                  <unlock_achievement name="WAR_MISSIONS"/>
                </do_if>
                <do_if value="event.param.$failed">
                  <set_value name="$ThreadsFailed" operation="add"/>
                  <do_if value="not event.param.$interrupted">
                    <signal_cue_instantly cue="HOL_VS_PAR_Set_Subscription_Status" param="'cooldown'"/>
                  </do_if>
                </do_if>
                <do_else>
                  <set_value name="$ThreadsCompleted" operation="add"/>
                  <signal_cue cue="CalculateThreads"/>
                </do_else>
              </actions>
            </cue>
            <!--
            ####################
            INTRODUCTION
            ####################-->
            <cue name="HOL_VS_PAR_Player_Requested_Subscription" instantiate="true">
              <conditions>
                <event_cue_signalled/>
              </conditions>
            </cue>
            <cue name="HOL_VS_PAR_Player_Requests_Intro_Abort" instantiate="true">
              <conditions>
                <event_cue_signalled/>
              </conditions>
            </cue>
            <library name="HOL_VS_PAR_Can_Activate_Introduction">
              <actions>
                <!--TODO @Owen other conditions based on if they failed a previous intro mission and need a cooldown-->
                <set_value name="$CanActivateIntro" exact="false"/>
                <do_if value="$Faction.relationto.{faction.player} ge $SubscriptionMinRel">
                  <set_value name="$CanActivateIntro" exact="true"/>
                </do_if>
              </actions>
            </library>
            <cue name="HOL_VS_PAR_Introduction" version="4">
              <conditions>
                <event_cue_signalled/>
                <check_value value="$Faction.isactive"/>
              </conditions>
              <actions>
                <debug_text text="'Starting intro mission handling for ' + $MissionGroup" chance="$DebugChance"/>
                <set_value name="$MissionIntroCue" exact="this"/>
                <signal_cue_instantly cue="HOL_VS_PAR_Set_Subscription_Status" param="'unsubscribed'"/>
              </actions>
              <patch sinceversion="2" state="complete">
                <do_if value="$SubscriptionStatus == 'cooldown'">
                  <debug_text text="'Fixing war mission which is still of state cooldown when it should be unsubscribed'" filter="savegame"/>
                  <signal_cue_instantly cue="HOL_VS_PAR_Set_Subscription_Status" param="'unsubscribed'"/>
                </do_if>
              </patch>
              <patch sinceversion="4" state="waiting">
                <do_if value="$SubscriptionStatus == 'probation'">
                  <debug_text text="'Fixing war mission which is still of state probation when it should be unsubscribed'" filter="savegame"/>
                  <signal_cue_instantly cue="HOL_VS_PAR_Set_Subscription_Status" param="'unsubscribed'"/>
                </do_if>
              </patch>
              <cues>
                <cue name="HOL_VS_PAR_Introduction_Init">
                  <actions>
                    <do_if value="$Faction.relationto.{faction.player} ge $SubscriptionMinRel">
                      <signal_cue cue="HOL_VS_PAR_Introduction_Create_Offer"/>
                    </do_if>
                  </actions>
                </cue>
                <cue name="HOL_VS_PAR_Introduction_Create_Offer">
                  <conditions>
                    <check_any>
                      <check_all>
                        <event_player_relation_changed faction="$Faction"/>
                        <check_value value="event.param2.{1} ge $SubscriptionMinRel"/>
                      </check_all>
                      <event_cue_signalled/>
                    </check_any>
                  </conditions>
                  <actions>
                    <do_if value="not $Mission_Contact.isclass.npc or not $PlacementObject.isoperational">
                      <debug_text text="'Mission contact was not yet created for ' + $MissionGroup + '. Triggering creation now but location may not be near a war front. [Owen]'" filter="error"/>
                      <signal_cue_instantly cue="$ContactCreatorCue"/>
                    </do_if>
                    <do_if value="$Mission_Contact.isclass.npc and $PlacementObject.isoperational">
                      <debug_text text="'Player has passed the conditions for the intro mission to be available for group: ' + $MissionGroup" chance="$DebugChance"/>
                      <create_offer cue="$MissionIntroCue" actor="$Mission_Contact" type="missiontype.fight" name="readtext.{30214}.{1}" description="readtext.{30214}.{2}" difficulty="level.trivial" faction="$Faction" group="$MissionGroup">
                        <briefing>
                          <objective step="1" action="objective.talkto" object="$Mission_Contact"/>
                        </briefing>
                      </create_offer>
                      <!-- Guild Notification Mail -->
                      <run_actions ref="md.X4Ep1_War_Subscriptions.SendSubscriptionMail">
                        <param name="Page" value="30214"/>
                        <param name="Faction" value="$Faction"/>
                        <param name="Mission_Contact" value="$Mission_Contact"/>
                      </run_actions>
                    </do_if>
                    <do_else>
                      <debug_text text="'Unable to start intro mission due to missing mission client [Owen]'" filter="error"/>
                      <reset_cue cue="$MissionIntroCue"/>
                    </do_else>
                  </actions>
                  <cues>
                    <cue name="HOL_VS_PAR_Introduction_Offer_Accepted">
                      <conditions>
                        <event_object_signalled object="$Mission_Contact" param="'accept'"/>
                      </conditions>
                      <actions>
                        <create_mission cue="$MissionIntroCue" offercue="$MissionIntroCue"/>
                        <update_mission cue="$MissionIntroCue">
                          <briefing>
                            <objective step="1" action="objective.talkto" text="$Mission_Contact.knownname"/>
                          </briefing>
                        </update_mission>
                        <remove_offer cue="$MissionIntroCue"/>
                        <signal_cue_instantly cue="md.GenericMissions.DisconnectedActorObjectiveLibrary" param="table[                                               $actor = $Mission_Contact,                                               $object = $PlacementObject,                                               $missioncue = $MissionIntroCue,                                               $cancelcue = HOL_VS_PAR_Cancel_Intro_Talkto,                                               $libfailedcue = HOL_VS_PAR_Intro_Abort,                                               $objective = objective.talkto,                                               $debugchance = $DebugChance]"/>
                      </actions>
                    </cue>
                  </cues>
                </cue>
                <cue name="HOL_VS_PAR_Intro_Abort" version="2">
                  <conditions>
                    <check_any>
                      <event_mission_aborted cue="HOL_VS_PAR_Introduction"/>
                      <event_cue_signalled cue="HOL_VS_PAR_Player_Requests_Intro_Abort"/>
                      <event_cue_signalled/>
                      <event_object_destroyed object="$Mission_Contact"/>
                      <event_object_destroyed object="$PlacementObject"/>
                      <event_faction_deactivated faction="$Faction"/>
                    </check_any>
                  </conditions>
                  <actions>
                    <debug_text text="'Aborting due to ' + event.name" chance="$DebugChance"/>
                    <do_if value="$MissionIntroCue.hasmission">
                      <remove_mission cue="$MissionIntroCue" type="aborted"/>
                    </do_if>
                    <signal_cue_instantly cue="HOL_VS_PAR_Set_Subscription_Status" param="'unsubscribed'"/>
                    <reset_cue cue="HOL_VS_PAR_Introduction"/>
                  </actions>
                  <patch sinceversion="2" state="waiting">
                    <do_if value="HOL_VS_PAR_Introduction_Offer_Accepted.state == cuestate.complete and (not $TestShip? or not $TestShip.isoperational)">
                      <set_value name="$Patch_CheckLibraryInstance" exact="true"/>
                    </do_if>
                  </patch>
                </cue>
                <cue name="HOL_VS_PAR_Patch_Check_Talkto_Lib" onfail="cancel">
                  <conditions>
                    <check_value value="@$Patch_CheckLibraryInstance"/>
                  </conditions>
                  <actions>
                    <do_if value="not @md.GenericMissions.DisconnectedActorObjectiveLibrary.$Patch_ActiveMissionCues.indexof.{$MissionIntroCue}">
                      <debug_text text="'Talkto helper instance no longer exists for ' + $MissionIntroCue + ' - aborting intro mission'" filter="savegame"/>
                      <signal_cue cue="HOL_VS_PAR_Intro_Abort"/>
                    </do_if>
                    <remove_value name="$Patch_CheckLibraryInstance"/>
                  </actions>
                </cue>
                <cue name="HOL_VS_PAR_Cancel_Intro_Talkto" instantiate="true">
                  <conditions>
                    <event_cue_signalled/>
                  </conditions>
                </cue>
                <cue name="HOL_VS_PAR_Start_Intro_Mission" version="2">
                  <conditions>
                    <event_cue_signalled cue="HOL_VS_PAR_Player_Requested_Subscription"/>
                  </conditions>
                  <actions>
                    <signal_cue cue="HOL_VS_PAR_Cancel_Intro_Talkto"/>
                    <signal_cue_instantly cue="HOL_VS_PAR_Set_Subscription_Status" param="'probation'"/>
                    <set_value name="$IntroMissionSuccessful" exact="false"/>
                    <do_if value="$MissionIntroCue.hasmissionoffer">
                      <remove_offer cue="$MissionIntroCue"/>
                    </do_if>
                    <do_if value="not $MissionIntroCue.hasmission">
                      <create_mission cue="$MissionIntroCue" type="missiontype.fight" name="readtext.{30214}.{1}" description="readtext.{30214}.{2}" difficulty="level.trivial" faction="$Faction" group="$MissionGroup"/>
                    </do_if>
                    <create_ship name="$TestShip" sector="player.sector">
                      <select faction="faction.paranid" size="class.ship_s"/>
                      <owner exact="faction.paranid"/>
                      <pilot actor="null"/>
                      <safepos object="player.entity" min="30km" max="40km"/>
                    </create_ship>
                    <update_mission cue="$MissionIntroCue">
                      <briefing>
                        <objective step="1" action="objective.destroy" object="$TestShip"/>
                      </briefing>
                    </update_mission>
                    <set_objective cue="$MissionIntroCue" action="objective.destroy" object="$TestShip"/>
                  </actions>
                  <patch sinceversion="2" state="complete">
                    <do_if value="$TestShip.isoperational">
                      <set_value name="$TestShip_Pos" exact="$TestShip.position"/>
                      <do_if value="[$TestShip_Pos.x, $TestShip_Pos.y, $TestShip_Pos.z].min lt 50km or [$TestShip_Pos.x, $TestShip_Pos.y, $TestShip_Pos.z].max gt 50km">
                        <debug_text text="'Warping ship ' + $TestShip + ' ' + $TestShip.knownname + ' to valid position'" filter="savegame"/>
                        <warp object="$TestShip" sector="$TestShip.sector">
                          <position object="$TestShip" space="$TestShip.sector"/>
                        </warp>
                      </do_if>
                      <remove_value name="$TestShip_Pos"/>
                    </do_if>
                  </patch>
                  <cues>
                    <cue name="HOL_VS_PAR_Start_Intro_Mission_Successful">
                      <conditions>
                        <event_object_destroyed object="$TestShip"/>
                      </conditions>
                      <actions>
                        <update_mission cue="$MissionIntroCue">
                          <briefing>
                            <objective step="2" action="objective.talkto" object="$Mission_Contact"/>
                          </briefing>
                        </update_mission>
                        <set_value name="$IntroMissionSuccessful" exact="true"/>
                        <signal_cue_instantly cue="md.GenericMissions.DisconnectedActorObjectiveLibrary" param="table[                                               $actor = $Mission_Contact,                                               $object = $PlacementObject,                                               $missioncue = $MissionIntroCue,                                               $cancelcue = HOL_VS_PAR_Start_Intro_Mission_Remove_Mission,                                               $libfailedcue = HOL_VS_PAR_Intro_Abort,                                               $objective = objective.talkto,                                               $step = 2,                                               $debugchance = $DebugChance]"/>
                      </actions>
                    </cue>
                    <cue name="HOL_VS_PAR_Start_Intro_Mission_Remove_Mission">
                      <conditions>
                        <event_cue_signalled/>
                      </conditions>
                      <actions>
                        <remove_mission cue="$MissionIntroCue" type="completed"/>
                        <reset_cue cue="HOL_VS_PAR_Introduction"/>
                      </actions>
                    </cue>
                    <cue name="HOL_VS_PAR_Start_Intro_Mission_End">
                      <conditions>
                        <event_conversation_started actor="$Mission_Contact"/>
                        <check_value value="$IntroMissionSuccessful"/>
                      </conditions>
                      <actions>
                        <allow_conversation_escape enabled="false"/>
                        <signal_cue cue="HOL_VS_PAR_Start_Intro_Mission_Remove_Mission"/>
                      </actions>
                    </cue>
                  </cues>
                </cue>
              </cues>
            </cue>
            <!--
            ####################
            THREADS
            ####################-->
            <cue name="HOL_VS_PAR_Reinforce_Defence">
              <cues>
                <cue name="HOL_VS_PAR_Reinforce_Defence_Register" version="3">
                  <actions>
                    <!--Holy Order vs Paranid - Reinforce Defence-->
                    <set_value name="$ThreadID" exact="'$hol_vs_par_reinforce_defence'"/>
                    <set_value name="$Thread" exact="table[                            $ID = $ThreadID,                            $Faction = $Faction,                            $EnemyFaction = $EnemyFaction,                            $MissionGroup = $MissionGroup,                            $ThreadConditionLibs = [Situation__Cold_War, Situation__Contention, Situation__Defence_Prep],                            $ThreadType = 'sequential',                            $MissionType = missiontype.protect,                            $Difficulty = level.medium,                            $SubMissionLib = HOL_VS_PAR_Reinforce_Defence_Get_Submissions,                            $NameLib = HOL_VS_PAR_Reinforce_Defence_Construct_Name,                            $DescriptionLib = HOL_VS_PAR_Reinforce_Defence_Construct_Description,                            $RewardLib = HOL_VS_PAR_Reinforce_Defence_Construct_Reward,                            $MinMissions = 4,                            $MaxMissions = 5,                            $ThreadAbortRelation = -0.00064]"/>
                    <assert value="not $ManagerCue.$ThreadDefinitions.{$ThreadID}?" text="'Thread definition ' + $ThreadID + ' already exists in this table [Owen]'"/>
                    <set_value name="$ManagerCue.$ThreadDefinitions.{$ThreadID}" exact="$Thread"/>
                  </actions>
                  <patch sinceversion="3" state="complete">
                    <set_value name="$ManagerCue.$ThreadDefinitions.$hol_vs_par_reinforce_defence.$RewardLib" exact="HOL_VS_PAR_Reinforce_Defence_Construct_Reward"/>
                  </patch>
                </cue>
                <!--Called from CalculateThreads. Result saved to $New_Thread. Namespace is not this parent.-->
                <library name="HOL_VS_PAR_Reinforce_Defence_Get_Submissions">
                  <actions>
                    <set_value name="$Submissions" exact="table[]"/>
                    <set_value name="$Submissions.$deploy_lasertowers" exact="table[$Cue = md.X4Ep1_War_Subscriptions.DeployInPlace__Standard,    $MissionType = missiontype.drop,  $Page = 30214, $TextOffset = [101000], $Sequence = -1 ]"/>
                    <set_value name="$Submissions.$deploy_mines" exact="table[$Cue = md.X4Ep1_War_Subscriptions.DeployInPlace__Standard,    $MissionType = missiontype.drop,  $Page = 30214, $TextOffset = [101100, 101200], $Sequence = -1 ]"/>
                    <set_value name="$Submissions.$achieve_coverage__host_sector" exact="table[$Cue = md.X4Ep1_War_Subscriptions.Achieve_Coverage__Standard, $MissionType = missiontype.drop,  $Page = 30214, $TextOffset = [102000], $Sequence = -1 ]"/>
                    <set_value name="$Submissions.$repair__damagedship" exact="table[$Cue = md.X4Ep1_War_Subscriptions.RepairObject__Standard,     $MissionType = missiontype.repair,  $Page = 30214, $TextOffset = [103000], $Sequence = -1 ]"/>
                    <set_value name="$Submissions.$taxi__specialist" exact="table[$Cue = md.X4Ep1_War_Subscriptions.Passenger_Transport__Standard, $MissionType = missiontype.transport, $Page = 30214, $TextOffset = [104000], $Sequence = 1 ]"/>
                    <set_value name="$Submissions.$deliver__crew" exact="table[$Cue = md.X4Ep1_War_Subscriptions.Get_Exact_Crew__Standard, $MissionType = missiontype.deliver, $Page = 30214, $TextOffset = [110000, 110100, 110200], $Sequence = -1 ]"/>
                    <set_value name="$New_Thread.$Submissions" exact="$Submissions"/>
                  </actions>
                </library>
                <!--Called from CalculateThreads. Result saved to $New_Thread. Namespace is not this parent.-->
                <library name="HOL_VS_PAR_Reinforce_Defence_Construct_Name">
                  <actions>
                    <do_any>
                      <set_value name="this.$Name" exact="{30214, 3000}"/>
                      <set_value name="this.$Name" exact="{30214, 3001}"/>
                      <set_value name="this.$Name" exact="{30214, 3002}"/>
                    </do_any>
                  </actions>
                </library>
                <!--Called from CalculateThreads where several values are set to help decide the briefing text. Result saved to $New_Thread. Namespace is not this parent.-->
                <library name="HOL_VS_PAR_Reinforce_Defence_Construct_Description">
                  <actions>
                    <do_if value="$ThreadMood == 'negative'">
                      <do_any>
                        <set_value name="this.$Description" exact="{30214, 3101}"/>
                        <set_value name="this.$Description" exact="{30214, 3102}"/>
                      </do_any>
                      <set_value name="this.$Description" operation="add" exact="' ' + {30214, 3111}"/>
                      <do_any>
                        <set_value name="this.$Description" operation="add" exact="'\n' + {30214, 3121}"/>
                        <set_value name="this.$Description" operation="add" exact="'\n' + {30214, 3122}"/>
                      </do_any>
                    </do_if>
                    <do_elseif value="$ThreadMood == 'positive'">
                      <do_any>
                        <set_value name="this.$Description" exact="{30214, 3201}"/>
                        <set_value name="this.$Description" exact="{30214, 3202}"/>
                      </do_any>
                      <set_value name="this.$Description" operation="add" exact="' ' + {30214, 3211}"/>
                      <set_value name="this.$Description" operation="add" exact="'\n' + {30214, 3221}"/>
                    </do_elseif>
                  </actions>
                </library>
                <library name="HOL_VS_PAR_Reinforce_Defence_Construct_Reward">
                  <actions>
                    <do_any>
                      <set_value name="this.$RewardObject" exact="[ware.paintmod_0078]" weight="15" comment="special hol vs par subscription paint"/>
                      <set_value name="this.$RewardObject" exact="[ware.paintmod_0010]" weight="15" comment="basic holy order faction paint"/>
                      <set_value name="this.$RewardObject" exact="[[ware.modpart_tuningsoftware, ware.modpart_shieldgeneratorcoil_t1, ware.modpart_shieldgeneratorcoil_t2].random]" weight="15" comment="modpart"/>
                      <set_value name="this.$RewardObject" exact="[ware.modpart_tuningsoftware, [ware.modpart_shieldgeneratorcoil_t1, ware.modpart_shieldgeneratorcoil_t2].random]" weight="15" comment="complete mod"/>
                      <set_value name="this.$RewardObject" exact="[ware.modpart_shieldgeneratorcoil_t3]" weight="5" comment="rare modpart"/>
                      <set_value name="this.$RewardObject" exact="[[ware.inv_seminar_piloting_2, ware.inv_seminar_piloting_2, ware.inv_seminar_management_2].random]" weight="15"/>
                      <set_value name="this.$RewardObject" exact="[[ware.inv_seminar_piloting_3, ware.inv_seminar_piloting_3, ware.inv_seminar_management_3].random]" weight="4"/>
                      <set_value name="this.$RewardObject" exact="[[ware.inv_seminar_piloting_4, ware.inv_seminar_management_4].random]" weight="1"/>
                    </do_any>
                    <run_actions ref="md.LIB_Generic.GenerateRewardText" result="this.$RewardText">
                      <param name="RewardObject" value="this.$RewardObject"/>
                    </run_actions>
                  </actions>
                </library>
              </cues>
            </cue>
            <cue name="HOL_VS_PAR_Construct_Defence">
              <cues>
                <cue name="HOL_VS_PAR_Construct_Defence_Register" version="3">
                  <actions>
                    <!--Holy Order vs Paranid - Construct Defence-->
                    <set_value name="$ThreadID" exact="'$hol_vs_par_construct_defence'"/>
                    <set_value name="$Thread" exact="table[                            $ID = $ThreadID,                            $Faction = $Faction,                            $EnemyFaction = $EnemyFaction,                            $MissionGroup = $MissionGroup,                            $ThreadConditionLibs = [Situation__Cold_War, Situation__Contention, Situation__Defence_Prep, Situation__Pushback],                            $ThreadType = 'sequential',                            $MissionType = missiontype.build,                            $Difficulty = level.hard,                            $SubMissionLib = HOL_VS_PAR_Construct_Defence_Get_Submissions,                            $NameLib = HOL_VS_PAR_Construct_Defence_Construct_Name,                            $DescriptionLib = HOL_VS_PAR_Construct_Defence_Construct_Description,                            $RewardLib = HOL_VS_PAR_Construct_Defence_Construct_Reward,                            $MinMissions = 1,                            $MaxMissions = 2,                            $ThreadAbortRelation = -0.00064]"/>
                    <assert value="not $ManagerCue.$ThreadDefinitions.{$ThreadID}?" text="'Thread definition ' + $ThreadID + ' already exists in this table [Owen]'"/>
                    <set_value name="$ManagerCue.$ThreadDefinitions.{$ThreadID}" exact="$Thread"/>
                  </actions>
                  <patch sinceversion="2">
                    <append_to_list name="$Thread.$ThreadConditionLibs" exact="Situation__Pushback"/>
                  </patch>
                  <patch sinceversion="3" state="complete">
                    <set_value name="$ManagerCue.$ThreadDefinitions.$hol_vs_par_construct_defence.$RewardLib" exact="HOL_VS_PAR_Construct_Defence_Construct_Reward"/>
                  </patch>
                </cue>
                <!--Called from CalculateThreads. Result saved to $New_Thread. Namespace is not this parent.-->
                <library name="HOL_VS_PAR_Construct_Defence_Get_Submissions">
                  <actions>
                    <set_value name="$Submissions" exact="table[]"/>
                    <set_value name="$Submissions.$build__defencestation" exact="table[$Cue = md.X4Ep1_War_Subscriptions.Build_Station__Standard, $MissionType = missiontype.build, $Page = 30214, $TextOffset = [105000], $Sequence = -1 ]"/>
                    <set_value name="$Submissions.$build__fleet" exact="table[$Cue = md.X4Ep1_War_Subscriptions.Get_Exact_Fleet__Standard, $MissionType = missiontype.build, $Page = 30214, $TextOffset = [120000], $Sequence = -1 ]"/>
                    <set_value name="$New_Thread.$Submissions" exact="$Submissions"/>
                  </actions>
                </library>
                <!--Called from CalculateThreads. Result saved to $New_Thread. Namespace is not this parent.-->
                <library name="HOL_VS_PAR_Construct_Defence_Construct_Name">
                  <actions>
                    <do_any>
                      <set_value name="this.$Name" exact="{30214, 4000}"/>
                    </do_any>
                  </actions>
                </library>
                <!--Called from CalculateThreads where several values are set to help decide the briefing text. Result saved to $New_Thread. Namespace is not this parent.-->
                <library name="HOL_VS_PAR_Construct_Defence_Construct_Description">
                  <actions>
                    <do_if value="$ThreadMood == 'negative'">
                      <do_any>
                        <set_value name="this.$Description" exact="{30214, 4101}"/>
                        <set_value name="this.$Description" exact="{30214, 4102}"/>
                      </do_any>
                      <set_value name="this.$Description" operation="add" exact="' ' + {30214, 4111}"/>
                      <do_any>
                        <set_value name="this.$Description" operation="add" exact="'\n' + {30214, 4121}"/>
                        <set_value name="this.$Description" operation="add" exact="'\n' + {30214, 4122}"/>
                      </do_any>
                    </do_if>
                    <do_elseif value="$ThreadMood == 'positive'">
                      <do_any>
                        <set_value name="this.$Description" exact="{30214, 4201}"/>
                        <set_value name="this.$Description" exact="{30214, 4202}"/>
                      </do_any>
                      <set_value name="this.$Description" operation="add" exact="' ' + {30214, 4211}"/>
                      <set_value name="this.$Description" operation="add" exact="'\n' + {30214, 4221}"/>
                    </do_elseif>
                  </actions>
                </library>
                <library name="HOL_VS_PAR_Construct_Defence_Construct_Reward">
                  <actions>
                    <do_if value="true" chance="70">
                      <!-- mod(part) reward-->
                      <do_any>
                        <set_value name="this.$RewardObject" exact="[ware.paintmod_0078]" weight="15" comment="special hol vs par subscription paint"/>
                        <set_value name="this.$RewardObject" exact="[ware.paintmod_0010]" weight="15" comment="basic holy order faction paint"/>
                        <set_value name="this.$RewardObject" exact="[[ware.modpart_tuningsoftware, ware.modpart_shieldgeneratorcoil_t1, ware.modpart_shieldgeneratorcoil_t2].random]" weight="15" comment="modpart"/>
                        <set_value name="this.$RewardObject" exact="[ware.modpart_tuningsoftware, [ware.modpart_shieldgeneratorcoil_t1, ware.modpart_shieldgeneratorcoil_t2].random]" weight="15" comment="complete mod"/>
                        <set_value name="this.$RewardObject" exact="[ware.modpart_shieldgeneratorcoil_t3]" weight="5" comment="rare modpart"/>
                        <set_value name="this.$RewardObject" exact="[[ware.inv_seminar_piloting_2, ware.inv_seminar_piloting_2, ware.inv_seminar_management_2].random]" weight="15"/>
                        <set_value name="this.$RewardObject" exact="[[ware.inv_seminar_piloting_3, ware.inv_seminar_piloting_3, ware.inv_seminar_management_3].random]" weight="4"/>
                        <set_value name="this.$RewardObject" exact="[[ware.inv_seminar_piloting_4, ware.inv_seminar_management_4].random]" weight="1"/>
                      </do_any>
                    </do_if>
                    <do_else>
                      <!-- setup the ship-reward -->
                      <set_value name="this.$RewardObject" exact="[]"/>
                      <set_value name="$shipcargo" exact="[[2500, ware.nividium]]"/>
                      <set_value name="$Faction" exact="faction.holyorder"/>
                      <run_actions ref="md.LIB_Generic.FindShipMacroForCargo" result="$shipmacro">
                        <param name="shipcargo" value="$shipcargo"/>
                        <param name="Faction" value="$Faction"/>
                      </run_actions>
                      <run_actions ref="md.LIB_Generic.FindNearestStationForFaction" result="$SuitableStation">
                        <param name="Faction" value="$Faction"/>
                      </run_actions>
                      <do_if value="$shipmacro and $SuitableStation">
                        <generate_loadout result="$shiploadout" macro="$shipmacro" level="[0.3, 0.4, 0.5, 0.6, 0.7].random"/>
                        <set_value name="$MaxCrewCapacity" exact="$shipmacro.people.capacity"/>
                        <set_value name="$RewardShip" exact="table[                             $macro        = $shipmacro,                             $loadout      = $shiploadout,                              $cargo        = $shipcargo,                              $station      = $SuitableStation,                              $pilot        = [faction.holyorder, [tag.pilot], [8,10].random],                             $bulkcrew     = [$MaxCrewCapacity, ['paranid_military_crew', 'paranid_freighter_crew'].random, 100],                              $mods         = [ware.mod_shield_capacity_01_mk3, ware.mod_engine_travelthrust_02_mk2],                             $paintmod     = [ware.paintmod_0072].random,                         ]"/>
                        <append_to_list name="this.$RewardObject" exact="$RewardShip"/>
                      </do_if>
                    </do_else>
                    <run_actions ref="md.LIB_Generic.GenerateRewardText" result="this.$RewardText">
                      <param name="RewardObject" value="this.$RewardObject"/>
                    </run_actions>
                  </actions>
                </library>
              </cues>
            </cue>
            <cue name="HOL_VS_PAR_Secure_Resources">
              <cues>
                <cue name="HOL_VS_PAR_Secure_Resources_Register" version="3">
                  <actions>
                    <!--Holy Order vs Paranid - Secure Resources-->
                    <set_value name="$ThreadID" exact="'$hol_vs_par_secure_resources'"/>
                    <set_value name="$Thread" exact="table[                            $ID = $ThreadID,                            $Faction = $Faction,                            $EnemyFaction = $EnemyFaction,                            $MissionGroup = $MissionGroup,                            $ThreadConditionLibs = [Situation__Cold_War, Situation__Contention, Situation__Defence_Prep, Situation__Invasion_Prep],                            $ThreadType = 'sequential',                            $MissionType = missiontype.trade,                            $Difficulty = level.medium,                            $SubMissionLib = HOL_VS_PAR_Secure_Resources_Get_Submissions,                            $NameLib = HOL_VS_PAR_Secure_Resources_Construct_Name,                            $DescriptionLib = HOL_VS_PAR_Secure_Resources_Construct_Description,                            $RewardLib = HOL_VS_PAR_Secure_Resources_Construct_Reward,                            $MinMissions = 4,                            $MaxMissions = 5,                            $ThreadAbortRelation = -0.00064]"/>
                    <assert value="not $ManagerCue.$ThreadDefinitions.{$ThreadID}?" text="'Thread definition ' + $ThreadID + ' already exists in this table [Owen]'"/>
                    <set_value name="$ManagerCue.$ThreadDefinitions.{$ThreadID}" exact="$Thread"/>
                  </actions>
                  <patch sinceversion="3" state="complete">
                    <set_value name="$ManagerCue.$ThreadDefinitions.$hol_vs_par_secure_resources.$RewardLib" exact="HOL_VS_PAR_Secure_Resources_Construct_Reward"/>
                  </patch>
                </cue>
                <!--Called from CalculateThreads. Result saved to $New_Thread. Namespace is not this parent.-->
                <library name="HOL_VS_PAR_Secure_Resources_Get_Submissions">
                  <actions>
                    <set_value name="$Submissions" exact="table[]"/>
                    <set_value name="$Submissions.$large_supply__food" exact="table[$Cue = md.X4Ep1_War_Subscriptions.Large_Supply__Standard,     $MissionType = missiontype.trade, $Page = 30214, $TextOffset = [100000], $Sequence = -1 ]"/>
                    <set_value name="$Submissions.$large_supply__shiptech" exact="table[$Cue = md.X4Ep1_War_Subscriptions.Large_Supply__Standard,     $MissionType = missiontype.trade, $Page = 30214, $TextOffset = [100100], $Sequence = -1 ]"/>
                    <set_value name="$Submissions.$deploy_lasertowers_at_resources" exact="table[$Cue = md.X4Ep1_War_Subscriptions.DeployInPlace__Standard,    $MissionType = missiontype.drop,  $Page = 30214, $TextOffset = [101300], $Sequence = -1 ]"/>
                    <set_value name="$Submissions.$find_resources__ores" exact="table[$Cue = md.X4Ep1_War_Subscriptions.Find_Resources__Standard,   $MissionType = missiontype.find,  $Page = 30214, $TextOffset = [106000], $Sequence = -1 ]"/>
                    <set_value name="$Submissions.$supply_station" exact="table[$Cue = md.X4Ep1_War_Subscriptions.Supply_Factory__Standard,   $MissionType = missiontype.find,  $Page = 30214, $TextOffset = [130000], $Sequence = -1 ]"/>
                    <set_value name="$New_Thread.$Submissions" exact="$Submissions"/>
                  </actions>
                </library>
                <!--Called from CalculateThreads. Result saved to $New_Thread. Namespace is not this parent.-->
                <library name="HOL_VS_PAR_Secure_Resources_Construct_Name">
                  <actions>
                    <do_any>
                      <set_value name="this.$Name" exact="{30214, 5000}"/>
                      <set_value name="this.$Name" exact="{30214, 5001}"/>
                    </do_any>
                  </actions>
                </library>
                <!--Called from CalculateThreads where several values are set to help decide the briefing text. Result saved to $New_Thread. Namespace is not this parent.-->
                <library name="HOL_VS_PAR_Secure_Resources_Construct_Description">
                  <actions>
                    <do_if value="$ThreadMood == 'negative'">
                      <do_any>
                        <set_value name="this.$Description" exact="{30214, 5101}"/>
                        <set_value name="this.$Description" exact="{30214, 5102}"/>
                      </do_any>
                      <set_value name="this.$Description" operation="add" exact="' ' + {30214, 5111}"/>
                      <do_any>
                        <set_value name="this.$Description" operation="add" exact="'\n' + {30214, 5121}"/>
                        <set_value name="this.$Description" operation="add" exact="'\n' + {30214, 5122}"/>
                      </do_any>
                    </do_if>
                    <do_elseif value="$ThreadMood == 'positive'">
                      <do_any>
                        <set_value name="this.$Description" exact="{30214, 5201}"/>
                        <set_value name="this.$Description" exact="{30214, 5202}"/>
                      </do_any>
                      <set_value name="this.$Description" operation="add" exact="' ' + {30214, 5211}"/>
                      <set_value name="this.$Description" operation="add" exact="'\n' + {30214, 5221}"/>
                    </do_elseif>
                  </actions>
                </library>
                <library name="HOL_VS_PAR_Secure_Resources_Construct_Reward">
                  <actions>
                    <do_any>
                      <set_value name="this.$RewardObject" exact="[ware.paintmod_0078]" weight="15" comment="special hol vs par subscription paint"/>
                      <set_value name="this.$RewardObject" exact="[ware.paintmod_0010]" weight="15" comment="basic holy order faction paint"/>
                      <set_value name="this.$RewardObject" exact="[[ware.modpart_extendedfuelcontainer, ware.modpart_nividiumoxide, ware.modpart_enginefuelinjector_t1, ware.modpart_enginefuelinjector_t2].random]" weight="15" comment="modpart"/>
                      <set_value name="this.$RewardObject" exact="[ware.modpart_extendedfuelcontainer, ware.modpart_nividiumoxide, [ware.modpart_enginefuelinjector_t1, ware.modpart_enginefuelinjector_t2].random]" weight="15" comment="complete mod"/>
                      <set_value name="this.$RewardObject" exact="[ware.modpart_enginefuelinjector_t3]" weight="5" comment="rare modpart"/>
                      <set_value name="this.$RewardObject" exact="[[ware.inv_seminar_piloting_2, ware.inv_seminar_piloting_2, ware.inv_seminar_management_2].random]" weight="15"/>
                      <set_value name="this.$RewardObject" exact="[[ware.inv_seminar_piloting_3, ware.inv_seminar_piloting_3, ware.inv_seminar_management_3].random]" weight="4"/>
                      <set_value name="this.$RewardObject" exact="[[ware.inv_seminar_piloting_4, ware.inv_seminar_management_4].random]" weight="1"/>
                    </do_any>
                    <run_actions ref="md.LIB_Generic.GenerateRewardText" result="this.$RewardText">
                      <param name="RewardObject" value="this.$RewardObject"/>
                    </run_actions>
                  </actions>
                </library>
              </cues>
            </cue>
            <cue name="HOL_VS_PAR_Preemptive_Offensive">
              <cues>
                <cue name="HOL_VS_PAR_Preemptive_Offensive_Register" version="3">
                  <actions>
                    <!--Holy Order vs Paranid - Preemptive Offensive-->
                    <set_value name="$ThreadID" exact="'$hol_vs_par_preemptive_offensive'"/>
                    <set_value name="$Thread" exact="table[                            $ID = $ThreadID,                            $Faction = $Faction,                            $EnemyFaction = $EnemyFaction,                            $MissionGroup = $MissionGroup,                            $ThreadConditionLibs = [Situation__Cold_War, Situation__Invasion_Prep],                            $ThreadType = 'sequential',                            $MissionType = missiontype.fight,                            $Difficulty = level.hard,                            $SubMissionLib = HOL_VS_PAR_Preemptive_Offensive_Get_Submissions,                            $NameLib = HOL_VS_PAR_Preemptive_Offensive_Construct_Name,                            $DescriptionLib = HOL_VS_PAR_Preemptive_Offensive_Construct_Description,                            $RewardLib = HOL_VS_PAR_Preemptive_Offensive_Construct_Reward,                            $MinMissions = 4,                            $MaxMissions = 6,                            $ThreadAbortRelation = -0.00064]"/>
                    <assert value="not $ManagerCue.$ThreadDefinitions.{$ThreadID}?" text="'Thread definition ' + $ThreadID + ' already exists in this table [Owen]'"/>
                    <set_value name="$ManagerCue.$ThreadDefinitions.{$ThreadID}" exact="$Thread"/>
                  </actions>
                  <patch sinceversion="3" state="complete">
                    <set_value name="$ManagerCue.$ThreadDefinitions.$hol_vs_par_preemptive_offensive.$RewardLib" exact="HOL_VS_PAR_Preemptive_Offensive_Construct_Reward"/>
                  </patch>
                </cue>
                <!--Called from CalculateThreads. Result saved to $New_Thread. Namespace is not this parent.-->
                <library name="HOL_VS_PAR_Preemptive_Offensive_Get_Submissions">
                  <actions>
                    <set_value name="$Submissions" exact="table[]"/>
                    <set_value name="$Submissions.$assassination__informant" exact="table[$Cue = md.X4Ep1_War_Subscriptions.Assassinate__Standard, $MissionType = missiontype.kill,  $Page = 30214, $TextOffset = [107000, 107100], $Sequence = -1 ]"/>
                    <set_value name="$Submissions.$board_ship" exact="table[$Cue = md.X4Ep1_War_Subscriptions.BoardShip__Standard,   $MissionType = missiontype.board, $Page = 30214, $TextOffset = [108000], $Sequence = -1 ]"/>
                    <set_value name="$Submissions.$destroy_rare_ship" exact="table[$Cue = md.X4Ep1_War_Subscriptions.DestroyRarelyOnSight__Standard,   $MissionType = missiontype.destroy, $Page = 30214, $TextOffset = [140000], $Sequence = -1 ]"/>
                    <set_value name="$Submissions.$destroy_objects_lasertowers" exact="table[$Cue = md.X4Ep1_War_Subscriptions.Destroy_Objects__Clear_Explosives, $MissionType = missiontype.destroy, $Page = 30214, $TextOffset = [161000, 161100, 161200], $Sequence = -1 ]"/>
                    <set_value name="$Submissions.$destroy_station_turrets" exact="table[$Cue = md.X4Ep1_War_Subscriptions.DestroyStation__Standard,   $MissionType = missiontype.destroy, $Page = 30214, $TextOffset = [180000], $Sequence = -1 ]"/>
                    <!--TODO @Owen
                    - destroy mining ships / other vulnerable ships
                    - mine resource areas
                    - mass traffic destruction
                    - rescue an allied ship behind enemy lines?-->
                    <set_value name="$New_Thread.$Submissions" exact="$Submissions"/>
                  </actions>
                </library>
                <!--Called from CalculateThreads. Result saved to $New_Thread. Namespace is not this parent.-->
                <library name="HOL_VS_PAR_Preemptive_Offensive_Construct_Name">
                  <actions>
                    <do_any>
                      <set_value name="this.$Name" exact="{30214, 6000}"/>
                    </do_any>
                  </actions>
                </library>
                <!--Called from CalculateThreads where several values are set to help decide the briefing text. Result saved to $New_Thread. Namespace is not this parent.-->
                <library name="HOL_VS_PAR_Preemptive_Offensive_Construct_Description">
                  <actions>
                    <do_if value="$ThreadMood == 'negative'">
                      <do_any>
                        <set_value name="this.$Description" exact="{30214, 6101}"/>
                        <set_value name="this.$Description" exact="{30214, 6102}"/>
                      </do_any>
                      <set_value name="this.$Description" operation="add" exact="' ' + {30214, 6111}"/>
                      <do_any>
                        <set_value name="this.$Description" operation="add" exact="'\n' + {30214, 6121}"/>
                        <set_value name="this.$Description" operation="add" exact="'\n' + {30214, 6122}"/>
                      </do_any>
                    </do_if>
                    <do_elseif value="$ThreadMood == 'positive'">
                      <do_any>
                        <set_value name="this.$Description" exact="{30214, 6201}"/>
                        <set_value name="this.$Description" exact="{30214, 6202}"/>
                      </do_any>
                      <set_value name="this.$Description" operation="add" exact="' ' + {30214, 6211}"/>
                      <set_value name="this.$Description" operation="add" exact="'\n' + {30214, 6221}"/>
                    </do_elseif>
                  </actions>
                </library>
                <library name="HOL_VS_PAR_Preemptive_Offensive_Construct_Reward">
                  <actions>
                    <do_any>
                      <set_value name="this.$RewardObject" exact="[ware.paintmod_0078]" weight="15" comment="special hol vs par subscription paint"/>
                      <set_value name="this.$RewardObject" exact="[ware.paintmod_0010]" weight="15" comment="basic holy order faction paint"/>
                      <set_value name="this.$RewardObject" exact="[[ware.modpart_highenergycatalyst, ware.modpart_tuningsoftware, ware.modpart_weaponchamber_t1, ware.modpart_weaponchamber_t2].random]" weight="15" comment="modpart"/>
                      <set_value name="this.$RewardObject" exact="[ware.modpart_highenergycatalyst, ware.modpart_tuningsoftware, [ware.modpart_weaponchamber_t1, ware.modpart_weaponchamber_t2].random]" weight="15" comment="complete mod"/>
                      <set_value name="this.$RewardObject" exact="[ware.modpart_weaponchamber_t3]" weight="5" comment="rare modpart"/>
                      <set_value name="this.$RewardObject" exact="[[ware.inv_seminar_piloting_2, ware.inv_seminar_piloting_2, ware.inv_seminar_management_2].random]" weight="15"/>
                      <set_value name="this.$RewardObject" exact="[[ware.inv_seminar_piloting_3, ware.inv_seminar_piloting_3, ware.inv_seminar_management_3].random]" weight="4"/>
                      <set_value name="this.$RewardObject" exact="[[ware.inv_seminar_piloting_4, ware.inv_seminar_management_4].random]" weight="1"/>
                    </do_any>
                    <run_actions ref="md.LIB_Generic.GenerateRewardText" result="this.$RewardText">
                      <param name="RewardObject" value="this.$RewardObject"/>
                    </run_actions>
                  </actions>
                </library>
              </cues>
            </cue>
            <cue name="HOL_VS_PAR_Station_Offensive">
              <cues>
                <cue name="HOL_VS_PAR_Station_Offensive_Register">
                  <actions>
                    <!--Argon Vs Xenon - Station Offensive-->
                    <set_value name="$ThreadID" exact="'$hol_vs_par_station_offensive'"/>
                    <set_value name="$Thread" exact="table[                            $ID = $ThreadID,                            $Faction = $Faction,                            $EnemyFaction = $EnemyFaction,                            $MissionGroup = $MissionGroup,                            $ThreadConditionLibs = [Situation__Invasion_Prep, Situation__Invading, Situation__Pushback],                            $ThreadType = 'sequential',                            $MissionType = missiontype.destroy,                            $Difficulty = level.veryhard,                            $SubMissionLib = HOL_VS_PAR_Station_Offensive_Get_Submissions,                            $NameLib = HOL_VS_PAR_Station_Offensive_Construct_Name,                            $DescriptionLib = HOL_VS_PAR_Station_Offensive_Construct_Description,                            $RewardLib = HOL_VS_PAR_Station_Offensive_Construct_Reward,                            $MinMissions = 1,                            $MaxMissions = 1,                            $ThreadAbortRelation = -0.00064]"/>
                    <assert value="not $ManagerCue.$ThreadDefinitions.{$ThreadID}?" text="'Thread definition ' + $ThreadID + ' already exists in this table [Owen]'"/>
                    <set_value name="$ManagerCue.$ThreadDefinitions.{$ThreadID}" exact="$Thread"/>
                  </actions>
                </cue>
                <!--Called from CalculateThreads. Result saved to $New_Thread. Namespace is not this parent.-->
                <library name="HOL_VS_PAR_Station_Offensive_Get_Submissions">
                  <actions>
                    <set_value name="$Submissions" exact="table[]"/>
                    <set_value name="$Submissions.$destroy_station" exact="table[$Cue = md.X4Ep1_War_Subscriptions.DestroyStation__Standard,   $MissionType = missiontype.destroy, $Page = 30214, $TextOffset = [170000], $Sequence = -1 ]"/>
                    <set_value name="$New_Thread.$Submissions" exact="$Submissions"/>
                  </actions>
                </library>
                <!--Called from CalculateThreads. Result saved to $New_Thread. Namespace is not this parent.-->
                <library name="HOL_VS_PAR_Station_Offensive_Construct_Name">
                  <actions>
                    <do_any>
                      <set_value name="this.$Name" exact="{30214, 9000}"/>
                    </do_any>
                  </actions>
                </library>
                <!--Called from CalculateThreads where several values are set to help decide the briefing text. Result saved to $New_Thread. Namespace is not this parent.-->
                <library name="HOL_VS_PAR_Station_Offensive_Construct_Description">
                  <actions>
                    <do_if value="$ThreadMood == 'negative'">
                      <do_any>
                        <set_value name="this.$Description" exact="{30214, 9101}"/>
                        <set_value name="this.$Description" exact="{30214, 9102}"/>
                      </do_any>
                      <set_value name="this.$Description" operation="add" exact="' ' + {30214, 9111}"/>
                      <do_any>
                        <set_value name="this.$Description" operation="add" exact="'\n' + {30214, 9121}"/>
                        <set_value name="this.$Description" operation="add" exact="'\n' + {30214, 9122}"/>
                      </do_any>
                    </do_if>
                    <do_elseif value="$ThreadMood == 'positive'">
                      <do_any>
                        <set_value name="this.$Description" exact="{30214, 9201}"/>
                        <set_value name="this.$Description" exact="{30214, 9202}"/>
                      </do_any>
                      <set_value name="this.$Description" operation="add" exact="' ' + {30214, 9211}"/>
                      <set_value name="this.$Description" operation="add" exact="'\n' + {30214, 9221}"/>
                    </do_elseif>
                  </actions>
                </library>
                <library name="HOL_VS_PAR_Station_Offensive_Construct_Reward">
                  <actions>
                    <do_any>
                      <set_value name="this.$RewardObject" exact="[ware.paintmod_0078]" weight="10" comment="special hol vs par subscription paint"/>
                      <set_value name="this.$RewardObject" exact="[ware.paintmod_0010]" weight="10" comment="basic holy order faction paint"/>
                      <set_value name="this.$RewardObject" exact="[[ware.modpart_highenergycatalyst, ware.modpart_tuningsoftware, ware.modpart_weaponchamber_t1, ware.modpart_weaponchamber_t2].random]" weight="5" comment="modpart"/>
                      <set_value name="this.$RewardObject" exact="[ware.modpart_highenergycatalyst, ware.modpart_tuningsoftware, [ware.modpart_weaponchamber_t1, ware.modpart_weaponchamber_t2].random]" weight="10" comment="complete mod"/>
                      <set_value name="this.$RewardObject" exact="[ware.modpart_weaponchamber_t3]" weight="10" comment="rare modpart"/>
                      <set_value name="this.$RewardObject" exact="[[ware.inv_seminar_piloting_3, ware.inv_seminar_piloting_3, ware.inv_seminar_management_3].random]" weight="6"/>
                      <set_value name="this.$RewardObject" exact="[[ware.inv_seminar_piloting_4, ware.inv_seminar_piloting_4, ware.inv_seminar_management_4].random]" weight="4"/>
                    </do_any>
                    <run_actions ref="md.LIB_Generic.GenerateRewardText" result="this.$RewardText">
                      <param name="RewardObject" value="this.$RewardObject"/>
                    </run_actions>
                  </actions>
                </library>
              </cues>
            </cue>
            <cue name="HOL_VS_PAR_Gather_Intel">
              <cues>
                <cue name="HOL_VS_PAR_Preemptive_Gather_Intel" version="3">
                  <actions>
                    <!--Holy Order vs Paranid - Gather Intel-->
                    <set_value name="$ThreadID" exact="'$hol_vs_par_gather_intel'"/>
                    <set_value name="$Thread" exact="table[                            $ID = $ThreadID,                            $Faction = $Faction,                            $EnemyFaction = $EnemyFaction,                            $MissionGroup = $MissionGroup,                            $ThreadConditionLibs = [Situation__Cold_War, Situation__Contention, Situation__Invasion_Prep],                            $ThreadType = 'sequential',                            $MissionType = missiontype.intelligence,                            $Difficulty = level.easy,                            $SubMissionLib = HOL_VS_PAR_Gather_Intel_Get_Submissions,                            $NameLib = HOL_VS_PAR_Gather_Intel_Construct_Name,                            $DescriptionLib = HOL_VS_PAR_Gather_Intel_Construct_Description,                            $RewardLib = HOL_VS_PAR_Gather_Intel_Construct_Reward,                            $MinMissions = 2,                            $MaxMissions = 3,                            $ThreadAbortRelation = -0.00064]"/>
                    <assert value="not $ManagerCue.$ThreadDefinitions.{$ThreadID}?" text="'Thread definition ' + $ThreadID + ' already exists in this table [Owen]'"/>
                    <set_value name="$ManagerCue.$ThreadDefinitions.{$ThreadID}" exact="$Thread"/>
                  </actions>
                  <patch sinceversion="3" state="complete">
                    <set_value name="$ManagerCue.$ThreadDefinitions.$hol_vs_par_gather_intel.$RewardLib" exact="HOL_VS_PAR_Gather_Intel_Construct_Reward"/>
                  </patch>
                </cue>
                <!--Called from CalculateThreads. Result saved to $New_Thread. Namespace is not this parent.-->
                <library name="HOL_VS_PAR_Gather_Intel_Get_Submissions">
                  <actions>
                    <set_value name="$Submissions" exact="table[]"/>
                    <set_value name="$Submissions.$deploy_satellite" exact="table[$Cue = md.X4Ep1_War_Subscriptions.DeployInPlace__Standard,    $MissionType = missiontype.drop,  $Page = 30214, $TextOffset = [101400], $Sequence = -1 ]"/>
                    <set_value name="$Submissions.$achieve_coverage__enemy_sector" exact="table[$Cue = md.X4Ep1_War_Subscriptions.Achieve_Coverage__Standard, $MissionType = missiontype.drop,  $Page = 30214, $TextOffset = [102100], $Sequence = 1 ]"/>
                    <set_value name="$Submissions.$find_resources__enemy_sector" exact="table[$Cue = md.X4Ep1_War_Subscriptions.Find_Resources__Standard,   $MissionType = missiontype.find,  $Page = 30214, $TextOffset = [106100], $Sequence = -1 ]"/>
                    <set_value name="$Submissions.$scan__ship" exact="table[$Cue = md.X4Ep1_War_Subscriptions.Scan__Standard,             $MissionType = missiontype.find,  $Page = 30214, $TextOffset = [150000], $Sequence = -1 ]"/>
                    <set_value name="$Submissions.$scan__station" exact="table[$Cue = md.X4Ep1_War_Subscriptions.Scan__Standard,             $MissionType = missiontype.find,  $Page = 30214, $TextOffset = [150100], $Sequence = -1 ]"/>
                    <set_value name="$Submissions.$scan__module" exact="table[$Cue = md.X4Ep1_War_Subscriptions.Scan__Standard,             $MissionType = missiontype.find,  $Page = 30214, $TextOffset = [150200], $Sequence = -1 ]"/>
                    <set_value name="$Submissions.$scan__for_ware" exact="table[$Cue = md.X4Ep1_War_Subscriptions.Scan__Standard,             $MissionType = missiontype.find,  $Page = 30214, $TextOffset = [150300, 150700, 150800], $Sequence = -1 ]"/>
                    <!--<set_value name="$Submissions.$scan__for_inventory"
                                 exact="table[$Cue = md.X4Ep1_War_Subscriptions.Scan__Standard,             $MissionType = missiontype.find,  $Page = 30214, $TextOffset = [150400], $Sequence = -1 ]"/>-->
                    <!--$scan__for_entity currently disabled as it's quite a chore-->
                    <!--<set_value name="$Submissions.$scan__for_entity"
                                 exact="table[$Cue = md.X4Ep1_War_Subscriptions.Scan__Standard,             $MissionType = missiontype.find,  $Page = 30214, $TextOffset = [150500], $Sequence = -1 ]"/>-->
                    <!--<set_value name="$Submissions.$scan__for_idcode"
                                 exact="table[$Cue = md.X4Ep1_War_Subscriptions.Scan__Standard,             $MissionType = missiontype.find,  $Page = 30214, $TextOffset = [150600], $Sequence = -1 ]"/>-->
                    <set_value name="$New_Thread.$Submissions" exact="$Submissions"/>
                  </actions>
                </library>
                <!--Called from CalculateThreads. Result saved to $New_Thread. Namespace is not this parent.-->
                <library name="HOL_VS_PAR_Gather_Intel_Construct_Name">
                  <actions>
                    <do_any>
                      <set_value name="this.$Name" exact="{30214, 7000}"/>
                    </do_any>
                  </actions>
                </library>
                <!--Called from CalculateThreads where several values are set to help decide the briefing text. Result saved to $New_Thread. Namespace is not this parent.-->
                <library name="HOL_VS_PAR_Gather_Intel_Construct_Description">
                  <actions>
                    <do_if value="$ThreadMood == 'negative'">
                      <do_any>
                        <set_value name="this.$Description" exact="{30214, 7101}"/>
                        <set_value name="this.$Description" exact="{30214, 7102}"/>
                      </do_any>
                      <set_value name="this.$Description" operation="add" exact="' ' + {30214, 7111}"/>
                      <do_any>
                        <set_value name="this.$Description" operation="add" exact="'\n' + {30214, 7121}"/>
                        <set_value name="this.$Description" operation="add" exact="'\n' + {30214, 7122}"/>
                      </do_any>
                    </do_if>
                    <do_elseif value="$ThreadMood == 'positive'">
                      <do_any>
                        <set_value name="this.$Description" exact="{30214, 7201}"/>
                        <set_value name="this.$Description" exact="{30214, 7202}"/>
                      </do_any>
                      <set_value name="this.$Description" operation="add" exact="' ' + {30214, 7211}"/>
                      <set_value name="this.$Description" operation="add" exact="'\n' + {30214, 7221}"/>
                    </do_elseif>
                  </actions>
                </library>
                <library name="HOL_VS_PAR_Gather_Intel_Construct_Reward">
                  <actions>
                    <do_any>
                      <set_value name="this.$RewardObject" exact="[ware.paintmod_0078]" weight="15" comment="special hol vs par subscription paint"/>
                      <set_value name="this.$RewardObject" exact="[ware.paintmod_0010]" weight="15" comment="basic holy order faction paint"/>
                      <set_value name="this.$RewardObject" exact="[[ware.modpart_nividiumcrystallite, ware.modpart_shipnanoweave_t1, ware.modpart_shipnanoweave_t2].random]" weight="9" comment="modpart"/>
                      <set_value name="this.$RewardObject" exact="[ware.modpart_nividiumcrystallite, [ware.modpart_shipnanoweave_t1, ware.modpart_shipnanoweave_t2].random]" weight="8" comment="complete mod"/>
                      <set_value name="this.$RewardObject" exact="[[ware.modpart_extendedfuelcontainer, ware.modpart_nividiumoxide, ware.modpart_enginefuelinjector_t1, ware.modpart_enginefuelinjector_t2].random]" weight="9" comment="modpart"/>
                      <set_value name="this.$RewardObject" exact="[ware.modpart_extendedfuelcontainer, ware.modpart_nividiumoxide, [ware.modpart_enginefuelinjector_t1, ware.modpart_enginefuelinjector_t2].random]" weight="8" comment="complete mod"/>
                      <set_value name="this.$RewardObject" exact="[[ware.modpart_shipnanoweave_t3, ware.modpart_enginefuelinjector_t3].random]" weight="4" comment="rare modpart"/>
                      <set_value name="this.$RewardObject" exact="[[ware.inv_seminar_piloting_2, ware.inv_seminar_piloting_2, ware.inv_seminar_management_2].random]" weight="14"/>
                      <set_value name="this.$RewardObject" exact="[[ware.inv_seminar_piloting_3, ware.inv_seminar_piloting_3, ware.inv_seminar_management_3].random]" weight="4"/>
                      <set_value name="this.$RewardObject" exact="[[ware.inv_seminar_piloting_4, ware.inv_seminar_management_4].random]" weight="1"/>
                    </do_any>
                    <run_actions ref="md.LIB_Generic.GenerateRewardText" result="this.$RewardText">
                      <param name="RewardObject" value="this.$RewardObject"/>
                    </run_actions>
                  </actions>
                </library>
              </cues>
            </cue>
            <cue name="HOL_VS_PAR_Support_Invasion">
              <cues>
                <cue name="HOL_VS_PAR_Preemptive_Support_Invasion" version="3">
                  <actions>
                    <!--Holy Order vs Paranid - Support Invasion-->
                    <set_value name="$ThreadID" exact="'$hol_vs_par_support_invasion'"/>
                    <set_value name="$Thread" exact="table[                            $ID = $ThreadID,                            $Faction = $Faction,                            $EnemyFaction = $EnemyFaction,                            $MissionGroup = $MissionGroup,                            $ThreadConditionLibs = [Situation__Invading],                            $ThreadType = 'sequential',                            $MissionType = missiontype.fight,                            $Difficulty = level.hard,                            $SubMissionLib = HOL_VS_PAR_Support_Invasion_Get_Submissions,                            $NameLib = HOL_VS_PAR_Support_Invasion_Construct_Name,                            $DescriptionLib = HOL_VS_PAR_Support_Invasion_Construct_Description,                            $RewardLib = HOL_VS_PAR_Support_Invasion_Construct_Reward,                            $MinMissions = 1,                            $MaxMissions = 1,                            $ThreadAbortRelation = -0.00064]"/>
                    <assert value="not $ManagerCue.$ThreadDefinitions.{$ThreadID}?" text="'Thread definition ' + $ThreadID + ' already exists in this table [Owen]'"/>
                    <set_value name="$ManagerCue.$ThreadDefinitions.{$ThreadID}" exact="$Thread"/>
                  </actions>
                  <patch sinceversion="3" state="complete">
                    <set_value name="$ManagerCue.$ThreadDefinitions.$hol_vs_par_support_invasion.$RewardLib" exact="HOL_VS_PAR_Support_Invasion_Construct_Reward"/>
                  </patch>
                </cue>
                <!--Called from CalculateThreads. Result saved to $New_Thread. Namespace is not this parent.-->
                <library name="HOL_VS_PAR_Support_Invasion_Get_Submissions">
                  <actions>
                    <set_value name="$Submissions" exact="table[]"/>
                    <!--<set_value name="$Submissions.$support_invasion"
                                 exact="table[$Cue = md.X4Ep1_War_Subscriptions.Support_Invasion__Standard,    $MissionType = missiontype.fight,  $Page = 30214, $TextOffset = [109000], $Sequence = -1 ]"/>-->
                    <set_value name="$New_Thread.$Submissions" exact="$Submissions"/>
                  </actions>
                </library>
                <!--Called from CalculateThreads. Result saved to $New_Thread. Namespace is not this parent.-->
                <library name="HOL_VS_PAR_Support_Invasion_Construct_Name">
                  <actions>
                    <do_any>
                      <set_value name="this.$Name" exact="{30214, 8000}"/>
                    </do_any>
                  </actions>
                </library>
                <!--Called from CalculateThreads where several values are set to help decide the briefing text. Result saved to $New_Thread. Namespace is not this parent.-->
                <library name="HOL_VS_PAR_Support_Invasion_Construct_Description">
                  <actions>
                    <do_if value="$ThreadMood == 'negative'">
                      <do_any>
                        <set_value name="this.$Description" exact="{30214, 8101}"/>
                      </do_any>
                      <set_value name="this.$Description" operation="add" exact="' ' + {30214, 8111}"/>
                      <do_any>
                        <set_value name="this.$Description" operation="add" exact="'\n' + {30214, 8121}"/>
                      </do_any>
                    </do_if>
                    <do_elseif value="$ThreadMood == 'positive'">
                      <do_any>
                        <set_value name="this.$Description" exact="{30214, 8201}"/>
                      </do_any>
                      <set_value name="this.$Description" operation="add" exact="' ' + {30214, 8211}"/>
                      <set_value name="this.$Description" operation="add" exact="'\n' + {30214, 8221}"/>
                    </do_elseif>
                  </actions>
                </library>
                <library name="HOL_VS_PAR_Support_Invasion_Construct_Reward">
                  <actions>
                    <do_any>
                      <set_value name="this.$RewardObject" exact="[ware.paintmod_0078]" weight="15" comment="special hol vs par subscription paint"/>
                      <set_value name="this.$RewardObject" exact="[ware.paintmod_0010]" weight="15" comment="basic holy order faction paint"/>
                      <set_value name="this.$RewardObject" exact="[[ware.modpart_nividiumcrystallite, ware.modpart_shipnanoweave_t1, ware.modpart_shipnanoweave_t2].random]" weight="9"/>
                      <set_value name="this.$RewardObject" exact="[[ware.modpart_highenergycatalyst, ware.modpart_tuningsoftware, ware.modpart_weaponchamber_t1, ware.modpart_weaponchamber_t2].random]" weight="8"/>
                      <set_value name="this.$RewardObject" exact="[ware.modpart_nividiumcrystallite, [ware.modpart_shipnanoweave_t1, ware.modpart_shipnanoweave_t2].random]" weight="9"/>
                      <set_value name="this.$RewardObject" exact="[ware.modpart_highenergycatalyst, ware.modpart_tuningsoftware, [ware.modpart_weaponchamber_t1, ware.modpart_weaponchamber_t2].random]" weight="8"/>
                      <set_value name="this.$RewardObject" exact="[[ware.modpart_shipnanoweave_t3, ware.modpart_weaponchamber_t3].random]" weight="4"/>
                      <set_value name="this.$RewardObject" exact="[[ware.inv_seminar_piloting_2, ware.inv_seminar_piloting_2, ware.inv_seminar_management_2].random]" weight="14"/>
                      <set_value name="this.$RewardObject" exact="[[ware.inv_seminar_piloting_3, ware.inv_seminar_piloting_3, ware.inv_seminar_management_3].random]" weight="4"/>
                      <set_value name="this.$RewardObject" exact="[[ware.inv_seminar_piloting_4, ware.inv_seminar_management_4].random]" weight="1"/>
                    </do_any>
                    <run_actions ref="md.LIB_Generic.GenerateRewardText" result="this.$RewardText">
                      <param name="RewardObject" value="this.$RewardObject"/>
                    </run_actions>
                  </actions>
                </library>
              </cues>
            </cue>
          </cues>
        </cue>
        <!--
        Required variables: $CentralSector = the sector to look for war fronts around (usually the player.sector)-->
        <library name="GetWarFronts">
          <actions>
            <clear_table table="$WarFronts"/>
            <do_all chance="$DebugChance">
              <do_if value="$CentralSector">
                <debug_text text="'Getting WarFronts around ' + $CentralSector.knownname"/>
              </do_if>
              <do_else>
                <debug_text text="'Getting WarFronts in the whole galaxy'"/>
              </do_else>
            </do_all>
            <!--
            table[
            {$HostFaction} = 
              table[
              $HostEntryPoint = Jumpgate or Super Highway Entry Gate leading from host space to enemy space
              $EnemyEntryPoint = Jumpgate or Super Highway Entry Gate leading from enemy space to host space
              $EnemyFaction = $EnemyFaction,
              $HostSectors  = table[table of sectors that are exclusivly owned by $HostFaction within 1 jump of the enemy exitpoint or a related contested sector. Value is gate distance to the enemy ENTRY point or Enemy contested sector],
              $EnemySectors = table[table of sectors that are exclusivly owned by $EnemyFaction within 1 jump of the enemy entrypoint or a related contested sector. Value is gate distance to the nearest Host owned or contested sector],
              $OtherSectors  = table[table of sectors that neither faction owns within either 1 jump of the enemy exitpoint or a related contested sector. Value is gate distance to the enemy ENTRY point or contested sector],
              $ContestedSectors = [list of sectors which are contested by either {Host and Enemy} or {Ally Vs Enemy} ],
              $ContestedSectorsIncludeHost = bool - whether $ContestedSectors is {Host Vs Enemy} or {Ally Vs Enemy (Host is not involved)}
              $OfferSectors = [list of sectors where the thread offers are visible],
              $HostInvasions = [list of FactionGoal_Invade_Space cues to query for invasion details of the host against the enemy],
              $EnemyInvasions = [list of FactionGoal_Invade_Space cues to query for invasion details of the enemy against the host],
              $AllyInvasions = [list of FactionGoal_Invade_Space cues to query for invasion details of an ally against the enemy],
              $EnemyToAllyInvasions = [list of FactionGoal_Invade_Space cues to query for invasion details of the enemy against an ally],
              $ActiveSituations = [list of situation libraries which currently pass for this warfront e.g. Situation__Invading. Populated when iterating over potential threads]
              ]
            ]-->
            <set_value name="$ThreadWarFactionTable" exact="table[]"/>
            <set_value name="$ThreadDefinitionIDs" exact="$ThreadDefinitions.keys.list"/>
            <do_all exact="$ThreadDefinitionIDs.count" counter="$gwf_i">
              <set_value name="$gwf_faction" exact="$ThreadDefinitions.{$ThreadDefinitionIDs.{$gwf_i}}.$Faction"/>
              <set_value name="$gwf_enemyfaction" exact="$ThreadDefinitions.{$ThreadDefinitionIDs.{$gwf_i}}.$EnemyFaction"/>
              <do_if value="$gwf_faction.isactive and $gwf_enemyfaction.isactive">
                <do_if value="not $ThreadWarFactionTable.{$gwf_faction}?">
                  <set_value name="$ThreadWarFactionTable.{$gwf_faction}" exact="[]"/>
                </do_if>
                <do_if value="not $ThreadWarFactionTable.{$gwf_faction}.indexof.{$gwf_enemyfaction}">
                  <append_to_list name="$ThreadWarFactionTable.{$gwf_faction}" exact="$gwf_enemyfaction"/>
                </do_if>
              </do_if>
            </do_all>
            <do_all exact="$NonSubscriptionWars.keys.count" counter="$gwf_i">
              <set_value name="$gwf_faction" exact="$NonSubscriptionWars.keys.{$gwf_i}"/>
              <do_if value="$gwf_faction.isactive">
                <do_if value="not $ThreadWarFactionTable.{$gwf_faction}?">
                  <set_value name="$ThreadWarFactionTable.{$gwf_faction}" exact="[]"/>
                </do_if>
                <do_all exact="$NonSubscriptionWars.{$gwf_faction}.count" counter="$gwf_k">
                  <set_value name="$gwf_enemyfaction" exact="$NonSubscriptionWars.{$gwf_faction}.{$gwf_k}"/>
                  <do_if value="$gwf_enemyfaction.isactive and not $ThreadWarFactionTable.{$gwf_faction}.indexof.{$gwf_enemyfaction}">
                    <append_to_list name="$ThreadWarFactionTable.{$gwf_faction}" exact="$gwf_enemyfaction"/>
                  </do_if>
                </do_all>
              </do_if>
            </do_all>
            <do_if value="$CentralSector">
              <find_cluster_in_range name="$LocalCentralClusters" object="$CentralSector" maxdistance="2" multiple="true"/>
            </do_if>
            <do_else>
              <find_cluster name="$LocalCentralClusters" multiple="true"/>
            </do_else>
            <set_value name="$RelevantFactions" exact="$ThreadWarFactionTable.keys.list"/>
            <do_all exact="$RelevantFactions.count" counter="$gwf_i">
              <set_value name="$HostFaction" exact="$RelevantFactions.{$gwf_i}"/>
              <set_value name="$HostEnemyFactions" exact="$ThreadWarFactionTable.{$HostFaction}"/>
              <set_value name="$HostSectors" exact="[]"/>
              <set_value name="$ExcludedSectors" exact="@global.$FactionManagers.{$HostFaction}.$ExcludedSectors"/>
              <do_all chance="$DebugChance">
                <do_if value="$CentralSector">
                  <debug_text text="'Checking for Warfronts for ' + $HostFaction.knownname + ' around ' + $CentralSector + ' ' + $CentralSector.knownname"/>
                </do_if>
                <do_else>
                  <debug_text text="'Checking for Warfronts for ' + $HostFaction.knownname"/>
                </do_else>
              </do_all>
              <do_all exact="$LocalCentralClusters.count" counter="$gwf_j">
                <!--Build the list of $HostSectors with contested sectors first, followed by owned. War fronts regarding contested sectors should be generated first.-->
                <find_sector name="$ClusterSectors" multiple="true" space="$LocalCentralClusters.{$gwf_j}"/>
                <do_all exact="$ClusterSectors.count" counter="$gwf_o">
                  <do_if value="$ClusterSectors.{$gwf_o}.iscontestedby.{$HostFaction}">
                    <set_value name="$HostSectors.{1}" operation="insert" exact="$ClusterSectors.{$gwf_o}"/>
                  </do_if>
                  <do_elseif value="$ClusterSectors.{$gwf_o}.owner == $HostFaction">
                    <append_to_list name="$HostSectors" exact="$ClusterSectors.{$gwf_o}"/>
                  </do_elseif>
                </do_all>
              </do_all>
              <remove_value name="$ClusterSectors"/>
              <do_all exact="$HostSectors.count" counter="$gwf_j" chance="$DebugChance2">
                <do_if value="$HostSectors.{$gwf_j}.iscontestedby.{$HostFaction}">
                  <debug_text text="'Sector ' + $HostSectors.{$gwf_j} + ' ' + $HostSectors.{$gwf_j}.knownname + ' is contested by ' + $HostFaction"/>
                </do_if>
                <do_else>
                  <debug_text text="'Sector ' + $HostSectors.{$gwf_j} + ' ' + $HostSectors.{$gwf_j}.knownname + ' is owned by ' + $HostFaction"/>
                </do_else>
              </do_all>
              <set_value name="$EnemySectors" exact="[]"/>
              <do_all exact="$HostSectors.count" counter="$gwf_j">
                <set_value name="$HostSector" exact="$HostSectors.{$gwf_j}"/>
                <debug_text text="'checking ' + $HostFaction.knownname + ' sector ' + $HostSector.knownname" chance="$DebugChance2"/>
                <find_cluster_in_range name="$SurroundingClusters" object="$HostSector" maxdistance="2" multiple="true"/>
                <find_sector name="$LocalSectors" excluded="$ExcludedSectors" space="$SurroundingClusters" multiple="true"/>
                <do_all exact="$HostEnemyFactions.count" counter="$gwf_k">
                  <set_value name="$EnemyFaction" exact="$HostEnemyFactions.{$gwf_k}"/>
                  <debug_text text="'Checking if there are any local ' + $EnemyFaction.knownname + ' sectors'" chance="$DebugChance2"/>
                  <clear_list list="$EnemySectors"/>
                  <do_all exact="$LocalSectors.count" counter="$gwf_m">
                    <debug_text text="'has local sector ' + $LocalSectors.{$gwf_m}.knownname" chance="$DebugChance2"/>
                    <do_if value="$LocalSectors.{$gwf_m}.iscontestedby.{$EnemyFaction}">
                      <debug_text text="'Sector ' + $HostSector.knownname + ' owned by ' + $HostSector.owner + ' has a local enemy sector ' + $LocalSectors.{$gwf_m}.knownname + ' contested by ' + $LocalSectors.{$gwf_m}.owner" chance="$DebugChance2"/>
                      <set_value name="$EnemySectors.{1}" operation="insert" exact="$LocalSectors.{$gwf_m}"/>
                    </do_if>
                    <do_elseif value="$LocalSectors.{$gwf_m}.owner == $EnemyFaction">
                      <debug_text text="'Sector ' + $HostSector.knownname + ' owned by ' + $HostSector.owner + ' has a local enemy sector ' + $LocalSectors.{$gwf_m}.knownname + ' owned by ' + $LocalSectors.{$gwf_m}.owner" chance="$DebugChance2"/>
                      <append_to_list name="$EnemySectors" exact="$LocalSectors.{$gwf_m}"/>
                    </do_elseif>
                  </do_all>
                  <!--Find all war fronts closest to $HostSector-->
                  <do_all exact="$EnemySectors.count" counter="$gwf_m">
                    <set_value name="$EnemySector" exact="$EnemySectors.{$gwf_m}"/>
                    <debug_text text="'checking enemy sector ' + $EnemySector + ' ' + $EnemySector.knownname" chance="$DebugChance"/>
                    <set_value name="$FrontFocus" exact="null"/>
                    <do_if value="$EnemySector.iscontestedby.{$HostFaction}">
                      <!--Host and enemy faction are both contesting this sector. $FrontFocus is the sector-->
                      <!--Check if the WarFront has already been checked-->
                      <set_value name="$HasFront" exact="false"/>
                      <do_if value="$WarFronts.{$HostFaction}?">
                        <set_value name="$HostFronts" exact="$WarFronts.{$HostFaction}"/>
                        <do_all exact="$HostFronts.count" counter="$gwf_o">
                          <do_if value="$HostFronts.{$gwf_o}.$EnemyFaction == $EnemyFaction">
                            <do_if value="$HostFronts.{$gwf_o}.$ContestedSectors.indexof.{$EnemySector}">
                              <debug_text text="'Already has front for this contested sector ' + $HostFronts.{$gwf_o}" chance="$DebugChance"/>
                              <set_value name="$HasFront" exact="true"/>
                              <break/>
                            </do_if>
                          </do_if>
                        </do_all>
                      </do_if>
                      <do_if value="not $HasFront">
                        <set_value name="$FrontFocus" exact="$EnemySector"/>
                      </do_if>
                    </do_if>
                    <do_else>
                      <!--TODO @Owen handle the case of there being a one way sector-highway front from enemy space to the host-->
                      <get_global_path component="$GlobalPathComps" uselocalhighways="false" multiple="true">
                        <start object="$HostSector"/>
                        <end object="$EnemySector"/>
                      </get_global_path>
                      <do_all exact="$GlobalPathComps.count" counter="$gwf_o">
                        <set_value name="$FrontEntryPoint" exact="null"/>
                        <do_if value="$GlobalPathComps.{$gwf_o}.isclass.gate and $EnemySectors.indexof.{$GlobalPathComps.{$gwf_o}.destination.sector}">
                          <set_value name="$FrontEntryPoint" exact="$GlobalPathComps.{$gwf_o}"/>
                        </do_if>
                        <do_elseif value="$GlobalPathComps.{$gwf_o}.isclass.highwayentrygate and $EnemySectors.indexof.{$GlobalPathComps.{$gwf_o}.destination.sector}">
                          <set_value name="$FrontEntryPoint" exact="$GlobalPathComps.{$gwf_o}"/>
                        </do_elseif>
                        <do_if value="$FrontEntryPoint">
                          <!--Check if the WarFront has already been checked-->
                          <set_value name="$HasFront" exact="false"/>
                          <do_if value="$WarFronts.{$HostFaction}?">
                            <set_value name="$HostFronts" exact="$WarFronts.{$HostFaction}"/>
                            <do_all exact="$HostFronts.count" counter="$gwf_o">
                              <do_if value="$HostFronts.{$gwf_o}.$EnemyFaction == $EnemyFaction">
                                <do_if value="$HostFronts.{$gwf_o}.$HostEntryPoint == $FrontEntryPoint">
                                  <debug_text text="'Already has front for this sector ' + $HostFronts.{$gwf_o}" chance="$DebugChance2"/>
                                  <set_value name="$HasFront" exact="true"/>
                                  <break/>
                                </do_if>
                                <do_elseif value="$HostFronts.{$gwf_o}.$ContestedSectors.indexof.{$EnemySector}">
                                  <debug_text text="'Already has front for this contested sector ' + $HostFronts.{$gwf_o}" chance="$DebugChance2"/>
                                  <set_value name="$HasFront" exact="true"/>
                                  <break/>
                                </do_elseif>
                              </do_if>
                            </do_all>
                          </do_if>
                          <do_if value="not $HasFront">
                            <set_value name="$FrontFocus" exact="$FrontEntryPoint"/>
                          </do_if>
                          <break/>
                        </do_if>
                      </do_all>
                    </do_else>
                    <do_if value="$FrontFocus">
                      <set_value name="$WarFrontTable" exact="table[                              $HostEntryPoint  = null,                              $EnemyEntryPoint = null,                              $EnemyFaction  = $EnemyFaction,                              $HostSectors   = table[],                              $EnemySectors  = table[],                              $OtherSectors  = table[],                              $ContestedSectors = [],                              $ContestedSectorsIncludeHost = true,                              $OfferSectors  = [],                              $HostInvasions = [],                              $EnemyInvasions = [],                              $AllyInvasions = [],                              $EnemyToAllyInvasions = [],                              $ActiveSituations = []]"/>
                      <do_if value="$FrontFocus.isclass.gate">
                        <set_value name="$WarFrontTable.$HostEntryPoint" exact="$FrontFocus"/>
                        <set_value name="$WarFrontTable.$EnemyEntryPoint" exact="$FrontFocus.exit"/>
                      </do_if>
                      <do_elseif value="$FrontFocus.isclass.highwayentrygate">
                        <set_value name="$WarFrontTable.$HostEntryPoint" exact="$FrontFocus"/>
                        <!--Find the returning highway from enemy space to the host's space-->
                        <get_global_path component="$GlobalPathComps" uselocalhighways="false" multiple="true">
                          <start object="$WarFrontTable.$HostEntryPoint.destination"/>
                          <end object="$WarFrontTable.$HostEntryPoint.sector"/>
                        </get_global_path>
                        <!--Iterate in reverse as we're interested in the last highway into host space (will keep the gate case here but should never happen)-->
                        <do_all exact="$GlobalPathComps.count" counter="$gwf_o" reverse="true">
                          <do_if value="$GlobalPathComps.{$gwf_o}.isclass.gate">
                            <set_value name="$WarFrontTable.$EnemyEntryPoint" exact="$GlobalPathComps.{$gwf_o}.exit"/>
                            <break/>
                          </do_if>
                          <do_elseif value="$GlobalPathComps.{$gwf_o}.isclass.highwayexitgate">
                            <set_value name="$WarFrontTable.$EnemyEntryPoint" exact="$GlobalPathComps.{$gwf_o}.entry"/>
                            <break/>
                          </do_elseif>
                        </do_all>
                      </do_elseif>
                      <do_elseif value="$FrontFocus.isclass.sector">
                        <append_to_list name="$WarFrontTable.$ContestedSectors" exact="$FrontFocus"/>
                      </do_elseif>
                      <do_else>
                        <assert value="false" text="'Unknown class of $FrontFocus. Should be gate, highwayentrygate or sector. $FrontFocus: ' + $FrontFocus + ' ' + $FrontFocus.knownname + ' [Owen]'"/>
                        <continue/>
                      </do_else>
                      <do_if value="$WarFrontTable.$HostEntryPoint">
                        <!--If we're dealing with an entrypoint, we're not dealing with sectors contested by both the Host an Enemy factions. They will have their own front.
                        This bool helps identify what contents is in $ContestedSectors. In this case, Enemy sectors which are also contested by allies-->
                        <set_value name="$ContestedSectorsIncludeHost" exact="false"/>
                        <find_cluster_in_range distances="$HostLocalClusterDistances" object="$WarFrontTable.$HostEntryPoint" maxdistance="3" multiple="true"/>
                        <find_cluster_in_range distances="$EnemyLocalClusterDistances" object="$WarFrontTable.$HostEntryPoint.exit" maxdistance="3" multiple="true"/>
                        <set_value name="$HostLocalClusters" exact="$HostLocalClusterDistances.keys.sorted"/>
                        <set_value name="$EnemyLocalClusters" exact="$EnemyLocalClusterDistances.keys.sorted"/>
                        <!--Populate $OfferSectors: Find sectors within 1 jump of the entry point leading to enemy space-->
                        <do_all exact="$HostLocalClusters.count" counter="$gwf_o">
                          <do_if value="$HostLocalClusterDistances.{$HostLocalClusters.{$gwf_o}} le 1" comment="Is this cluster within 1 jump of the host entry point?">
                            <find_sector name="$WarFrontTable.$OfferSectors" multiple="true" space="$HostLocalClusters.{$gwf_o}" append="true"/>
                          </do_if>
                          <do_else>
                            <break/>
                          </do_else>
                        </do_all>
                        <!--Populate $HostSectors and $OtherSectors-->
                        <do_all exact="$WarFrontTable.$OfferSectors.count" counter="$gwf_o">
                          <set_value name="$OfferSector" exact="$WarFrontTable.$OfferSectors.{$gwf_o}"/>
                          <!--Check if owned by HostFaction or contested by HostFaction and not EnemyFaction (as that should be it's own front)-->
                          <do_if value="$OfferSector.owner == $HostFaction or $OfferSector.iscontestedby.{$HostFaction}">
                            <do_if value="not $OfferSector.iscontestedby.{$EnemyFaction}">
                              <do_if value="not $EnemyLocalClusterDistances.{$OfferSector.cluster}?">
                                <!--We already know the jump distances of this sector to the entry point. Use it.-->
                                <set_value name="$WarFrontTable.$HostSectors.{$OfferSector}" exact="$EnemyLocalClusterDistances.{$OfferSector.cluster}"/>
                              </do_if>
                              <do_else>
                                <!--The distance table doesn't have an entry for this sector. Manually get it.-->
                                <set_value name="$WarFrontTable.$HostSectors.{$OfferSector}" exact="$WarFrontTable.$HostEntryPoint.exit.gatedistance.{$OfferSector}"/>
                              </do_else>
                            </do_if>
                          </do_if>
                          <do_elseif value="$OfferSector.owner != $EnemyFaction and not $OfferSector.iscontestedby.{$EnemyFaction}">
                            <do_if value="$EnemyLocalClusterDistances.{$OfferSector.cluster}?">
                              <!--We already know the jump distances of this sector to the entry point. Use it.-->
                              <set_value name="$WarFrontTable.$OtherSectors.{$OfferSector}" exact="$EnemyLocalClusterDistances.{$OfferSector.cluster}"/>
                            </do_if>
                            <do_else>
                              <!--The distance table doesn't have an entry for this sector. Manually get it.-->
                              <set_value name="$WarFrontTable.$OtherSectors.{$OfferSector}" exact="$WarFrontTable.$HostEntryPoint.exit.gatedistance.{$OfferSector}"/>
                            </do_else>
                          </do_elseif>
                        </do_all>
                        <!--Populate $EnemySectors-->
                        <set_value name="$LocalEnemySectors" exact="[]"/>
                        <do_all exact="$EnemyLocalClusters.count" counter="$gwf_o">
                          <do_if value="$EnemyLocalClusterDistances.{$EnemyLocalClusters.{$gwf_o}} le 1" comment="Is this cluster within 1 jump of the entry point?">
                            <find_sector name="$LocalEnemySectors" multiple="true" space="$EnemyLocalClusters.{$gwf_o}" append="true">
                              <match_any>
                                <match owner="$EnemyFaction"/>
                                <match contestedby="$EnemyFaction"/>
                              </match_any>
                            </find_sector>
                          </do_if>
                          <do_else>
                            <break/>
                          </do_else>
                        </do_all>
                        <do_all exact="$LocalEnemySectors.count" counter="$gwf_o">
                          <set_value name="$LocalEnemySector" exact="$LocalEnemySectors.{$gwf_o}"/>
                          <!--TODO @Owen check if contested by ally here-->
                          <set_value name="$ContestedByAlly" exact="false"/>
                          <do_if value="$LocalEnemySector.iscontested">
                            <set_value name="$ContestingFactions" exact="$LocalEnemySector.contestingfactions"/>
                            <do_all exact="$ContestingFactions.count" counter="$gwf_p">
                              <do_if value="$HostFaction != $ContestingFactions.{$gwf_p} and $HostFaction.relationto.{$ContestingFactions.{$gwf_p}} ge $HostFaction.relation.neutral.min and $ContestingFactions.{$gwf_p}.hasrelation.enemy.{$EnemyFaction}">
                                <set_value name="$ContestedByAlly" exact="true"/>
                                <break/>
                              </do_if>
                            </do_all>
                          </do_if>
                          <do_if value="$ContestedByAlly">
                            <!--TODO @Owen $WarFrontTable.$ContestedSectors is not a table as assumed below. Should it be?-->
                            <!--<do_if value="$HostLocalClusterDistances.{$LocalEnemySector.cluster}?" comment="We already know the jump distances of this sector to the exit point. Use it.">
                              <set_value name="$WarFrontTable.$ContestedSectors.{$LocalEnemySector}" exact="$HostLocalClusterDistances.{$LocalEnemySector.cluster}"/>
                            </do_if>
                            <do_else comment="The distance table doesn't have an entry for this sector. Manually get it.">
                              <set_value name="$WarFrontTable.$ContestedSectors.{$LocalEnemySector}" exact="$WarFrontTable.$HostEntryPoint.gatedistance.{$LocalEnemySector}"/>
                            </do_else>-->
                            <append_to_list name="$WarFrontTable.$ContestedSectors" exact="$LocalEnemySector"/>
                          </do_if>
                          <do_else>
                            <do_if value="$HostLocalClusterDistances.{$LocalEnemySector.cluster}?">
                              <!--We already know the jump distances of this sector to the exit point. Use it.-->
                              <set_value name="$WarFrontTable.$EnemySectors.{$LocalEnemySector}" exact="$HostLocalClusterDistances.{$LocalEnemySector.cluster}"/>
                            </do_if>
                            <do_else>
                              <!--The distance table doesn't have an entry for this sector. Manually get it.-->
                              <set_value name="$WarFrontTable.$EnemySectors.{$LocalEnemySector}" exact="$WarFrontTable.$HostEntryPoint.gatedistance.{$LocalEnemySector}"/>
                            </do_else>
                          </do_else>
                        </do_all>
                      </do_if>
                      <do_else>
                        <!--If we're not dealing with an entrypoint, we're dealing with sectors contested by both the Host an Enemy factions.
                        This bool helps identify what contents is in $ContestedSectors. In this case, sectors which are contested by both Host and Enemy factions-->
                        <set_value name="$ContestedSectorsIncludeHost" exact="true"/>
                        <assert value="$WarFrontTable.$ContestedSectors.count == 1" text="'There should only be one contested sector at the start of this section. Count: ' + $WarFrontTable.$ContestedSectors.count + ' [Owen]'"/>
                        <do_if value="$WarFrontTable.$ContestedSectors.count == 1">
                          <!--Populate $ContestedSectors: From the contested sector, find all linked contested sectors-->
                          <create_group groupname="$ContestedSectorGroup"/>
                          <add_to_group groupname="$ContestedSectorGroup" object="$WarFrontTable.$ContestedSectors.{1}"/>
                          <set_value name="$CheckedContestedSectors" exact="[]"/>
                          <do_while value="$CheckedContestedSectors.count != $ContestedSectorGroup.count">
                            <do_all exact="$ContestedSectorGroup.count" counter="$gwf_o">
                              <do_if value="not $CheckedContestedSectors.indexof.{$ContestedSectorGroup.{$gwf_o}}">
                                <append_to_list name="$CheckedContestedSectors" exact="$ContestedSectorGroup.{$gwf_o}"/>
                                <find_cluster_in_range name="$PotentiallyContestedClusters" object="$ContestedSectorGroup.{$gwf_o}" mindistance="1" maxdistance="1" multiple="true"/>
                                <do_all exact="$PotentiallyContestedClusters.count" counter="$gwf_p">
                                  <find_sector groupname="$ContestedSectorGroup" space="$PotentiallyContestedClusters.{$gwf_p}" multiple="true">
                                    <match>
                                      <match contestedby="$HostFaction"/>
                                      <match contestedby="$EnemyFaction"/>
                                    </match>
                                  </find_sector>
                                </do_all>
                              </do_if>
                            </do_all>
                          </do_while>
                          <set_value name="$WarFrontTable.$ContestedSectors" exact="$ContestedSectorGroup.list"/>
                          <!--Populate $OfferSectors-->
                          <create_group groupname="$OfferSectorsGroup"/>
                          <do_all exact="$ContestedSectorGroup.count" counter="$gwf_o">
                            <find_cluster_in_range name="$PotentialOtherClusters" object="$ContestedSectorGroup.{$gwf_o}" maxdistance="1" multiple="true"/>
                            <do_all exact="$PotentialOtherClusters.count" counter="$gwf_p">
                              <find_sector groupname="$OfferSectorsGroup" multiple="true" space="$PotentialOtherClusters.{$gwf_p}"/>
                            </do_all>
                          </do_all>
                          <set_value name="$WarFrontTable.$OfferSectors" exact="$OfferSectorsGroup.list"/>
                          <remove_value name="$ContestedSectorGroup"/>
                          <!--Populate $HostSectors, $EnemySectors or $OtherSectors
                          Go over all OfferSectors and add non-contested sectors to either the $HostSectors, $EnemySectors or $OtherSectors tables (at jump distance of 1 as that's as far as we've looked)-->
                          <do_all exact="$WarFrontTable.$OfferSectors.count" counter="$gwf_o">
                            <set_value name="$OfferSector" exact="$WarFrontTable.$OfferSectors.{$gwf_o}"/>
                            <do_if value="not $WarFrontTable.$ContestedSectors.indexof.{$OfferSector}">
                              <do_if value="$OfferSector.owner == $HostFaction or $OfferSector.iscontestedby.{$HostFaction}">
                                <!--Owned by host or contested by host but not by enemy-->
                                <set_value name="$WarFrontTable.$HostSectors.{$OfferSector}" exact="1"/>
                              </do_if>
                              <do_elseif value="$OfferSector.owner == $EnemyFaction or $OfferSector.iscontestedby.{$EnemyFaction}">
                                <!--Owned by enemy or contested by enemy but not by host-->
                                <set_value name="$WarFrontTable.$EnemySectors.{$OfferSector}" exact="1"/>
                              </do_elseif>
                              <do_else>
                                <!--Not owned or contested by either host or enemy-->
                                <set_value name="$WarFrontTable.$OtherSectors.{$OfferSector}" exact="1"/>
                              </do_else>
                            </do_if>
                          </do_all>
                        </do_if>
                      </do_else>
                      <set_value name="$HostGoals" exact="null"/>
                      <set_value name="$EnemyGoals" exact="null"/>
                      <do_if value="global.$FactionManagers.{$HostFaction}?">
                        <set_value name="$HostGoals" exact="global.$FactionManagers.{$HostFaction}.$Goals"/>
                      </do_if>
                      <do_if value="global.$FactionManagers.{$EnemyFaction}?">
                        <set_value name="$EnemyGoals" exact="global.$FactionManagers.{$EnemyFaction}.$Goals"/>
                      </do_if>
                      <do_if value="$HostGoals">
                        <!--Check for Invade_Space faction goals for the host faction-->
                        <do_all exact="$HostGoals.count" counter="$gwf_i">
                          <do_if value="$HostGoals.{$gwf_i}.static == md.FactionGoal_Invade_Space.Start">
                            <do_if value="$WarFrontTable.$EnemySectors.{$HostGoals.{$gwf_i}.$Target}? or $WarFrontTable.$ContestedSectors.indexof.{$HostGoals.{$gwf_i}.$Target}">
                              <append_to_list name="$WarFrontTable.$HostInvasions" exact="$HostGoals.{$gwf_i}"/>
                            </do_if>
                          </do_if>
                        </do_all>
                      </do_if>
                      <do_if value="$EnemyGoals">
                        <!--Check for Invade_Space faction goals for the enemy faction-->
                        <do_all exact="$EnemyGoals.count" counter="$gwf_i">
                          <do_if value="$EnemyGoals.{$gwf_i}.static == md.FactionGoal_Invade_Space.Start">
                            <!--Check if the enemy is invading a sector owned or contested by the host faction-->
                            <do_if value="$WarFrontTable.$HostSectors.{$EnemyGoals.{$gwf_i}.$Target}? or $WarFrontTable.$ContestedSectors.indexof.{$EnemyGoals.{$gwf_i}.$Target}">
                              <append_to_list name="$WarFrontTable.$EnemyInvasions" exact="$EnemyGoals.{$gwf_i}"/>
                            </do_if>
                            <!--Check if the enemy is invading a sector contested by an ally faction-->
                            <do_elseif value="$EnemyGoals.{$gwf_i}.$Target.iscontested">
                              <do_if value="$WarFrontTable.$ContestedSectors.indexof.{$EnemyGoals.{$gwf_i}.$Target}">
                                <set_value name="$ContestingFactions" exact="$WarFrontTable.$HostSectors.{$EnemyGoals.{$gwf_i}.$Target}.contestingfactions"/>
                                <do_all exact="$ContestingFactions.count" counter="$gwf_o">
                                  <!--At least for now, treat all neutral (including -0.1) factions as allies against the common enemy-->
                                  <do_if value="$HostFaction != $ContestingFactions.{$gwf_o} and $HostFaction.relationto.{$ContestingFactions.{$gwf_o}} ge $HostFaction.relation.neutral.min and $ContestingFactions.{$gwf_o}.hasrelation.enemy.{$EnemyFaction}">
                                    <append_to_list name="$WarFrontTable.$EnemyToAllyInvasions" exact="$EnemyGoals.{$gwf_i}"/>
                                  </do_if>
                                </do_all>
                              </do_if>
                            </do_elseif>
                            <!--Check if the enemy is invading a sector owned by an ally faction-->
                            <do_elseif value="$WarFrontTable.$OtherSectors.{$EnemyGoals.{$gwf_i}.$Target}?">
                              <set_value name="$EnemyTargetOwner" exact="$EnemyGoals.{$gwf_i}.$Target.owner"/>
                              <!--At least for now, treat all neutral (including -0.1) factions as allies against the common enemy-->
                              <do_if value="$HostFaction != $EnemyTargetOwner and $HostFaction.relationto.{$EnemyTargetOwner} ge $HostFaction.relation.neutral.min and $EnemyTargetOwner.hasrelation.enemy.{$EnemyFaction}">
                                <append_to_list name="$WarFrontTable.$EnemyToAllyInvasions" exact="$EnemyGoals.{$gwf_i}"/>
                              </do_if>
                            </do_elseif>
                          </do_if>
                        </do_all>
                      </do_if>
                      <!--Check if any allies are set to invade the enemy-->
                      <do_all exact="$WarFrontTable.$OtherSectors.keys.count" counter="$gwf_i">
                        <set_value name="$OtherSector" exact="$WarFrontTable.$OtherSectors.keys.{$gwf_i}"/>
                        <do_if value="$OtherSector.iscontested">
                          <set_value name="$ContestingFactions" exact="$OtherSector.contestingfactions"/>
                          <do_all exact="$ContestingFactions.count" counter="$gwf_o">
                            <do_if value="$HostFaction.relationto.{$ContestingFactions.{$gwf_o}} ge $HostFaction.relation.neutral.min and $ContestingFactions.{$gwf_o}.hasrelation.enemy.{$EnemyFaction}">
                              <do_if value="global.$FactionManagers.{$ContestingFactions.{$gwf_o}}?">
                                <set_value name="$AllyGoals" exact="global.$FactionManagers.{$ContestingFactions.{$gwf_o}}.$Goals"/>
                                <!--Check for Invade_Space faction goals for the ally faction-->
                                <do_all exact="$AllyGoals.count" counter="$gwf_k">
                                  <do_if value="$AllyGoals.{$gwf_k}.static == md.FactionGoal_Invade_Space.Start">
                                    <!--Check if the ally is invading a sector owned or contested by the enemy faction (but is also related to this exact war front)-->
                                    <do_if value="$WarFrontTable.$EnemySectors.{$AllyGoals.{$gwf_k}.$Target}? or $WarFrontTable.$ContestedSectors.indexof.{$AllyGoals.{$gwf_k}.$Target}">
                                      <append_to_list name="$WarFrontTable.$AllyInvasions" exact="$AllyGoals.{$gwf_k}"/>
                                    </do_if>
                                    <!--TODO @Owen - check usage of $gwf_k and $gwf_o-->
                                    <!--Check if the ally is invading a sector contested by an ally faction-->
                                    <do_elseif value="$EnemyGoals.{$gwf_k}.$Target.iscontested">
                                      <do_if value="$WarFrontTable.$ContestedSectors.indexof.{$EnemyGoals.{$gwf_k}.$Target}">
                                        <set_value name="$ContestingFactions" exact="$WarFrontTable.$HostSectors.{$EnemyGoals.{$gwf_k}.$Target}.contestingfactions"/>
                                        <do_all exact="$ContestingFactions.count" counter="$gwf_o">
                                          <!--At least for now, treat all neutral (including -0.1) factions as allies against the common enemy-->
                                          <do_if value="$HostFaction != $ContestingFactions.{$gwf_o} and $HostFaction.relationto.{$ContestingFactions.{$gwf_o}} ge $HostFaction.relation.neutral.min and $ContestingFactions.{$gwf_o}.hasrelation.enemy.{$EnemyFaction}">
                                            <append_to_list name="$WarFrontTable.$EnemyToAllyInvasions" exact="$EnemyGoals.{$gwf_k}"/>
                                          </do_if>
                                        </do_all>
                                      </do_if>
                                    </do_elseif>
                                    <!--Check if the enemy is invading a sector owned by an ally faction-->
                                    <do_elseif value="$WarFrontTable.$OtherSectors.{$EnemyGoals.{$gwf_k}.$Target}?">
                                      <set_value name="$EnemyTargetOwner" exact="$EnemyGoals.{$gwf_k}.$Target.owner"/>
                                      <!--At least for now, treat all neutral (including -0.1) factions as allies against the common enemy-->
                                      <do_if value="$HostFaction != $EnemyTargetOwner and $HostFaction.relationto.{$EnemyTargetOwner} ge $HostFaction.relation.neutral.min and $EnemyTargetOwner.hasrelation.enemy.{$EnemyFaction}">
                                        <append_to_list name="$WarFrontTable.$EnemyToAllyInvasions" exact="$EnemyGoals.{$gwf_k}"/>
                                      </do_if>
                                    </do_elseif>
                                  </do_if>
                                </do_all>
                              </do_if>
                            </do_if>
                          </do_all>
                        </do_if>
                      </do_all>
                      <do_if value="$WarFrontTable.$HostEntryPoint">
                        <debug_text text="'Registered front for ' + $HostFaction.knownname + ' against ' + $EnemyFaction.knownname + ' from entrypoint ' + $WarFrontTable.$HostEntryPoint + ' in ' + $WarFrontTable.$HostEntryPoint.sector.knownname" chance="$DebugChance"/>
                      </do_if>
                      <do_else>
                        <assert value="$WarFrontTable.$ContestedSectors.count" text="'War front has no entry point nor contested sectors [Owen]'"/>
                        <do_all chance="$DebugChance">
                          <debug_text text="'Registered front for ' + $HostFaction.knownname + ' against ' + $EnemyFaction.knownname + ' in ' + $WarFrontTable.$ContestedSectors.count + ' contested sectors'"/>
                          <do_all exact="$WarFrontTable.$ContestedSectors.count" counter="$gwf_o">
                            <debug_text text="$WarFrontTable.$ContestedSectors.{$gwf_o} + ' ' + $WarFrontTable.$ContestedSectors.{$gwf_o}.knownname"/>
                          </do_all>
                        </do_all>
                      </do_else>
                      <do_all chance="$DebugChance2">
                        <debug_text text="'Host Sectors:'"/>
                        <do_all exact="$WarFrontTable.$HostSectors.keys.count" counter="$gwf_o">
                          <debug_text text="$WarFrontTable.$HostSectors.keys.{$gwf_o} + ' ' + $WarFrontTable.$HostSectors.keys.{$gwf_o}.knownname + ' - jumps to enemy sector: ' + $WarFrontTable.$HostSectors.{$WarFrontTable.$HostSectors.keys.{$gwf_o}}"/>
                        </do_all>
                        <debug_text text="'Enemy Sectors:'"/>
                        <do_all exact="$WarFrontTable.$EnemySectors.keys.count" counter="$gwf_o">
                          <debug_text text="$WarFrontTable.$EnemySectors.keys.{$gwf_o} + ' ' + $WarFrontTable.$EnemySectors.keys.{$gwf_o}.knownname + ' - jumps to host sector: ' + $WarFrontTable.$EnemySectors.{$WarFrontTable.$EnemySectors.keys.{$gwf_o}}"/>
                        </do_all>
                        <debug_text text="'Other Sectors:'"/>
                        <do_all exact="$WarFrontTable.$OtherSectors.keys.count" counter="$gwf_o">
                          <debug_text text="$WarFrontTable.$OtherSectors.keys.{$gwf_o} + ' ' + $WarFrontTable.$OtherSectors.keys.{$gwf_o}.knownname + ' - jumps to enemy sector: ' + $WarFrontTable.$OtherSectors.{$WarFrontTable.$OtherSectors.keys.{$gwf_o}}"/>
                        </do_all>
                        <do_if value="$ContestedSectorsIncludeHost">
                          <debug_text text="'Sectors contested by Host and Enemy:'"/>
                        </do_if>
                        <do_else>
                          <debug_text text="'Sectors contested by Enemy and Ally:'"/>
                        </do_else>
                        <do_all exact="$WarFrontTable.$ContestedSectors.count" counter="$gwf_o">
                          <debug_text text="$WarFrontTable.$ContestedSectors.{$gwf_o} + ' ' + $WarFrontTable.$ContestedSectors.{$gwf_o}.knownname"/>
                        </do_all>
                        <debug_text text="'Offer Sectors:'"/>
                        <do_all exact="$WarFrontTable.$OfferSectors.count" counter="$gwf_o">
                          <debug_text text="$WarFrontTable.$OfferSectors.{$gwf_o} + ' ' + $WarFrontTable.$OfferSectors.{$gwf_o}.knownname"/>
                        </do_all>
                        <debug_text text="'Host invasions against enemy:'"/>
                        <do_all exact="$WarFrontTable.$HostInvasions.count" counter="$gwf_o">
                          <debug_text text="'Invading: ' + $WarFrontTable.$HostInvasions.{$gwf_o}.$Target.knownname"/>
                        </do_all>
                        <debug_text text="'Enemy invasions against host:'"/>
                        <do_all exact="$WarFrontTable.$EnemyInvasions.count" counter="$gwf_o">
                          <debug_text text="'Invading: ' + $WarFrontTable.$EnemyInvasions.{$gwf_o}.$Target.knownname"/>
                        </do_all>
                        <debug_text text="'Ally invasions against enemy:'"/>
                        <do_all exact="$WarFrontTable.$AllyInvasions.count" counter="$gwf_o">
                          <debug_text text="'Invading: ' + $WarFrontTable.$AllyInvasions.{$gwf_o}.$Target.knownname"/>
                        </do_all>
                        <debug_text text="'Enemy invasions against ally:'"/>
                        <do_all exact="$WarFrontTable.$EnemyToAllyInvasions.count" counter="$gwf_o">
                          <debug_text text="'Invading: ' + $WarFrontTable.$EnemyToAllyInvasions.{$gwf_o}.$Target.knownname"/>
                        </do_all>
                      </do_all>
                      <do_if value="not $WarFronts.{$HostFaction}?">
                        <set_value name="$WarFronts.{$HostFaction}" exact="[]"/>
                      </do_if>
                      <append_to_list name="$WarFronts.{$HostFaction}" exact="$WarFrontTable"/>
                      <!--If the generated war front was for a contested sector, abort finding more fronts for this HostSector-->
                      <do_if value="not $WarFrontTable.$HostEntryPoint">
                        <debug_text text="'Contested sector war front for ' + $HostSector + ' ' + $HostSector.knownname + ' found. Aborting the loop for additional war fronts.'" chance="$DebugChance"/>
                        <!--Break out of the $EnemySectors loop-->
                        <break/>
                      </do_if>
                    </do_if>
                  </do_all>
                </do_all>
              </do_all>
            </do_all>
          </actions>
        </library>
        <!--Find enemy areas, not directly neighbouring the host faction's sectors-->
        <cue name="GenerateAreaTables" instantiate="true" namespace="this">
          <conditions>
            <event_cue_signalled/>
          </conditions>
          <actions>
            <set_value name="$DebugChance" exact="0"/>
            <clear_list list="Start.$Areas"/>
            <!--
            $Areas = [
              table[
                $Faction = Host faction of the mission threads
                $EnemyFaction = The enemy faction
                $HostSectors = All sectors owned by the host faction where missions can be involved
                $OfferSectors = All sectors in which this mission thread is visible
                $EnemySectors = All related sectors which are primarily owned by an enemy faction
                $EntryPoints = List of entry points into the area
                $EntryPointSectors = List of sectors containing entry points
                $ActiveSituations = list of situation libraries which currently pass for this warfront e.g. Situation__Invading. Populated when iterating over potential threads
                ]
            ]-->
            <do_for_each valuename="$ThreadDefinition" in="Start.$ThreadDefinitions">
              <do_if value="@$ThreadDefinition.$UseArea">
                <set_value name="$Faction" exact="$ThreadDefinition.$Faction"/>
                <set_value name="$EnemyFaction" exact="$ThreadDefinition.$EnemyFaction"/>
                <set_value name="$ProcessFactionPair" exact="true"/>
                <do_for_each name="$Area" in="Start.$Areas">
                  <do_if value="$Area.$Faction == $ThreadDefinition.$Faction and $Area.$EnemyFaction == $ThreadDefinition.$EnemyFaction">
                    <set_value name="$ProcessFactionPair" exact="false"/>
                    <break/>
                  </do_if>
                </do_for_each>
                <do_if value="$ProcessFactionPair">
                  <find_sector name="$Sectors" multiple="true">
                    <match_any>
                      <match owner="$Faction"/>
                      <match contestedby="$Faction"/>
                    </match_any>
                  </find_sector>
                  <do_if value="$Sectors.count">
                    <set_value name="$ExcludedSectors" exact="@global.$FactionManagers.{$Faction}.$ExcludedSectors.clone"/>
                    <find_sector name="$EnemySectors" excluded="$ExcludedSectors" multiple="true">
                      <match_any>
                        <match owner="$EnemyFaction"/>
                        <match contestedby="$EnemyFaction"/>
                      </match_any>
                    </find_sector>
                    <do_if value="$EnemySectors.count">
                      <shuffle_list list="$EnemySectors"/>
                      <do_while value="$EnemySectors.count">
                        <set_value name="$NewArea" exact="table[                                  $Faction = $Faction,                                  $EnemyFaction = $EnemyFaction,                                  $HostSectors = $Sectors,                                  $OfferSectors = $Sectors.clone,                                  $EnemySectors = [],                                  $EntryPoints = [],                                  $EntryPointSectors = [],                                  $ActiveSituations = []                                  ]"/>
                        <set_value name="$EnemySector" exact="$EnemySectors.{1}"/>
                        <find_cluster_in_range distances="$NearClusters" object="$EnemySector" maxdistance="2" multiple="true"/>
                        <debug_text text="'Analysing area based around sector ' + $EnemySector + ' ' + $EnemySector.knownname" chance="$DebugChance"/>
                        <!--First, add all enemy sectors withing 1 gate distance-->
                        <do_for_each valuename="$ClusterDistance" name="$NearCluster" in="$NearClusters">
                          <do_if value="$ClusterDistance le 1">
                            <find_sector name="$NearSectors" excluded="$ExcludedSectors" multiple="true" space="$NearCluster"/>
                            <do_for_each name="$NearSector" in="$NearSectors">
                              <do_if value="$EnemySectors.indexof.{$NearSector}">
                                <append_to_list name="$NewArea.$EnemySectors" exact="$NearSector"/>
                                <append_to_list name="$NewArea.$OfferSectors" exact="$NearSector"/>
                                <remove_from_list name="$EnemySectors" exact="$NearSector" multiple="false"/>
                              </do_if>
                            </do_for_each>
                          </do_if>
                        </do_for_each>
                        <!--Second, find all entry points into those enemy sectors-->
                        <do_for_each valuename="$ClusterDistance" name="$NearCluster" in="$NearClusters">
                          <find_object name="$PotentialGates" class="[class.gate, class.highwayentrygate]" space="$NearCluster" multiple="true"/>
                          <do_for_each name="$PotentialGate" in="$PotentialGates">
                            <do_if value="$PotentialGate.destination and not $NewArea.$EnemySectors.indexof.{$PotentialGate.sector} and $NewArea.$EnemySectors.indexof.{$PotentialGate.destination.sector}">
                              <append_to_list name="$NewArea.$EntryPoints" exact="$PotentialGate"/>
                              <do_if value="not $NewArea.$EntryPointSectors.indexof.{$PotentialGate.sector}">
                                <append_to_list name="$NewArea.$EntryPointSectors" exact="$PotentialGate.sector"/>
                              </do_if>
                            </do_if>
                          </do_for_each>
                        </do_for_each>
                        <do_if value="$NewArea.$EnemySectors.count == 0">
                          <assert value="false" text="'Was unable to add any sectors of enemy faction ' + $EnemyFaction + ' even though one was expected. [Owen]'"/>
                          <break/>
                        </do_if>
                        <do_else>
                          <append_to_list name="Start.$Areas" exact="$NewArea"/>
                        </do_else>
                      </do_while>
                    </do_if>
                  </do_if>
                </do_if>
              </do_if>
            </do_for_each>
            <shuffle_list list="Start.$Areas"/>
            <do_for_each name="$Area" in="Start.$Areas" chance="$DebugChance">
              <debug_text text="'Area for faction: ' + $Area.$Faction + ' against ' + $Area.$EnemyFaction"/>
              <debug_text text="'Offer sectors'"/>
              <do_for_each name="$HostSector" in="$Area.$OfferSectors">
                <debug_text text="$HostSector + ' ' + $HostSector.knownname"/>
              </do_for_each>
              <debug_text text="'Enemy sectors'"/>
              <do_for_each name="$EnemySector" in="$Area.$EnemySectors">
                <debug_text text="$EnemySector.knownname"/>
              </do_for_each>
              <debug_text text="'Entry points'"/>
              <do_for_each name="$EntryPoint" in="$Area.$EntryPoints">
                <debug_text text="$EntryPoint.knownname + ' in ' + $EntryPoint.sector.knownname"/>
              </do_for_each>
            </do_for_each>
          </actions>
        </cue>
        <cue name="RegenerateAreaTable" instantiate="true" checktime="60s" checkinterval="15min">
          <actions>
            <signal_cue_instantly cue="GenerateAreaTables"/>
          </actions>
        </cue>
        <cue name="Gamestart">
          <delay exact="2s"/>
          <actions>
            <signal_cue cue="CalculateThreads"/>
          </actions>
        </cue>
        <cue name="ThreadOfferTimeout" instantiate="true" checktime="60s" checkinterval="5min">
          <delay min="2s" max="5s"/>
          <actions>
            <do_all exact="$Threads.count" counter="$i" reverse="true">
              <do_if value="player.age - $Threads.{$i}.$ThreadCue.time gt [50min, 55min, 60min].random and $ActiveThreads.indexof.{$Threads.{$i}.$ThreadCue} == 0">
                <signal_cue_instantly cue="$Threads.{$i}.$CleanupCue"/>
              </do_if>
            </do_all>
          </actions>
        </cue>
        <cue name="CalculateThreads" instantiate="true">
          <conditions>
            <check_any>
              <event_object_changed_sector object="player.entity"/>
              <event_cue_signalled/>
            </check_any>
            <check_value value="player.sector"/>
          </conditions>
          <actions>
            <do_if value="not $ThreadList?">
              <set_value name="$ThreadList" exact="[]"/>
            </do_if>
            <debug_text text="'Player is now in ' + player.sector + ' ' + player.sector.knownname" chance="$DebugChance"/>
            <!--TODO @Owen set $CentralSector to null for cases where we want to find all war fronts in the galaxy e.g player is subscribed and we want to show them threads for at least one front-->
            <set_value name="$CentralSector" exact="player.sector"/>
            <include_actions ref="GetWarFronts"/>
            <set_value name="$ThreadDefinitionIDs" exact="$ThreadDefinitions.keys.list"/>
            <shuffle_list list="$ThreadDefinitionIDs"/>
            <set_value name="$WarFrontFactions" exact="$WarFronts.keys.list"/>
            <set_value name="$SignalledContactCreationCues" exact="[]"/>
            <set_value name="$SignalledIntroMissions" exact="[]"/>
            <do_all exact="$WarFrontFactions.count" counter="$i">
              <debug_text text="'Checking war fronts for faction: ' + $WarFrontFactions.{$i}" chance="$DebugChance2"/>
              <set_value name="$FactionWarFronts" exact="$WarFronts.{$WarFrontFactions.{$i}}"/>
              <do_all exact="$FactionWarFronts.count" counter="$j">
                <set_value name="$WarFront" exact="$FactionWarFronts.{$j}"/>
                <do_for_each name="$ThreadDefinitionID" in="$ThreadDefinitionIDs">
                  <set_value name="$Potential_Thread" exact="$ThreadDefinitions.{$ThreadDefinitionID}"/>
                  <debug_text text="'Checking if mission thread ' + $ThreadDefinitionID + ' should be spawned around sector ' + @$CentralSector.knownname + ' for faction ' + $WarFrontFactions.{$i} + ' against ' + $WarFront.$EnemyFaction" chance="$DebugChance2"/>
                  <do_if value="not @$Potential_Thread.$UseArea and $WarFrontFactions.{$i} == $Potential_Thread.$Faction and $WarFront.$EnemyFaction == $Potential_Thread.$EnemyFaction">
                    <set_value name="$ThreadValid" exact="true"/>
                    <!--First, check that there isn't already the same thread already running for this WarFront-->
                    <do_all exact="$Threads.count" counter="$tc_k">
                      <do_if value="$Threads.{$tc_k}.$ThreadCue.$Definition.$ID == $Potential_Thread.$ID">
                        <set_value name="$ThreadInstanceDefinition" exact="$Threads.{$tc_k}.$ThreadCue.$Definition"/>
                        <do_if value="$WarFront.$EnemyFaction == $ThreadInstanceDefinition.$WarFront.$EnemyFaction">
                          <do_if value="$WarFront.$HostEntryPoint and $WarFront.$HostEntryPoint == $ThreadInstanceDefinition.$WarFront.$HostEntryPoint">
                            <set_value name="$ThreadValid" exact="false"/>
                            <break/>
                          </do_if>
                          <do_elseif value="$WarFront.$ContestedSectors.count and $ThreadInstanceDefinition.$WarFront.$ContestedSectors.count">
                            <do_all exact="$WarFront.$ContestedSectors.count" counter="$tc_o">
                              <do_if value="$ThreadInstanceDefinition.$WarFront.$ContestedSectors.indexof.{$WarFront.$ContestedSectors.{$tc_o}}">
                                <set_value name="$ThreadValid" exact="false"/>
                                <break/>
                              </do_if>
                            </do_all>
                          </do_elseif>
                        </do_if>
                      </do_if>
                    </do_all>
                    <!--TODO @Owen take $ThreadAbortRelation into account-->
                    <do_if value="$ThreadValid">
                      <set_value name="$ThreadValid" exact="false"/>
                      <do_if value="@$Potential_Thread.$ThreadConditionLibs.count">
                        <do_all exact="$Potential_Thread.$ThreadConditionLibs.count" counter="$o">
                          <do_if value="$WarFront.$ActiveSituations.indexof.{$Potential_Thread.$ThreadConditionLibs.{$o}}">
                            <set_value name="$ThreadValid" exact="true"/>
                          </do_if>
                          <do_else>
                            <include_actions ref="$Potential_Thread.$ThreadConditionLibs.{$o}"/>
                            <do_if value="$SituationValid">
                              <append_to_list name="$WarFront.$ActiveSituations" exact="$Potential_Thread.$ThreadConditionLibs.{$o}"/>
                              <set_value name="$ThreadValid" exact="true"/>
                            </do_if>
                          </do_else>
                        </do_all>
                      </do_if>
                      <do_else>
                        <set_value name="$ThreadValid" exact="true"/>
                      </do_else>
                    </do_if>
                    <do_if value="$ThreadValid">
                      <set_value name="$MissionGroupCue" exact="$MissionGroupCues.{$Potential_Thread.$MissionGroup}"/>
                      <do_if value="$MissionGroupCue.$SubscriptionStatus == 'unsubscribed'">
                        <do_if value="$MissionGroupCue.$IntroMissionCue.state == cuestate.waiting and not $SignalledIntroMissions.indexof.{$MissionGroupCue.$IntroMissionCue}">
                          <do_if value="(not $MissionGroupCue.$Mission_Contact.isclass.npc or not $MissionGroupCue.$PlacementObject.isoperational) and not $SignalledContactCreationCues.indexof.{$MissionGroupCue.$ContactCreatorCue}" comment="npc class check incase of disconnected">
                            <append_to_list name="$SignalledContactCreationCues" exact="$MissionGroupCue.$ContactCreatorCue"/>
                            <signal_cue_instantly cue="$MissionGroupCue.$ContactCreatorCue" param="$WarFront.$HostSectors.clone"/>
                          </do_if>
                          <do_if value="$MissionGroupCue.$Mission_Contact.isclass.npc and $MissionGroupCue.$PlacementObject.isoperational">
                            <debug_text text="'Signalling intro mission cue ' + $MissionGroupCue.$IntroMissionCue + ' for mission group ' + $Potential_Thread.$MissionGroup" chance="$DebugChance"/>
                            <append_to_list name="$SignalledIntroMissions" exact="$MissionGroupCue.$IntroMissionCue"/>
                            <signal_cue cue="$MissionGroupCue.$IntroMissionCue"/>
                          </do_if>
                        </do_if>
                      </do_if>
                      <do_elseif value="$MissionGroupCue.$SubscriptionStatus == 'subscribed'">
                        <do_if value="$ActiveThreads.count == 0" comment="Don't offer new mission threads, if we already have an active mission-thread">
                          <debug_text text="'Creating new subscription thread for ' + $ThreadDefinitionID + ' around sector ' + @$CentralSector.knownname" chance="$DebugChance"/>
                          <set_value name="$New_Thread" exact="$Potential_Thread.clone"/>
                          <!--TODO @Owen sanity checks-->
                          <do_if value="not $MissionGroupCue.$Mission_Contact.isclass.npc or not $MissionGroupCue.$PlacementObject.isoperational" comment="class check incase of disconnected">
                            <signal_cue_instantly cue="$MissionGroupCues.{$New_Thread.$MissionGroup}.$ContactCreatorCue" param="$WarFront.$HostSectors.clone"/>
                          </do_if>
                          <set_value name="$New_Thread.$Contact" exact="$MissionGroupCue.$Mission_Contact"/>
                          <set_value name="$New_Thread.$HQ" exact="$New_Thread.$Faction.headquarters"/>
                          <!--WarFront should essentially be read-only, so we're not going to clone it-->
                          <set_value name="$New_Thread.$WarFront" exact="$WarFront"/>
                          <set_value name="$New_Thread.$OfferSectors" exact="$WarFront.$OfferSectors"/>
                          <set_value name="$New_Thread.$DebugChance" exact="$DebugChance"/>
                          <!--TODO @Guage the current mood of this faction on this war front-->
                          <do_any>
                            <set_value name="$ThreadMood" exact="'negative'"/>
                            <set_value name="$ThreadMood" exact="'positive'"/>
                          </do_any>
                          <do_if value="$New_Thread.$NameLib?" comment="Support for older mission threads without text construction libs">
                            <!--Get sub-missions-->
                            <include_actions ref="$New_Thread.$SubMissionLib"/>
                            <!--Get thread name-->
                            <include_actions ref="$New_Thread.$NameLib"/>
                            <set_value name="$New_Thread.$ThreadName" exact="this.$Name"/>
                            <!--Construct a suitable description-->
                            <include_actions ref="$New_Thread.$DescriptionLib"/>
                            <set_value name="$New_Thread.$ThreadDescription" exact="this.$Description"/>
                            <!-- Construct reward for this instance of the thread -->
                            <do_if value="$New_Thread.$RewardLib?">
                              <include_actions ref="$New_Thread.$RewardLib"/>
                              <do_if value="this.$Reward?">
                                <set_value name="$New_Thread.$Reward" exact="this.$Reward"/>
                              </do_if>
                              <do_if value="this.$RewardObject?">
                                <set_value name="$New_Thread.$RewardObject" exact="this.$RewardObject"/>
                              </do_if>
                              <do_if value="this.$RewardText?">
                                <set_value name="$New_Thread.$RewardText" exact="this.$RewardText"/>
                              </do_if>
                            </do_if>
                          </do_if>
                          <set_value name="$ThreadManagerParams" exact="table[                             $ThreadDefinition = $New_Thread,                             $RegisterThreadCue = Register_Thread,                             $ThreadAcceptedCue = Thread_Accepted,                             $CleanupThreadCue  = Cleanup_Thread]"/>
                          <signal_cue_instantly cue="md.MC_Management.Thread_Manager" param="$ThreadManagerParams"/>
                        </do_if>
                        <do_else>
                          <debug_text text="'Ignored (already have an active Missionthread)'" chance="$DebugChance"/>
                        </do_else>
                      </do_elseif>
                    </do_if>
                  </do_if>
                </do_for_each>
              </do_all>
            </do_all>
            <do_if value="Start.$Areas.count">
              <!--Table to count how many area threads thread there are by ID-->
              <set_value name="$ThreadCounts" exact="table[]"/>
              <do_all exact="$Threads.count" counter="$tc_k">
                <do_if value="@$Threads.{$tc_k}.$ThreadCue.$Definition.$UseArea">
                  <set_value name="$ThreadCounts.{$Threads.{$tc_k}.$ThreadCue.$Definition.$ID}" operation="add"/>
                </do_if>
              </do_all>
              <set_value name="$NewThreads" exact="[]"/>
              <!--Because the number of area threads are limited, select the areas at random-->
              <do_all min="Start.$Areas.count * 2" max="Start.$Areas.count * 3">
                <set_value name="$Area" exact="Start.$Areas.random"/>
                <shuffle_list list="$ThreadDefinitionIDs"/>
                <do_for_each name="$ThreadDefinitionID" in="$ThreadDefinitionIDs" reverse="true">
                  <set_value name="$Potential_Thread" exact="$ThreadDefinitions.{$ThreadDefinitionID}"/>
                  <do_if value="@$Potential_Thread.$UseArea and $Area.$Faction == $Potential_Thread.$Faction and $Area.$EnemyFaction == $Potential_Thread.$EnemyFaction">
                    <debug_text text="'Checking if mission thread ' + $ThreadDefinitionID + ' should be spawned for faction ' + $Potential_Thread.$Faction + ' against ' + $Potential_Thread.$EnemyFaction + ' in an area containing ' + @$Area.$EnemySectors.{1}.knownname" chance="$DebugChance2"/>
                    <do_if value="@$Potential_Thread.$MaxInstances and $ThreadCounts.{$Potential_Thread.$ID}? and $ThreadCounts.{$Potential_Thread.$ID} ge $Potential_Thread.$MaxInstances">
                      <!--Already enough instances of this thread-->
                      <debug_text text="'Too many instances of ' + $ThreadDefinitionID + ' do not add another'" chance="$DebugChance"/>
                      <remove_from_list name="$ThreadDefinitionIDs" exact="$ThreadDefinitionID"/>
                      <continue/>
                    </do_if>
                    <!--Check that another one of these threads can we spawned and that there isn't already the same thread already running for this area-->
                    <set_value name="$ThreadValid" exact="true"/>
                    <set_value name="$AreaThreadCount" exact="0"/>
                    <!--Two passes. One with $Threads and another with $NewThreads-->
                    <do_all exact="2" counter="$threads_i">
                      <do_if value="$threads_i == 1">
                        <set_value name="$TempThreadsList" exact="$Threads"/>
                      </do_if>
                      <do_else>
                        <set_value name="$TempThreadsList" exact="$NewThreads"/>
                      </do_else>
                      <do_all exact="$TempThreadsList.count" counter="$tc_k">
                        <do_if value="$threads_i == 1">
                          <set_value name="$ThreadInstanceDefinition" exact="$TempThreadsList.{$tc_k}.$ThreadCue.$Definition"/>
                        </do_if>
                        <do_else>
                          <set_value name="$ThreadInstanceDefinition" exact="$TempThreadsList.{$tc_k}"/>
                        </do_else>
                        <do_if value="$ThreadInstanceDefinition.$ID == $Potential_Thread.$ID">
                          <do_if value="$Area.$EnemyFaction == $ThreadInstanceDefinition.$Area.$EnemyFaction">
                            <do_all exact="$Area.$EnemySectors.count" counter="$tc_o">
                              <do_if value="$ThreadInstanceDefinition.$Area? and $ThreadInstanceDefinition.$Area.$EnemySectors.indexof.{$Area.$EnemySectors.{$tc_o}}">
                                <set_value name="$ThreadValid" exact="false"/>
                                <break/>
                              </do_if>
                            </do_all>
                          </do_if>
                        </do_if>
                        <do_else>
                          <!--This is a different thread but check that there aren't already too many threads in this area-->
                          <do_all exact="$Area.$EnemySectors.count" counter="$tc_o">
                            <do_if value="$ThreadInstanceDefinition.$Area? and $ThreadInstanceDefinition.$Area.$EnemySectors.indexof.{$Area.$EnemySectors.{$tc_o}}">
                              <set_value name="$AreaThreadCount" operation="add"/>
                            </do_if>
                          </do_all>
                        </do_else>
                      </do_all>
                    </do_all>
                    <remove_value name="$ThreadInstanceDefinition"/>
                    <remove_value name="$TempThreadsList"/>
                    <do_if value="$ThreadValid and $AreaThreadCount ge 2">
                      <debug_text text="'Too many threads in this area. Do not add another'" chance="$DebugChance"/>
                      <set_value name="$ThreadValid" exact="false"/>
                    </do_if>
                    <do_if value="$ThreadValid">
                      <set_value name="$ThreadValid" exact="true"/>
                      <do_if value="@$Potential_Thread.$ThreadConditionLibs.count">
                        <set_value name="$ThreadValid" exact="false"/>
                        <do_all exact="$Potential_Thread.$ThreadConditionLibs.count" counter="$o">
                          <do_if value="$Area.$ActiveSituations.indexof.{$Potential_Thread.$ThreadConditionLibs.{$o}}">
                            <set_value name="$ThreadValid" exact="true"/>
                          </do_if>
                          <do_else>
                            <include_actions ref="$Potential_Thread.$ThreadConditionLibs.{$o}"/>
                            <do_if value="$SituationValid">
                              <append_to_list name="$Area.$ActiveSituations" exact="$Potential_Thread.$ThreadConditionLibs.{$o}"/>
                              <set_value name="$ThreadValid" exact="true"/>
                            </do_if>
                          </do_else>
                        </do_all>
                      </do_if>
                      <do_if value="$ThreadValid">
                        <set_value name="$MissionGroupCue" exact="$MissionGroupCues.{$Potential_Thread.$MissionGroup}"/>
                        <do_if value="$MissionGroupCue.$SubscriptionStatus == 'unsubscribed'">
                          <do_if value="$MissionGroupCue.$IntroMissionCue.state == cuestate.waiting and not $SignalledIntroMissions.indexof.{$MissionGroupCue.$IntroMissionCue}">
                            <do_if value="(not $MissionGroupCue.$Mission_Contact.isclass.npc or not $MissionGroupCue.$PlacementObject.isoperational) and not $SignalledContactCreationCues.indexof.{$MissionGroupCue.$ContactCreatorCue}" comment="npc class check incase of disconnected">
                              <append_to_list name="$SignalledContactCreationCues" exact="$MissionGroupCue.$ContactCreatorCue"/>
                              <signal_cue_instantly cue="$MissionGroupCue.$ContactCreatorCue"/>
                            </do_if>
                            <do_if value="$MissionGroupCue.$Mission_Contact.isclass.npc and $MissionGroupCue.$PlacementObject.isoperational">
                              <debug_text text="'Signalling intro mission cue ' + $MissionGroupCue.$IntroMissionCue + ' for mission group ' + $Potential_Thread.$MissionGroup" chance="$DebugChance"/>
                              <append_to_list name="$SignalledIntroMissions" exact="$MissionGroupCue.$IntroMissionCue"/>
                              <signal_cue cue="$MissionGroupCue.$IntroMissionCue"/>
                            </do_if>
                          </do_if>
                        </do_if>
                        <do_elseif value="$MissionGroupCue.$SubscriptionStatus == 'subscribed'">
                          <do_if value="$ActiveThreads.count == 0" comment="Don't offer new thread, if we already have active threads">
                            <debug_text text="'Creating new subscription thread for ' + $ThreadDefinitionID + ' in area containing sector: ' + @$Area.$EnemySectors.{1}.knownname" chance="$DebugChance"/>
                            <set_value name="$New_Thread" exact="$Potential_Thread.clone"/>
                            <set_value name="$ThreadCounts.{$ThreadDefinitionID}" operation="add"/>
                            <!--TODO @Owen sanity checks-->
                            <do_if value="not $MissionGroupCue.$Mission_Contact.isclass.npc or not $MissionGroupCue.$PlacementObject.isoperational" comment="class check incase of disconnected">
                              <signal_cue_instantly cue="$MissionGroupCues.{$New_Thread.$MissionGroup}.$ContactCreatorCue"/>
                            </do_if>
                            <set_value name="$New_Thread.$Contact" exact="$MissionGroupCue.$Mission_Contact"/>
                            <set_value name="$New_Thread.$HQ" exact="$New_Thread.$Faction.headquarters"/>
                            <!--WarFront should essentially be read-only, so we're not going to clone it-->
                            <set_value name="$New_Thread.$Area" exact="$Area"/>
                            <set_value name="$New_Thread.$OfferSectors" exact="$Area.$OfferSectors"/>
                            <set_value name="$New_Thread.$DebugChance" exact="$DebugChance"/>
                            <!--TODO @Guage the current mood of this faction on this war front-->
                            <do_any>
                              <set_value name="$ThreadMood" exact="'negative'"/>
                              <set_value name="$ThreadMood" exact="'positive'"/>
                            </do_any>
                            <do_if value="$New_Thread.$NameLib?" comment="Support for older mission threads without text construction libs">
                              <!--Get sub-missions-->
                              <include_actions ref="$New_Thread.$SubMissionLib"/>
                              <!--Get thread name-->
                              <run_actions ref="$New_Thread.$NameLib" result="$New_Thread.$ThreadName">
                                <param name="AreaBaseSector" value="$Area.$EnemySectors.{1}"/>
                              </run_actions>
                              <!--Construct a suitable description-->
                              <include_actions ref="$New_Thread.$DescriptionLib"/>
                              <set_value name="$New_Thread.$ThreadDescription" exact="this.$Description"/>
                              <!-- Construct reward for this instance of the thread -->
                              <do_if value="$New_Thread.$RewardLib?">
                                <include_actions ref="$New_Thread.$RewardLib"/>
                                <do_if value="this.$Reward?">
                                  <set_value name="$New_Thread.$Reward" exact="this.$Reward"/>
                                </do_if>
                                <do_if value="this.$RewardObject?">
                                  <set_value name="$New_Thread.$RewardObject" exact="this.$RewardObject"/>
                                </do_if>
                                <do_if value="this.$RewardText?">
                                  <set_value name="$New_Thread.$RewardText" exact="this.$RewardText"/>
                                </do_if>
                              </do_if>
                            </do_if>
                            <append_to_list name="$NewThreads" exact="$New_Thread"/>
                            <set_value name="$ThreadManagerParams" exact="table[                               $ThreadDefinition = $New_Thread,                               $RegisterThreadCue = Register_Thread,                               $ThreadAcceptedCue = Thread_Accepted,                               $CleanupThreadCue  = Cleanup_Thread]"/>
                            <signal_cue_instantly cue="md.MC_Management.Thread_Manager" param="$ThreadManagerParams"/>
                            <!--Break out of the do_for_each loop and select another area randomly with a newly shuffled list of thread IDs-->
                            <break/>
                          </do_if>
                          <do_else>
                            <debug_text text="'Ignored (already have an active thread)'"/>
                          </do_else>
                        </do_elseif>
                      </do_if>
                    </do_if>
                  </do_if>
                </do_for_each>
              </do_all>
              <remove_value name="$ThreadCounts"/>
              <remove_value name="$NewThreads"/>
            </do_if>
          </actions>
        </cue>
        <!--event.param = thread table: table[$ThreadCue, $CleanupCue]-->
        <cue name="Register_Thread" instantiate="true">
          <conditions>
            <event_cue_signalled/>
          </conditions>
          <actions>
            <debug_text text="'registering %s:%s'.[event.param.$ThreadCue.$Definition.$ID, event.param.$ThreadCue.$Definition.$ThreadName]" chance="$DebugChance"/>
            <append_to_list name="$Threads" exact="event.param"/>
          </actions>
        </cue>
        <!-- Store the selected mission-thread in $ActiveThreads, and disable all other mission-thread cues of that mission group-->
        <cue name="Thread_Accepted" instantiate="true">
          <conditions>
            <event_cue_signalled/>
          </conditions>
          <actions>
            <debug_text text="'Accepted mission thread: ' + event.param.$Definition.$ID" chance="$DebugChance"/>
            <append_to_list name="$ActiveThreads" exact="event.param"/>
            <do_all exact="$Threads.count" counter="$i" reverse="true">
              <do_if value="$Threads.{$i}.$ThreadCue != event.param and $Threads.{$i}.$ThreadCue.$Definition.$MissionGroup == event.param.$Definition.$MissionGroup">
                <set_value name="$Threads.{$i}.$CleanupCue.namespace.$Failed" exact="true"/>
                <!--TODO @Owen This will stop the mission group going into cooldown when replacing an active mission but maybe we should have a different penalty on aborting missions-->
                <set_value name="$Threads.{$i}.$CleanupCue.namespace.$Interrupted" exact="true"/>
                <signal_cue_instantly cue="$Threads.{$i}.$CleanupCue"/>
              </do_if>
            </do_all>
          </actions>
        </cue>
        <!--event.param = table[
        $cue                = thread cue namespace,
        $completedmissions  = number of completed missions,
        $failedmissions     = number of failed missions]-->
        <cue name="Cleanup_Thread" instantiate="true">
          <conditions>
            <event_cue_signalled/>
          </conditions>
          <actions>
            <debug_text text="'Attempting to clean up mission thread: ' + event.param.$cue.$Definition.$ID" chance="$DebugChance"/>
            <set_value name="this.$ActiveThreadIdx" exact="$ActiveThreads.indexof.{event.param.$cue}"/>
            <do_if value="this.$ActiveThreadIdx">
              <remove_value name="$ActiveThreads.{this.$ActiveThreadIdx}"/>
            </do_if>
            <set_value name="this.$Removed" exact="false"/>
            <do_all exact="$Threads.count" counter="$Cleanup_Thread_i" reverse="true">
              <do_if value="$Threads.{$Cleanup_Thread_i}.$ThreadCue == event.param.$cue">
                <assert value="not this.$Removed" text="'Matching thread was already removed. Should not happen again. Thread: ' + event.param.$cue.$Definition.$ID + ' [Owen]'"/>
                <set_value name="this.$Removed" exact="true"/>
                <remove_value name="$Threads.{$Cleanup_Thread_i}"/>
              </do_if>
            </do_all>
            <assert value="this.$Removed" text="'No matching thread was found to be removed. Thread: ' + event.param.$cue.$Definition.$ID + ' [Owen]'"/>
          </actions>
        </cue>
      </cues>
    </cue>
    <!--Generic Event-handling code -->
    <library name="MM__Standard_GM_Event">
      <actions>
        <do_if value="@static.$EndFeedbackValue" comment="Evaluate return-value of GM (success/failure)">
          <debug_text text="'Mission ended. feedback' + static.$EndFeedbackValue" chance="$DebugChance"/>
          <do_if value="$SuccessfullyGenerated">
            <signal_cue_instantly cue="$Definition.$EndedCue" param="table[$wrappercue = namespace, $feedback = static.$EndFeedbackValue]"/>
          </do_if>
          <do_else>
            <signal_cue_instantly cue="$Definition.$SpawnFailedCue"/>
          </do_else>
          <do_if value="static.$EndFeedbackValue.$type" exact="'success'" comment="see the $FeedbackValues table in the Generic Mission">
            <do_if value="@$MissionDataTable.$NextMission">
              <do_if value="false" comment="Forced failure as there are no valid NextMission cases defined for this mission. Replace with valid case if needed.">

              </do_if>
              <do_else>
                <!--If there is a followup mission, signal it with whatever parameters it needs-->
                <assert value="false" text="'Next mission ' + $MissionDataTable.$NextMission + ' is missing handling in ' + namespace + '. It should be explicitly signalled with whatever parameters it requires. [Owen]'"/>
              </do_else>
            </do_if>
          </do_if>
          <do_elseif value="static.$EndFeedbackValue.$ID" exact="'$MISSION_TIMEOUT'">
          </do_elseif>
          <cancel_cue cue="namespace"/>
        </do_if>
        <do_elseif value="@static.$FeedbackValue">
          <debug_text text="'Mission signalled with feedback' + static.$FeedbackValue" chance="$DebugChance"/>
          <do_if value="static.$FeedbackValue.$ID == '$MISSION_GENERATED'">
            <!--If a followup mission, no need to inform the Mission Thread Manager of the mission successfully being generated as $Definition.$SpawnSuccessCue was already called for this mission-->
            <do_if value="not $FollowUp">
              <set_value name="$MissionDataTable" exact="event.param.clone"/>
              <set_value name="$MissionDataTable.$WrapperCue" exact="namespace"/>
              <signal_cue_instantly cue="$Definition.$SpawnSuccessCue" param="$MissionDataTable"/>
            </do_if>
            <set_value name="$SuccessfullyGenerated" exact="true"/>
          </do_if>
        </do_elseif>
      </actions>
    </library>
    <!--
    ############################
    Mission Thread Condition Libraries
    ############################-->
    <!-- For debugging, to always enable a specific subscription -->
    <library name="Situation__Always">
      <actions>
        <set_value name="$SituationValid" exact="true"/>
      </actions>
    </library>
    <!--
        Required variables:
          - $WarFront = Current war front being checked (already checked that the Host and Enemy factions match this thread)
          - $Potential_Thread = Thread definition to check if it's possible with the war front and active faction logic behaviours
          
          Values to set for conditions:
          - $HostInvasionPhase: string or null. either the ID of the phase e.g. 'beachhead' or 'none' for No Invasion. If null, it neither matter if there is an invasion or not.
          - $EnemyInvasionPhase: string or null. either the ID of the phase e.g. 'beachhead' or 'none' for No Invasion. If null, it neither matter if there is an invasion or not.
          - $ContestedSectors: -1 = No filter. 0 = No contested sectors. 1 = At least 1 contested sector-->
    <!--Cold War / Cleanup
        Host: No invasions
        Enemy: No invasion
        Ally: N/A
        Enemy Vs. Ally: N/A
        Contested sectors: None-->
    <library name="Situation__Cold_War">
      <actions>
        <set_value name="$HostInvasionPhase" exact="'none'"/>
        <set_value name="$EnemyInvasionPhase" exact="'none'"/>
        <set_value name="$AllyInvasionPhase" exact="null"/>
        <set_value name="$EnemyVsAllyInvasionPhase" exact="null"/>
        <set_value name="$ContestedSectors" exact="0"/>
        <include_actions ref="Thread_Conditions__Common"/>
      </actions>
    </library>
    <!--Contention
        Host: No invasions
        Enemy: No invasions
        Ally: N/A
        Enemy Vs. Ally: N/A
        Contested sectors: ge 1-->
    <library name="Situation__Contention">
      <actions>
        <set_value name="$HostInvasionPhase" exact="'none'"/>
        <set_value name="$EnemyInvasionPhase" exact="'none'"/>
        <set_value name="$AllyInvasionPhase" exact="null"/>
        <set_value name="$EnemyVsAllyInvasionPhase" exact="null"/>
        <set_value name="$ContestedSectors" exact="1"/>
        <include_actions ref="Thread_Conditions__Common"/>
      </actions>
    </library>
    <!--Invasion preparation
        Host: At least 1 invasion in 'prepare_for_invasion' phase
        Enemy: N/A
        Ally: N/A
        Enemy Vs. Ally: N/A
        Contested sectors: N/A-->
    <library name="Situation__Invasion_Prep">
      <actions>
        <set_value name="$HostInvasionPhase" exact="'prepare_for_invasion'"/>
        <set_value name="$EnemyInvasionPhase" exact="null"/>
        <set_value name="$AllyInvasionPhase" exact="null"/>
        <set_value name="$EnemyVsAllyInvasionPhase" exact="null"/>
        <set_value name="$ContestedSectors" exact="-1"/>
        <include_actions ref="Thread_Conditions__Common"/>
      </actions>
    </library>
    <!--Defence preparation
        Host: N/A
        Enemy: At least 1 invasion in 'prepare_for_invasion' phase
        Ally: N/A
        Enemy Vs. Ally: N/A
        Contested sectors: N/A-->
    <library name="Situation__Defence_Prep">
      <actions>
        <set_value name="$HostInvasionPhase" exact="null"/>
        <set_value name="$EnemyInvasionPhase" exact="'prepare_for_invasion'"/>
        <set_value name="$AllyInvasionPhase" exact="null"/>
        <set_value name="$EnemyVsAllyInvasionPhase" exact="null"/>
        <set_value name="$ContestedSectors" exact="-1"/>
        <include_actions ref="Thread_Conditions__Common"/>
      </actions>
    </library>
    <!--Invading
        Host: At least 1 invasion in 'beachhead' phase
        Enemy: N/A
        Ally: N/A
        Enemy Vs. Ally: N/A
        Contested sectors: N/A-->
    <library name="Situation__Invading">
      <actions>
        <set_value name="$HostInvasionPhase" exact="'beachhead'"/>
        <set_value name="$EnemyInvasionPhase" exact="null"/>
        <set_value name="$AllyInvasionPhase" exact="null"/>
        <set_value name="$EnemyVsAllyInvasionPhase" exact="null"/>
        <set_value name="$ContestedSectors" exact="-1"/>
        <include_actions ref="Thread_Conditions__Common"/>
      </actions>
    </library>
    <!--Defending
        Host: N/A
        Enemy: At least 1 invasion in 'beachhead' phase
        Ally: N/A
        Enemy Vs. Ally: N/A
        Contested sectors: N/A-->
    <library name="Situation__Defending">
      <actions>
        <set_value name="$HostInvasionPhase" exact="null"/>
        <set_value name="$EnemyInvasionPhase" exact="'beachhead'"/>
        <set_value name="$AllyInvasionPhase" exact="null"/>
        <set_value name="$EnemyVsAllyInvasionPhase" exact="null"/>
        <set_value name="$ContestedSectors" exact="-1"/>
        <include_actions ref="Thread_Conditions__Common"/>
      </actions>
    </library>
    <!--Support invading ally
        Host: No invasions
        Enemy: No invasions
        Ally: At least 1 invasion in 'beachhead' phase
        Enemy Vs. Ally: N/A
        Contested sectors: N/A-->
    <library name="Situation__Invading_Ally">
      <actions>
        <set_value name="$HostInvasionPhase" exact="'none'"/>
        <set_value name="$EnemyInvasionPhase" exact="'none'"/>
        <set_value name="$AllyInvasionPhase" exact="'beachhead'"/>
        <set_value name="$EnemyVsAllyInvasionPhase" exact="null"/>
        <set_value name="$ContestedSectors" exact="-1"/>
        <include_actions ref="Thread_Conditions__Common"/>
      </actions>
    </library>
    <!--Support defending ally
        Host: No invasions
        Enemy: No invasions
        Ally: N/A
        Enemy Vs. Ally: At least 1 invasion in 'beachhead' phase
        Contested sectors: N/A-->
    <library name="Situation__Defending_Ally">
      <actions>
        <set_value name="$HostInvasionPhase" exact="'none'"/>
        <set_value name="$EnemyInvasionPhase" exact="'none'"/>
        <set_value name="$AllyInvasionPhase" exact="null"/>
        <set_value name="$EnemyVsAllyInvasionPhase" exact="['prepare_for_invasion', 'beachhead']"/>
        <set_value name="$ContestedSectors" exact="-1"/>
        <include_actions ref="Thread_Conditions__Common"/>
      </actions>
    </library>
    <!--Retreat
        Host: At least 1 invasion in 'retreat' phase
        Enemy: N/A
        Ally: N/A
        Enemy Vs. Ally: N/A
        Contested sectors: N/A-->
    <library name="Situation__Retreat">
      <actions>
        <set_value name="$HostInvasionPhase" exact="'retreat'"/>
        <set_value name="$EnemyInvasionPhase" exact="null"/>
        <set_value name="$AllyInvasionPhase" exact="null"/>
        <set_value name="$EnemyVsAllyInvasionPhase" exact="null"/>
        <set_value name="$ContestedSectors" exact="-1"/>
        <include_actions ref="Thread_Conditions__Common"/>
      </actions>
    </library>
    <!--Push back
        Host: N/A
        Enemy: At least 1 invasion in 'retreat' phase
        Ally: N/A
        Enemy Vs. Ally: N/A
        Contested sectors: N/A-->
    <library name="Situation__Pushback">
      <actions>
        <set_value name="$HostInvasionPhase" exact="null"/>
        <set_value name="$EnemyInvasionPhase" exact="'retreat'"/>
        <set_value name="$AllyInvasionPhase" exact="null"/>
        <set_value name="$EnemyVsAllyInvasionPhase" exact="null"/>
        <set_value name="$ContestedSectors" exact="-1"/>
        <include_actions ref="Thread_Conditions__Common"/>
      </actions>
    </library>
    <!--For internal use by the above libraries
        Library requires the same parameters stated above.
        Values to set for conditions:
          - $HostInvasionPhase: string or null. either the ID of the phase e.g. 'beachhead' or 'none' for No Invasion. If null, it neither matter if there is an invasion or not.
          - $EnemyInvasionPhase: string or null. either the ID of the phase e.g. 'beachhead' or 'none' for No Invasion. If null, it neither matter if there is an invasion or not.
          - $ContestedSectors: -1 = No filter. 0 = No contested sectors. 1 = At least 1 contested sector-->
    <library name="Thread_Conditions__Common">
      <actions>
        <set_value name="$SituationValid" exact="true"/>
        <do_if value="$SituationValid and $HostInvasionPhase">
          <set_value name="$SituationValid" exact="false"/>
          <do_if value="$HostInvasionPhase == 'none'">
            <do_if value="$WarFront.$HostInvasions.count == 0">
              <set_value name="$SituationValid" exact="true"/>
            </do_if>
          </do_if>
          <do_elseif value="typeof $HostInvasionPhase == datatype.list">
            <do_all exact="$WarFront.$HostInvasions.count" counter="$tc_i">
              <do_if value="$WarFront.$HostInvasions.{$tc_i}.exists and $HostInvasionPhase.indexof.{$WarFront.$HostInvasions.{$tc_i}.$Phase}">
                <set_value name="$SituationValid" exact="true"/>
                <break/>
              </do_if>
            </do_all>
          </do_elseif>
          <do_else>
            <do_all exact="$WarFront.$HostInvasions.count" counter="$tc_i">
              <do_if value="$WarFront.$HostInvasions.{$tc_i}.exists and $HostInvasionPhase == $WarFront.$HostInvasions.{$tc_i}.$Phase">
                <set_value name="$SituationValid" exact="true"/>
                <break/>
              </do_if>
            </do_all>
          </do_else>
        </do_if>
        <do_if value="$SituationValid and $EnemyInvasionPhase">
          <set_value name="$SituationValid" exact="false"/>
          <do_if value="$EnemyInvasionPhase == 'none'">
            <do_if value="$WarFront.$EnemyInvasions.count == 0">
              <set_value name="$SituationValid" exact="true"/>
            </do_if>
          </do_if>
          <do_elseif value="typeof $EnemyInvasionPhase == datatype.list">
            <do_all exact="$WarFront.$EnemyInvasions.count" counter="$tc_i">
              <do_if value="$WarFront.$EnemyInvasions.{$tc_i}.exists and $EnemyInvasionPhase.indexof.{$WarFront.$EnemyInvasions.{$tc_i}.$Phase}">
                <set_value name="$SituationValid" exact="true"/>
                <break/>
              </do_if>
            </do_all>
          </do_elseif>
          <do_else>
            <do_all exact="$WarFront.$EnemyInvasions.count" counter="$tc_i">
              <do_if value="$WarFront.$EnemyInvasions.{$tc_i}.exists and $EnemyInvasionPhase == $WarFront.$EnemyInvasions.{$tc_i}.$Phase">
                <set_value name="$SituationValid" exact="true"/>
                <break/>
              </do_if>
            </do_all>
          </do_else>
        </do_if>
        <do_if value="$SituationValid and $AllyInvasionPhase">
          <set_value name="$SituationValid" exact="false"/>
          <do_if value="$AllyInvasionPhase == 'none'">
            <do_if value="$WarFront.$AllyInvasions.count == 0">
              <set_value name="$SituationValid" exact="true"/>
            </do_if>
          </do_if>
          <do_elseif value="typeof $AllyInvasionPhase == datatype.list">
            <do_all exact="$WarFront.$AllyInvasions.count" counter="$tc_i">
              <do_if value="$WarFront.$AllyInvasions.{$tc_i}.exists and $AllyInvasionPhase.indexof.{$WarFront.$AllyInvasions.{$tc_i}.$Phase}">
                <set_value name="$SituationValid" exact="true"/>
                <break/>
              </do_if>
            </do_all>
          </do_elseif>
          <do_else>
            <do_all exact="$WarFront.$AllyInvasions.count" counter="$tc_i">
              <do_if value="$WarFront.$AllyInvasions.{$tc_i}.exists and $AllyInvasionPhase == $WarFront.$AllyInvasions.{$tc_i}.$Phase">
                <set_value name="$SituationValid" exact="true"/>
                <break/>
              </do_if>
            </do_all>
          </do_else>
        </do_if>
        <do_if value="$SituationValid and $EnemyVsAllyInvasionPhase">
          <set_value name="$SituationValid" exact="false"/>
          <do_if value="$EnemyVsAllyInvasionPhase == 'none'">
            <do_if value="$WarFront.$EnemyToAllyInvasions.count == 0">
              <set_value name="$SituationValid" exact="true"/>
            </do_if>
          </do_if>
          <do_elseif value="typeof $EnemyVsAllyInvasionPhase == datatype.list">
            <do_all exact="$WarFront.$EnemyToAllyInvasions.count" counter="$tc_i">
              <do_if value="$WarFront.$EnemyToAllyInvasions.{$tc_i}.exists and $EnemyVsAllyInvasionPhase.indexof.{$WarFront.$EnemyToAllyInvasions.{$tc_i}.$Phase}">
                <set_value name="$SituationValid" exact="true"/>
                <break/>
              </do_if>
            </do_all>
          </do_elseif>
          <do_else>
            <do_all exact="$WarFront.$EnemyToAllyInvasions.count" counter="$tc_i">
              <do_if value="$WarFront.$EnemyToAllyInvasions.{$tc_i}.exists and $EnemyVsAllyInvasionPhase == $WarFront.$EnemyToAllyInvasions.{$tc_i}.$Phase">
                <set_value name="$SituationValid" exact="true"/>
                <break/>
              </do_if>
            </do_all>
          </do_else>
        </do_if>
        <do_if value="$SituationValid">
          <set_value name="$SituationValid" exact="false"/>
          <do_if value="$ContestedSectors == -1">
            <!--No filter-->
            <set_value name="$SituationValid" exact="true"/>
          </do_if>
          <do_elseif value="$ContestedSectors == 0">
            <do_if value="$WarFront.$ContestedSectors.count == 0">
              <set_value name="$SituationValid" exact="true"/>
            </do_if>
          </do_elseif>
          <do_elseif value="$ContestedSectors == 1">
            <do_if value="$WarFront.$ContestedSectors.count gt 0">
              <set_value name="$SituationValid" exact="true"/>
            </do_if>
          </do_elseif>
        </do_if>
      </actions>
    </library>
    <!--
    ######################
    Submission Libraries
    ######################-->
    <!--Variant Helper Libraries
    Helper libraries to be call from different threads but want to have the same basic variant rules
    If you want to have something custom for a faction e.g. if Vs Xenon, have twice as many enemies, either write your own variant within the cue itself, or modify variables after calling the library-->
    <library name="Large_Supply__Food">
      <actions>
        <set_value name="$StationSpace" exact="null"/>
        <do_if value="$Definition.$ThreadData.$WarFront?">
          <do_if value="$Definition.$ThreadData.$WarFront.$HostSectors.keys.count">
            <do_any>
              <set_value name="$StationSpace" exact="$Definition.$ThreadData.$WarFront.$HostSectors.keys.sorted.{1}"/>
              <set_value name="$StationSpace" exact="$Definition.$ThreadData.$WarFront.$HostSectors.keys.random"/>
            </do_any>
          </do_if>
          <do_elseif value="$Definition.$ThreadData.$WarFront.$ContestedSectors.count">
            <set_value name="$StationSpace" exact="$Definition.$ThreadData.$WarFront.$ContestedSectors.random"/>
          </do_elseif>
        </do_if>
        <do_elseif value="@$Definition.$ThreadData.$Area.$HostSectors.count">
          <set_value name="$StationSpace" exact="$Definition.$ThreadData.$Area.$HostSectors.random"/>
        </do_elseif>
        <do_if value="$StationSpace">
          <set_value name="$WorkforceResources" exact="$Definition.$ThreadData.$Faction.primaryrace.workforce.resources.list"/>
          <set_value name="$StationSupply" exact="[]"/>
          <set_value name="$ResourceFactor" min="4" max="6"/>
          <do_all exact="$WorkforceResources.count" counter="$i">
            <append_to_list name="$StationSupply" exact="table[                                 $amount = $Definition.$ThreadData.$Faction.primaryrace.workforce.resources.{$WorkforceResources.{$i}}.count * $ResourceFactor,                                 $delivered = 0,                                 $ware = $WorkforceResources.{$i}]"/>
          </do_all>
          <do_if value="$StationSupply.count">
            <!--Check that there are enough stations to deliver to-->
            <set_value name="$SupplyWares" exact="[]"/>
            <do_all exact="$StationSupply.count" counter="$supply_i">
              <append_to_list name="$SupplyWares" exact="$StationSupply.{$supply_i}.$ware"/>
            </do_all>
            <find_station name="$MatchingStations" owner="$Definition.$ThreadData.$Faction" space="$StationSpace" multiple="true">
              <match_resources wares="$SupplyWares"/>
            </find_station>
            <do_if value="$MatchingStations.count gt 2">
              <set_value name="$Valid" exact="2" comment="Valid mission variables"/>
            </do_if>
          </do_if>
        </do_if>
      </actions>
    </library>
    <library name="Large_Supply__Ship_Construction_Tech">
      <actions>
        <!--Grab the list of shiptech goods from their waregroup-->
        <set_value name="$ShipTechWares" exact="waregroup.shiptech.list"/>
        <!--Get all host sectors sorted by distance to enemy space-->
        <do_if value="$Definition.$ThreadData.$WarFront?">
          <set_value name="$SortedHostSectors" exact="$Definition.$ThreadData.$WarFront.$HostSectors.keys.sorted"/>
        </do_if>
        <do_elseif value="$Definition.$ThreadData.$Area?">
          <!--The host sectors of areas are not sorted so just shuffle them-->
          <set_value name="$SortedHostSectors" exact="$Definition.$ThreadData.$Area.$HostSectors.clone"/>
          <shuffle_list list="$SortedHostSectors"/>
        </do_elseif>
        <set_value name="$NeededWaresTable" exact="table[]"/>
        <set_value name="$StationSupply" exact="[]"/>
        <do_all exact="$SortedHostSectors.count" counter="$i">
          <!--Find shipyards or equipmentdocks for this faction in this sector-->
          <find_station name="$ShipyardOrEQDocks" space="$SortedHostSectors.{$i}" owner="$Definition.$ThreadData.$Faction" multiple="true">
            <match_any>
              <match canbuildships="true"/>
              <match equipmentdock="true"/>
            </match_any>
          </find_station>
          <!--Build a table of needed wares-->
          <clear_table table="$NeededWaresTable"/>
          <do_all exact="$ShipyardOrEQDocks.count" counter="$k">
            <find_buy_offer result="$BuyOffers" buyer="$ShipyardOrEQDocks.{$k}" wares="$ShipTechWares" multiple="true"/>
            <do_all exact="$BuyOffers.count" counter="$m">
              <set_value name="$NeededWaresTable.{$BuyOffers.{$m}.ware}" exact="$BuyOffers.{$m}.amount" operation="add"/>
            </do_all>
          </do_all>
          <debug_text text="'Needed shiptech wares: ' + $NeededWaresTable" chance="$DebugChance"/>
          <do_if value="$NeededWaresTable.keys.count">
            <set_value name="$SortedWares" exact="$NeededWaresTable.keys.sorted"/>
            <do_all exact="[$SortedWares.count, 3].min" counter="$k" reverse="true">
              <append_to_list name="$StationSupply" exact="table[                                   $amount     = [$NeededWaresTable.{$SortedWares.{$k}} / 2, 1].max,                                   $ware       = $SortedWares.{$k},                                   $delivered  = 0]"/>
            </do_all>
            <set_value name="$StationSpace" exact="$SortedHostSectors.{$i}"/>
            <set_value name="$Valid" exact="2" comment="Valid mission variables"/>
            <break/>
          </do_if>
        </do_all>
      </actions>
    </library>
    <cue name="Large_Supply__Standard" instantiate="true" namespace="this">
      <conditions>
        <event_cue_signalled/>
        <!--Signal the static cue to trigger a new instance of this mission.
        Signalling a running instance will trigger a followup mission to run its GM library. See XXX_Activate_FollowUp cue for parameters-->
      </conditions>
      <actions>
        <set_value name="$Definition" exact="event.param"/>
        <set_value name="$Page" exact="$Definition.$Page"/>
        <set_value name="$TextOffsets" exact="$Definition.$TextOffset.clone"/>
        <shuffle_list list="$TextOffsets"/>
        <set_value name="$FollowUp" exact="@$Definition.$FollowUp == true" comment="Does this mission follow directly after another, with parameters potentially passing between them. This changes how this mission is spawned and managed."/>
        <set_value name="$SuccessfullyGenerated" exact="false"/>
        <set_value name="$DebugChance" exact="$Definition.$ThreadData.$DebugChance"/>
        <set_value name="$Difficulty" exact="level.medium"/>
        <set_value name="$MissionLevel" exact="1"/>
        <assert value="not $FollowUp" text="'This mission does not currently have any parameters where it makes sense as a follow up mission. If there is, adjust the _Activate_FollowUp cue and remove this assert [Owen]'"/>
        <do_all exact="$TextOffsets.count" counter="$offset_i">
          <set_value name="$TextOffset" exact="$TextOffsets.{$offset_i}"/>
          <!--This mission is specific enough that it will only run if a matching text offset is found. If not, the offer will abort with an error.
          $Valid:
          0: Page/TextOffset not handled
          1: Correct Page/TextOffset but unable to setup mission
          2: Mission can attempt to be spawned -->
          <set_value name="$Valid" exact="0"/>
          <!--### ARGON VS XENON ###-->
          <do_if value="$Page == 30210">
            <do_if value="$TextOffset == 100000">
              <!--Food supplies for workforce-->
              <!--TODO @Owen check if there are enough stations in need of these resources-->
              <set_value name="$Valid" exact="1" comment="Valid text offset"/>
              <include_actions ref="Large_Supply__Food"/>
            </do_if>
            <do_elseif value="$TextOffset == 100100">
              <!--Construction supplies for ship construction-->
              <set_value name="$Valid" exact="1" comment="Valid text offset"/>
              <include_actions ref="Large_Supply__Ship_Construction_Tech"/>
            </do_elseif>
          </do_if>
          <!--### ARGON VS HOLY ORDER ###-->
          <do_elseif value="$Page == 30211">
            <do_if value="$TextOffset == 100000">
              <!--Food supplies for workforce-->
              <!--TODO @Owen check if there are enough stations in need of these resources-->
              <set_value name="$Valid" exact="1" comment="Valid text offset"/>
              <include_actions ref="Large_Supply__Food"/>
            </do_if>
            <do_elseif value="$TextOffset == 100100">
              <!--Construction supplies for ship construction-->
              <set_value name="$Valid" exact="1" comment="Valid text offset"/>
              <include_actions ref="Large_Supply__Ship_Construction_Tech"/>
            </do_elseif>
          </do_elseif>
          <!--### PARANID VS HOLY ORDER ###-->
          <do_elseif value="$Page == 30212">
            <do_if value="$TextOffset == 100000">
              <!--Food supplies for workforce-->
              <!--TODO @Owen check if there are enough stations in need of these resources-->
              <set_value name="$Valid" exact="1" comment="Valid text offset"/>
              <include_actions ref="Large_Supply__Food"/>
            </do_if>
            <do_elseif value="$TextOffset == 100100">
              <!--Construction supplies for ship construction-->
              <set_value name="$Valid" exact="1" comment="Valid text offset"/>
              <include_actions ref="Large_Supply__Ship_Construction_Tech"/>
            </do_elseif>
          </do_elseif>
          <!--### HOLY ORDER VS ARGON ###-->
          <do_elseif value="$Page == 30213">
            <do_if value="$TextOffset == 100000">
              <!--Food supplies for workforce-->
              <!--TODO @Owen check if there are enough stations in need of these resources-->
              <set_value name="$Valid" exact="1" comment="Valid text offset"/>
              <include_actions ref="Large_Supply__Food"/>
            </do_if>
            <do_elseif value="$TextOffset == 100100">
              <!--Construction supplies for ship construction-->
              <set_value name="$Valid" exact="1" comment="Valid text offset"/>
              <include_actions ref="Large_Supply__Ship_Construction_Tech"/>
            </do_elseif>
          </do_elseif>
          <!--### HOLY ORDER VS PARANID ###-->
          <do_elseif value="$Page == 30214">
            <do_if value="$TextOffset == 100000">
              <!--Food supplies for workforce-->
              <!--TODO @Owen check if there are enough stations in need of these resources-->
              <set_value name="$Valid" exact="1" comment="Valid text offset"/>
              <include_actions ref="Large_Supply__Food"/>
            </do_if>
            <do_elseif value="$TextOffset == 100100">
              <!--Construction supplies for ship construction-->
              <set_value name="$Valid" exact="1" comment="Valid text offset"/>
              <include_actions ref="Large_Supply__Ship_Construction_Tech"/>
            </do_elseif>
          </do_elseif>
          <!--### SPLIT VS ARGON ###-->
          <do_elseif value="$Page == 30215">

          <do_if value="$TextOffset == 100000"><!--Food supplies for workforce--><!--TODO @Owen check if there are enough stations in need of these resources--><set_value name="$Valid" exact="1" comment="Valid text offset"/><include_actions ref="Large_Supply__Food"/></do_if><do_elseif value="$TextOffset == 100100"><!--Construction supplies for ship construction--><set_value name="$Valid" exact="1" comment="Valid text offset"/><include_actions ref="Large_Supply__Ship_Construction_Tech"/></do_elseif></do_elseif>
          <!--### DLC 2 Setup ###-->
          <do_elseif value="$Page == 30216">

          <do_if value="$TextOffset == 100000"><!--Food supplies for workforce--><!--TODO @Owen check if there are enough stations in need of these resources--><set_value name="$Valid" exact="1" comment="Valid text offset"/><include_actions ref="Large_Supply__Food"/></do_if><do_elseif value="$TextOffset == 100100"><!--Construction supplies for ship construction--><set_value name="$Valid" exact="1" comment="Valid text offset"/><include_actions ref="Large_Supply__Ship_Construction_Tech"/></do_elseif></do_elseif>
          <do_if value="$Valid == 0">
            <debug_text text="'Attempting to spawn a mission on ' + this + ' but the combination of Page: ' + $Page + ' and TextOffset: ' + $TextOffset + ' do not match any definitions [Owen]'" filter="error"/>
          </do_if>
          <do_elseif value="$Valid == 2">
            <break/>
          </do_elseif>
        </do_all>
        <do_if value="$Valid == 2">
          <do_if value="$FollowUp">
            <!--Followup missions use the namespace as the mission cue-->
            <set_value name="$MissionCue" exact="namespace"/>
          </do_if>
          <do_else>
            <set_value name="$MissionCue" exact="null"/>
          </do_else>
        </do_if>
        <do_else>
          <do_if value="$Valid == 1">
            <debug_text text="'Unable to find suitable variant variables for mission on ' + this + ' with combination of Page: ' + $Page + ' and TextOffsets: ' + $TextOffsets + '. [Owen]'" chance="$DebugChance"/>
          </do_if>
          <signal_cue cue="$Definition.$SpawnFailedCue"/>
          <cancel_cue cue="this"/>
        </do_else>
      </actions>
      <cues>
        <cue name="Large_Supply__Standard_FollowUp_Manager" onfail="cancel">
          <conditions>
            <check_value value="$FollowUp"/>
          </conditions>
          <actions>
            <!--If this is going to be a followup mission, first, inform the mission thread manager of this submission so it can be displayed in the offer.-->
            <!--Currently means you need to find the mission name here, instead of relying on the GM itself finding it.-->
            <set_value name="$MissionName" exact="readtext.{$Page}.{$TextOffset + 1}"/>
            <set_value name="$MissionDescription" exact="readtext.{$Page}.{$TextOffset + 2}"/>
            <debug_text text="'Attempting to signal the mission thread that followup mission cue ' + $MissionCue + ' is ready to be added to the offer'" chance="$DebugChance"/>
            <set_value name="$MissionDataTable" exact="table[$Name = $MissionName, $Cue = $MissionCue, $WrapperCue = $MissionCue, $FollowUp = true]"/>
            <signal_cue_instantly cue="$Definition.$SpawnSuccessCue" param="$MissionDataTable"/>
          </actions>
          <cues>
            <cue name="Large_Supply__Standard_FollowUp_Offer_Accepted">
              <conditions>
                <event_cue_signalled cue="$Definition.$OfferAcceptedCue"/>
                <check_value value="event.param == $MissionCue"/>
              </conditions>
              <actions>
                <!--We don't want to call the GM yet. Create the mission here and pass it into the GM when the previous mission ends
                TODO @Owen Move this to a library in the GM file?-->
                <create_mission cue="$MissionCue" missionthread="$Definition.$ThreadCue" name="$MissionName" description="$MissionDescription" faction="$Definition.$ThreadData.$Faction" type="missiontype.deliver">
                  <briefing>
                    <!--TODO @Owen Better objective?-->
                    <objective step="1" action="objective.deliver"/>
                  </briefing>
                </create_mission>
              </actions>
            </cue>
            <cue name="Large_Supply__Standard_Aborted">
              <conditions>
                <event_cue_signalled cue="$Definition.$ForceCleanupCue"/>
              </conditions>
              <actions>
                <cancel_cue cue="namespace"/>
              </actions>
            </cue>
            <!--namespace signalled to activate followup mission
            event.param = Station to supply-->
            <cue name="Large_Supply__Standard_Activate_FollowUp">
              <conditions>
                <event_cue_signalled cue="namespace"/>
              </conditions>
              <actions>
                <!--Check that the correct parameters have been passed-->
                <do_if value="false">
                  <!--Currently no followup case for this type of mission-->
                  <signal_cue cue="Large_Supply__Standard_Create_GM"/>
                  <cancel_cue cue="parent"/>
                </do_if>
                <do_else>
                  <assert value="false" text="namespace + ' was signalled to start a followup mission, but the passed parameter ' + event.param + ' was not what this mission was expecting. Ending mission.'"/>
                  <!--TODO @Owen what if there is another followup mission?-->
                  <signal_cue_instantly cue="$Definition.$EndedCue" param="namespace"/>
                  <cancel_cue cue="namespace"/>
                </do_else>
              </actions>
            </cue>
          </cues>
        </cue>
        <cue name="Large_Supply__Standard_Not_FollowUp" onfail="cancel">
          <conditions>
            <check_value value="not $FollowUp"/>
          </conditions>
          <actions>
            <signal_cue cue="Large_Supply__Standard_Create_GM"/>
          </actions>
        </cue>
        <cue name="Large_Supply__Standard_Create_GM">
          <conditions>
            <event_cue_signalled/>
          </conditions>
          <cues>
            <!-- Trigger actual GM, passing the specified parameters -->
            <cue name="Large_Supply__Standard_Ref" ref="md.GM_LargeSupply.Start">
              <param name="Client" value="$Definition.$ThreadData.$Contact"/>
              <param name="MissionCue" value="$MissionCue"/>
              <param name="MissionThread" value="$Definition.$ThreadCue"/>
              <param name="ReportSignalCue" value="Large_Supply__Standard_GM_Event"/>
              <param name="WithoutOffer" value="true"/>
              <param name="WithoutOfferWaitCue" value="if $FollowUp then null else $Definition.$OfferAcceptedCue"/>
              <param name="ForceCleanup" value="$Definition.$ForceCleanupCue"/>
              <param name="Page" value="$Definition.$Page"/>
              <param name="TextOffset" value="$TextOffset"/>
              <param name="MissionLevel" value="$MissionLevel"/>
              <param name="Difficulty" value="$Difficulty"/>
              <param name="Faction" value="$Definition.$ThreadData.$Faction"/>
              <param name="StationSpace" value="$StationSpace" comment="todo: narrow down the space"/>
              <param name="StationSupply" value="$StationSupply" comment="wants these stations supplied with the specified resources"/>
              <param name="DebugChance" value="$DebugChance"/>
            </cue>
            <!--Signalled by GM when an event happens e.g. mission successfully generated or mission ended.
            Feedback values saved to the static of this cue: $FeedbackValue and $EndFeedbackValue-->
            <cue name="Large_Supply__Standard_GM_Event" instantiate="true">
              <conditions>
                <event_cue_signalled/>
              </conditions>
              <actions>
                <include_actions ref="MM__Standard_GM_Event"/>
              </actions>
            </cue>
          </cues>
        </cue>
      </cues>
    </cue>
    <cue name="Get_Exact_Crew__Standard" instantiate="true" namespace="this">
      <conditions>
        <event_cue_signalled/>
        <!--Signal the static cue to trigger a new instance of this mission.
        Signalling a running instance will trigger a followup mission to run its GM library. See XXX_Activate_FollowUp cue for parameters-->
      </conditions>
      <actions>
        <set_value name="$Definition" exact="event.param"/>
        <set_value name="$Page" exact="$Definition.$Page"/>
        <set_value name="$TextOffsets" exact="$Definition.$TextOffset.clone"/>
        <shuffle_list list="$TextOffsets"/>
        <set_value name="$FollowUp" exact="@$Definition.$FollowUp == true" comment="Does this mission follow directly after another, with parameters potentially passing between them. This changes how this mission is spawned and managed."/>
        <set_value name="$SuccessfullyGenerated" exact="false"/>
        <set_value name="$DebugChance" exact="$Definition.$ThreadData.$DebugChance"/>
        <set_value name="$Destination" exact="player.ship"/>
        <set_value name="$Faction" exact="$Definition.$ThreadData.$Faction"/>
        <set_value name="$Difficulty" exact="level.veryeasy" comment="Input for ConfigureDifficulty. Hard and medium variants would break players' momentum, because they would have to give away their own experienced crew."/>
        <set_value name="$MissionLevel" exact="1" comment="Can be increased by Get_Exact_Crew libraries."/>
        <assert value="not $FollowUp" text="'This mission does not currently have any parameters where it makes sense as a follow up mission. If there is, adjust the _Activate_FollowUp cue and remove this assert [Owen]'"/>
        <do_all exact="$TextOffsets.count" counter="$offset_i">
          <set_value name="$TextOffset" exact="$TextOffsets.{$offset_i}"/>
          <!--This mission is specific enough that it will only run if a matching text offset is found. If not, the offer will abort with an error.
          $Valid:
          0: Page/TextOffset not handled
          1: Correct Page/TextOffset but unable to setup mission
          2: Mission can attempt to be spawned -->
          <set_value name="$Valid" exact="0"/>
          <include_actions ref="md.GM_GetExactCrew.ConfigureDifficulty" comment="Input: ($Difficulty), output: $Difficulty, $NpcCount"/>
          <!--Find destination-->
          <do_if value="$Definition.$ThreadData.$Area?">
            <set_value name="$PotentialSectors" exact="$Definition.$ThreadData.$Area.$EntryPointSectors.clone"/>
            <shuffle_list list="$PotentialSectors"/>
            <do_for_each name="$PotentialSector" in="$PotentialSectors">
              <find_station name="$Destination" space="$PotentialSector">
                <match owner="faction.player" negateownerfilter="true"/>
                <match_relation_to faction="faction.player" comparison="not" relation="enemy"/>
                <match_relation_to faction="$Faction" comparison="not" relation="enemy"/>
              </find_station>
              <do_if value="$Destination">
                <break/>
              </do_if>
            </do_for_each>
            <remove_value name="$PotentialSectors"/>
          </do_if>
          <do_else>
            <!--TODO @Owen should this be using the war front sectors?-->
            <include_actions ref="md.GM_GetExactCrew.DetermineDestinationStation" comment="Input: $Faction-, output: $Destination"/>
          </do_else>
          <!--### ARGON VS XENON ###-->
          <do_if value="not $Destination">
            <!-- intentional fallthrough -->
            <debug_text text="'No suitable destination-station found!'"/>
            <set_value name="$Valid" exact="1" comment="No suitable variation found"/>
          </do_if>
          <do_elseif value="$Page == 30210">
            <do_if value="$TextOffset == 110000" comment="pilot variation">
              <set_value name="$Valid" exact="1" comment="Valid text offset"/>
              <include_actions ref="md.GM_GetExactCrew.Get_Exact_Crew_Pilots"/>
            </do_if>
            <do_elseif value="$TextOffset == 110100" comment="engineers for station variation">
              <set_value name="$Valid" exact="1" comment="Valid text offset"/>
              <include_actions ref="md.GM_GetExactCrew.Get_Exact_Crew_Engineers"/>
            </do_elseif>
          </do_elseif>
          <!-- ### ARGON VS HOLY ORDER ###-->
          <do_elseif value="$Page == 30211">
            <do_if value="$TextOffset == 110000" comment="pilot variation">
              <set_value name="$Valid" exact="1" comment="Valid text offset"/>
              <include_actions ref="md.GM_GetExactCrew.Get_Exact_Crew_Pilots"/>
            </do_if>
            <do_elseif value="$TextOffset == 110100" comment="engineers for station variation">
              <set_value name="$Valid" exact="1" comment="Valid text offset"/>
              <include_actions ref="md.GM_GetExactCrew.Get_Exact_Crew_Engineers"/>
            </do_elseif>
          </do_elseif>
          <!-- ### PARANID VS HOLY ORDER ###-->
          <do_elseif value="$Page == 30212">
            <do_if value="$TextOffset == 110000" comment="pilot variation">
              <set_value name="$Valid" exact="1" comment="Valid text offset"/>
              <include_actions ref="md.GM_GetExactCrew.Get_Exact_Crew_Pilots"/>
            </do_if>
            <do_elseif value="$TextOffset == 110100" comment="engineers for station variation">
              <set_value name="$Valid" exact="1" comment="Valid text offset"/>
              <include_actions ref="md.GM_GetExactCrew.Get_Exact_Crew_Engineers"/>
            </do_elseif>
          </do_elseif>
          <!-- ### HOLY ORDER VS ARGON ###-->
          <do_elseif value="$Page == 30213">
            <do_if value="$TextOffset == 110000" comment="pilot variation">
              <set_value name="$Valid" exact="1" comment="Valid text offset"/>
              <include_actions ref="md.GM_GetExactCrew.Get_Exact_Crew_Pilots"/>
            </do_if>
            <do_elseif value="$TextOffset == 110100" comment="engineers for station variation">
              <set_value name="$Valid" exact="1" comment="Valid text offset"/>
              <include_actions ref="md.GM_GetExactCrew.Get_Exact_Crew_Engineers"/>
            </do_elseif>
          </do_elseif>
          <!-- ### HOLY ORDER VS PARANID ###-->
          <do_elseif value="$Page == 30214">
            <do_if value="$TextOffset == 110000" comment="pilot variation">
              <set_value name="$Valid" exact="1" comment="Valid text offset"/>
              <include_actions ref="md.GM_GetExactCrew.Get_Exact_Crew_Pilots"/>
            </do_if>
            <do_elseif value="$TextOffset == 110100" comment="engineers for station variation">
              <set_value name="$Valid" exact="1" comment="Valid text offset"/>
              <include_actions ref="md.GM_GetExactCrew.Get_Exact_Crew_Engineers"/>
            </do_elseif>
            <do_elseif value="$TextOffset == 110200" comment="pilot for station variation">
              <set_value name="$Valid" exact="1" comment="Valid text offset"/>
              <include_actions ref="md.GM_GetExactCrew.Get_Exact_Crew_Pilots"/>
            </do_elseif>
          </do_elseif>
          <!--### SPLIT VS ARGON ###-->
          <do_elseif value="$Page == 30215">

          <do_if value="$TextOffset == 110000" comment="pilot variation"><set_value name="$Valid" exact="1" comment="Valid text offset"/><include_actions ref="md.GM_GetExactCrew.Get_Exact_Crew_Pilots"/></do_if><do_elseif value="$TextOffset == 110100" comment="engineers for station variation"><set_value name="$Valid" exact="1" comment="Valid text offset"/><include_actions ref="md.GM_GetExactCrew.Get_Exact_Crew_Engineers"/></do_elseif></do_elseif>
          <!--### DLC 2 Setup ###-->
          <do_elseif value="$Page == 30216">

          <do_if value="$TextOffset == 110000" comment="pilot variation"><set_value name="$Valid" exact="1" comment="Valid text offset"/><include_actions ref="md.GM_GetExactCrew.Get_Exact_Crew_Pilots"/></do_if><do_elseif value="$TextOffset == 110100" comment="engineers for station variation"><set_value name="$Valid" exact="1" comment="Valid text offset"/><include_actions ref="md.GM_GetExactCrew.Get_Exact_Crew_Engineers"/></do_elseif></do_elseif>
          <do_if value="@$Skills.keys.count">
            <set_value name="$Valid" exact="2" comment="Valid mission variables"/>
          </do_if>
          <do_if value="$Valid == 0">
            <debug_text text="'Attempting to spawn a mission on ' + this + ' but the combination of Page: ' + $Page + ' and TextOffset: ' + $TextOffset + ' do not match any definitions [Owen]'" filter="error"/>
          </do_if>
          <do_elseif value="$Valid == 2">
            <break/>
          </do_elseif>
        </do_all>
        <do_if value="$Valid == 2">
          <do_if value="$FollowUp">
            <!--Followup missions use the namespace as the mission cue-->
            <set_value name="$MissionCue" exact="namespace"/>
          </do_if>
          <do_else>
            <set_value name="$MissionCue" exact="null"/>
          </do_else>
        </do_if>
        <do_else>
          <do_if value="$Valid == 1">
            <debug_text text="'Unable to find suitable variant variables for mission on ' + this + ' with combination of Page: ' + $Page + ' and TextOffsets: ' + $TextOffsets + '. [Owen]'" chance="$DebugChance"/>
          </do_if>
          <signal_cue cue="$Definition.$SpawnFailedCue"/>
          <cancel_cue cue="this"/>
        </do_else>
      </actions>
      <cues>
        <cue name="Get_Exact_Crew__Standard_FollowUp_Manager" onfail="cancel">
          <conditions>
            <check_value value="$FollowUp"/>
          </conditions>
          <actions>
            <!--If this is going to be a followup mission, first, inform the mission thread manager of this submission so it can be displayed in the offer.-->
            <!--Currently means you need to find the mission name here, instead of relying on the GM itself finding it.-->
            <set_value name="$MissionName" exact="readtext.{$Page}.{$TextOffset + 1}"/>
            <set_value name="$MissionDescription" exact="readtext.{$Page}.{$TextOffset + 2}"/>
            <debug_text text="'Attempting to signal the mission thread that followup mission cue ' + $MissionCue + ' is ready to be added to the offer'" chance="$DebugChance"/>
            <set_value name="$MissionDataTable" exact="table[$Name = $MissionName, $Cue = $MissionCue, $WrapperCue = $MissionCue, $FollowUp = true]"/>
            <signal_cue_instantly cue="$Definition.$SpawnSuccessCue" param="$MissionDataTable"/>
          </actions>
          <cues>
            <cue name="Get_Exact_Crew__Standard_FollowUp_Offer_Accepted">
              <conditions>
                <event_cue_signalled cue="$Definition.$OfferAcceptedCue"/>
                <check_value value="event.param == $MissionCue"/>
              </conditions>
              <actions>
                <!--We don't want to call the GM yet. Create the mission here and pass it into the GM when the previous mission ends
                TODO @Owen Move this to a library in the GM file?-->
                <create_mission cue="$MissionCue" missionthread="$Definition.$ThreadCue" name="$MissionName" description="$MissionDescription" faction="$Definition.$ThreadData.$Faction" type="missiontype.deliver">
                  <briefing>
                    <!--TODO @Owen Better objective?-->
                    <objective step="1" action="objective.acquire_crew"/>
                  </briefing>
                </create_mission>
              </actions>
            </cue>
            <cue name="Get_Exact_Crew__Standard_Aborted">
              <conditions>
                <event_cue_signalled cue="$Definition.$ForceCleanupCue"/>
              </conditions>
              <actions>
                <cancel_cue cue="namespace"/>
              </actions>
            </cue>
            <!--namespace signalled to activate followup mission
            event.param = Station to supply-->
            <cue name="Get_Exact_Crew__Standard_Activate_FollowUp">
              <conditions>
                <event_cue_signalled cue="namespace"/>
              </conditions>
              <actions>
                <!--Check that the correct parameters have been passed-->
                <do_if value="false">
                  <!--Currently no followup case for this type of mission-->
                  <signal_cue cue="Get_Exact_Crew__Standard_Create_GM"/>
                  <cancel_cue cue="parent"/>
                </do_if>
                <do_else>
                  <assert value="false" text="namespace + ' was signalled to start a followup mission, but the passed parameter ' + event.param + ' was not what this mission was expecting. Ending mission.'"/>
                  <!--TODO @Owen what if there is another followup mission?-->
                  <signal_cue_instantly cue="$Definition.$EndedCue" param="namespace"/>
                  <cancel_cue cue="namespace"/>
                </do_else>
              </actions>
            </cue>
          </cues>
        </cue>
        <cue name="Get_Exact_Crew__Standard_Not_FollowUp" onfail="cancel">
          <conditions>
            <check_value value="not $FollowUp"/>
          </conditions>
          <actions>
            <signal_cue cue="Get_Exact_Crew__Standard_Create_GM"/>
          </actions>
        </cue>
        <cue name="Get_Exact_Crew__Standard_Create_GM">
          <conditions>
            <event_cue_signalled/>
          </conditions>
          <cues>
            <!-- Trigger actual GM, passing the specified parameters -->
            <cue name="Get_Exact_Crew__Standard_Ref" ref="md.GM_GetExactCrew.Start">
              <param name="Client" value="$Definition.$ThreadData.$Contact"/>
              <param name="MissionCue" value="$MissionCue"/>
              <param name="MissionThread" value="$Definition.$ThreadCue"/>
              <param name="ReportSignalCue" value="Get_Exact_Crew__Standard_GM_Event"/>
              <param name="WithoutOffer" value="true"/>
              <param name="WithoutOfferWaitCue" value="if $FollowUp then null else $Definition.$OfferAcceptedCue"/>
              <param name="ForceCleanup" value="$Definition.$ForceCleanupCue"/>
              <param name="Page" value="$Page"/>
              <param name="TextOffset" value="$TextOffset"/>
              <param name="MissionLevel" value="$MissionLevel"/>
              <param name="Difficulty" value="$Difficulty"/>
              <param name="Faction" value="$Faction"/>
              <param name="NpcCount" value="$NpcCount"/>
              <param name="Skills" value="$Skills"/>
              <param name="Destination" value="$Destination"/>
              <param name="DebugChance" value="$DebugChance"/>
            </cue>
            <!--Signalled by GM when an event happens e.g. mission successfully generated or mission ended.
            Feedback values saved to the static of this cue: $FeedbackValue and $EndFeedbackValue-->
            <cue name="Get_Exact_Crew__Standard_GM_Event" instantiate="true">
              <conditions>
                <event_cue_signalled/>
              </conditions>
              <actions>
                <include_actions ref="MM__Standard_GM_Event"/>
              </actions>
            </cue>
          </cues>
        </cue>
      </cues>
    </cue>
    <cue name="Get_Exact_Fleet__Standard" instantiate="true" namespace="this">
      <conditions>
        <event_cue_signalled/>
        <!--Signal the static cue to trigger a new instance of this mission.
        Signalling a running instance will trigger a followup mission to run its GM library. See XXX_Activate_FollowUp cue for parameters-->
      </conditions>
      <actions>
        <set_value name="$Definition" exact="event.param"/>
        <set_value name="$Page" exact="$Definition.$Page"/>
        <set_value name="$TextOffsets" exact="$Definition.$TextOffset.clone"/>
        <shuffle_list list="$TextOffsets"/>
        <set_value name="$FollowUp" exact="@$Definition.$FollowUp == true" comment="Does this mission follow directly after another, with parameters potentially passing between them. This changes how this mission is spawned and managed."/>
        <set_value name="$SuccessfullyGenerated" exact="false"/>
        <set_value name="$DebugChance" exact="$Definition.$ThreadData.$DebugChance"/>
        <set_value name="$Difficulty" exact="level.hard"/>
        <set_value name="$MissionLevel" exact="1" comment="Rewards are increased by resource cost calculation."/>
        <set_value name="$FillAllSlots" exact="true" comment="May get overridden if $Fleet contains loadouts."/>
        <assert value="not $FollowUp" text="'This mission does not currently have any parameters where it makes sense as a follow up mission. If there is, adjust the _Activate_FollowUp cue and remove this assert [Owen]'"/>
        <do_all exact="$TextOffsets.count" counter="$offset_i">
          <set_value name="$TextOffset" exact="$TextOffsets.{$offset_i}"/>
          <!--This mission is specific enough that it will only run if a matching text offset is found. If not, the offer will abort with an error.
          $Valid:
          0: Page/TextOffset not handled
          1: Correct Page/TextOffset but unable to setup mission
          2: Mission can attempt to be spawned -->
          <set_value name="$Valid" exact="0"/>
          <set_value name="$Fleet" exact="null"/>
          <!--Possible Equipment Setup Pitfall: l and xl ships always use _02_ macros when available (physics enabled). If the wrong macro is selected the mission won't complete-->
          <!--### ARGON VS XENON ###-->
          <do_if value="$Page == 30210">
            <do_if value="$TextOffset == 120000 or $TextOffset == 120100" comment="build a fleet">
              <set_value name="$Valid" exact="1" comment="Valid text offset"/>
              <do_any>
                <set_value name="$Fleet" exact="[                           table[                             $macro = macro.ship_arg_xl_carrier_01_a_macro,                             $amount = 1,                             $equipment = 'generate_loadout',                           ],                           table[                             $macro = macro.ship_arg_l_destroyer_01_a_macro,                             $amount = 1,                             $equipment = 'generate_loadout',                           ],                           table[                             $macro = macro.ship_arg_m_frigate_01_a_macro,                             $amount = 3,                             $equipment = 'generate_loadout',                           ]                          ]"/>
                <set_value name="$Fleet" exact="[                           table[                             $shiptype = shiptype.destroyer,                             $amount = 3,                           ]                          ]"/>
                <set_value name="$Fleet" exact="[                           table[                             $shiptype = shiptype.destroyer,                             $amount = 1,                           ],                           table[                             $shiptype = shiptype.frigate,                             $amount = 4,                           ]                          ]"/>
                <set_value name="$Fleet" exact="[                           table[                             $shiptype = shiptype.frigate,                             $amount = 1,                           ],                           table[                             $shiptype = shiptype.fighter,                             $amount = 4,                           ],                          ]"/>
              </do_any>
            </do_if>
          </do_if>
          <!-- ### ARGON VS HOLY ORDER ###-->
          <do_elseif value="$Page == 30211">
            <do_if value="$TextOffset == 120000 or $TextOffset == 120100" comment="build a fleet">
              <set_value name="$Valid" exact="1" comment="Valid text offset"/>
              <do_any>
                <set_value name="$Fleet" exact="[                           table[                             $macro = macro.ship_arg_xl_carrier_01_a_macro,                             $amount = 1,                             $equipment = 'generate_loadout',                           ],                           table[                             $macro = macro.ship_arg_l_destroyer_01_a_macro,                             $amount = 1,                             $equipment = 'generate_loadout',                           ],                           table[                             $macro = macro.ship_arg_m_frigate_01_a_macro,                             $amount = 3,                             $equipment = 'generate_loadout',                           ]                          ]"/>
                <set_value name="$Fleet" exact="[                           table[                             $shiptype = shiptype.destroyer,                             $amount = 1,                           ]                          ]"/>
                <set_value name="$Fleet" exact="[                           table[                             $shiptype = shiptype.frigate,                             $amount = 1,                           ],                           table[                             $shiptype = shiptype.heavyfighter,                             $amount = 2,                           ],                           table[                             $shiptype = shiptype.fighter,                             $amount = 4,                           ]                          ]"/>
                <set_value name="$Fleet" exact="[                           table[                             $shiptype = shiptype.heavyfighter,                             $amount = 1,                           ],                           table[                             $shiptype = shiptype.fighter,                             $amount = 6,                           ]                          ]"/>
              </do_any>
            </do_if>
          </do_elseif>
          <!-- ### PARANID VS HOLY ORDER ###-->
          <do_elseif value="$Page == 30212">
            <do_if value="$TextOffset == 120000 or $TextOffset == 120100" comment="build a fleet">
              <set_value name="$Valid" exact="1" comment="Valid text offset"/>
              <do_any>
                <set_value name="$Fleet" exact="[                           table[                             $macro = macro.ship_par_xl_carrier_01_a_macro,                             $amount = 1,                             $equipment = 'generate_loadout',                           ],                           table[                             $macro = macro.ship_par_l_destroyer_02_a_macro,                             $amount = 1,                             $equipment = 'generate_loadout',                           ],                           table[                             $macro = macro.ship_par_m_frigate_01_a_macro,                             $amount = 2,                             $equipment = 'generate_loadout',                           ]                          ]"/>
                <set_value name="$Fleet" exact="[                           table[                             $shiptype = shiptype.destroyer,                             $amount = 1,                           ],                           table[                             $shiptype = shiptype.frigate,                             $amount = 4,                           ]                          ]"/>
                <set_value name="$Fleet" exact="[                           table[                             $shiptype = shiptype.frigate,                             $amount = 3,                           ]                          ]"/>
                <set_value name="$Fleet" exact="[                           table[                             $shiptype = shiptype.fighter,                             $amount = 6,                           ]                          ]"/>
              </do_any>
            </do_if>
          </do_elseif>
          <!-- ### HOLY ORDER VS ARGON ###-->
          <do_elseif value="$Page == 30213">
            <do_if value="$TextOffset == 120000 or $TextOffset == 120100" comment="build a fleet">
              <set_value name="$Valid" exact="1" comment="Valid text offset"/>
              <do_any>
                <set_value name="$Fleet" exact="[                           table[                             $macro = macro.ship_par_l_destroyer_02_a_macro,                             $amount = 1,                             $equipment = 'generate_loadout',                           ],                           table[                             $macro = macro.ship_par_m_frigate_01_b_macro,                             $amount = 3,                             $equipment = 'generate_loadout',                           ]                          ]"/>
                <set_value name="$Fleet" exact="[                           table[                             $shiptype = shiptype.destroyer,                             $amount = 2,                           ]                          ]"/>
                <set_value name="$Fleet" exact="[                           table[                             $shiptype = shiptype.corvette,                             $amount = 1,                           ],                           table[                             $shiptype = shiptype.fighter,                             $amount = 3,                           ]                          ]"/>
                <set_value name="$Fleet" exact="[                           table[                             $shiptype = shiptype.heavyfighter,                             $amount = 3,                           ]                          ]"/>
              </do_any>
            </do_if>
          </do_elseif>
          <!-- ### HOLY ORDER VS PARANID ###-->
          <do_elseif value="$Page == 30214">
            <do_if value="$TextOffset == 120000 or $TextOffset == 120100" comment="build a fleet">
              <set_value name="$Valid" exact="1" comment="Valid text offset"/>
              <do_any>
                <set_value name="$Fleet" exact="[                           table[                             $macro = macro.ship_par_l_destroyer_02_a_macro,                             $amount = 1,                             $equipment = 'generate_loadout',                           ],                           table[                             $macro = macro.ship_par_m_frigate_01_b_macro,                             $amount = 3,                             $equipment = 'generate_loadout',                           ]                          ]"/>
                <set_value name="$Fleet" exact="[                           table[                             $shiptype = shiptype.destroyer,                             $amount = 2,                           ]                          ]"/>
                <set_value name="$Fleet" exact="[                           table[                             $shiptype = shiptype.corvette,                             $amount = 1,                           ],                           table[                             $shiptype = shiptype.fighter,                             $amount = 6,                           ]                          ]"/>
                <set_value name="$Fleet" exact="[                           table[                             $shiptype = shiptype.heavyfighter,                             $amount = 3,                           ]                          ]"/>
              </do_any>
            </do_if>
          </do_elseif>
          <!--### SPLIT VS ARGON ###-->
          <do_elseif value="$Page == 30215">

          <do_if value="$TextOffset == 120000 or $TextOffset == 120100" comment="build a fleet"><set_value name="$Valid" exact="1" comment="Valid text offset"/><do_any><set_value name="$Fleet" exact="[                           table[                             $macro = macro.ship_spl_xl_carrier_01_a_macro,                             $amount = 1,                             $equipment = 'generate_loadout'                           ],                           table[                             $macro = macro.ship_spl_l_destroyer_01_a_macro,                             $amount = 1,                             $equipment = 'generate_loadout'                           ],                           table[                             $macro = macro.ship_spl_m_frigate_01_a_macro,                             $amount = 3,                             $equipment = 'generate_loadout'                           ]                          ]"/><set_value name="$Fleet" exact="[                           table[                             $shiptype = shiptype.destroyer,                             $amount = 1,                           ],                           table[                             $shiptype = shiptype.heavyfighter,                             $amount = 10,                           ]                          ]"/><set_value name="$Fleet" exact="[                           table[                             $shiptype = shiptype.corvette,                             $amount = 3,                           ]                          ]"/><set_value name="$Fleet" exact="[                           table[                             $shiptype = shiptype.heavyfighter,                             $amount = 3,                           ],                           table[                             $shiptype = shiptype.fighter,                             $amount = 6,                           ]                          ]"/></do_any></do_if></do_elseif>
          <!--### DLC 2 Setup ###-->
          <do_elseif value="$Page == 30216">

          <do_if value="$TextOffset == 120000 or $TextOffset == 120100" comment="build a fleet"><set_value name="$Valid" exact="1" comment="Valid text offset"/><do_any><set_value name="$Fleet" exact="[                             table[                             $macro = macro.ship_ter_xl_carrier_01_a_macro,                             $amount = 1,                             $equipment = 'generate_loadout'                           ],                           table[                             $macro = macro.ship_ter_l_destroyer_01_a_macro,                             $amount = 1,                             $equipment = 'generate_loadout'                           ],                           table[                             $macro = macro.ship_ter_m_frigate_01_a_macro,                             $amount = 2,                             $equipment = 'generate_loadout'                           ],                           table[                             $macro = macro.ship_ter_s_fighter_01_a_macro,                             $amount = 4,                             $equipment = 'generate_loadout'                           ]                          ]"/><set_value name="$Fleet" exact="[                           table[                             $shiptype = shiptype.destroyer,                             $amount = 1,                           ],                           table[                             $shiptype = shiptype.frigate,                             $amount = 2,                           ],                           table[                             $shiptype = shiptype.fighter,                             $amount = 8,                           ]                          ]"/><set_value name="$Fleet" exact="[                           table[                             $shiptype = shiptype.corvette,                             $amount = 3,                           ]                          ]"/><set_value name="$Fleet" exact="[                           table[                             $shiptype = shiptype.frigate,                             $amount = 1,                           ],                           table[                             $shiptype = shiptype.fighter,                             $amount = 4,                           ]                          ]"/></do_any></do_if></do_elseif>
          <do_if value="$Fleet">
            <do_if value="$Definition.$ThreadData.$WarFront?">
              <set_value name="$PotentialLocations" exact="$Definition.$ThreadData.$WarFront.$HostSectors.keys.list"/>
              <do_if value="$Definition.$ThreadData.$WarFront.$ContestedSectorsIncludeHost">
                <do_all exact="$Definition.$ThreadData.$WarFront.$ContestedSectors.count" counter="$i">
                  <append_to_list name="$PotentialLocations" exact="$Definition.$ThreadData.$WarFront.$ContestedSectors.{$i}"/>
                </do_all>
              </do_if>
            </do_if>
            <do_elseif value="$Definition.$ThreadData.$Area?">
              <set_value name="$PotentialLocations" exact="$Definition.$ThreadData.$Area.$EntryPointSectors.clone"/>
            </do_elseif>
            <do_if value="$PotentialLocations.count">
              <set_value name="$Sector" exact="$PotentialLocations.random"/>
              <find_station name="$PositionObject" space="$Sector" owner="$Definition.$ThreadData.$Faction"/>
              <do_if value="not $PositionObject">
                <find_station name="$PositionObject" space="$Sector">
                  <match_relation_to faction="faction.player" comparison="not" relation="enemy"/>
                  <match_relation_to faction="$Definition.$ThreadData.$Faction" comparison="not" relation="enemy"/>
                </find_station>
              </do_if>
              <do_if value="$PositionObject">
                <get_safe_pos result="$Offset" object="$PositionObject" sector="$Sector" allowyaxis="false" min="5km" max="10km"/>
                <!-- Set delivery location to y=0. Remove once FlyTo command allows for adjustment along the y-axis -->
                <set_value name="$Offset" exact="position.[$Offset.x, 0, $Offset.z]"/>
              </do_if>
              <do_else>
                <create_position name="$Offset" space="$Sector" min="5km" max="250km"/>
                <set_value name="$Offset" exact="position.[$Offset.x, 0, $Offset.z]" comment="Engine limitation, keep it on ecliptic (y=0)"/>
              </do_else>
              <do_for_each in="$Fleet" name="$Ship_Def">
                <do_if value="@$Ship_Def.$equipment == 'generate_loadout'">
                  <generate_loadout result="this.$loadout" faction="$Definition.$ThreadData.$Faction" level="0.6" variation="0.4" macro="$Ship_Def.$macro" flags="ammo units software crew drones" invertflags="true" requireblueprints="true"/>
                  <set_value name="$Ship_Def.$equipment" exact="this.$loadout.{1}" comment="generate_loadout creates a list of loadouts"/>
                  <set_value name="$FillAllSlots" exact="false" comment="If a loadout is specified, we don't require all slots to be filled"/>
                </do_if>
              </do_for_each>
              <set_value name="$Valid" exact="2" comment="Valid mission variables"/>
            </do_if>
          </do_if>
          <do_if value="$Valid == 0">
            <debug_text text="'Attempting to spawn a mission on ' + this + ' but the combination of Page: ' + $Page + ' and TextOffset: ' + $TextOffset + ' do not match any definitions [Owen]'" filter="error"/>
          </do_if>
          <do_elseif value="$Valid == 2">
            <break/>
          </do_elseif>
        </do_all>
        <do_if value="$Valid == 2">
          <do_if value="$FollowUp">
            <!--Followup missions use the namespace as the mission cue-->
            <set_value name="$MissionCue" exact="namespace"/>
          </do_if>
          <do_else>
            <set_value name="$MissionCue" exact="null"/>
          </do_else>
        </do_if>
        <do_else>
          <do_if value="$Valid == 1">
            <debug_text text="'Unable to find suitable variant variables for mission on ' + this + ' with combination of Page: ' + $Page + ' and TextOffsets: ' + $TextOffsets + '. [Owen]'" chance="$DebugChance"/>
          </do_if>
          <signal_cue cue="$Definition.$SpawnFailedCue"/>
          <cancel_cue cue="this"/>
        </do_else>
      </actions>
      <cues>
        <cue name="Get_Exact_Fleet__Standard_FollowUp_Manager" onfail="cancel">
          <conditions>
            <check_value value="$FollowUp"/>
          </conditions>
          <actions>
            <!--If this is going to be a followup mission, first, inform the mission thread manager of this submission so it can be displayed in the offer.-->
            <!--Currently means you need to find the mission name here, instead of relying on the GM itself finding it.-->
            <set_value name="$MissionName" exact="readtext.{$Page}.{$TextOffset + 1}"/>
            <set_value name="$MissionDescription" exact="readtext.{$Page}.{$TextOffset + 2}"/>
            <debug_text text="'Attempting to signal the mission thread that followup mission cue ' + $MissionCue + ' is ready to be added to the offer'" chance="$DebugChance"/>
            <set_value name="$MissionDataTable" exact="table[$Name = $MissionName, $Cue = $MissionCue, $WrapperCue = $MissionCue, $FollowUp = true]"/>
            <signal_cue_instantly cue="$Definition.$SpawnSuccessCue" param="$MissionDataTable"/>
          </actions>
          <cues>
            <cue name="Get_Exact_Fleet__Standard_FollowUp_Offer_Accepted">
              <conditions>
                <event_cue_signalled cue="$Definition.$OfferAcceptedCue"/>
                <check_value value="event.param == $MissionCue"/>
              </conditions>
              <actions>
                <!--We don't want to call the GM yet. Create the mission here and pass it into the GM when the previous mission ends
                TODO @Owen Move this to a library in the GM file?-->
                <create_mission cue="$MissionCue" missionthread="$Definition.$ThreadCue" name="$MissionName" description="$MissionDescription" faction="$Definition.$ThreadData.$Faction" type="missiontype.deliver">
                  <briefing>
                    <!--TODO @Owen Better objective?-->
                    <objective step="1" action="objective.build_ship"/>
                  </briefing>
                </create_mission>
              </actions>
            </cue>
            <cue name="Get_Exact_Fleet__Standard_Aborted">
              <conditions>
                <event_cue_signalled cue="$Definition.$ForceCleanupCue"/>
              </conditions>
              <actions>
                <cancel_cue cue="namespace"/>
              </actions>
            </cue>
            <!--namespace signalled to activate followup mission
            event.param = Station to supply-->
            <cue name="Get_Exact_Fleet__Standard_Activate_FollowUp">
              <conditions>
                <event_cue_signalled cue="namespace"/>
              </conditions>
              <actions>
                <!--Check that the correct parameters have been passed-->
                <do_if value="false">
                  <!--Currently no followup case for this type of mission-->
                  <signal_cue cue="Get_Exact_Fleet__Standard_Create_GM"/>
                  <cancel_cue cue="parent"/>
                </do_if>
                <do_else>
                  <assert value="false" text="namespace + ' was signalled to start a followup mission, but the passed parameter ' + event.param + ' was not what this mission was expecting. Ending mission.'"/>
                  <!--TODO @Owen what if there is another followup mission?-->
                  <signal_cue_instantly cue="$Definition.$EndedCue" param="namespace"/>
                  <cancel_cue cue="namespace"/>
                </do_else>
              </actions>
            </cue>
          </cues>
        </cue>
        <cue name="Get_Exact_Fleet__Standard_Not_FollowUp" onfail="cancel">
          <conditions>
            <check_value value="not $FollowUp"/>
          </conditions>
          <actions>
            <signal_cue cue="Get_Exact_Fleet__Standard_Create_GM"/>
          </actions>
        </cue>
        <cue name="Get_Exact_Fleet__Standard_Create_GM">
          <conditions>
            <event_cue_signalled/>
          </conditions>
          <cues>
            <!-- Trigger actual GM, passing the specified parameters -->
            <cue name="Get_Exact_Fleet__Standard_Ref" ref="md.GM_GetExactFleet.Start">
              <param name="Client" value="$Definition.$ThreadData.$Contact"/>
              <param name="MissionCue" value="$MissionCue"/>
              <param name="MissionThread" value="$Definition.$ThreadCue"/>
              <param name="ReportSignalCue" value="Get_Exact_Fleet__Standard_GM_Event"/>
              <param name="WithoutOffer" value="true"/>
              <param name="WithoutOfferWaitCue" value="if $FollowUp then null else $Definition.$OfferAcceptedCue"/>
              <param name="ForceCleanup" value="$Definition.$ForceCleanupCue"/>
              <param name="Page" value="$Page"/>
              <param name="TextOffset" value="$TextOffset"/>
              <param name="MissionLevel" value="$MissionLevel"/>
              <param name="Difficulty" value="$Difficulty"/>
              <param name="Faction" value="$Definition.$ThreadData.$Faction"/>
              <param name="Fleet" value="$Fleet" comment="is looking for these ships with the specified upgrades"/>
              <param name="TargetSector" value="$Sector"/>
              <param name="TargetOffset" value="$Offset"/>
              <param name="FillAllSlots" value="$FillAllSlots" comment="Does the player have to fill all equipment slots?"/>
              <param name="DebugChance" value="$DebugChance"/>
            </cue>
            <!--Signalled by GM when an event happens e.g. mission successfully generated or mission ended.
            Feedback values saved to the static of this cue: $FeedbackValue and $EndFeedbackValue-->
            <cue name="Get_Exact_Fleet__Standard_GM_Event" instantiate="true">
              <conditions>
                <event_cue_signalled/>
              </conditions>
              <actions>
                <include_actions ref="MM__Standard_GM_Event"/>
              </actions>
            </cue>
          </cues>
        </cue>
      </cues>
    </cue>
    <!--Variant Helper Libraries
    Helper libraries to be call from different threads but want to have the same basic variant rules
    If you want to have something custom for a faction e.g. if Vs Xenon, have twice as many enemies, either write your own variant within the cue itself, or modify variables after calling the library-->
    <library name="Achieve_Coverage__Host_Space">
      <actions>
        <set_value name="$Location" exact="null"/>
        <do_if value="$Definition.$ThreadData.$WarFront?">
          <do_if value="$Definition.$ThreadData.$WarFront.$HostSectors.keys.count">
            <set_value name="$PotentialLocations" exact="$Definition.$ThreadData.$WarFront.$HostSectors.keys.sorted"/>
          </do_if>
          <do_elseif value="$Definition.$ThreadData.$WarFront.$ContestedSectors.count">
            <set_value name="$PotentialLocations" exact="$Definition.$ThreadData.$WarFront.$ContestedSectors.clone"/>
          </do_elseif>
        </do_if>
        <do_elseif value="$Definition.$ThreadData.$Area?">
          <set_value name="$PotentialLocations" exact="$Definition.$ThreadData.$Area.$HostSectors.clone"/>
        </do_elseif>
        <do_while value="@$PotentialLocations.count">
          <do_any>
            <set_value name="$PotentialLocation" exact="$PotentialLocations.{1}" weight="50"/>
            <set_value name="$PotentialLocation" exact="$PotentialLocations.random" weight="20"/>
          </do_any>
          <!--Check that there are not already a huge amount of satellites already in this location-->
          <find_object name="$ExistingSatellites" class="class.satellite" owner="[faction.player, $Definition.$ThreadData.$Faction]" space="$PotentialLocation" multiple="true"/>
          <do_if value="$ExistingSatellites.count lt 100">
            <set_value name="$Location" exact="$PotentialLocation"/>
            <break/>
          </do_if>
          <do_else>
            <remove_from_list name="$PotentialLocations" exact="$PotentialLocation"/>
          </do_else>
        </do_while>
        <do_if value="$Location">
          <create_position name="$Offset" space="$Location" max="150km"/>
          <set_value name="$Y" exact="0km" comment="On the ecliptic"/>
          <set_value name="$Offset" exact="position.[$Offset.x, $Y, $Offset.z]"/>
          <get_safe_pos result="$Offset" sector="$Location" allowyaxis="false" radius="5km"/>
          <include_actions ref="md.GM_AchieveCoverage.ConfigureDifficulty" comment="input: $MissionLevel; output: $MissionLevel, $Radius"/>
          <set_value name="$Valid" exact="2" comment="Valid mission variables"/>
        </do_if>
      </actions>
    </library>
    <library name="Achieve_Coverage__Enemy_Space">
      <actions>
        <set_value name="$Location" exact="null"/>
        <do_if value="$Definition.$ThreadData.$WarFront?">
          <do_if value="$Definition.$ThreadData.$WarFront.$EnemySectors.keys.count">
            <set_value name="$PotentialLocations" exact="$Definition.$ThreadData.$WarFront.$EnemySectors.keys.sorted"/>
          </do_if>
        </do_if>
        <do_elseif value="$Definition.$ThreadData.$Area">
          <set_value name="$PotentialLocations" exact="$Definition.$ThreadData.$Area.$EnemySectors.clone"/>
          <shuffle_list list="$PotentialLocations"/>
        </do_elseif>
        <do_while value="@$PotentialLocations.count">
          <do_any>
            <set_value name="$PotentialLocation" exact="$PotentialLocations.{1}" weight="50"/>
            <set_value name="$PotentialLocation" exact="$PotentialLocations.random" weight="20"/>
          </do_any>
          <!--Check that there are not already a huge amount of satellites already in this location-->
          <find_object name="$ExistingSatellites" class="class.satellite" owner="[faction.player, $Definition.$ThreadData.$Faction]" space="$PotentialLocation" multiple="true"/>
          <do_if value="$ExistingSatellites.count lt 100">
            <set_value name="$Location" exact="$PotentialLocation"/>
            <break/>
          </do_if>
          <do_else>
            <remove_from_list name="$PotentialLocations" exact="$PotentialLocation"/>
          </do_else>
        </do_while>
        <do_if value="$Location">
          <create_position name="$Offset" space="$Location" max="150km"/>
          <set_value name="$Y" exact="0km" comment="On the ecliptic"/>
          <set_value name="$Offset" exact="position.[$Offset.x, $Y, $Offset.z]"/>
          <get_safe_pos result="$Offset" sector="$Location" allowyaxis="false" radius="5km"/>
          <include_actions ref="md.GM_AchieveCoverage.ConfigureDifficulty" comment="input: $MissionLevel; output: $MissionLevel, $Radius"/>
          <set_value name="$Valid" exact="2" comment="Valid mission variables"/>
        </do_if>
      </actions>
    </library>
    <cue name="Achieve_Coverage__Standard" instantiate="true" namespace="this">
      <conditions>
        <event_cue_signalled/>
        <!--Signal the static cue to trigger a new instance of this mission.
        Signalling a running instance will trigger a followup mission to run its GM library. See XXX_Activate_FollowUp cue for parameters-->
      </conditions>
      <actions>
        <set_value name="$Definition" exact="event.param"/>
        <set_value name="$Page" exact="$Definition.$Page"/>
        <set_value name="$TextOffsets" exact="$Definition.$TextOffset.clone"/>
        <shuffle_list list="$TextOffsets"/>
        <set_value name="$FollowUp" exact="@$Definition.$FollowUp == true" comment="Does this mission follow directly after another, with parameters potentially passing between them. This changes how this mission is spawned and managed."/>
        <set_value name="$SuccessfullyGenerated" exact="false"/>
        <set_value name="$DebugChance" exact="$Definition.$ThreadData.$DebugChance"/>
        <set_value name="$Difficulty" exact="level.veryeasy"/>
        <set_value name="$MissionLevel" exact="1"/>
        <assert value="not $FollowUp" text="'This mission does not currently have any parameters where it makes sense as a follow up mission. If there is, adjust the _Activate_FollowUp cue and remove this assert [Owen]'"/>
        <do_all exact="$TextOffsets.count" counter="$offset_i">
          <set_value name="$TextOffset" exact="$TextOffsets.{$offset_i}"/>
          <!--This mission is specific enough that it will only run if a matching text offset is found. If not, the offer will abort with an error.
          $Valid:
          0: Page/TextOffset not handled
          1: Correct Page/TextOffset but unable to setup mission
          2: Mission can attempt to be spawned -->
          <set_value name="$Valid" exact="0"/>
          <!--### ARGON VS XENON ###-->
          <do_if value="$Page == 30210">
            <do_if value="$TextOffset == 102000">
              <set_value name="$Valid" exact="1" comment="Valid text offset"/>
              <include_actions ref="Achieve_Coverage__Host_Space"/>
            </do_if>
            <do_elseif value="$TextOffset == 102100">
              <set_value name="$Valid" exact="1" comment="Valid text offset"/>
              <include_actions ref="Achieve_Coverage__Enemy_Space"/>
            </do_elseif>
          </do_if>
          <!--### ARGON VS HOLY ORDER ###-->
          <do_elseif value="$Page == 30211">
            <do_if value="$TextOffset == 102000">
              <set_value name="$Valid" exact="1" comment="Valid text offset"/>
              <include_actions ref="Achieve_Coverage__Host_Space"/>
            </do_if>
            <do_elseif value="$TextOffset == 102100">
              <set_value name="$Valid" exact="1" comment="Valid text offset"/>
              <include_actions ref="Achieve_Coverage__Enemy_Space"/>
            </do_elseif>
          </do_elseif>
          <!--### PARANID VS HOLY ORDER ###-->
          <do_elseif value="$Page == 30212">
            <do_if value="$TextOffset == 102000">
              <set_value name="$Valid" exact="1" comment="Valid text offset"/>
              <include_actions ref="Achieve_Coverage__Host_Space"/>
            </do_if>
            <do_elseif value="$TextOffset == 102100">
              <set_value name="$Valid" exact="1" comment="Valid text offset"/>
              <include_actions ref="Achieve_Coverage__Enemy_Space"/>
            </do_elseif>
          </do_elseif>
          <!--### HOLY ORDER VS ARGON ###-->
          <do_elseif value="$Page == 30213">
            <do_if value="$TextOffset == 102000">
              <set_value name="$Valid" exact="1" comment="Valid text offset"/>
              <include_actions ref="Achieve_Coverage__Host_Space"/>
            </do_if>
            <do_elseif value="$TextOffset == 102100">
              <set_value name="$Valid" exact="1" comment="Valid text offset"/>
              <include_actions ref="Achieve_Coverage__Enemy_Space"/>
            </do_elseif>
          </do_elseif>
          <!--### HOLY ORDER VS PARANID ###-->
          <do_elseif value="$Page == 30214">
            <do_if value="$TextOffset == 102000">
              <set_value name="$Valid" exact="1" comment="Valid text offset"/>
              <include_actions ref="Achieve_Coverage__Host_Space"/>
            </do_if>
            <do_elseif value="$TextOffset == 102100">
              <set_value name="$Valid" exact="1" comment="Valid text offset"/>
              <include_actions ref="Achieve_Coverage__Enemy_Space"/>
            </do_elseif>
          </do_elseif>
          <!--### SPLIT VS ARGON ###-->
          <do_elseif value="$Page == 30215">

          <do_if value="$TextOffset == 102000"><set_value name="$Valid" exact="1" comment="Valid text offset"/><include_actions ref="Achieve_Coverage__Host_Space"/></do_if><do_elseif value="$TextOffset == 102100"><set_value name="$Valid" exact="1" comment="Valid text offset"/><include_actions ref="Achieve_Coverage__Enemy_Space"/></do_elseif></do_elseif>
          <!--### DLC 2 Setup ###-->
          <do_elseif value="$Page == 30216">

          <do_if value="$TextOffset == 102000"><set_value name="$Valid" exact="1" comment="Valid text offset"/><include_actions ref="Achieve_Coverage__Host_Space"/></do_if><do_elseif value="$TextOffset == 102100"><set_value name="$Valid" exact="1" comment="Valid text offset"/><include_actions ref="Achieve_Coverage__Enemy_Space"/></do_elseif></do_elseif>
          <do_if value="$Valid == 0">
            <debug_text text="'Attempting to spawn a mission on ' + this + ' but the combination of Page: ' + $Page + ' and TextOffset: ' + $TextOffset + ' do not match any definitions [Owen]'" filter="error"/>
          </do_if>
          <do_elseif value="$Valid == 2">
            <break/>
          </do_elseif>
        </do_all>
        <do_if value="$Valid == 2">
          <run_actions ref="md.LIB_Generic.SectorDifficultyBalance" result="$Difficulty">
            <param name="MissionTargetSector" value="$Location"/>
            <param name="Difficulty" value="$Difficulty"/>
          </run_actions>
          <do_if value="$FollowUp">
            <!--Followup missions use the namespace as the mission cue-->
            <set_value name="$MissionCue" exact="namespace"/>
          </do_if>
          <do_else>
            <set_value name="$MissionCue" exact="null"/>
          </do_else>
        </do_if>
        <do_else>
          <do_if value="$Valid == 1">
            <debug_text text="'Unable to find suitable variant variables for mission on ' + this + ' with combination of Page: ' + $Page + ' and TextOffsets: ' + $TextOffsets + '. [Owen]'" chance="$DebugChance"/>
          </do_if>
          <signal_cue cue="$Definition.$SpawnFailedCue"/>
          <cancel_cue cue="this"/>
        </do_else>
      </actions>
      <cues>
        <cue name="Achieve_Coverage__Standard_FollowUp_Manager" onfail="cancel">
          <conditions>
            <check_value value="$FollowUp"/>
          </conditions>
          <actions>
            <!--If this is going to be a followup mission, first, inform the mission thread manager of this submission so it can be displayed in the offer.-->
            <!--Currently means you need to find the mission name here, instead of relying on the GM itself finding it.-->
            <set_value name="$MissionName" exact="readtext.{$Page}.{$TextOffset + 1}"/>
            <set_value name="$MissionDescription" exact="readtext.{$Page}.{$TextOffset + 2}"/>
            <debug_text text="'Attempting to signal the mission thread that followup mission cue ' + $MissionCue + ' is ready to be added to the offer'" chance="$DebugChance"/>
            <set_value name="$MissionDataTable" exact="table[$Name = $MissionName, $Cue = $MissionCue, $WrapperCue = $MissionCue, $FollowUp = true]"/>
            <signal_cue_instantly cue="$Definition.$SpawnSuccessCue" param="$MissionDataTable"/>
          </actions>
          <cues>
            <cue name="Achieve_Coverage__Standard_FollowUp_Offer_Accepted">
              <conditions>
                <event_cue_signalled cue="$Definition.$OfferAcceptedCue"/>
                <check_value value="event.param == $MissionCue"/>
              </conditions>
              <actions>
                <!--We don't want to call the GM yet. Create the mission here and pass it into the GM when the previous mission ends
                TODO @Owen Move this to a library in the GM file?-->
                <create_mission cue="$MissionCue" missionthread="$Definition.$ThreadCue" name="$MissionName" description="$MissionDescription" faction="$Definition.$ThreadData.$Faction" type="missiontype.deliver">
                  <briefing>
                    <!--TODO @Owen Better objective-->
                    <objective step="1" action="objective.custom" customaction="'TEMP: Achieve coverage'"/>
                  </briefing>
                </create_mission>
              </actions>
            </cue>
            <cue name="Achieve_Coverage__Standard_Aborted">
              <conditions>
                <event_cue_signalled cue="$Definition.$ForceCleanupCue"/>
              </conditions>
              <actions>
                <cancel_cue cue="namespace"/>
              </actions>
            </cue>
            <!--namespace signalled to activate followup mission
            event.param = Station to supply-->
            <cue name="Achieve_Coverage__Standard_Activate_FollowUp">
              <conditions>
                <event_cue_signalled cue="namespace"/>
              </conditions>
              <actions>
                <!--Check that the correct parameters have been passed-->
                <do_if value="false">
                  <!--Currently no followup case for this type of mission-->
                  <signal_cue cue="Achieve_Coverage__Standard_Create_GM"/>
                  <cancel_cue cue="parent"/>
                </do_if>
                <do_else>
                  <assert value="false" text="namespace + ' was signalled to start a followup mission, but the passed parameter ' + event.param + ' was not what this mission was expecting. Ending mission.'"/>
                  <!--TODO @Owen what if there is another followup mission?-->
                  <signal_cue_instantly cue="$Definition.$EndedCue" param="namespace"/>
                  <cancel_cue cue="namespace"/>
                </do_else>
              </actions>
            </cue>
          </cues>
        </cue>
        <cue name="Achieve_Coverage__Standard_Not_FollowUp" onfail="cancel">
          <conditions>
            <check_value value="not $FollowUp"/>
          </conditions>
          <actions>
            <signal_cue cue="Achieve_Coverage__Standard_Create_GM"/>
          </actions>
        </cue>
        <cue name="Achieve_Coverage__Standard_Create_GM">
          <conditions>
            <event_cue_signalled/>
          </conditions>
          <cues>
            <cue name="Achieve_Coverage__Standard_Ref" ref="md.GM_AchieveCoverage.Start">
              <param name="Client" value="$Definition.$ThreadData.$Contact"/>
              <param name="MissionCue" value="$MissionCue"/>
              <param name="MissionThread" value="$Definition.$ThreadCue"/>
              <param name="ReportSignalCue" value="Achieve_Coverage__Standard_GM_Event"/>
              <param name="WithoutOffer" value="true"/>
              <param name="WithoutOfferWaitCue" value="if $FollowUp then null else $Definition.$OfferAcceptedCue"/>
              <param name="ForceCleanup" value="$Definition.$ForceCleanupCue"/>
              <param name="Page" value="$Page"/>
              <param name="TextOffset" value="$TextOffset"/>
              <param name="MissionLevel" value="$MissionLevel"/>
              <param name="Difficulty" value="$Difficulty"/>
              <param name="Faction" value="$Definition.$ThreadData.$Faction"/>
              <param name="CoverageSector" value="$Location"/>
              <param name="CoverageOffset" value="$Offset"/>
              <param name="CoverageRadius" value="$Radius"/>
              <param name="CoveragePercent" value="95"/>
              <param name="DebugChance" value="$DebugChance"/>
            </cue>
            <!--Signalled by GM when an event happens e.g. mission successfully generated or mission ended.
            Feedback values saved to the static of this cue: $FeedbackValue and $EndFeedbackValue-->
            <cue name="Achieve_Coverage__Standard_GM_Event" instantiate="true">
              <conditions>
                <event_cue_signalled/>
              </conditions>
              <actions>
                <include_actions ref="MM__Standard_GM_Event"/>
              </actions>
            </cue>
          </cues>
        </cue>
      </cues>
    </cue>
    <!--Variant Helper Libraries
    Helper libraries to be call from different threads but want to have the same basic variant rules
    If you want to have something custom for a faction e.g. if Vs Xenon, have twice as many enemies, either write your own variant within the cue itself, or modify variables after calling the library-->
    <library name="Build_Station__Allied_Space">
      <actions>
        <set_value name="$PlotSector" exact="null"/>
        <do_if value="$Definition.$ThreadData.$WarFront?">
          <do_if value="$Definition.$ThreadData.$WarFront.$HostSectors.keys.count">
            <do_any>
              <set_value name="$PlotSector" exact="$Definition.$ThreadData.$WarFront.$HostSectors.keys.sorted.{1}"/>
              <set_value name="$PlotSector" exact="$Definition.$ThreadData.$WarFront.$HostSectors.keys.random"/>
            </do_any>
          </do_if>
        </do_if>
        <do_elseif value="$Definition.$ThreadData.$Area">
          <do_if value="$Definition.$ThreadData.$Area.$HostSectors.count">
            <set_value name="$PlotSector" exact="$Definition.$ThreadData.$Area.$HostSectors.random"/>
          </do_if>
        </do_elseif>
        <do_if value="$PlotSector">
          <do_if value="$Definition.$ThreadData.$WarFront? and $Definition.$ThreadData.$WarFront.$EnemyEntryPoint and $Definition.$ThreadData.$WarFront.$EnemyEntryPoint.destination.sector == $PlotSector">
            <set_value name="$X_Offset" min="-30km" max="30km"/>
            <set_value name="$Z_Offset" min="8km" max="30km"/>
            <create_position name="$PlotOffset" object="$Definition.$ThreadData.$WarFront.$EnemyEntryPoint.exit" space="$PlotSector" x="$X_Offset" z="$Z_Offset"/>
          </do_if>
          <do_else>
            <!--TODO @Owen expose the 'sector core boxes'?-->
            <create_position name="$TargetOffset" space="$PlotSector" max="300km"/>
            <set_value name="$PlotOffset" exact="position.[$TargetOffset.x, 0m, $TargetOffset.z]" comment="Engine limitation, can only build station on ecliptic (y=0)"/>
          </do_else>
          <!-- Ask for smaller stations in allied space -->
          <do_any>
            <include_actions ref="md.GM_BuildStation.Setup_Build_Station_Requirements_Defence_Platform_1" weight="40"/>
            <include_actions ref="md.GM_BuildStation.Setup_Build_Station_Requirements_Defence_Platform_2" weight="40"/>
            <include_actions ref="md.GM_BuildStation.Setup_Build_Station_Requirements_Defence_Platform_3" weight="20"/>
          </do_any>
          <debug_text text="'Selected ' + $PlotSector + ' ' + $PlotSector.knownname + ' to be the sector to build the station in'" chance="$DebugChance"/>
          <set_value name="$Valid" exact="2" comment="Valid mission variables"/>
        </do_if>
      </actions>
    </library>
    <library name="Build_Station__Enemy_Border_Area">
      <actions>
        <set_value name="$PlotSector" exact="null"/>
        <set_value name="$TargetOffset" exact="null"/>
        <do_if value="$Definition.$ThreadData.$WarFront?">
          <do_if value="$Definition.$ThreadData.$WarFront.$HostSectors.keys.count">
            <do_any>
              <set_value name="$PlotSector" exact="$Definition.$ThreadData.$WarFront.$HostSectors.keys.sorted.{1}"/>
              <set_value name="$PlotSector" exact="$Definition.$ThreadData.$WarFront.$HostSectors.keys.random"/>
            </do_any>
          </do_if>
        </do_if>
        <do_elseif value="$Definition.$ThreadData.$Area">
          <do_if value="$Definition.$ThreadData.$Area.$EntryPointSectors.count">
            <set_value name="$PlotSector" exact="$Definition.$ThreadData.$Area.$EntryPointSectors.random"/>
          </do_if>
        </do_elseif>
        <do_if value="$PlotSector">
          <do_if value="$Definition.$ThreadData.$WarFront? and $Definition.$ThreadData.$WarFront.$EnemyEntryPoint and $Definition.$ThreadData.$WarFront.$EnemyEntryPoint.destination.sector == $PlotSector">
            <set_value name="$X_Offset" min="-30km" max="30km"/>
            <set_value name="$Z_Offset" min="8km" max="30km"/>
            <create_position name="$PlotOffset" object="$Definition.$ThreadData.$WarFront.$EnemyEntryPoint.exit" space="$PlotSector" x="$X_Offset" z="$Z_Offset"/>
          </do_if>
          <do_elseif value="$Definition.$ThreadData.$Area?">
            <do_for_each name="$PotentialEntrypoint" in="$Definition.$ThreadData.$Area.$EntryPoints">
              <do_if value="$PotentialEntrypoint.sector == $PlotSector">
                <set_value name="$X_Offset" min="-30km" max="30km"/>
                <set_value name="$Z_Offset" min="8km" max="30km"/>
                <create_position name="$PlotOffset" object="$PotentialEntrypoint" space="$PlotSector" x="$X_Offset" z="$Z_Offset"/>
                <break/>
              </do_if>
            </do_for_each>
          </do_elseif>
          <do_if value="not $TargetOffset">
            <!--TODO @Owen expose the 'sector core boxes'?-->
            <create_position name="$TargetOffset" space="$PlotSector" max="300km"/>
            <set_value name="$PlotOffset" exact="position.[$TargetOffset.x, 0m, $TargetOffset.z]" comment="Engine limitation, can only build station on ecliptic (y=0)"/>
          </do_if>
          <!-- Ask for bigger stations in more dangerous space -->
          <do_any>
            <include_actions ref="md.GM_BuildStation.Setup_Build_Station_Requirements_Defence_Platform_1" weight="30"/>
            <include_actions ref="md.GM_BuildStation.Setup_Build_Station_Requirements_Defence_Platform_2" weight="40"/>
            <include_actions ref="md.GM_BuildStation.Setup_Build_Station_Requirements_Defence_Platform_3" weight="30"/>
          </do_any>
          <debug_text text="'Selected ' + $PlotSector + ' ' + $PlotSector.knownname + ' to be the sector to build the station in'" chance="$DebugChance"/>
          <set_value name="$Valid" exact="2" comment="Valid mission variables"/>
        </do_if>
      </actions>
    </library>
    <cue name="Build_Station__Standard" instantiate="true" namespace="this">
      <conditions>
        <event_cue_signalled/>
        <!--Signal the static cue to trigger a new instance of this mission.
        Signalling a running instance will trigger a followup mission to run its GM library. See XXX_Activate_FollowUp cue for parameters-->
      </conditions>
      <actions>
        <set_value name="$Definition" exact="event.param"/>
        <set_value name="$Page" exact="$Definition.$Page"/>
        <set_value name="$TextOffsets" exact="$Definition.$TextOffset.clone"/>
        <shuffle_list list="$TextOffsets"/>
        <set_value name="$FollowUp" exact="@$Definition.$FollowUp == true" comment="Does this mission follow directly after another, with parameters potentially passing between them. This changes how this mission is spawned and managed."/>
        <set_value name="$SuccessfullyGenerated" exact="false"/>
        <set_value name="$DebugChance" exact="$Definition.$ThreadData.$DebugChance"/>
        <set_value name="$Difficulty" exact="level.hard"/>
        <set_value name="$MissionLevel" exact="1" comment="Rewards are increased by resource cost calculation"/>
        <assert value="not $FollowUp" text="'This mission does not currently have any parameters where it makes sense as a follow up mission. If there is, adjust the _Activate_FollowUp cue and remove this assert [Owen]'"/>
        <do_all exact="$TextOffsets.count" counter="$offset_i">
          <set_value name="$TextOffset" exact="$TextOffsets.{$offset_i}"/>
          <!--This mission is specific enough that it will only run if a matching text offset is found. If not, the offer will abort with an error.
          $Valid:
          0: Page/TextOffset not handled
          1: Correct Page/TextOffset but unable to setup mission
          2: Mission can attempt to be spawned -->
          <set_value name="$Valid" exact="0"/>
          <!--### ARGON VS XENON ###-->
          <do_if value="$Page == 30210">
            <do_if value="$TextOffset == 105000" comment="Build defence outpost">
              <set_value name="$Valid" exact="1" comment="Valid text offset"/>
              <include_actions ref="Build_Station__Allied_Space"/>
            </do_if>
            <do_elseif value="$TextOffset == 105100" comment="Build defence outpost">
              <set_value name="$Valid" exact="1" comment="Valid text offset"/>
              <include_actions ref="Build_Station__Enemy_Border_Area"/>
            </do_elseif>
          </do_if>
          <!--### ARGON VS HOLY ORDER ###-->
          <do_elseif value="$Page == 30211">
            <do_if value="$TextOffset == 105000" comment="Build defence outpost">
              <set_value name="$Valid" exact="1" comment="Valid text offset"/>
              <include_actions ref="Build_Station__Allied_Space"/>
            </do_if>
            <do_elseif value="$TextOffset == 105100" comment="Build defence outpost">
              <set_value name="$Valid" exact="1" comment="Valid text offset"/>
              <include_actions ref="Build_Station__Enemy_Border_Area"/>
            </do_elseif>
          </do_elseif>
          <!--### PARANID VS HOLY ORDER ###-->
          <do_elseif value="$Page == 30212">
            <do_if value="$TextOffset == 105000" comment="Build defence outpost">
              <set_value name="$Valid" exact="1" comment="Valid text offset"/>
              <include_actions ref="Build_Station__Allied_Space"/>
            </do_if>
            <do_elseif value="$TextOffset == 105100" comment="Build defence outpost">
              <set_value name="$Valid" exact="1" comment="Valid text offset"/>
              <include_actions ref="Build_Station__Enemy_Border_Area"/>
            </do_elseif>
          </do_elseif>
          <!--### HOLY ORDER VS ARGON ###-->
          <do_elseif value="$Page == 30213">
            <do_if value="$TextOffset == 105000" comment="Build defence outpost">
              <set_value name="$Valid" exact="1" comment="Valid text offset"/>
              <include_actions ref="Build_Station__Allied_Space"/>
            </do_if>
            <do_elseif value="$TextOffset == 105100" comment="Build defence outpost">
              <set_value name="$Valid" exact="1" comment="Valid text offset"/>
              <include_actions ref="Build_Station__Enemy_Border_Area"/>
            </do_elseif>
          </do_elseif>
          <!--### HOLY ORDER VS ARGON ###-->
          <do_elseif value="$Page == 30214">
            <do_if value="$TextOffset == 105000" comment="Build defence outpost">
              <set_value name="$Valid" exact="1" comment="Valid text offset"/>
              <include_actions ref="Build_Station__Allied_Space"/>
            </do_if>
            <do_elseif value="$TextOffset == 105100" comment="Build defence outpost">
              <set_value name="$Valid" exact="1" comment="Valid text offset"/>
              <include_actions ref="Build_Station__Enemy_Border_Area"/>
            </do_elseif>
          </do_elseif>
          <!--### SPLIT VS ARGON ###-->
          <do_elseif value="$Page == 30215">

          <do_if value="$TextOffset == 105000" comment="Build defence outpost"><set_value name="$Valid" exact="1" comment="Valid text offset"/><include_actions ref="Build_Station__Allied_Space"/></do_if><do_elseif value="$TextOffset == 105100" comment="Build defence outpost"><set_value name="$Valid" exact="1" comment="Valid text offset"/><include_actions ref="Build_Station__Enemy_Border_Area"/></do_elseif></do_elseif>
          <!--### DLC 2 Setup ###-->
          <do_elseif value="$Page == 30216">

          <do_if value="$TextOffset == 105000" comment="Build defence outpost"><set_value name="$Valid" exact="1" comment="Valid text offset"/><include_actions ref="Build_Station__Allied_Space"/></do_if><do_elseif value="$TextOffset == 105100" comment="Build defence outpost"><set_value name="$Valid" exact="1" comment="Valid text offset"/><include_actions ref="Build_Station__Enemy_Border_Area"/></do_elseif></do_elseif>
          <do_if value="$Valid == 0">
            <debug_text text="'Attempting to spawn a mission on ' + this + ' but the combination of Page: ' + $Page + ' and TextOffset: ' + $TextOffset + ' do not match any definitions [Owen]'" filter="error"/>
          </do_if>
          <do_elseif value="$Valid == 2">
            <break/>
          </do_elseif>
        </do_all>
        <do_if value="$Valid == 2">
          <do_if value="$FollowUp">
            <!--Followup missions use the namespace as the mission cue-->
            <set_value name="$MissionCue" exact="namespace"/>
          </do_if>
          <do_else>
            <set_value name="$MissionCue" exact="null"/>
          </do_else>
        </do_if>
        <do_else>
          <do_if value="$Valid == 1">
            <debug_text text="'Unable to find suitable variant variables for mission on ' + this + ' with combination of Page: ' + $Page + ' and TextOffsets: ' + $TextOffsets + '. [Owen]'" chance="$DebugChance"/>
          </do_if>
          <signal_cue cue="$Definition.$SpawnFailedCue"/>
          <cancel_cue cue="this"/>
        </do_else>
      </actions>
      <cues>
        <cue name="Build_Station__Standard_FollowUp_Manager" onfail="cancel">
          <conditions>
            <check_value value="$FollowUp"/>
          </conditions>
          <actions>
            <!--If this is going to be a followup mission, first, inform the mission thread manager of this submission so it can be displayed in the offer.-->
            <!--Currently means you need to find the mission name here, instead of relying on the GM itself finding it.-->
            <set_value name="$MissionName" exact="readtext.{$Page}.{$TextOffset + 1}"/>
            <set_value name="$MissionDescription" exact="readtext.{$Page}.{$TextOffset + 2}"/>
            <debug_text text="'Attempting to signal the mission thread that followup mission cue ' + $MissionCue + ' is ready to be added to the offer'" chance="$DebugChance"/>
            <set_value name="$MissionDataTable" exact="table[$Name = $MissionName, $Cue = $MissionCue, $WrapperCue = $MissionCue, $FollowUp = true]"/>
            <signal_cue_instantly cue="$Definition.$SpawnSuccessCue" param="$MissionDataTable"/>
          </actions>
          <cues>
            <cue name="Build_Station__Standard_FollowUp_Offer_Accepted">
              <conditions>
                <event_cue_signalled cue="$Definition.$OfferAcceptedCue"/>
                <check_value value="event.param == $MissionCue"/>
              </conditions>
              <actions>
                <!--We don't want to call the GM yet. Create the mission here and pass it into the GM when the previous mission ends
                TODO @Owen Move this to a library in the GM file?-->
                <create_mission cue="$MissionCue" missionthread="$Definition.$ThreadCue" name="$MissionName" description="$MissionDescription" faction="$Definition.$ThreadData.$Faction" type="missiontype.deliver">
                  <briefing>
                    <!--TODO @Owen Better objective?-->
                    <objective step="1" action="objective.build_station"/>
                  </briefing>
                </create_mission>
              </actions>
            </cue>
            <cue name="Build_Station__Standard_Aborted">
              <conditions>
                <event_cue_signalled cue="$Definition.$ForceCleanupCue"/>
              </conditions>
              <actions>
                <cancel_cue cue="namespace"/>
              </actions>
            </cue>
            <!--namespace signalled to activate followup mission
            event.param = Station to supply-->
            <cue name="Build_Station__Standard_Activate_FollowUp">
              <conditions>
                <event_cue_signalled cue="namespace"/>
              </conditions>
              <actions>
                <!--Check that the correct parameters have been passed-->
                <do_if value="false">
                  <!--Currently no followup case for this type of mission-->
                  <signal_cue cue="Build_Station__Standard_Create_GM"/>
                  <cancel_cue cue="parent"/>
                </do_if>
                <do_else>
                  <assert value="false" text="namespace + ' was signalled to start a followup mission, but the passed parameter ' + event.param + ' was not what this mission was expecting. Ending mission.'"/>
                  <!--TODO @Owen what if there is another followup mission?-->
                  <signal_cue_instantly cue="$Definition.$EndedCue" param="namespace"/>
                  <cancel_cue cue="namespace"/>
                </do_else>
              </actions>
            </cue>
          </cues>
        </cue>
        <cue name="Build_Station__Standard_Not_FollowUp" onfail="cancel">
          <conditions>
            <check_value value="not $FollowUp"/>
          </conditions>
          <actions>
            <signal_cue cue="Build_Station__Standard_Create_GM"/>
          </actions>
        </cue>
        <cue name="Build_Station__Standard_Create_GM">
          <conditions>
            <event_cue_signalled/>
          </conditions>
          <actions>
            <set_value name="$ResultTable" exact="table[]"/>
          </actions>
          <cues>
            <!-- Trigger actual GM, passing the specified parameters -->
            <cue name="Build_Station__Standard_Ref" ref="md.GM_BuildStation.Start">
              <param name="Client" value="$Definition.$ThreadData.$Contact"/>
              <param name="MissionCue" value="$MissionCue"/>
              <param name="MissionThread" value="$Definition.$ThreadCue"/>
              <param name="ReportSignalCue" value="Build_Station__Standard_GM_Event"/>
              <param name="WithoutOffer" value="true"/>
              <param name="WithoutOfferWaitCue" value="if $FollowUp then null else $Definition.$OfferAcceptedCue"/>
              <param name="ForceCleanup" value="$Definition.$ForceCleanupCue"/>
              <param name="Page" value="$Page"/>
              <param name="TextOffset" value="$TextOffset"/>
              <param name="MissionLevel" value="$MissionLevel"/>
              <param name="Difficulty" value="$Difficulty"/>
              <param name="Faction" value="$Definition.$ThreadData.$Faction"/>
              <param name="PlotSector" value="$PlotSector"/>
              <param name="PlotOffset" value="$PlotOffset"/>
              <param name="PlotRange" value="$PlotRange"/>
              <param name="PlotSize" value="$PlotSize"/>
              <param name="StationSpecs" value="$StationSpecs"/>
              <param name="ResultTable" value="$ResultTable"/>
              <param name="DebugChance" value="$DebugChance"/>
            </cue>
            <!--Signalled by GM when an event happens e.g. mission successfully generated or mission ended.
            Feedback values saved to the static of this cue: $FeedbackValue and $EndFeedbackValue-->
            <cue name="Build_Station__Standard_GM_Event" instantiate="true">
              <conditions>
                <event_cue_signalled/>
              </conditions>
              <actions>
                <include_actions ref="MM__Standard_GM_Event"/>
              </actions>
            </cue>
          </cues>
        </cue>
      </cues>
    </cue>
    <cue name="Supply_Factory__Standard" instantiate="true" namespace="this">
      <conditions>
        <event_cue_signalled/>
        <!--Signal the static cue to trigger a new instance of this mission.
        Signalling a running instance will trigger a followup mission to run its GM library. See XXX_Activate_FollowUp cue for parameters-->
      </conditions>
      <actions>
        <set_value name="$Definition" exact="event.param"/>
        <set_value name="$Page" exact="$Definition.$Page"/>
        <set_value name="$TextOffsets" exact="$Definition.$TextOffset.clone"/>
        <shuffle_list list="$TextOffsets"/>
        <set_value name="$FollowUp" exact="@$Definition.$FollowUp == true" comment="Does this mission follow directly after another, with parameters potentially passing between them. This changes how this mission is spawned and managed."/>
        <set_value name="$SuccessfullyGenerated" exact="false"/>
        <set_value name="$DebugChance" exact="$Definition.$ThreadData.$DebugChance"/>
        <set_value name="$Difficulty" exact="level.medium"/>
        <set_value name="$MissionLevel" exact="1"/>
        <do_all exact="$TextOffsets.count" counter="$offset_i">
          <set_value name="$TextOffset" exact="$TextOffsets.{$offset_i}"/>
          <!--This mission is specific enough that it will only run if a matching text offset is found. If not, the offer will abort with an error.
          $Valid:
          0: Page/TextOffset not handled
          1: Correct Page/TextOffset but unable to setup mission
          2: Mission can attempt to be spawned -->
          <set_value name="$Valid" exact="0"/>
          <set_value name="$Faction" exact="$Definition.$ThreadData.$Faction"/>
          <!--### ARGON VS XENON ###-->
          <do_if value="$Page == 30210">
            <do_if value="$TextOffset == 130000">
              <set_value name="$Valid" exact="1" comment="Valid text offset"/>
              <include_actions ref="md.GM_SupplyFactory.ConfigureDifficulty" comment="input: $MissionLevel; output: $MissionLevel, $SupplyStorageMinPercent, $MissionDuration"/>
              <do_if value="not $FollowUp">
                <include_actions ref="md.GM_SupplyFactory.SupplyFactory_FriendlyFactory" comment="input: $Faction, output: $TargetStation"/>
                <do_if value="$TargetStation">
                  <set_value name="$Valid" exact="2" comment="Valid mission variables"/>
                </do_if>
              </do_if>
              <do_else>
                <set_value name="$Valid" exact="2" comment="Valid mission variables"/>
              </do_else>
            </do_if>
          </do_if>
          <!--### ARGON VS HOLY ORDER ###-->
          <do_elseif value="$Page == 30211">
            <do_if value="$TextOffset == 130000">
              <set_value name="$Valid" exact="1" comment="Valid text offset"/>
              <include_actions ref="md.GM_SupplyFactory.ConfigureDifficulty" comment="input: $MissionLevel; output: $MissionLevel, $SupplyStorageMinPercent, $MissionDuration"/>
              <do_if value="not $FollowUp">
                <include_actions ref="md.GM_SupplyFactory.SupplyFactory_FriendlyFactory" comment="input: $Faction, output: $TargetStation"/>
                <do_if value="$TargetStation">
                  <set_value name="$Valid" exact="2" comment="Valid mission variables"/>
                </do_if>
              </do_if>
              <do_else>
                <set_value name="$Valid" exact="2" comment="Valid mission variables"/>
              </do_else>
            </do_if>
          </do_elseif>
          <!--### PARANID VS HOLY ORDER ###-->
          <do_elseif value="$Page == 30212">
            <do_if value="$TextOffset == 130000">
              <set_value name="$Valid" exact="1" comment="Valid text offset"/>
              <include_actions ref="md.GM_SupplyFactory.ConfigureDifficulty" comment="input: $MissionLevel; output: $MissionLevel, $SupplyStorageMinPercent, $MissionDuration"/>
              <do_if value="not $FollowUp">
                <include_actions ref="md.GM_SupplyFactory.SupplyFactory_FriendlyFactory" comment="input: $Faction, output: $TargetStation"/>
                <do_if value="$TargetStation">
                  <set_value name="$Valid" exact="2" comment="Valid mission variables"/>
                </do_if>
              </do_if>
              <do_else>
                <set_value name="$Valid" exact="2" comment="Valid mission variables"/>
              </do_else>
            </do_if>
          </do_elseif>
          <!--### HOLY ORDER VS ARGON ###-->
          <do_elseif value="$Page == 30213">
            <do_if value="$TextOffset == 130000">
              <set_value name="$Valid" exact="1" comment="Valid text offset"/>
              <include_actions ref="md.GM_SupplyFactory.ConfigureDifficulty" comment="input: $MissionLevel; output: $MissionLevel, $SupplyStorageMinPercent, $MissionDuration"/>
              <do_if value="not $FollowUp">
                <include_actions ref="md.GM_SupplyFactory.SupplyFactory_FriendlyFactory" comment="input: $Faction, output: $TargetStation"/>
                <do_if value="$TargetStation">
                  <set_value name="$Valid" exact="2" comment="Valid mission variables"/>
                </do_if>
              </do_if>
              <do_else>
                <set_value name="$Valid" exact="2" comment="Valid mission variables"/>
              </do_else>
            </do_if>
          </do_elseif>
          <!--### HOLY ORDER VS PARANID ###-->
          <do_elseif value="$Page == 30214">
            <do_if value="$TextOffset == 130000">
              <set_value name="$Valid" exact="1" comment="Valid text offset"/>
              <include_actions ref="md.GM_SupplyFactory.ConfigureDifficulty" comment="input: $MissionLevel; output: $MissionLevel, $SupplyStorageMinPercent, $MissionDuration"/>
              <do_if value="not $FollowUp">
                <include_actions ref="md.GM_SupplyFactory.SupplyFactory_FriendlyFactory" comment="input: $Faction, output: $TargetStation"/>
                <do_if value="$TargetStation">
                  <set_value name="$Valid" exact="2" comment="Valid mission variables"/>
                </do_if>
              </do_if>
              <do_else>
                <set_value name="$Valid" exact="2" comment="Valid mission variables"/>
              </do_else>
            </do_if>
          </do_elseif>
          <do_elseif value="$Page == 30215">

          <do_if value="$TextOffset == 130000"><set_value name="$Valid" exact="1" comment="Valid text offset"/><include_actions ref="md.GM_SupplyFactory.ConfigureDifficulty" comment="input: $MissionLevel; output: $MissionLevel, $SupplyStorageMinPercent, $MissionDuration"/><do_if value="not $FollowUp"><include_actions ref="md.GM_SupplyFactory.SupplyFactory_FriendlyFactory" comment="input: $Faction, output: $TargetStation"/><do_if value="$TargetStation"><set_value name="$Valid" exact="2" comment="Valid mission variables"/></do_if></do_if><do_else><set_value name="$Valid" exact="2" comment="Valid mission variables"/></do_else></do_if></do_elseif>
          <!--### DLC 2 Setup ###-->
          <do_elseif value="$Page == 30216">

          <do_if value="$TextOffset == 130000"><set_value name="$Valid" exact="1" comment="Valid text offset"/><include_actions ref="md.GM_SupplyFactory.ConfigureDifficulty" comment="input: $MissionLevel; output: $MissionLevel, $SupplyStorageMinPercent, $MissionDuration"/><do_if value="not $FollowUp"><include_actions ref="md.GM_SupplyFactory.SupplyFactory_FriendlyFactory" comment="input: $Faction, output: $TargetStation"/><do_if value="$TargetStation"><set_value name="$Valid" exact="2" comment="Valid mission variables"/></do_if></do_if><do_else><set_value name="$Valid" exact="2" comment="Valid mission variables"/></do_else></do_if></do_elseif>
          <do_if value="$Valid == 0">
            <debug_text text="'Attempting to spawn a mission on ' + this + ' but the combination of Page: ' + $Page + ' and TextOffset: ' + $TextOffset + ' do not match any definitions [Owen]'" filter="error"/>
          </do_if>
          <do_elseif value="$Valid == 2">
            <break/>
          </do_elseif>
        </do_all>
        <do_if value="$Valid == 2">
          <do_if value="$FollowUp">
            <!--Followup missions use the namespace as the mission cue-->
            <set_value name="$MissionCue" exact="namespace"/>
          </do_if>
          <do_else>
            <set_value name="$MissionCue" exact="null"/>
          </do_else>
        </do_if>
        <do_else>
          <do_if value="$Valid == 1">
            <debug_text text="'Unable to find suitable variant variables for mission on ' + this + ' with combination of Page: ' + $Page + ' and TextOffsets: ' + $TextOffsets + '. [Owen]'" chance="$DebugChance"/>
          </do_if>
          <signal_cue cue="$Definition.$SpawnFailedCue"/>
          <cancel_cue cue="this"/>
        </do_else>
      </actions>
      <cues>
        <cue name="Supply_Factory__Standard_FollowUp_Manager" onfail="cancel">
          <conditions>
            <check_value value="$FollowUp"/>
          </conditions>
          <actions>
            <!--If this is going to be a followup mission, first, inform the mission thread manager of this submission so it can be displayed in the offer.-->
            <!--Currently means you need to find the mission name here, instead of relying on the GM itself finding it.-->
            <set_value name="$MissionName" exact="readtext.{$Page}.{$TextOffset + 1}"/>
            <set_value name="$MissionDescription" exact="readtext.{$Page}.{$TextOffset + 2}"/>
            <debug_text text="'Attempting to signal the mission thread that followup mission cue ' + $MissionCue + ' is ready to be added to the offer'" chance="$DebugChance"/>
            <set_value name="$MissionDataTable" exact="table[$Name = $MissionName, $Cue = $MissionCue, $WrapperCue = $MissionCue, $FollowUp = true]"/>
            <signal_cue_instantly cue="$Definition.$SpawnSuccessCue" param="$MissionDataTable"/>
          </actions>
          <cues>
            <cue name="Supply_Factory__Standard_FollowUp_Offer_Accepted">
              <conditions>
                <event_cue_signalled cue="$Definition.$OfferAcceptedCue"/>
                <check_value value="event.param == $MissionCue"/>
              </conditions>
              <actions>
                <!--We don't want to call the GM yet. Create the mission here and pass it into the GM when the previous mission ends
                TODO @Owen Move this to a library in the GM file?-->
                <create_mission cue="$MissionCue" missionthread="$Definition.$ThreadCue" name="$MissionName" description="$MissionDescription" faction="$Definition.$ThreadData.$Faction" type="missiontype.deliver">
                  <briefing>
                    <objective step="1" action="objective.deliver" text="{30147,2}" comment="Production resources"/>
                  </briefing>
                </create_mission>
              </actions>
            </cue>
            <cue name="Supply_Factory__Standard_Aborted">
              <conditions>
                <event_cue_signalled cue="$Definition.$ForceCleanupCue"/>
              </conditions>
              <actions>
                <cancel_cue cue="namespace"/>
              </actions>
            </cue>
            <!--namespace signalled to activate followup mission
            event.param = Station to supply-->
            <cue name="Supply_Factory__Standard_Activate_FollowUp">
              <conditions>
                <event_cue_signalled cue="namespace"/>
              </conditions>
              <actions>
                <!--Check that the correct parameters have been passed-->
                <do_if value="event.param.isclass.station">
                  <set_value name="$TargetStation" exact="event.param"/>
                  <signal_cue cue="Supply_Factory__Standard_Create_GM"/>
                  <cancel_cue cue="parent"/>
                </do_if>
                <do_else>
                  <assert value="false" text="namespace + ' was signalled to start a followup mission, but the passed parameter ' + event.param + ' was not what this mission was expecting. Ending mission.'"/>
                  <!--TODO @Owen what if there is another followup mission?-->
                  <signal_cue_instantly cue="$Definition.$EndedCue" param="namespace"/>
                  <cancel_cue cue="namespace"/>
                </do_else>
              </actions>
            </cue>
          </cues>
        </cue>
        <cue name="Supply_Factory__Standard_Not_FollowUp" onfail="cancel">
          <conditions>
            <check_value value="not $FollowUp"/>
          </conditions>
          <actions>
            <signal_cue cue="Supply_Factory__Standard_Create_GM"/>
          </actions>
        </cue>
        <cue name="Supply_Factory__Standard_Create_GM">
          <conditions>
            <event_cue_signalled/>
          </conditions>
          <cues>
            <!-- Trigger actual GM, passing the specified parameters -->
            <cue name="Supply_Factory__Standard_Ref" ref="md.GM_SupplyFactory.Start">
              <param name="Client" value="$Definition.$ThreadData.$Contact"/>
              <param name="MissionCue" value="$MissionCue"/>
              <param name="MissionThread" value="$Definition.$ThreadCue"/>
              <param name="ReportSignalCue" value="Supply_Factory__Standard_GM_Event"/>
              <param name="WithoutOffer" value="true"/>
              <param name="WithoutOfferWaitCue" value="if $FollowUp then null else $Definition.$OfferAcceptedCue"/>
              <param name="ForceCleanup" value="$Definition.$ForceCleanupCue"/>
              <param name="Page" value="$Page"/>
              <param name="TextOffset" value="$TextOffset"/>
              <param name="MissionLevel" value="$MissionLevel"/>
              <param name="Difficulty" value="$Difficulty"/>
              <param name="MissionDuration" value="$MissionDuration"/>
              <param name="TargetStation" value="$TargetStation"/>
              <param name="SupplyStorageMinPercent" value="$SupplyStorageMinPercent"/>
              <param name="DebugChance" value="$DebugChance"/>
            </cue>
            <!--Signalled by GM when an event happens e.g. mission successfully generated or mission ended.
            Feedback values saved to the static of this cue: $FeedbackValue and $EndFeedbackValue-->
            <cue name="Supply_Factory__Standard_GM_Event" instantiate="true">
              <conditions>
                <event_cue_signalled/>
              </conditions>
              <actions>
                <include_actions ref="MM__Standard_GM_Event"/>
              </actions>
            </cue>
          </cues>
        </cue>
      </cues>
    </cue>
    <!--Variant Helper Libraries
    Helper libraries to be call from different threads but want to have the same basic variant rules
    If you want to have something custom for a faction e.g. if Vs Xenon, have twice as many enemies, either write your own variant within the cue itself, or modify variables after calling the library-->
    <library name="DeployInPlace__LaserTowers_Around_Allied_Object">
      <actions>
        <set_value name="$TargetSector" exact="null"/>
        <do_if value="$Definition.$ThreadData.$WarFront?">
          <do_if value="$Definition.$ThreadData.$WarFront.$HostSectors.keys.count">
            <do_any>
              <set_value name="$TargetSector" exact="$Definition.$ThreadData.$WarFront.$HostSectors.keys.sorted.{1}"/>
              <set_value name="$TargetSector" exact="$Definition.$ThreadData.$WarFront.$HostSectors.keys.random"/>
            </do_any>
          </do_if>
        </do_if>
        <do_elseif value="$Definition.$ThreadData.$Area">
          <do_if value="$Definition.$ThreadData.$Area.$HostSectors.count">
            <set_value name="$TargetSector" exact="$Definition.$ThreadData.$Area.$HostSectors.random"/>
          </do_if>
        </do_elseif>
        <do_if value="$TargetSector">
          <!--TODO @Owen find entry points towards enemy space-->
          <find_station name="$AnchorObject" space="$TargetSector">
            <match_relation_of faction="$Definition.$ThreadData.$Faction" relation="friend" comparison="ge"/>
          </find_station>
          <do_if value="$AnchorObject">
            <create_position name="$TargetOffset" object="$AnchorObject" space="$TargetSector"/>
            <!--TODO @Owen @Roger This is a test to see if a sphere being around an object is fine even if it's away from the y axis -->
            <!--<set_value name="$TargetOffset"     exact="position.[$TargetOffset.x, 0, $TargetOffset.z]" comment="Keep guidance sphere on ecliptic (y=0)"/>-->
            <set_value name="$TargetRadius" exact="$AnchorObject.size + 5km"/>
            <set_value name="$DeployableCategory" exact="deployablecategory.lasertower"/>
            <set_value name="$DropAmount" exact="3"/>
            <set_value name="$Valid" exact="2" comment="Valid mission variables"/>
          </do_if>
        </do_if>
      </actions>
    </library>
    <library name="DeployInPlace__Mine_Own_Entry_Point">
      <actions>
        <set_value name="$DeployAtOwn" exact="true"/>
        <set_value name="$WantedDeployableCategory" exact="deployablecategory.mine"/>
        <include_actions ref="DeployInPlace__Entry_Point_Helper"/>
        <remove_value name="$DeployAtOwn"/>
        <remove_value name="$WantedDeployableCategory"/>
      </actions>
    </library>
    <library name="DeployInPlace__Mine_Allied_Entry_Point">
      <actions>
        <set_value name="$DeployAtOwn" exact="false"/>
        <set_value name="$WantedDeployableCategory" exact="deployablecategory.mine"/>
        <include_actions ref="DeployInPlace__Entry_Point_Helper"/>
        <remove_value name="$DeployAtOwn"/>
        <remove_value name="$WantedDeployableCategory"/>
      </actions>
    </library>
    <library name="DeployInPlace__Lasertower_Own_Entry_Point">
      <actions>
        <set_value name="$DeployAtOwn" exact="true"/>
        <set_value name="$WantedDeployableCategory" exact="deployablecategory.lasertower"/>
        <include_actions ref="DeployInPlace__Entry_Point_Helper"/>
        <remove_value name="$DeployAtOwn"/>
        <remove_value name="$WantedDeployableCategory"/>
      </actions>
    </library>
    <library name="DeployInPlace__Lasertower_Allied_Entry_Point">
      <actions>
        <set_value name="$DeployAtOwn" exact="false"/>
        <set_value name="$WantedDeployableCategory" exact="deployablecategory.lasertower"/>
        <include_actions ref="DeployInPlace__Entry_Point_Helper"/>
        <remove_value name="$DeployAtOwn"/>
        <remove_value name="$WantedDeployableCategory"/>
      </actions>
    </library>
    <!--not a run_actions library to simplify passing back multiple results-->
    <library name="DeployInPlace__Entry_Point_Helper" purpose="include_actions">
      <actions>
        <do_if value="@$Definition.$ThreadData.$WarFront.$EnemyEntryPoint">
          <set_value name="$ExitPointSector" exact="$Definition.$ThreadData.$WarFront.$EnemyEntryPoint.destination.sector"/>
          <do_if value="$DeployAtOwn">
            <do_if value="$ExitPointSector.owner == $Definition.$ThreadData.$Faction or $ExitPointSector.iscontestedby.{$Definition.$ThreadData.$Faction}">
              <set_value name="$Valid" exact="2" comment="Valid mission variables"/>
            </do_if>
          </do_if>
          <do_else>
            <do_if value="$ExitPointSector.owner != $Definition.$ThreadData.$Faction and not $ExitPointSector.iscontestedby.{$Definition.$ThreadData.$Faction}">
              <set_value name="$Valid" exact="2" comment="Valid mission variables"/>
            </do_if>
          </do_else>
          <do_if value="$Valid == 2">
            <create_position name="$TargetOffset" object="$Definition.$ThreadData.$WarFront.$EnemyEntryPoint.exit" space="$ExitPointSector" z="5km" max="500m"/>
            <!--TODO @Owen @Roger This is a test to see if a sphere being around an object is fine even if it's away from the y axis -->
            <!--<set_value name="$TargetOffset"     exact="position.[$TargetOffset.x, 0, $TargetOffset.z]" comment="Keep guidance sphere on ecliptic (y=0)"/>-->
            <set_value name="$TargetSector" exact="$ExitPointSector"/>
            <set_value name="$TargetRadius" exact="$Definition.$ThreadData.$WarFront.$EnemyEntryPoint.exit.size"/>
            <set_value name="$DeployableCategory" exact="$WantedDeployableCategory"/>
            <set_value name="$DropAmount" exact="5"/>
          </do_if>
        </do_if>
      </actions>
    </library>
    <library name="DeployInPlace__Mine_Area_Entry_Point">
      <actions>
        <set_value name="$WantedDeployableCategory" exact="deployablecategory.mine"/>
        <include_actions ref="DeployInPlace__Area_Entry_Point_Helper"/>
        <remove_value name="$WantedDeployableCategory"/>
      </actions>
    </library>
    <library name="DeployInPlace__Lasertower_Area_Entry_Point">
      <actions>
        <set_value name="$WantedDeployableCategory" exact="deployablecategory.lasertower"/>
        <include_actions ref="DeployInPlace__Area_Entry_Point_Helper"/>
        <remove_value name="$WantedDeployableCategory"/>
      </actions>
    </library>
    <!--not a run_actions library to simplify passing back multiple results-->
    <library name="DeployInPlace__Area_Entry_Point_Helper" purpose="include_actions">
      <actions>
        <do_if value="@$Definition.$ThreadData.$Area and $Definition.$ThreadData.$Area.$EntryPoints.count">
          <shuffle_list list="$Definition.$ThreadData.$Area.$EntryPoints"/>
          <set_value name="$BestEntryPoint" exact="null"/>
          <do_for_each name="$PotentialEntryPoint" in="$Definition.$ThreadData.$Area.$EntryPoints">
            <do_if value="$PotentialEntryPoint.owner != $Definition.$ThreadData.$EnemyFaction">
              <set_value name="$BestEntryPoint" exact="$PotentialEntryPoint"/>
              <break/>
            </do_if>
          </do_for_each>
          <do_if value="not $BestEntryPoint">
            <set_value name="$BestEntryPoint" exact="$Definition.$ThreadData.$Area.$EntryPoints.random"/>
          </do_if>
          <create_position name="$TargetOffset" object="$BestEntryPoint" space="$BestEntryPoint.sector" z="5km" max="500m"/>
          <!--TODO @Owen @Roger This is a test to see if a sphere being around an object is fine even if it's away from the y axis -->
          <!--<set_value name="$TargetOffset"     exact="position.[$TargetOffset.x, 0, $TargetOffset.z]" comment="Keep guidance sphere on ecliptic (y=0)"/>-->
          <set_value name="$TargetSector" exact="$BestEntryPoint.sector"/>
          <set_value name="$TargetRadius" exact="$BestEntryPoint.size"/>
          <set_value name="$DeployableCategory" exact="$WantedDeployableCategory"/>
          <set_value name="$DropAmount" exact="5"/>
          <set_value name="$Valid" exact="2" comment="Valid mission variables"/>
        </do_if>
      </actions>
    </library>
    <library name="DeployInPlace__LaserTowers_In_Resource_Regions">
      <actions>
        <set_value name="$TargetSector" exact="null"/>
        <do_if value="$Definition.$ThreadData.$WarFront?">
          <do_if value="$Definition.$ThreadData.$WarFront.$HostSectors.keys.count">
            <do_any>
              <set_value name="$TargetSector" exact="$Definition.$ThreadData.$WarFront.$HostSectors.keys.sorted.{1}"/>
              <set_value name="$TargetSector" exact="$Definition.$ThreadData.$WarFront.$HostSectors.keys.random"/>
            </do_any>
          </do_if>
        </do_if>
        <do_elseif value="$Definition.$ThreadData.$Area?">
          <do_if value="$Definition.$ThreadData.$Area.$HostSectors.count">
            <set_value name="$TargetSector" exact="$Definition.$ThreadData.$Area.$HostSectors.random"/>
          </do_if>
        </do_elseif>
        <do_if value="$TargetSector">
          <set_value name="$Resources" exact="[ware.ice, ware.ore, ware.silicon]"/>
          <shuffle_list list="$Resources"/>
          <set_value name="$ResultSector" exact="null"/>
          <do_all exact="$Resources.count" counter="$i">
            <find_resource ware="$Resources.{$i}" refobject="$TargetSector" sector="$ResultSector" position="$TargetOffset" snap="false"/>
            <do_if value="$ResultSector">
              <break/>
            </do_if>
          </do_all>
          <do_if value="$ResultSector">
            <set_value name="$TargetRadius" exact="10km"/>
            <set_value name="$DeployableCategory" exact="deployablecategory.lasertower"/>
            <set_value name="$DropAmount" exact="3"/>
            <set_value name="$Valid" exact="2" comment="Valid mission variables"/>
          </do_if>
        </do_if>
      </actions>
    </library>
    <library name="DeployInPlace__Satellite_In_Enemy_Space">
      <actions>
        <set_value name="$TargetSector" exact="null"/>
        <do_if value="$Definition.$ThreadData.$WarFront?">
          <do_if value="$Definition.$ThreadData.$WarFront.$EnemySectors.keys.count gt 0 or $Definition.$ThreadData.$WarFront.$ContestedSectors.count gt 0">
            <do_any>
              <do_any weight="$Definition.$ThreadData.$WarFront.$EnemySectors.keys.count gt 0">
                <set_value name="$TargetSector" exact="$Definition.$ThreadData.$WarFront.$EnemySectors.keys.sorted.{1}"/>
                <set_value name="$TargetSector" exact="$Definition.$ThreadData.$WarFront.$EnemySectors.keys.random"/>
              </do_any>
              <set_value name="$TargetSector" exact="$Definition.$ThreadData.$WarFront.$ContestedSectors.random" weight="$Definition.$ThreadData.$WarFront.$ContestedSectors.count gt 0"/>
            </do_any>
          </do_if>
        </do_if>
        <do_elseif value="$Definition.$ThreadData.$Area">
          <do_if value="$Definition.$ThreadData.$Area.$EnemySectors.count">
            <set_value name="$TargetSector" exact="$Definition.$ThreadData.$Area.$EnemySectors.random"/>
          </do_if>
        </do_elseif>
        <do_if value="$TargetSector">
          <create_position name="$TargetOffset" max="150km"/>
          <set_value name="$Y" min="-5km" max="5km"/>
          <set_value name="$TargetOffset" exact="position.[$TargetOffset.x, $Y, $TargetOffset.z]"/>
          <get_safe_pos result="$TargetOffset" sector="$TargetSector" allowyaxis="false" radius="5km" value="$TargetOffset"/>
          <set_value name="$TargetRadius" exact="1000m"/>
          <set_value name="$DeployableCategory" exact="deployablecategory.satellite"/>
          <set_value name="$DropAmount" exact="1"/>
          <set_value name="$Valid" exact="2" comment="Valid mission variables"/>
        </do_if>
      </actions>
    </library>
    <cue name="DeployInPlace__Standard" instantiate="true" namespace="this">
      <conditions>
        <event_cue_signalled/>
        <!--Signal the static cue to trigger a new instance of this mission.
        Signalling a running instance will trigger a followup mission to run its GM library. See XXX_Activate_FollowUp cue for parameters-->
      </conditions>
      <actions>
        <set_value name="$Definition" exact="event.param"/>
        <set_value name="$Page" exact="$Definition.$Page"/>
        <set_value name="$TextOffsets" exact="$Definition.$TextOffset.clone"/>
        <shuffle_list list="$TextOffsets"/>
        <set_value name="$FollowUp" exact="@$Definition.$FollowUp == true" comment="Does this mission follow directly after another, with parameters potentially passing between them. This changes how this mission is spawned and managed."/>
        <set_value name="$SuccessfullyGenerated" exact="false"/>
        <set_value name="$DebugChance" exact="$Definition.$ThreadData.$DebugChance"/>
        <set_value name="$Difficulty" exact="level.veryeasy"/>
        <set_value name="$MissionLevel" exact="1" comment="Rewards are increased by resource cost calculation."/>
        <assert value="not $FollowUp" text="'This mission does not currently have any parameters where it makes sense as a follow up mission. If there is, adjust the _Activate_FollowUp cue and remove this assert [Owen]'"/>
        <do_all exact="$TextOffsets.count" counter="$offset_i">
          <set_value name="$TextOffset" exact="$TextOffsets.{$offset_i}"/>
          <!--This mission is specific enough that it will only run if a matching text offset is found. If not, the offer will abort with an error.
          $Valid:
          0: Page/TextOffset not handled
          1: Correct Page/TextOffset but unable to setup mission
          2: Mission can attempt to be spawned -->
          <set_value name="$Valid" exact="0"/>
          <!--### ARGON VS XENON ###-->
          <do_if value="$Page == 30210">
            <do_if value="$TextOffset == 101000">
              <!--Deploy laser towers around an allied object-->
              <set_value name="$Valid" exact="1" comment="Valid text offset"/>
              <include_actions ref="DeployInPlace__LaserTowers_Around_Allied_Object"/>
            </do_if>
            <do_elseif value="$TextOffset == 101100">
              <!--Create mine field around enemy entry point. Different variants for whether the area is in $Faction owned space or not-->
              <set_value name="$Valid" exact="1" comment="Valid text offset"/>
              <include_actions ref="DeployInPlace__Mine_Allied_Entry_Point"/>
            </do_elseif>
            <do_elseif value="$TextOffset == 101200">
              <!--Create mine field around enemy entry point. Different variants for whether the area is in $Faction owned space or not-->
              <set_value name="$Valid" exact="1" comment="Valid text offset"/>
              <include_actions ref="DeployInPlace__Mine_Own_Entry_Point"/>
            </do_elseif>
            <do_elseif value="$TextOffset == 101300">
              <!--Deploy laser towers in resource regions-->
              <set_value name="$Valid" exact="1" comment="Valid text offset"/>
              <include_actions ref="DeployInPlace__LaserTowers_In_Resource_Regions"/>
            </do_elseif>
            <do_elseif value="$TextOffset == 101400">
              <!--Deploy satellite in enemy territory-->
              <set_value name="$Valid" exact="1" comment="Valid text offset"/>
              <include_actions ref="DeployInPlace__Satellite_In_Enemy_Space"/>
            </do_elseif>
          </do_if>
          <!--### ARGON VS HOLY ORDER ###-->
          <do_elseif value="$Page == 30211">
            <do_if value="$TextOffset == 101000">
              <!--Deploy laser towers around an allied object-->
              <set_value name="$Valid" exact="1" comment="Valid text offset"/>
              <include_actions ref="DeployInPlace__LaserTowers_Around_Allied_Object"/>
            </do_if>
            <do_elseif value="$TextOffset == 101100">
              <!--Create mine field around enemy entry point. Different variants for whether the area is in $Faction owned space or not-->
              <set_value name="$Valid" exact="1" comment="Valid text offset"/>
              <include_actions ref="DeployInPlace__Mine_Allied_Entry_Point"/>
            </do_elseif>
            <do_elseif value="$TextOffset == 101200">
              <!--Create mine field around enemy entry point. Different variants for whether the area is in $Faction owned space or not-->
              <set_value name="$Valid" exact="1" comment="Valid text offset"/>
              <include_actions ref="DeployInPlace__Mine_Own_Entry_Point"/>
            </do_elseif>
            <do_elseif value="$TextOffset == 101300">
              <!--Deploy laser towers in resource regions-->
              <set_value name="$Valid" exact="1" comment="Valid text offset"/>
              <include_actions ref="DeployInPlace__LaserTowers_In_Resource_Regions"/>
            </do_elseif>
            <do_elseif value="$TextOffset == 101400">
              <!--Deploy satellite in enemy territory-->
              <set_value name="$Valid" exact="1" comment="Valid text offset"/>
              <include_actions ref="DeployInPlace__Satellite_In_Enemy_Space"/>
            </do_elseif>
          </do_elseif>
          <!--### PARANID VS HOLY ORDER ###-->
          <do_elseif value="$Page == 30212">
            <do_if value="$TextOffset == 101000">
              <!--Deploy laser towers around an allied object-->
              <set_value name="$Valid" exact="1" comment="Valid text offset"/>
              <include_actions ref="DeployInPlace__LaserTowers_Around_Allied_Object"/>
            </do_if>
            <do_elseif value="$TextOffset == 101100">
              <!--Create mine field around enemy entry point. Different variants for whether the area is in $Faction owned space or not-->
              <set_value name="$Valid" exact="1" comment="Valid text offset"/>
              <include_actions ref="DeployInPlace__Mine_Allied_Entry_Point"/>
            </do_elseif>
            <do_elseif value="$TextOffset == 101200">
              <!--Create mine field around enemy entry point. Different variants for whether the area is in $Faction owned space or not-->
              <set_value name="$Valid" exact="1" comment="Valid text offset"/>
              <include_actions ref="DeployInPlace__Mine_Own_Entry_Point"/>
            </do_elseif>
            <do_elseif value="$TextOffset == 101300">
              <!--Deploy laser towers in resource regions-->
              <set_value name="$Valid" exact="1" comment="Valid text offset"/>
              <include_actions ref="DeployInPlace__LaserTowers_In_Resource_Regions"/>
            </do_elseif>
            <do_elseif value="$TextOffset == 101400">
              <!--Deploy satellite in enemy territory-->
              <set_value name="$Valid" exact="1" comment="Valid text offset"/>
              <include_actions ref="DeployInPlace__Satellite_In_Enemy_Space"/>
            </do_elseif>
          </do_elseif>
          <!--### HOLY ORDER VS ARGON ###-->
          <do_elseif value="$Page == 30213">
            <do_if value="$TextOffset == 101000">
              <!--Deploy laser towers around an allied object-->
              <set_value name="$Valid" exact="1" comment="Valid text offset"/>
              <include_actions ref="DeployInPlace__LaserTowers_Around_Allied_Object"/>
            </do_if>
            <do_elseif value="$TextOffset == 101100">
              <!--Create mine field around enemy entry point. Different variants for whether the area is in $Faction owned space or not-->
              <set_value name="$Valid" exact="1" comment="Valid text offset"/>
              <include_actions ref="DeployInPlace__Mine_Allied_Entry_Point"/>
            </do_elseif>
            <do_elseif value="$TextOffset == 101200">
              <!--Create mine field around enemy entry point. Different variants for whether the area is in $Faction owned space or not-->
              <set_value name="$Valid" exact="1" comment="Valid text offset"/>
              <include_actions ref="DeployInPlace__Mine_Own_Entry_Point"/>
            </do_elseif>
            <do_elseif value="$TextOffset == 101300">
              <!--Deploy laser towers in resource regions-->
              <set_value name="$Valid" exact="1" comment="Valid text offset"/>
              <include_actions ref="DeployInPlace__LaserTowers_In_Resource_Regions"/>
            </do_elseif>
            <do_elseif value="$TextOffset == 101400">
              <!--Deploy satellite in enemy territory-->
              <set_value name="$Valid" exact="1" comment="Valid text offset"/>
              <include_actions ref="DeployInPlace__Satellite_In_Enemy_Space"/>
            </do_elseif>
          </do_elseif>
          <!--### HOLY ORDER VS PARANID ###-->
          <do_elseif value="$Page == 30214">
            <do_if value="$TextOffset == 101000">
              <!--Deploy laser towers around an allied object-->
              <set_value name="$Valid" exact="1" comment="Valid text offset"/>
              <include_actions ref="DeployInPlace__LaserTowers_Around_Allied_Object"/>
            </do_if>
            <do_elseif value="$TextOffset == 101100">
              <!--Create mine field around enemy entry point. Different variants for whether the area is in $Faction owned space or not-->
              <set_value name="$Valid" exact="1" comment="Valid text offset"/>
              <include_actions ref="DeployInPlace__Mine_Allied_Entry_Point"/>
            </do_elseif>
            <do_elseif value="$TextOffset == 101200">
              <!--Create mine field around enemy entry point. Different variants for whether the area is in $Faction owned space or not-->
              <set_value name="$Valid" exact="1" comment="Valid text offset"/>
              <include_actions ref="DeployInPlace__Mine_Own_Entry_Point"/>
            </do_elseif>
            <do_elseif value="$TextOffset == 101300">
              <!--Deploy laser towers in resource regions-->
              <set_value name="$Valid" exact="1" comment="Valid text offset"/>
              <include_actions ref="DeployInPlace__LaserTowers_In_Resource_Regions"/>
            </do_elseif>
            <do_elseif value="$TextOffset == 101400">
              <!--Deploy satellite in enemy territory-->
              <set_value name="$Valid" exact="1" comment="Valid text offset"/>
              <include_actions ref="DeployInPlace__Satellite_In_Enemy_Space"/>
            </do_elseif>
          </do_elseif>
          <!--### SPLIT VS ARGON ###-->
          <do_elseif value="$Page == 30215">

          <do_if value="$TextOffset == 101000"><!--Deploy laser towers around an allied object--><set_value name="$Valid" exact="1" comment="Valid text offset"/><include_actions ref="DeployInPlace__LaserTowers_Around_Allied_Object"/></do_if><do_elseif value="$TextOffset == 101100 or $TextOffset == 101200"><!--Create mine field around enemy entry point. Different variants for whether the area is in $Faction owned space or not--><set_value name="$Valid" exact="1" comment="Valid text offset"/><set_value name="$OwnEntryPointID" exact="101200"/><set_value name="$AlliedEntryPointID" exact="101100"/><include_actions ref="DeployInPlace__Mine_Allied_Entry_Point"/></do_elseif><do_elseif value="$TextOffset == 101300"><!--Deploy laser towers in resource regions--><set_value name="$Valid" exact="1" comment="Valid text offset"/><include_actions ref="DeployInPlace__LaserTowers_In_Resource_Regions"/></do_elseif><do_elseif value="$TextOffset == 101400"><!--Deploy satellite in enemy territory--><set_value name="$Valid" exact="1" comment="Valid text offset"/><include_actions ref="DeployInPlace__Satellite_In_Enemy_Space"/></do_elseif></do_elseif>
          <!--### DLC 2 Setup ###-->
          <do_elseif value="$Page == 30216">

          <do_if value="$TextOffset == 101000"><!--Deploy laser towers around an allied object--><set_value name="$Valid" exact="1" comment="Valid text offset"/><include_actions ref="DeployInPlace__LaserTowers_Around_Allied_Object"/></do_if><do_elseif value="$TextOffset == 101100"><!--Create mine field around enemy entry point. Different variants for whether the area is in $Faction owned space or not--><set_value name="$Valid" exact="1" comment="Valid text offset"/><include_actions ref="DeployInPlace__Mine_Allied_Entry_Point"/></do_elseif><do_elseif value="$TextOffset == 101200"><!--Create mine field around enemy entry point. Different variants for whether the area is in $Faction owned space or not--><set_value name="$Valid" exact="1" comment="Valid text offset"/><include_actions ref="DeployInPlace__Mine_Own_Entry_Point"/></do_elseif><do_elseif value="$TextOffset == 101300"><!--Deploy laser towers in resource regions--><set_value name="$Valid" exact="1" comment="Valid text offset"/><include_actions ref="DeployInPlace__LaserTowers_In_Resource_Regions"/></do_elseif><do_elseif value="$TextOffset == 101400"><!--Deploy satellite in enemy territory--><set_value name="$Valid" exact="1" comment="Valid text offset"/><include_actions ref="DeployInPlace__Satellite_In_Enemy_Space"/></do_elseif><do_elseif value="$TextOffset == 101500 or $TextOffset == 101600"><!--Deploy laser towers leading to enemy Area--><set_value name="$Valid" exact="1" comment="Valid text offset"/><include_actions ref="DeployInPlace__Lasertower_Area_Entry_Point"/></do_elseif><do_elseif value="$TextOffset == 101700 or $TextOffset == 101800"><!--Deploy mines leading to enemy Area--><set_value name="$Valid" exact="1" comment="Valid text offset"/><include_actions ref="DeployInPlace__Mine_Area_Entry_Point"/></do_elseif></do_elseif>
          <do_if value="$Valid == 0">
            <debug_text text="'Attempting to spawn a mission on ' + this + ' but the combination of Page: ' + $Page + ' and TextOffset: ' + $TextOffset + ' do not match any definitions [Owen]'" filter="error"/>
          </do_if>
          <do_elseif value="$Valid == 2">
            <break/>
          </do_elseif>
        </do_all>
        <do_if value="$Valid == 2">
          <run_actions ref="md.LIB_Generic.SectorDifficultyBalance" result="$Difficulty">
            <param name="MissionTargetSector" value="$TargetSector"/>
            <param name="Difficulty" value="$Difficulty"/>
          </run_actions>
          <do_if value="$FollowUp">
            <!--Followup missions use the namespace as the mission cue-->
            <set_value name="$MissionCue" exact="namespace"/>
          </do_if>
          <do_else>
            <set_value name="$MissionCue" exact="null"/>
          </do_else>
        </do_if>
        <do_else>
          <do_if value="$Valid == 1">
            <debug_text text="'Unable to find suitable variant variables for mission on ' + this + ' with combination of Page: ' + $Page + ' and TextOffsets: ' + $TextOffsets + '. [Owen]'" chance="$DebugChance"/>
          </do_if>
          <signal_cue cue="$Definition.$SpawnFailedCue"/>
          <cancel_cue cue="this"/>
        </do_else>
      </actions>
      <cues>
        <cue name="DeployInPlace__Standard_FollowUp_Manager" onfail="cancel">
          <conditions>
            <check_value value="$FollowUp"/>
          </conditions>
          <actions>
            <!--If this is going to be a followup mission, first, inform the mission thread manager of this submission so it can be displayed in the offer.-->
            <!--Currently means you need to find the mission name here, instead of relying on the GM itself finding it.-->
            <set_value name="$MissionName" exact="readtext.{$Page}.{$TextOffset + 1}"/>
            <set_value name="$MissionDescription" exact="readtext.{$Page}.{$TextOffset + 2}"/>
            <debug_text text="'Attempting to signal the mission thread that followup mission cue ' + $MissionCue + ' is ready to be added to the offer'" chance="$DebugChance"/>
            <set_value name="$MissionDataTable" exact="table[$Name = $MissionName, $Cue = $MissionCue, $WrapperCue = $MissionCue, $FollowUp = true]"/>
            <signal_cue_instantly cue="$Definition.$SpawnSuccessCue" param="$MissionDataTable"/>
          </actions>
          <cues>
            <cue name="DeployInPlace__Standard_FollowUp_Offer_Accepted">
              <conditions>
                <event_cue_signalled cue="$Definition.$OfferAcceptedCue"/>
                <check_value value="event.param == $MissionCue"/>
              </conditions>
              <actions>
                <!--We don't want to call the GM yet. Create the mission here and pass it into the GM when the previous mission ends
                TODO @Owen Move this to a library in the GM file?-->
                <create_mission cue="$MissionCue" missionthread="$Definition.$ThreadCue" name="$MissionName" description="$MissionDescription" faction="$Definition.$ThreadData.$Faction" type="missiontype.deliver">
                  <briefing>
                    <!--TODO @Owen Better objective?-->
                    <objective step="1" action="objective.deploy"/>
                  </briefing>
                </create_mission>
              </actions>
            </cue>
            <cue name="DeployInPlace__Standard_Aborted">
              <conditions>
                <event_cue_signalled cue="$Definition.$ForceCleanupCue"/>
              </conditions>
              <actions>
                <cancel_cue cue="namespace"/>
              </actions>
            </cue>
            <!--namespace signalled to activate followup mission
            event.param = Station to supply-->
            <cue name="DeployInPlace__Standard_Activate_FollowUp">
              <conditions>
                <event_cue_signalled cue="namespace"/>
              </conditions>
              <actions>
                <!--Check that the correct parameters have been passed-->
                <do_if value="false">
                  <!--Currently no followup case for this type of mission-->
                  <signal_cue cue="DeployInPlace__Standard_Create_GM"/>
                  <cancel_cue cue="parent"/>
                </do_if>
                <do_else>
                  <assert value="false" text="namespace + ' was signalled to start a followup mission, but the passed parameter ' + event.param + ' was not what this mission was expecting. Ending mission.'"/>
                  <!--TODO @Owen what if there is another followup mission?-->
                  <signal_cue_instantly cue="$Definition.$EndedCue" param="namespace"/>
                  <cancel_cue cue="namespace"/>
                </do_else>
              </actions>
            </cue>
          </cues>
        </cue>
        <cue name="DeployInPlace__Standard_Not_FollowUp" onfail="cancel">
          <conditions>
            <check_value value="not $FollowUp"/>
          </conditions>
          <actions>
            <signal_cue cue="DeployInPlace__Standard_Create_GM"/>
          </actions>
        </cue>
        <cue name="DeployInPlace__Standard_Create_GM">
          <conditions>
            <event_cue_signalled/>
          </conditions>
          <cues>
            <!-- Trigger actual GM, passing the specified parameters -->
            <cue name="DeployInPlace__Standard_Ref" ref="md.GM_DeployInPlace.Start">
              <param name="Client" value="$Definition.$ThreadData.$Contact"/>
              <param name="MissionCue" value="$MissionCue"/>
              <param name="MissionThread" value="$Definition.$ThreadCue"/>
              <param name="ReportSignalCue" value="DeployInPlace__Standard_GM_Event"/>
              <param name="WithoutOffer" value="true"/>
              <param name="WithoutOfferWaitCue" value="if $FollowUp then null else $Definition.$OfferAcceptedCue"/>
              <param name="ForceCleanup" value="$Definition.$ForceCleanupCue"/>
              <param name="Page" value="$Page"/>
              <param name="TextOffset" value="$TextOffset"/>
              <param name="MissionLevel" value="$MissionLevel"/>
              <param name="Difficulty" value="$Difficulty"/>
              <param name="Faction" value="$Definition.$ThreadData.$Faction"/>
              <param name="TargetSector" value="$TargetSector"/>
              <param name="TargetOffset" value="$TargetOffset"/>
              <param name="TargetRadius" value="$TargetRadius"/>
              <param name="TargetCount" value="$DropAmount"/>
              <param name="DeployableCategory" value="$DeployableCategory"/>
              <param name="DebugChance" value="$DebugChance"/>
            </cue>
            <!--Signalled by GM when an event happens e.g. mission successfully generated or mission ended.
            Feedback values saved to the static of this cue: $FeedbackValue and $EndFeedbackValue-->
            <cue name="DeployInPlace__Standard_GM_Event" instantiate="true">
              <conditions>
                <event_cue_signalled/>
              </conditions>
              <actions>
                <include_actions ref="MM__Standard_GM_Event"/>
              </actions>
            </cue>
          </cues>
        </cue>
      </cues>
    </cue>
    <cue name="DestroyRarelyOnSight__Standard" instantiate="true" namespace="this">
      <conditions>
        <event_cue_signalled/>
        <!--Signal the static cue to trigger a new instance of this mission.
        Signalling a running instance will trigger a followup mission to run its GM library. See XXX_Activate_FollowUp cue for parameters-->
      </conditions>
      <actions>
        <set_value name="$Definition" exact="event.param"/>
        <set_value name="$Page" exact="$Definition.$Page"/>
        <set_value name="$TextOffsets" exact="$Definition.$TextOffset.clone"/>
        <shuffle_list list="$TextOffsets"/>
        <set_value name="$FollowUp" exact="@$Definition.$FollowUp == true" comment="Does this mission follow directly after another, with parameters potentially passing between them. This changes how this mission is spawned and managed."/>
        <set_value name="$SuccessfullyGenerated" exact="false"/>
        <set_value name="$DebugChance" exact="$Definition.$ThreadData.$DebugChance"/>
        <set_value name="$Difficulty" exact="level.medium"/>
        <set_value name="$MissionLevel" exact="1"/>
        <assert value="not $FollowUp" text="'This mission does not currently have any parameters where it makes sense as a follow up mission. If there is, adjust the _Activate_FollowUp cue and remove this assert [Owen]'"/>
        <do_all exact="$TextOffsets.count" counter="$offset_i">
          <set_value name="$TextOffset" exact="$TextOffsets.{$offset_i}"/>
          <!--This mission is specific enough that it will only run if a matching text offset is found. If not, the offer will abort with an error.
          $Valid:
          0: Page/TextOffset not handled
          1: Correct Page/TextOffset but unable to setup mission
          2: Mission can attempt to be spawned -->
          <set_value name="$Valid" exact="0"/>
          <set_value name="$TargetFaction" exact="null"/>
          <!--$TargetSpec table could have the following:
          <set_value name="$TargetSpec" exact="table[
            $macro = macro.ship_arg_xl_carrier_01_a_macro,
            $equipment = [macro.engine_arg_xl_allround_01_mk1_macro],
            $wares = table[{ware.antimattercells} = 3],
            $mods = [ware.mod_weapon_damage_01_mk1],
            $ammo = table[{macro.countermeasure_flares_01_macro} = 10, {macro.eq_arg_satellite_01_macro} = 1],
            ]"/>-->
          <!--### ARGON VS XENON ###-->
          <do_if value="$Page == 30210">
            <do_if value="$TextOffset == 140000" comment="undermine enemy variation">
              <set_value name="$Valid" exact="1" comment="Valid text offset"/>
              <do_any>
                <do_all weight="40">
                  <set_value name="$TargetSpec" exact="table[$macro = macro.ship_xen_m_fighter_01_a_macro]"/>
                  <set_value name="$TargetCount" exact="[1,2,3].random"/>
                  <set_value name="$MissionLevel" exact="2" operation="add"/>
                </do_all>
                <do_all weight="40">
                  <set_value name="$TargetSpec" exact="table[$macro = [macro.ship_xen_s_fighter_01_a_macro, macro.ship_xen_s_fighter_02_a_macro].random]"/>
                  <set_value name="$TargetCount" exact="[3,5,8].random"/>
                </do_all>
                <do_all weight="20">
                  <set_value name="$TargetSpec" exact="table[$macro = macro.ship_xen_xl_destroyer_01_a_macro]"/>
                  <set_value name="$TargetCount" exact="1"/>
                  <set_value name="$Difficulty" exact="level.hard"/>
                  <set_value name="$MissionLevel" exact="2" operation="add"/>
                </do_all>
              </do_any>
              <set_value name="$TargetFaction" exact="faction.xenon"/>
              <set_value name="$MissionLevel" exact="$TargetCount - 1" operation="add"/>
              <set_value name="$Valid" exact="2" comment="Valid mission variables"/>
            </do_if>
          </do_if>
          <!--### ARGON VS HOLY ORDER-->
          <do_elseif value="$Page == 30211">
            <do_if value="$TextOffset == 140000" comment="undermine enemy variation">
              <set_value name="$Valid" exact="1" comment="Valid text offset"/>
              <do_any>
                <do_all weight="20">
                  <set_value name="$TargetSpec" exact="table[$macro = macro.ship_par_l_destroyer_02_a_macro]"/>
                  <set_value name="$TargetCount" exact="1"/>
                  <set_value name="$Difficulty" exact="level.hard"/>
                </do_all>
                <do_all weight="40">
                  <set_value name="$TargetSpec" exact="table[$macro = macro.ship_par_s_fighter_01_b_macro]"/>
                  <set_value name="$TargetCount" exact="[3,5,8].random"/>
                </do_all>
                <do_all weight="40">
                  <set_value name="$TargetSpec" exact="table[$macro = macro.ship_par_m_corvette_01_b_macro]"/>
                  <set_value name="$TargetCount" exact="[2,3,4].random"/>
                  <set_value name="$MissionLevel" exact="2" operation="add"/>
                </do_all>
              </do_any>
              <set_value name="$MissionLevel" exact="$TargetCount - 1" operation="add"/>
              <set_value name="$TargetFaction" exact="faction.holyorder"/>
              <set_value name="$Valid" exact="2" comment="Valid mission variables"/>
            </do_if>
          </do_elseif>
          <!--### PARANID VS HOLY ORDER ###-->
          <do_elseif value="$Page == 30212">
            <do_if value="$TextOffset == 140000" comment="undermine enemy variation">
              <set_value name="$Valid" exact="1" comment="Valid text offset"/>
              <do_any>
                <do_all weight="30">
                  <set_value name="$TargetSpec" exact="table[$macro = macro.ship_par_m_frigate_01_b_macro]"/>
                  <set_value name="$TargetCount" exact="[1,2,3].random"/>
                </do_all>
                <do_all weight="20">
                  <set_value name="$TargetSpec" exact="table[$macro = macro.ship_par_l_destroyer_02_a_macro]"/>
                  <set_value name="$TargetCount" exact="1"/>
                  <set_value name="$Difficulty" exact="level.hard"/>
                </do_all>
                <do_all weight="30">
                  <set_value name="$TargetSpec" exact="table[$macro = macro.ship_par_s_fighter_01_b_macro]"/>
                  <set_value name="$TargetCount" exact="[3,5,8].random"/>
                </do_all>
                <do_all weight="20">
                  <set_value name="$TargetSpec" exact="table[$macro = macro.ship_par_m_corvette_01_b_macro]"/>
                  <set_value name="$TargetCount" exact="[2,3,4].random"/>
                  <set_value name="$MissionLevel" exact="2" operation="add"/>
                </do_all>
              </do_any>
              <set_value name="$MissionLevel" exact="$TargetCount - 1" operation="add"/>
              <set_value name="$TargetFaction" exact="faction.holyorder"/>
              <set_value name="$Valid" exact="2" comment="Valid mission variables"/>
            </do_if>
          </do_elseif>
          <!--### HOLY ORDER VS ARGON ###-->
          <do_elseif value="$Page == 30213">
            <do_if value="$TextOffset == 140000" comment="undermine enemy variation">
              <set_value name="$Valid" exact="1" comment="Valid text offset"/>
              <do_any>
                <do_all weight="20">
                  <set_value name="$TargetSpec" exact="table[$macro = macro.ship_arg_l_destroyer_01_b_macro]"/>
                  <set_value name="$TargetCount" exact="1"/>
                  <set_value name="$Difficulty" exact="level.hard"/>
                </do_all>
                <do_all weight="40">
                  <set_value name="$TargetSpec" exact="table[$macro = [macro.ship_par_s_fighter_01_b_macro, macro.ship_arg_s_heavyfighter_02_a_macro].random]"/>
                  <set_value name="$TargetCount" exact="[3,5,8].random"/>
                </do_all>
                <do_all weight="40">
                  <set_value name="$TargetSpec" exact="table[$macro = macro.ship_arg_m_frigate_01_a_macro]"/>
                  <set_value name="$TargetCount" exact="[2,3,4].random"/>
                  <set_value name="$MissionLevel" exact="2" operation="add"/>
                </do_all>
              </do_any>
              <set_value name="$MissionLevel" exact="$TargetCount - 1" operation="add"/>
              <set_value name="$TargetFaction" exact="faction.argon"/>
              <set_value name="$Valid" exact="2" comment="Valid mission variables"/>
            </do_if>
          </do_elseif>
          <!--### HOLY ORDER VS PARANID ###-->
          <do_elseif value="$Page == 30214">
            <do_if value="$TextOffset == 140000" comment="undermine enemy variation">
              <set_value name="$Valid" exact="1" comment="Valid text offset"/>
              <do_any>
                <do_all weight="30">
                  <set_value name="$TargetSpec" exact="table[$macro = macro.ship_par_m_frigate_01_a_macro]"/>
                  <set_value name="$TargetCount" exact="[1,2,3].random"/>
                </do_all>
                <do_all weight="20">
                  <set_value name="$TargetSpec" exact="table[$macro = macro.ship_par_l_destroyer_02_a_macro]"/>
                  <set_value name="$TargetCount" exact="1"/>
                  <set_value name="$Difficulty" exact="level.hard"/>
                </do_all>
                <do_all weight="30">
                  <set_value name="$TargetSpec" exact="table[$macro = macro.ship_par_s_fighter_01_a_macro]"/>
                  <set_value name="$TargetCount" exact="[3,5,8].random"/>
                </do_all>
                <do_all weight="20">
                  <set_value name="$TargetSpec" exact="table[$macro = macro.ship_par_m_corvette_01_a_macro]"/>
                  <set_value name="$TargetCount" exact="[2,3,4].random"/>
                  <set_value name="$MissionLevel" exact="2" operation="add"/>
                </do_all>
              </do_any>
              <set_value name="$MissionLevel" exact="$TargetCount - 1" operation="add"/>
              <set_value name="$TargetFaction" exact="faction.paranid"/>
              <set_value name="$Valid" exact="2" comment="Valid mission variables"/>
            </do_if>
          </do_elseif>
          <!--### SPLIT VS ARGON ###-->
          <do_elseif value="$Page == 30215">

          <do_if value="$TextOffset == 140000" comment="undermine enemy variation"><set_value name="$Valid" exact="1" comment="Valid text offset"/><do_any><do_all weight="20"><set_value name="$TargetSpec" exact="table[$macro = macro.ship_arg_l_destroyer_01_a_macro]"/><set_value name="$TargetCount" exact="1"/><set_value name="$Difficulty" exact="level.hard"/></do_all><do_all weight="40"><set_value name="$TargetSpec" exact="table[$macro = [macro.ship_arg_s_fighter_01_a_macro, macro.ship_arg_s_heavyfighter_02_a_macro].random]"/><set_value name="$TargetCount" exact="[3,5,8].random"/></do_all><do_all weight="40"><set_value name="$TargetSpec" exact="table[$macro = macro.ship_arg_m_frigate_01_a_macro]"/><set_value name="$TargetCount" exact="[2,3,4].random"/><set_value name="$MissionLevel" exact="2" operation="add"/></do_all></do_any><set_value name="$MissionLevel" exact="$TargetCount - 1" operation="add"/><set_value name="$TargetFaction" exact="faction.argon"/><set_value name="$Valid" exact="2" comment="Valid mission variables"/></do_if></do_elseif>
          <!--### DLC 2 Setup ###-->
          <do_elseif value="$Page == 30216">

          <do_if value="$TextOffset == 140000" comment="undermine enemy variation"><set_value name="$Valid" exact="1" comment="Valid text offset"/><!--TODO @Owen better selections--><do_any><do_all weight="40"><set_value name="$TargetSpec" exact="table[$macro = macro.ship_xen_m_fighter_01_a_macro]"/><set_value name="$TargetCount" min="1" max="3"/><set_value name="$MissionLevel" exact="2" operation="add"/></do_all><do_all weight="40"><set_value name="$TargetSpec" exact="table[$macro = [macro.ship_xen_s_fighter_01_a_macro, macro.ship_xen_s_fighter_02_a_macro].random]"/><set_value name="$TargetCount" exact="[3,5,8].random"/></do_all><do_all weight="20"><set_value name="$TargetSpec" exact="table[$macro = macro.ship_xen_xl_destroyer_01_a_macro]"/><set_value name="$TargetCount" exact="1"/><set_value name="$Difficulty" exact="level.hard"/><set_value name="$MissionLevel" exact="2" operation="add"/></do_all></do_any><set_value name="$TargetFaction" exact="faction.xenon"/><set_value name="$MissionLevel" exact="$TargetCount - 1" operation="add"/><set_value name="$Valid" exact="2" comment="Valid mission variables"/></do_if></do_elseif>
          <do_if value="$Valid == 0">
            <debug_text text="'Attempting to spawn a mission on ' + this + ' but the combination of Page: ' + $Page + ' and TextOffset: ' + $TextOffset + ' do not match any definitions [Owen]'" filter="error"/>
          </do_if>
          <do_elseif value="$Valid == 2">
            <break/>
          </do_elseif>
        </do_all>
        <do_if value="$Valid == 2">
          <do_if value="$FollowUp">
            <!--Followup missions use the namespace as the mission cue-->
            <set_value name="$MissionCue" exact="namespace"/>
          </do_if>
          <do_else>
            <set_value name="$MissionCue" exact="null"/>
          </do_else>
        </do_if>
        <do_else>
          <do_if value="$Valid == 1">
            <debug_text text="'Unable to find suitable variant variables for mission on ' + this + ' with combination of Page: ' + $Page + ' and TextOffsets: ' + $TextOffsets + '. [Owen]'" chance="$DebugChance"/>
          </do_if>
          <signal_cue cue="$Definition.$SpawnFailedCue"/>
          <cancel_cue cue="this"/>
        </do_else>
      </actions>
      <cues>
        <cue name="DestroyRarelyOnSight__Standard_FollowUp_Manager" onfail="cancel">
          <conditions>
            <check_value value="$FollowUp"/>
          </conditions>
          <actions>
            <!--If this is going to be a followup mission, first, inform the mission thread manager of this submission so it can be displayed in the offer.-->
            <!--Currently means you need to find the mission name here, instead of relying on the GM itself finding it.-->
            <set_value name="$MissionName" exact="readtext.{$Page}.{$TextOffset + 1}"/>
            <set_value name="$MissionDescription" exact="readtext.{$Page}.{$TextOffset + 2}"/>
            <debug_text text="'Attempting to signal the mission thread that followup mission cue ' + $MissionCue + ' is ready to be added to the offer'" chance="$DebugChance"/>
            <set_value name="$MissionDataTable" exact="table[$Name = $MissionName, $Cue = $MissionCue, $WrapperCue = $MissionCue, $FollowUp = true]"/>
            <signal_cue_instantly cue="$Definition.$SpawnSuccessCue" param="$MissionDataTable"/>
          </actions>
          <cues>
            <cue name="DestroyRarelyOnSight__Standard_FollowUp_Offer_Accepted">
              <conditions>
                <event_cue_signalled cue="$Definition.$OfferAcceptedCue"/>
                <check_value value="event.param == $MissionCue"/>
              </conditions>
              <actions>
                <!--We don't want to call the GM yet. Create the mission here and pass it into the GM when the previous mission ends
                TODO @Owen Move this to a library in the GM file?-->
                <create_mission cue="$MissionCue" missionthread="$Definition.$ThreadCue" name="$MissionName" description="$MissionDescription" faction="$Definition.$ThreadData.$Faction" type="missiontype.deliver">
                  <briefing>
                    <!--TODO @Owen Better objective?-->
                    <objective step="1" action="objective.destroy"/>
                  </briefing>
                </create_mission>
              </actions>
            </cue>
            <cue name="DestroyRarelyOnSight__Standard_Aborted">
              <conditions>
                <event_cue_signalled cue="$Definition.$ForceCleanupCue"/>
              </conditions>
              <actions>
                <cancel_cue cue="namespace"/>
              </actions>
            </cue>
            <!--namespace signalled to activate followup mission
            event.param = Station to supply-->
            <cue name="DestroyRarelyOnSight__Standard_Activate_FollowUp">
              <conditions>
                <event_cue_signalled cue="namespace"/>
              </conditions>
              <actions>
                <!--Check that the correct parameters have been passed-->
                <do_if value="false">
                  <!--Currently no followup case for this type of mission-->
                  <signal_cue cue="DestroyRarelyOnSight__Standard_Create_GM"/>
                  <cancel_cue cue="parent"/>
                </do_if>
                <do_else>
                  <assert value="false" text="namespace + ' was signalled to start a followup mission, but the passed parameter ' + event.param + ' was not what this mission was expecting. Ending mission.'"/>
                  <!--TODO @Owen what if there is another followup mission?-->
                  <signal_cue_instantly cue="$Definition.$EndedCue" param="namespace"/>
                  <cancel_cue cue="namespace"/>
                </do_else>
              </actions>
            </cue>
          </cues>
        </cue>
        <cue name="DestroyRarelyOnSight__Standard_Not_FollowUp" onfail="cancel">
          <conditions>
            <check_value value="not $FollowUp"/>
          </conditions>
          <actions>
            <signal_cue cue="DestroyRarelyOnSight__Standard_Create_GM"/>
          </actions>
        </cue>
        <cue name="DestroyRarelyOnSight__Standard_Create_GM">
          <conditions>
            <event_cue_signalled/>
          </conditions>
          <cues>
            <!-- Trigger actual GM, passing the specified parameters -->
            <cue name="DestroyRarelyOnSight__Standard_Ref" ref="md.GM_Destroy_RarelyOnSight.Start">
              <param name="Client" value="$Definition.$ThreadData.$Contact"/>
              <param name="MissionCue" value="$MissionCue"/>
              <param name="MissionThread" value="$Definition.$ThreadCue"/>
              <param name="ReportSignalCue" value="DestroyRarelyOnSight__Standard_GM_Event"/>
              <param name="WithoutOffer" value="true"/>
              <param name="WithoutOfferWaitCue" value="if $FollowUp then null else $Definition.$OfferAcceptedCue"/>
              <param name="ForceCleanup" value="$Definition.$ForceCleanupCue"/>
              <param name="Page" value="$Page"/>
              <param name="TextOffset" value="$TextOffset"/>
              <param name="MissionLevel" value="$MissionLevel"/>
              <param name="Difficulty" value="$Difficulty"/>
              <param name="TargetFaction" value="$TargetFaction"/>
              <param name="TargetSpec" value="$TargetSpec"/>
              <param name="TargetCount" value="$TargetCount"/>
              <param name="DebugChance" value="$DebugChance"/>
            </cue>
            <!--Signalled by GM when an event happens e.g. mission successfully generated or mission ended.
            Feedback values saved to the static of this cue: $FeedbackValue and $EndFeedbackValue-->
            <cue name="DestroyRarelyOnSight__Standard_GM_Event" instantiate="true">
              <conditions>
                <event_cue_signalled/>
              </conditions>
              <actions>
                <include_actions ref="MM__Standard_GM_Event"/>
              </actions>
            </cue>
          </cues>
        </cue>
      </cues>
    </cue>
    <cue name="DestroyStation__Standard" instantiate="true" namespace="this">
      <conditions>
        <event_cue_signalled/>
        <!--Signal the static cue to trigger a new instance of this mission.
        Signalling a running instance will trigger a followup mission to run its GM library. See XXX_Activate_FollowUp cue for parameters-->
      </conditions>
      <actions>
        <set_value name="$Definition" exact="event.param"/>
        <set_value name="$Page" exact="$Definition.$Page"/>
        <set_value name="$TextOffsets" exact="$Definition.$TextOffset.clone"/>
        <shuffle_list list="$TextOffsets"/>
        <set_value name="$FollowUp" exact="@$Definition.$FollowUp == true" comment="Does this mission follow directly after another, with parameters potentially passing between them. This changes how this mission is spawned and managed."/>
        <set_value name="$SuccessfullyGenerated" exact="false"/>
        <set_value name="$DebugChance" exact="$Definition.$ThreadData.$DebugChance"/>
        <set_value name="$PotentialLocations" exact="null"/>
        <set_value name="$Limit" exact="0"/>
        <create_group groupname="$Targets"/>
        <do_if value="$Definition.$ThreadData.$WarFront?">
          <do_if value="$Definition.$ThreadData.$WarFront.$ContestedSectors.count">
            <set_value name="$PotentialLocations" exact="$Definition.$ThreadData.$WarFront.$ContestedSectors.clone"/>
          </do_if>
          <do_elseif value="$Definition.$ThreadData.$WarFront.$HostEntryPoint" chance="80">
            <set_value name="$TargetSector" exact="$Definition.$ThreadData.$WarFront.$HostEntryPoint.destination.sector"/>
          </do_elseif>
          <do_elseif value="$Definition.$ThreadData.$WarFront.$EnemySectors.keys.count">
            <set_value name="$PotentialLocations" exact="$Definition.$ThreadData.$WarFront.$EnemySectors.keys.sorted"/>
          </do_elseif>
        </do_if>
        <do_elseif value="$Definition.$ThreadData.$Area?">
          <set_value name="$PotentialLocations" exact="$Definition.$ThreadData.$Area.$EnemySectors.clone"/>
          <append_list_elements name="$PotentialLocations" other="$Definition.$ThreadData.$Area.$EntryPointSectors"/>
        </do_elseif>
        <do_if value="$PotentialLocations">
          <do_any>
            <set_value name="$TargetSector" exact="$PotentialLocations.{1}" weight="80"/>
            <set_value name="$TargetSector" exact="$PotentialLocations.random" weight="20"/>
          </do_any>
        </do_if>
        <assert value="not $FollowUp" text="'This mission does not currently have any parameters where it makes sense as a follow up mission. If there is, adjust the _Activate_FollowUp cue and remove this assert [Owen]'"/>
        <do_all exact="$TextOffsets.count" counter="$offset_i">
          <set_value name="$TextOffset" exact="$TextOffsets.{$offset_i}"/>
          <!--This mission is specific enough that it will only run if a matching text offset is found. If not, the offer will abort with an error.
          $Valid:
          0: Page/TextOffset not handled
          1: Correct Page/TextOffset but unable to setup mission
          2: Mission can attempt to be spawned -->
          <set_value name="$Valid" exact="0"/>
          <set_value name="$TargetFaction" exact="null"/>
          <set_value name="$TargetStation" exact="null"/>
          <!--### ARGON VS XENON ###-->
          <do_if value="$Page == 30210">
            <set_value name="$Valid" exact="1" comment="Valid text offset"/>
            <set_value name="$TargetFaction" exact="faction.xenon"/>
            <do_if value="$TextOffset == 170000" comment="Destroy station variation">
              <create_group groupname="$Targets"/>
              <find_station_by_true_owner name="$EnemyStations" space="$TargetSector" faction="$TargetFaction" defencestation="true" multiple="true" sortbydistanceto="player.entity"/>
              <do_if value="not $EnemyStations.count">
                <find_station_by_true_owner name="$EnemyStations" space="$TargetSector" faction="$TargetFaction" multiple="true" sortbydistanceto="player.entity"/>
              </do_if>
              <do_if value="$EnemyStations.count">
                <do_any>
                  <add_to_group groupname="$Targets" object="$EnemyStations.{1}" weight="70"/>
                  <add_to_group groupname="$Targets" object="$EnemyStations.random" weight="30"/>
                </do_any>
                <set_value name="$TargetStation" exact="$Targets"/>
              </do_if>
              <set_value name="$Difficulty" exact="level.veryhard"/>
              <set_value name="$MissionLevel" exact="5"/>
              <do_if value="$Targets.count">
                <set_value name="$Valid" exact="2" comment="Valid mission variables"/>
              </do_if>
            </do_if>
            <do_if value="$TextOffset == 180000" comment="Destroy station turret variation">
              <find_station_by_true_owner name="$TargetStation" space="$TargetSector" faction="$TargetFaction">
                <match_content class="class.turret" state="componentstate.operational" min="20"/>
              </find_station_by_true_owner>
              <do_if value="$TargetStation">
                <set_value name="$TurretAmount" exact="$TargetStation.turrets.operational.count"/>
                <set_value name="$Difficulty" exact="level.hard"/>
                <set_value name="$MissionLevel" exact="1"/>
                <set_value name="$TargetClass" exact="[class.turret]"/>
                <do_if value="$TurretAmount ge 20 and $TurretAmount le 30">
                  <set_value name="$Limit" exact="15"/>
                </do_if>
                <do_elseif value="$TurretAmount gt 30 and $TurretAmount le 50">
                  <set_value name="$Limit" exact="25"/>
                  <set_value name="$Missionlevel" operation="add" exact="3"/>
                </do_elseif>
                <do_elseif value="$TurretAmount gt 50">
                  <do_any>
                    <set_value name="$Limit" exact="30"/>
                    <set_value name="$Limit" exact="40"/>
                  </do_any>
                  <set_value name="$Missionlevel" operation="add" exact="6"/>
                </do_elseif>
                <set_value name="$ExplosionRange" exact="0m" comment="ignore"/>
                <do_if value="$TargetStation.exists">
                  <find_object_component groupname="$Targets" object="$TargetStation" class="$TargetClass" multiple="true"/>
                  <shuffle_group group="$Targets"/>
                  <do_all exact="$Targets.count" counter="$i" reverse="true">
                    <remove_from_group group="$Targets" object="$Targets.{$i}"/>
                    <do_if value="$Targets.count le $Limit">
                      <break/>
                    </do_if>
                  </do_all>
                </do_if>
                <do_if value="$Targets">
                  <set_value name="$Valid" exact="2" comment="Valid mission variables"/>
                </do_if>
              </do_if>
            </do_if>
          </do_if>
          <!--### ARGON VS HOLY ORDER-->
          <do_elseif value="$Page == 30211">
            <set_value name="$Valid" exact="1" comment="Valid text offset"/>
            <set_value name="$TargetFaction" exact="faction.holyorder"/>
            <do_if value="$TextOffset == 170000" comment="Destroy station variation">
              <create_group groupname="$Targets"/>
              <find_station_by_true_owner name="$EnemyStations" space="$TargetSector" faction="$TargetFaction" defencestation="true" multiple="true" sortbydistanceto="player.entity"/>
              <do_if value="not $EnemyStations.count">
                <find_station_by_true_owner name="$EnemyStations" space="$TargetSector" faction="$TargetFaction" multiple="true" sortbydistanceto="player.entity"/>
              </do_if>
              <do_if value="$EnemyStations.count">
                <do_any>
                  <add_to_group groupname="$Targets" object="$EnemyStations.{1}" weight="70"/>
                  <add_to_group groupname="$Targets" object="$EnemyStations.random" weight="30"/>
                </do_any>
              </do_if>
              <set_value name="$Difficulty" exact="level.veryhard"/>
              <set_value name="$MissionLevel" exact="5"/>
              <do_if value="$Targets.count">
                <set_value name="$Valid" exact="2" comment="Valid mission variables"/>
              </do_if>
            </do_if>
            <do_if value="$TextOffset == 180000" comment="Destroy station turret variation">
              <find_station_by_true_owner name="$TargetStation" space="$TargetSector" faction="$TargetFaction">
                <match_content class="class.turret" state="componentstate.operational" min="20"/>
              </find_station_by_true_owner>
              <do_if value="$TargetStation">
                <set_value name="$TurretAmount" exact="$TargetStation.turrets.operational.count"/>
                <set_value name="$Difficulty" exact="level.hard"/>
                <set_value name="$MissionLevel" exact="1"/>
                <set_value name="$TargetClass" exact="[class.turret]"/>
                <do_if value="$TurretAmount ge 20 and $TurretAmount le 30">
                  <set_value name="$Limit" exact="15"/>
                </do_if>
                <do_elseif value="$TurretAmount gt 30 and $TurretAmount le 50">
                  <set_value name="$Limit" exact="25"/>
                  <set_value name="$Missionlevel" operation="add" exact="3"/>
                </do_elseif>
                <do_elseif value="$TurretAmount gt 50">
                  <do_any>
                    <set_value name="$Limit" exact="30"/>
                    <set_value name="$Limit" exact="40"/>
                  </do_any>
                  <set_value name="$Missionlevel" operation="add" exact="6"/>
                </do_elseif>
                <set_value name="$ExplosionRange" exact="0m" comment="ignore"/>
                <do_if value="$TargetStation.exists">
                  <find_object_component groupname="$Targets" object="$TargetStation" class="$TargetClass" multiple="true"/>
                  <shuffle_group group="$Targets"/>
                  <do_all exact="$Targets.count" counter="$i" reverse="true">
                    <remove_from_group group="$Targets" object="$Targets.{$i}"/>
                    <do_if value="$Targets.count le $Limit">
                      <break/>
                    </do_if>
                  </do_all>
                </do_if>
                <do_if value="$Targets">
                  <set_value name="$Valid" exact="2" comment="Valid mission variables"/>
                </do_if>
              </do_if>
            </do_if>
          </do_elseif>
          <!--### PARANID VS HOLY ORDER ###-->
          <do_elseif value="$Page == 30212">
            <set_value name="$Valid" exact="1" comment="Valid text offset"/>
            <set_value name="$TargetFaction" exact="faction.holyorder"/>
            <do_if value="$TextOffset == 170000" comment="Destroy station variation">
              <create_group groupname="$Targets"/>
              <find_station_by_true_owner name="$EnemyStations" space="$TargetSector" faction="$TargetFaction" defencestation="true" multiple="true" sortbydistanceto="player.entity"/>
              <do_if value="not $EnemyStations.count">
                <find_station_by_true_owner name="$EnemyStations" space="$TargetSector" faction="$TargetFaction" multiple="true" sortbydistanceto="player.entity"/>
              </do_if>
              <do_if value="$EnemyStations.count">
                <do_any>
                  <add_to_group groupname="$Targets" object="$EnemyStations.{1}" weight="70"/>
                  <add_to_group groupname="$Targets" object="$EnemyStations.random" weight="30"/>
                </do_any>
              </do_if>
              <set_value name="$Difficulty" exact="level.veryhard"/>
              <set_value name="$MissionLevel" exact="5"/>
              <do_if value="$Targets.count">
                <set_value name="$Valid" exact="2" comment="Valid mission variables"/>
              </do_if>
            </do_if>
            <do_if value="$TextOffset == 180000" comment="Destroy station turret variation">
              <find_station_by_true_owner name="$TargetStation" space="$TargetSector" faction="$TargetFaction">
                <match_content class="class.turret" state="componentstate.operational" min="20"/>
              </find_station_by_true_owner>
              <do_if value="$TargetStation">
                <set_value name="$TurretAmount" exact="$TargetStation.turrets.operational.count"/>
                <set_value name="$Difficulty" exact="level.hard"/>
                <set_value name="$MissionLevel" exact="1"/>
                <set_value name="$TargetClass" exact="[class.turret]"/>
                <do_if value="$TurretAmount ge 20 and $TurretAmount le 30">
                  <set_value name="$Limit" exact="15"/>
                </do_if>
                <do_elseif value="$TurretAmount gt 30 and $TurretAmount le 50">
                  <set_value name="$Limit" exact="25"/>
                  <set_value name="$Missionlevel" operation="add" exact="3"/>
                </do_elseif>
                <do_elseif value="$TurretAmount gt 50">
                  <do_any>
                    <set_value name="$Limit" exact="30"/>
                    <set_value name="$Limit" exact="40"/>
                  </do_any>
                  <set_value name="$Missionlevel" operation="add" exact="6"/>
                </do_elseif>
                <set_value name="$ExplosionRange" exact="0m" comment="ignore"/>
                <do_if value="$TargetStation.exists">
                  <find_object_component groupname="$Targets" object="$TargetStation" class="$TargetClass" multiple="true"/>
                  <shuffle_group group="$Targets"/>
                  <do_all exact="$Targets.count" counter="$i" reverse="true">
                    <remove_from_group group="$Targets" object="$Targets.{$i}"/>
                    <do_if value="$Targets.count le $Limit">
                      <break/>
                    </do_if>
                  </do_all>
                </do_if>
                <do_if value="$Targets">
                  <set_value name="$Valid" exact="2" comment="Valid mission variables"/>
                </do_if>
              </do_if>
            </do_if>
          </do_elseif>
          <!--### HOLY ORDER VS ARGON ###-->
          <do_elseif value="$Page == 30213">
            <set_value name="$Valid" exact="1" comment="Valid text offset"/>
            <set_value name="$TargetFaction" exact="faction.argon"/>
            <do_if value="$TextOffset == 170000" comment="Destroy station variation">
              <create_group groupname="$Targets"/>
              <find_station_by_true_owner name="$EnemyStations" space="$TargetSector" faction="$TargetFaction" defencestation="true" multiple="true" sortbydistanceto="player.entity"/>
              <do_if value="not $EnemyStations.count">
                <find_station_by_true_owner name="$EnemyStations" space="$TargetSector" faction="$TargetFaction" multiple="true" sortbydistanceto="player.entity"/>
              </do_if>
              <do_if value="$EnemyStations.count">
                <do_any>
                  <add_to_group groupname="$Targets" object="$EnemyStations.{1}" weight="70"/>
                  <add_to_group groupname="$Targets" object="$EnemyStations.random" weight="30"/>
                </do_any>
              </do_if>
              <set_value name="$Difficulty" exact="level.veryhard"/>
              <set_value name="$MissionLevel" exact="5"/>
              <do_if value="$Targets.count">
                <set_value name="$Valid" exact="2" comment="Valid mission variables"/>
              </do_if>
            </do_if>
            <do_if value="$TextOffset == 180000" comment="Destroy station turret variation">
              <find_station_by_true_owner name="$TargetStation" space="$TargetSector" faction="$TargetFaction">
                <match_content class="class.turret" state="componentstate.operational" min="20"/>
              </find_station_by_true_owner>
              <do_if value="$TargetStation">
                <set_value name="$TurretAmount" exact="$TargetStation.turrets.operational.count"/>
                <set_value name="$Difficulty" exact="level.hard"/>
                <set_value name="$MissionLevel" exact="1"/>
                <set_value name="$TargetClass" exact="[class.turret]"/>
                <do_if value="$TurretAmount ge 20 and $TurretAmount le 30">
                  <set_value name="$Limit" exact="15"/>
                </do_if>
                <do_elseif value="$TurretAmount gt 30 and $TurretAmount le 50">
                  <set_value name="$Limit" exact="25"/>
                  <set_value name="$Missionlevel" operation="add" exact="3"/>
                </do_elseif>
                <do_elseif value="$TurretAmount gt 50">
                  <do_any>
                    <set_value name="$Limit" exact="30"/>
                    <set_value name="$Limit" exact="40"/>
                  </do_any>
                  <set_value name="$Missionlevel" operation="add" exact="6"/>
                </do_elseif>
                <set_value name="$ExplosionRange" exact="0m" comment="ignore"/>
                <do_if value="$TargetStation.exists">
                  <find_object_component groupname="$Targets" object="$TargetStation" class="$TargetClass" multiple="true"/>
                  <shuffle_group group="$Targets"/>
                  <do_all exact="$Targets.count" counter="$i" reverse="true">
                    <remove_from_group group="$Targets" object="$Targets.{$i}"/>
                    <do_if value="$Targets.count le $Limit">
                      <break/>
                    </do_if>
                  </do_all>
                </do_if>
                <do_if value="$Targets">
                  <set_value name="$Valid" exact="2" comment="Valid mission variables"/>
                </do_if>
              </do_if>
            </do_if>
          </do_elseif>
          <!--### HOLY ORDER VS PARANID ###-->
          <do_elseif value="$Page == 30214">
            <set_value name="$Valid" exact="1" comment="Valid text offset"/>
            <set_value name="$TargetFaction" exact="faction.paranid"/>
            <do_if value="$TextOffset == 170000" comment="Destroy station variation">
              <create_group groupname="$Targets"/>
              <find_station_by_true_owner name="$EnemyStations" space="$TargetSector" faction="$TargetFaction" defencestation="true" multiple="true" sortbydistanceto="player.entity"/>
              <do_if value="not $EnemyStations.count">
                <find_station_by_true_owner name="$EnemyStations" space="$TargetSector" faction="$TargetFaction" multiple="true" sortbydistanceto="player.entity"/>
              </do_if>
              <do_if value="$EnemyStations.count">
                <do_any>
                  <add_to_group groupname="$Targets" object="$EnemyStations.{1}" weight="70"/>
                  <add_to_group groupname="$Targets" object="$EnemyStations.random" weight="30"/>
                </do_any>
              </do_if>
              <set_value name="$Difficulty" exact="level.veryhard"/>
              <set_value name="$MissionLevel" exact="5"/>
              <do_if value="$Targets.count">
                <set_value name="$Valid" exact="2" comment="Valid mission variables"/>
              </do_if>
            </do_if>
            <do_if value="$TextOffset == 180000" comment="Destroy station turret variation">
              <find_station_by_true_owner name="$TargetStation" space="$TargetSector" faction="$TargetFaction">
                <match_content class="class.turret" state="componentstate.operational" min="20"/>
              </find_station_by_true_owner>
              <do_if value="$TargetStation">
                <set_value name="$TurretAmount" exact="$TargetStation.turrets.operational.count"/>
                <set_value name="$Difficulty" exact="level.hard"/>
                <set_value name="$MissionLevel" exact="1"/>
                <set_value name="$TargetClass" exact="[class.turret]"/>
                <do_if value="$TurretAmount ge 20 and $TurretAmount le 30">
                  <set_value name="$Limit" exact="15"/>
                </do_if>
                <do_elseif value="$TurretAmount gt 30 and $TurretAmount le 50">
                  <set_value name="$Limit" exact="25"/>
                  <set_value name="$Missionlevel" operation="add" exact="3"/>
                </do_elseif>
                <do_elseif value="$TurretAmount gt 50">
                  <do_any>
                    <set_value name="$Limit" exact="30"/>
                    <set_value name="$Limit" exact="40"/>
                  </do_any>
                  <set_value name="$Missionlevel" operation="add" exact="6"/>
                </do_elseif>
                <set_value name="$ExplosionRange" exact="0m" comment="ignore"/>
                <do_if value="$TargetStation.exists">
                  <find_object_component groupname="$Targets" object="$TargetStation" class="$TargetClass" multiple="true"/>
                  <shuffle_group group="$Targets"/>
                  <do_all exact="$Targets.count" counter="$i" reverse="true">
                    <remove_from_group group="$Targets" object="$Targets.{$i}"/>
                    <do_if value="$Targets.count le $Limit">
                      <break/>
                    </do_if>
                  </do_all>
                </do_if>
                <do_if value="$Targets">
                  <set_value name="$Valid" exact="2" comment="Valid mission variables"/>
                </do_if>
              </do_if>
            </do_if>
          </do_elseif>
          <!--### SPLIT VS ARGON ###-->
          <do_elseif value="$Page == 30215">

          <set_value name="$Valid" exact="1" comment="Valid text offset"/><set_value name="$TargetFaction" exact="faction.argon"/><do_if value="$TextOffset == 170000" comment="Destroy station variation"><create_group groupname="$Targets"/><find_station_by_true_owner name="$EnemyStations" space="$TargetSector" faction="$TargetFaction" defencestation="true" multiple="true" sortbydistanceto="player.entity"/><do_if value="not $EnemyStations.count"><find_station_by_true_owner name="$EnemyStations" space="$TargetSector" faction="$TargetFaction" multiple="true" sortbydistanceto="player.entity"/></do_if><do_if value="$EnemyStations.count"><do_any><add_to_group groupname="$Targets" object="$EnemyStations.{1}" weight="70"/><add_to_group groupname="$Targets" object="$EnemyStations.random" weight="30"/></do_any></do_if><set_value name="$Difficulty" exact="level.veryhard"/><set_value name="$MissionLevel" exact="5"/><do_if value="$Targets.count"><set_value name="$Valid" exact="2" comment="Valid mission variables"/></do_if></do_if><do_if value="$TextOffset == 180000" comment="Destroy station turret variation"><find_station_by_true_owner name="$TargetStation" space="$TargetSector" faction="$TargetFaction"><match_content class="class.turret" state="componentstate.operational" min="20"/></find_station_by_true_owner><do_if value="$TargetStation"><set_value name="$TurretAmount" exact="$TargetStation.turrets.operational.count"/><set_value name="$Difficulty" exact="level.hard"/><set_value name="$MissionLevel" exact="1"/><set_value name="$TargetClass" exact="[class.turret]"/><do_if value="$TurretAmount ge 20 and $TurretAmount le 30"><set_value name="$Limit" exact="15"/></do_if><do_elseif value="$TurretAmount gt 30 and $TurretAmount le 50"><set_value name="$Limit" exact="25"/><set_value name="$Missionlevel" operation="add" exact="3"/></do_elseif><do_elseif value="$TurretAmount gt 50"><do_any><set_value name="$Limit" exact="30"/><set_value name="$Limit" exact="40"/></do_any><set_value name="$Missionlevel" operation="add" exact="6"/></do_elseif><set_value name="$ExplosionRange" exact="0m" comment="ignore"/><do_if value="$TargetStation.exists"><find_object_component groupname="$Targets" object="$TargetStation" class="$TargetClass" multiple="true"/><shuffle_group group="$Targets"/><do_all exact="$Targets.count" counter="$i" reverse="true"><remove_from_group group="$Targets" object="$Targets.{$i}"/><do_if value="$Targets.count le $Limit"><break/></do_if></do_all></do_if><do_if value="$Targets"><set_value name="$Valid" exact="2" comment="Valid mission variables"/></do_if></do_if></do_if></do_elseif>
          <!--### DLC 2 Setup ###-->
          <do_elseif value="$Page == 30216">

          <set_value name="$Valid" exact="1" comment="Valid text offset"/><set_value name="$TargetFaction" exact="faction.xenon"/><do_if value="$TextOffset == 170000" comment="Destroy station variation"><create_group groupname="$Targets"/><find_station_by_true_owner name="$EnemyStations" space="$TargetSector" faction="$TargetFaction" defencestation="true" multiple="true" sortbydistanceto="player.entity"/><do_if value="not $EnemyStations.count"><find_station_by_true_owner name="$EnemyStations" space="$TargetSector" faction="$TargetFaction" multiple="true" sortbydistanceto="player.entity"/></do_if><do_if value="$EnemyStations.count"><do_any><add_to_group groupname="$Targets" object="$EnemyStations.{1}" weight="70"/><add_to_group groupname="$Targets" object="$EnemyStations.random" weight="30"/></do_any></do_if><set_value name="$Difficulty" exact="level.veryhard"/><set_value name="$MissionLevel" exact="5"/><do_if value="$Targets.count"><set_value name="$Valid" exact="2" comment="Valid mission variables"/></do_if></do_if><do_if value="$TextOffset == 180000" comment="Destroy station turret variation"><find_station_by_true_owner name="$TargetStation" space="$TargetSector" faction="$TargetFaction"><match_content class="class.turret" state="componentstate.operational" min="20"/></find_station_by_true_owner><do_if value="$TargetStation"><set_value name="$TurretAmount" exact="$TargetStation.turrets.operational.count"/><set_value name="$Difficulty" exact="level.hard"/><set_value name="$MissionLevel" exact="1"/><set_value name="$TargetClass" exact="[class.turret]"/><do_if value="$TurretAmount ge 20 and $TurretAmount le 30"><set_value name="$Limit" exact="15"/></do_if><do_elseif value="$TurretAmount gt 30 and $TurretAmount le 50"><set_value name="$Limit" exact="25"/><set_value name="$Missionlevel" operation="add" exact="3"/></do_elseif><do_elseif value="$TurretAmount gt 50"><do_any><set_value name="$Limit" exact="30"/><set_value name="$Limit" exact="40"/></do_any><set_value name="$Missionlevel" operation="add" exact="6"/></do_elseif><set_value name="$ExplosionRange" exact="0m" comment="ignore"/><do_if value="$TargetStation.exists"><find_object_component groupname="$Targets" object="$TargetStation" class="$TargetClass" multiple="true"/><shuffle_group group="$Targets"/><do_all exact="$Targets.count" counter="$i" reverse="true"><remove_from_group group="$Targets" object="$Targets.{$i}"/><do_if value="$Targets.count le $Limit"><break/></do_if></do_all></do_if><do_if value="$Targets"><set_value name="$Valid" exact="2" comment="Valid mission variables"/></do_if></do_if></do_if></do_elseif>
          <do_if value="$Valid == 0">
            <debug_text text="'Attempting to spawn a mission on ' + this + ' but the combination of Page: ' + $Page + ' and TextOffset: ' + $TextOffset + ' do not match any definitions [Owen]'" filter="error"/>
          </do_if>
          <do_elseif value="$Valid == 2">
            <break/>
          </do_elseif>
        </do_all>
        <do_if value="$Valid == 2">
          <do_if value="$FollowUp">
            <!--Followup missions use the namespace as the mission cue-->
            <set_value name="$MissionCue" exact="namespace"/>
          </do_if>
          <do_else>
            <set_value name="$MissionCue" exact="null"/>
          </do_else>
        </do_if>
        <do_else>
          <do_if value="$Valid == 1">
            <debug_text text="'Unable to find suitable variant variables for mission on ' + this + ' with combination of Page: ' + $Page + ' and TextOffsets: ' + $TextOffsets + '. [Owen]'" chance="$DebugChance"/>
          </do_if>
          <signal_cue cue="$Definition.$SpawnFailedCue"/>
          <cancel_cue cue="this"/>
        </do_else>
      </actions>
      <cues>
        <cue name="DestroyStation__Standard_FollowUp_Manager" onfail="cancel">
          <conditions>
            <check_value value="$FollowUp"/>
          </conditions>
          <actions>
            <!--If this is going to be a followup mission, first, inform the mission thread manager of this submission so it can be displayed in the offer.-->
            <!--Currently means you need to find the mission name here, instead of relying on the GM itself finding it.-->
            <set_value name="$MissionName" exact="readtext.{$Page}.{$TextOffset + 1}"/>
            <set_value name="$MissionDescription" exact="readtext.{$Page}.{$TextOffset + 2}"/>
            <debug_text text="'Attempting to signal the mission thread that followup mission cue ' + $MissionCue + ' is ready to be added to the offer'" chance="$DebugChance"/>
            <set_value name="$MissionDataTable" exact="table[$Name = $MissionName, $Cue = $MissionCue, $WrapperCue = $MissionCue, $FollowUp = true]"/>
            <signal_cue_instantly cue="$Definition.$SpawnSuccessCue" param="$MissionDataTable"/>
          </actions>
          <cues>
            <cue name="DestroyStation__Standard_FollowUp_Offer_Accepted">
              <conditions>
                <event_cue_signalled cue="$Definition.$OfferAcceptedCue"/>
                <check_value value="event.param == $MissionCue"/>
              </conditions>
              <actions>
                <!--We don't want to call the GM yet. Create the mission here and pass it into the GM when the previous mission ends
                TODO @Owen Move this to a library in the GM file?-->
                <create_mission cue="$MissionCue" missionthread="$Definition.$ThreadCue" name="$MissionName" description="$MissionDescription" faction="$Definition.$ThreadData.$Faction" type="missiontype.deliver">
                  <briefing>
                    <!--TODO @Owen Better objective?-->
                    <objective step="1" action="objective.destroy"/>
                  </briefing>
                </create_mission>
              </actions>
            </cue>
            <cue name="DestroyStation__Standard_Aborted">
              <conditions>
                <event_cue_signalled cue="$Definition.$ForceCleanupCue"/>
              </conditions>
              <actions>
                <cancel_cue cue="namespace"/>
              </actions>
            </cue>
            <!--namespace signalled to activate followup mission
            event.param = Station to supply-->
            <cue name="DestroyStation__Standard_Activate_FollowUp">
              <conditions>
                <event_cue_signalled cue="namespace"/>
              </conditions>
              <actions>
                <!--Check that the correct parameters have been passed-->
                <do_if value="false">
                  <!--Currently no followup case for this type of mission-->
                  <signal_cue cue="DestroyStation__Standard_Create_GM"/>
                  <cancel_cue cue="parent"/>
                </do_if>
                <do_else>
                  <assert value="false" text="namespace + ' was signalled to start a followup mission, but the passed parameter ' + event.param + ' was not what this mission was expecting. Ending mission.'"/>
                  <!--TODO @Owen what if there is another followup mission?-->
                  <signal_cue_instantly cue="$Definition.$EndedCue" param="namespace"/>
                  <cancel_cue cue="namespace"/>
                </do_else>
              </actions>
            </cue>
          </cues>
        </cue>
        <cue name="DestroyStation__Standard_Not_FollowUp" onfail="cancel">
          <conditions>
            <check_value value="not $FollowUp"/>
          </conditions>
          <actions>
            <signal_cue cue="DestroyStation__Standard_Create_GM"/>
          </actions>
        </cue>
        <cue name="DestroyStation__Standard_Create_GM">
          <conditions>
            <event_cue_signalled/>
          </conditions>
          <cues>
            <!-- Trigger actual GM, passing the specified parameters -->
            <cue name="DestroyStation__Standard_Ref" ref="md.GM_Destroy_Objects.Start">
              <param name="Client" value="$Definition.$ThreadData.$Contact"/>
              <param name="MissionCue" value="$MissionCue"/>
              <param name="MissionThread" value="$Definition.$ThreadCue"/>
              <param name="ReportSignalCue" value="DestroyStation__Standard_GM_Event"/>
              <param name="WithoutOffer" value="true"/>
              <param name="WithoutOfferWaitCue" value="if $FollowUp then null else $Definition.$OfferAcceptedCue"/>
              <param name="ForceCleanup" value="$Definition.$ForceCleanupCue"/>
              <param name="Page" value="$Page"/>
              <param name="TextOffset" value="$TextOffset"/>
              <param name="MissionLevel" value="$MissionLevel"/>
              <param name="Difficulty" value="$Difficulty"/>
              <!--Mission specific params-->
              <param name="Targets" value="$Targets"/>
              <param name="TargetSector" value="$TargetSector"/>
              <param name="TargetStation" value="$TargetStation"/>
              <param name="ExplosionRange" value="0"/>
              <param name="AllowDestroy" value="false"/>
              <param name="TurretLimit" value="$Limit"/>
              <param name="DebugChance" value="@GenerateGenericMission.$DebugChance"/>
            </cue>
            <!--Signalled by GM when an event happens e.g. mission successfully generated or mission ended.
            Feedback values saved to the static of this cue: $FeedbackValue and $EndFeedbackValue-->
            <cue name="DestroyStation__Standard_GM_Event" instantiate="true">
              <conditions>
                <event_cue_signalled/>
              </conditions>
              <actions>
                <include_actions ref="MM__Standard_GM_Event"/>
              </actions>
            </cue>
          </cues>
        </cue>
      </cues>
    </cue>
    <!-- Input: $EnemyFaction
	    Returns: $TargetShip, and on success also $Difficulty -->
    <library name="BoardShip__Standard_FindMilitaryTarget">
      <actions>
        <set_value name="$Spaces" exact="null"/>
        <do_if value="$Definition.$ThreadData.$WarFront?">
          <do_if value="$Definition.$ThreadData.$WarFront.$EnemySectors.keys.count">
            <set_value name="$Spaces" exact="$Definition.$ThreadData.$WarFront.$EnemySectors.keys.list"/>
          </do_if>
          <do_elseif value="$Definition.$ThreadData.$WarFront.$ContestedSectors.count">
            <set_value name="$Spaces" exact="$Definition.$ThreadData.$WarFront.$ContestedSectors.clone"/>
          </do_elseif>
        </do_if>
        <do_elseif value="$Definition.$ThreadData.$Area?">
          <set_value name="$Spaces" exact="$Definition.$ThreadData.$Area.$EnemySectors.clone"/>
          <append_list_elements name="$Spaces" other="$Definition.$ThreadData.$Area.$EntryPointSectors"/>
        </do_elseif>
        <do_if value="$Spaces">
          <shuffle_list list="$Spaces"/>
          <!--TODO @Owen further balancing to find easy enough boarding targets-->
          <!--TODO @Owen a variant to help NPCs board targets?-->
          <set_value name="$TargetShip" exact="null"/>
          <do_all exact="$Spaces.count" counter="$i">
            <find_ship_by_true_owner name="$TargetShip" class="class.ship_l" primarypurpose="purpose.fight" space="$Spaces.{$i}" faction="$EnemyFaction" hascommander="false" capturable="true" docked="false"/>
            <do_if value="$TargetShip">
              <break/>
            </do_if>
          </do_all>
        </do_if>
        <do_if value="$TargetShip">
          <!--<set_value name="$Difficulty" exact="level.hard"/>-->
        </do_if>
        <do_elseif value="$Definition.$ThreadData.$WarFront?" comment="To increase the chance of the Arg vs Xenon boarding mission to find an Argon ship">
          <set_value name="$Spaces" exact="$Definition.$ThreadData.$WarFront.$HostSectors.keys.list"/>
          <shuffle_list list="$Spaces"/>
          <do_if value="$Spaces.count">
            <!--TODO @Owen further balancing to find easy enough boarding targets-->
            <!--TODO @Owen a variant to help NPCs board targets?-->
            <set_value name="$TargetShip" exact="null"/>
            <do_all exact="$Spaces.count" counter="$i">
              <find_ship_by_true_owner name="$TargetShip" class="class.ship_l" primarypurpose="purpose.fight" space="$Spaces.{$i}" faction="$EnemyFaction" hascommander="false" capturable="true" docked="false"/>
              <do_if value="$TargetShip">
                <debug_text text="'Ship: ' + $TargetShip + ' ' + $TargetShip.knownname + ' Sector: ' + $TargetShip.sector.knownname" chance="$DebugChance"/>
                <break/>
              </do_if>
            </do_all>
          </do_if>
        </do_elseif>
      </actions>
    </library>
    <cue name="BoardShip__Standard" instantiate="true" namespace="this">
      <conditions>
        <event_cue_signalled/>
        <!--Signal the static cue to trigger a new instance of this mission.
        Signalling a running instance will trigger a followup mission to run its GM library. See XXX_Activate_FollowUp cue for parameters-->
      </conditions>
      <actions>
        <set_value name="$Definition" exact="event.param"/>
        <set_value name="$Page" exact="$Definition.$Page"/>
        <set_value name="$TextOffsets" exact="$Definition.$TextOffset.clone"/>
        <shuffle_list list="$TextOffsets"/>
        <set_value name="$FollowUp" exact="@$Definition.$FollowUp == true" comment="Does this mission follow directly after another, with parameters potentially passing between them. This changes how this mission is spawned and managed."/>
        <set_value name="$SuccessfullyGenerated" exact="false"/>
        <set_value name="$DebugChance" exact="$Definition.$ThreadData.$DebugChance"/>
        <set_value name="$Difficulty" exact="level.hard"/>
        <set_value name="$MissionLevel" exact="1" comment="Boarded ship is already a big reward."/>
        <assert value="not $FollowUp" text="'This mission does not currently have any parameters where it makes sense as a follow up mission. If there is, adjust the _Activate_FollowUp cue and remove this assert [Owen]'"/>
        <do_all exact="$TextOffsets.count" counter="$offset_i">
          <set_value name="$TextOffset" exact="$TextOffsets.{$offset_i}"/>
          <!--This mission is specific enough that it will only run if a matching text offset is found. If not, the offer will abort with an error.
        $Valid:
        0: Page/TextOffset not handled
        1: Correct Page/TextOffset but unable to setup mission
        2: Mission can attempt to be spawned -->
          <set_value name="$Valid" exact="0"/>
          <set_value name="$EnemyFaction" exact="$Definition.$ThreadData.$EnemyFaction"/>
          <set_value name="$TargetSpec" exact="null"/>
          <set_value name="$TargetShip" exact="null"/>
          <set_value name="$FleetSize" exact="0"/>
          <!--### ARGON VS XENON ###-->
          <do_if value="$Page == 30210">
            <do_if value="$TextOffset == 108000" comment="GM_Board (specified ship)">
              <set_value name="$Valid" exact="1" comment="Valid text offset"/>
              <!-- TODO @Owen - Boarding variant to not board a Xenon ship but some other. Rogue scientists heading into Xenon space -->
              <!-- TODO: Bulletproof find_ship not returning anything -->
              <set_value name="$EnemyFaction" exact="faction.argon"/>
              <include_actions ref="BoardShip__Standard_FindMilitaryTarget" chance="50" comment="returns $Valid = 2, if a ship was found, chance to make sure this boarding mission is not offered too often"/>
            </do_if>
            <do_elseif value="$TextOffset == 5600" comment="HL_BoardRare (ship matching specifications)">
              <set_value name="$Valid" exact="1" comment="Valid text offset"/>
              <set_value name="$TargetSpec" exact="table[$macro = macro.ship_arg_xl_carrier_01_a_macro, $equipment = [macro.engine_arg_xl_allround_01_mk1_macro, macro.turret_arg_m_gatling_02_mk1_macro], $ammo = table[{macro.countermeasure_flares_01_macro} = 1], $mods = [ware.mod_weapon_damage_01_mk1]]"/>
              <set_value name="$MissionLevel" exact="10" comment="To communicate that this is a special mission."/>
            </do_elseif>
          </do_if>
          <!--### ARGON VS HOLY ORDER ###-->
          <do_elseif value="$Page == 30211">
            <do_if value="$TextOffset == 108000">
              <set_value name="$Valid" exact="1" comment="Valid text offset"/>
              <include_actions ref="BoardShip__Standard_FindMilitaryTarget" comment="returns $Valid = 2, if a ship was found"/>
            </do_if>
          </do_elseif>
          <!--### PARANID VS HOLY ORDER ###-->
          <do_elseif value="$Page == 30212">
            <do_if value="$TextOffset == 108000">
              <set_value name="$Valid" exact="1" comment="Valid text offset"/>
              <include_actions ref="BoardShip__Standard_FindMilitaryTarget" comment="returns $Valid = 2, if a ship was found"/>
            </do_if>
          </do_elseif>
          <!--### HOLY ORDER VS ARGON ###-->
          <do_elseif value="$Page == 30213">
            <do_if value="$TextOffset == 108000">
              <set_value name="$Valid" exact="1" comment="Valid text offset"/>
              <include_actions ref="BoardShip__Standard_FindMilitaryTarget" comment="returns $Valid = 2, if a ship was found"/>
            </do_if>
          </do_elseif>
          <!--### HOLY ORDER VS PARANID ###-->
          <do_elseif value="$Page == 30214">
            <do_if value="$TextOffset == 108000">
              <set_value name="$Valid" exact="1" comment="Valid text offset"/>
              <include_actions ref="BoardShip__Standard_FindMilitaryTarget" comment="returns $Valid = 2, if a ship was found"/>
            </do_if>
          </do_elseif>
          <!--### SPLIT VS ARGON ###-->
          <do_elseif value="$Page == 30215">

          <do_if value="$TextOffset == 108000"><set_value name="$Valid" exact="1" comment="Valid text offset"/><include_actions ref="BoardShip__Standard_FindMilitaryTarget" comment="returns $Valid = 2, if a ship was found"/></do_if></do_elseif>
          <!--### DLC 2 Setup ###-->
          <do_elseif value="$Page == 30216">

          </do_elseif>
          <do_if value="$TargetShip">
            <do_if value="$TargetShip.commander or $TargetShip.subordinates.count">
              <set_value name="$numfleetmembers" exact="$TargetShip.toplevelcommander.allsubordinates.count + 1"/>
              <do_if value="$numfleetmembers ge 5">
                <set_value name="$Difficulty" exact="level.veryhard"/>
                <set_value name="$FleetSize" exact="2"/>
              </do_if>
              <do_elseif value="$numfleetmembers le 5">
                <set_value name="$MissionLevel" exact="4" operation="add"/>
                <set_value name="$FleetSize" exact="1"/>
              </do_elseif>
            </do_if>
          </do_if>
          <do_if value="$TargetShip or $TargetSpec">
            <set_value name="$Valid" exact="2" comment="Valid mission variables"/>
          </do_if>
          <do_if value="$Valid == 0">
            <debug_text text="'Attempting to spawn a mission on ' + this + ' but the combination of Page: ' + $Page + ' and TextOffset: ' + $TextOffset + ' do not match any definitions [Owen]'" filter="error"/>
          </do_if>
          <do_elseif value="$Valid == 2">
            <break/>
          </do_elseif>
        </do_all>
        <do_if value="$Valid == 2">
          <do_any>
            <set_value name="$MissionDuration" exact="2h"/>
            <set_value name="$MissionDuration" exact="3h"/>
          </do_any>
          <do_if value="$FollowUp">
            <!--Followup missions use the namespace as the mission cue-->
            <set_value name="$MissionCue" exact="namespace"/>
          </do_if>
          <do_else>
            <set_value name="$MissionCue" exact="null"/>
          </do_else>
        </do_if>
        <do_else>
          <do_if value="$Valid == 1">
            <debug_text text="'Unable to find suitable variant variables for mission on ' + this + ' with combination of Page: ' + $Page + ' and TextOffsets: ' + $TextOffsets + '. [Owen]'" chance="$DebugChance"/>
          </do_if>
          <signal_cue cue="$Definition.$SpawnFailedCue"/>
          <cancel_cue cue="this"/>
        </do_else>
      </actions>
      <cues>
        <cue name="BoardShip__Standard_FollowUp_Manager" onfail="cancel">
          <conditions>
            <check_value value="$FollowUp"/>
          </conditions>
          <actions>
            <!--If this is going to be a followup mission, first, inform the mission thread manager of this submission so it can be displayed in the offer.-->
            <!--Currently means you need to find the mission name here, instead of relying on the GM itself finding it.-->
            <set_value name="$MissionName" exact="readtext.{$Page}.{$TextOffset + 1}"/>
            <set_value name="$MissionDescription" exact="readtext.{$Page}.{$TextOffset + 2}"/>
            <debug_text text="'Attempting to signal the mission thread that followup mission cue ' + $MissionCue + ' is ready to be added to the offer'" chance="$DebugChance"/>
            <set_value name="$MissionDataTable" exact="table[$Name = $MissionName, $Cue = $MissionCue, $WrapperCue = $MissionCue, $FollowUp = true]"/>
            <signal_cue_instantly cue="$Definition.$SpawnSuccessCue" param="$MissionDataTable"/>
          </actions>
          <cues>
            <cue name="BoardShip__Standard_FollowUp_Offer_Accepted">
              <conditions>
                <event_cue_signalled cue="$Definition.$OfferAcceptedCue"/>
                <check_value value="event.param == $MissionCue"/>
              </conditions>
              <actions>
                <!--We don't want to call the GM yet. Create the mission here and pass it into the GM when the previous mission ends
                TODO @Owen Move this to a library in the GM file?-->
                <create_mission cue="$MissionCue" missionthread="$Definition.$ThreadCue" name="$MissionName" description="$MissionDescription" faction="$Definition.$ThreadData.$Faction" type="missiontype.deliver">
                  <briefing>
                    <!--TODO @Owen Better objective?-->
                    <objective step="1" action="objective.board"/>
                  </briefing>
                </create_mission>
              </actions>
            </cue>
            <cue name="BoardShip__Standard_Aborted">
              <conditions>
                <event_cue_signalled cue="$Definition.$ForceCleanupCue"/>
              </conditions>
              <actions>
                <cancel_cue cue="namespace"/>
              </actions>
            </cue>
            <!--namespace signalled to activate followup mission
            event.param = Station to supply-->
            <cue name="BoardShip__Standard_Activate_FollowUp">
              <conditions>
                <event_cue_signalled cue="namespace"/>
              </conditions>
              <actions>
                <!--Check that the correct parameters have been passed-->
                <do_if value="false">
                  <!--Currently no followup case for this type of mission-->
                  <signal_cue cue="BoardShip__Standard_Create_GM"/>
                  <cancel_cue cue="parent"/>
                </do_if>
                <do_else>
                  <assert value="false" text="namespace + ' was signalled to start a followup mission, but the passed parameter ' + event.param + ' was not what this mission was expecting. Ending mission.'"/>
                  <!--TODO @Owen what if there is another followup mission?-->
                  <signal_cue_instantly cue="$Definition.$EndedCue" param="namespace"/>
                  <cancel_cue cue="namespace"/>
                </do_else>
              </actions>
            </cue>
          </cues>
        </cue>
        <cue name="BoardShip__Standard_Not_FollowUp" onfail="cancel">
          <conditions>
            <check_value value="not $FollowUp"/>
          </conditions>
          <actions>
            <signal_cue cue="BoardShip__Standard_Create_GM"/>
          </actions>
        </cue>
        <cue name="BoardShip__Standard_Create_GM">
          <conditions>
            <event_cue_signalled/>
          </conditions>
          <cues>
            <!-- Trigger actual GM, passing the specified parameters -->
            <cue name="BoardShip__Standard_Ref" ref="md.GM_BoardShip.Start">
              <param name="Client" value="$Definition.$ThreadData.$Contact"/>
              <param name="MissionCue" value="$MissionCue"/>
              <param name="MissionThread" value="$Definition.$ThreadCue"/>
              <param name="ReportSignalCue" value="BoardShip__Standard_GM_Event"/>
              <param name="WithoutOffer" value="true"/>
              <param name="WithoutOfferWaitCue" value="if $FollowUp then null else $Definition.$OfferAcceptedCue"/>
              <param name="ForceCleanup" value="$Definition.$ForceCleanupCue"/>
              <param name="Page" value="$Page"/>
              <param name="TextOffset" value="$TextOffset"/>
              <param name="MissionLevel" value="$MissionLevel"/>
              <param name="Difficulty" value="$Difficulty"/>
              <param name="MissionDuration" value="$MissionDuration"/>
              <param name="FleetSize" value="$FleetSize"/>
              <param name="Faction" value="$Definition.$ThreadData.$Faction"/>
              <param name="TargetShip" value="$TargetShip" comment="pass either TargetShip or TargetSpecs!"/>
              <param name="TargetSpec" value="$TargetSpec"/>
              <param name="DebugChance" value="$DebugChance"/>
            </cue>
            <!--Signalled by GM when an event happens e.g. mission successfully generated or mission ended.
            Feedback values saved to the static of this cue: $FeedbackValue and $EndFeedbackValue-->
            <cue name="BoardShip__Standard_GM_Event" instantiate="true">
              <conditions>
                <event_cue_signalled/>
              </conditions>
              <actions>
                <include_actions ref="MM__Standard_GM_Event"/>
              </actions>
            </cue>
          </cues>
        </cue>
      </cues>
    </cue>
    <!--Variant Helper Libraries
    Helper libraries to be call from different threads but want to have the same basic variant rules
    If you want to have something custom for a faction e.g. if Vs Xenon, have twice as many enemies, either write your own variant within the cue itself, or modify variables after calling the library-->
    <cue name="Scan__Standard" instantiate="true" namespace="this">
      <conditions>
        <event_cue_signalled/>
        <!--Signal the static cue to trigger a new instance of this mission.
        Signalling a running instance will trigger a followup mission to run its GM library. See XXX_Activate_FollowUp cue for parameters-->
      </conditions>
      <actions>
        <set_value name="$Definition" exact="event.param"/>
        <set_value name="$Page" exact="$Definition.$Page"/>
        <set_value name="$TextOffsets" exact="$Definition.$TextOffset.clone"/>
        <shuffle_list list="$TextOffsets"/>
        <set_value name="$FollowUp" exact="@$Definition.$FollowUp == true" comment="Does this mission follow directly after another, with parameters potentially passing between them. This changes how this mission is spawned and managed."/>
        <set_value name="$SuccessfullyGenerated" exact="false"/>
        <set_value name="$DebugChance" exact="$Definition.$ThreadData.$DebugChance"/>
        <set_value name="$Difficulty" exact="level.easy" comment="Scan missions are usually very easy, but this one requires scanning enemies."/>
        <set_value name="$MissionLevel" exact="1"/>
        <set_value name="$EnemyFaction" exact="$Definition.$ThreadData.$EnemyFaction"/>
        <set_value name="$TargetShip" exact="null"/>
        <set_value name="$TargetStation" exact="null"/>
        <set_value name="$TargetModule" exact="null"/>
        <set_value name="$TargetWare" exact="null"/>
        <set_value name="$TargetItem" exact="null"/>
        <set_value name="$TargetPerson" exact="null"/>
        <set_value name="$TargetPersonName" exact="null"/>
        <set_value name="$TargetIDCode" exact="null"/>
        <set_value name="$ScanPercentage" exact="null"/>
        <set_value name="$ScanShip" exact="null"/>
        <assert value="not $FollowUp" text="'This mission does not currently have any parameters where it makes sense as a follow up mission. If there is, adjust the _Activate_FollowUp cue and remove this assert [Owen]'"/>
        <do_all exact="$TextOffsets.count" counter="$offset_i">
          <set_value name="$TextOffset" exact="$TextOffsets.{$offset_i}"/>
          <!--This mission is specific enough that it will only run if a matching text offset is found. If not, the offer will abort with an error.
          $Valid:
          0: Page/TextOffset not handled
          1: Correct Page/TextOffset but unable to setup mission
          2: Mission can attempt to be spawned -->
          <set_value name="$Valid" exact="0"/>
          <do_if value="$EnemyFaction.relationto.{faction.player} le -0.01">
            <set_value name="$Difficulty" exact="level.medium" comment="Scanning a hostile faction's assets is a bit more difficult."/>
          </do_if>
          <!--### ARGON VS XENON ###-->
          <do_if value="$Page == 30210">
            <do_if value="$TextOffset == 150000" comment="GM_Scan1 (specified ship)">
              <set_value name="$Valid" exact="1" comment="Valid text offset"/>
              <include_actions ref="md.GM_Scan.Scan__High_Security_Enemy_Ship"/>
              <set_value name="$MissionLevel" exact="2" operation="add" comment="Ships can be annoying to scan."/>
            </do_if>
            <do_elseif value="$TextOffset == 150100" comment="GM_Scan2 (specified station)">
              <set_value name="$Valid" exact="1" comment="Valid text offset"/>
              <include_actions ref="md.GM_Scan.Scan__High_Security_Enemy_Station"/>
            </do_elseif>
            <do_elseif value="$TextOffset == 150200" comment="GM_Scan3 (specified module)">
              <set_value name="$Valid" exact="1" comment="Valid text offset"/>
              <include_actions ref="md.GM_Scan.Scan__High_Security_Enemy_Module"/>
            </do_elseif>
            <do_elseif value="$TextOffset == 150700 or $TextOffset == 150800 or $TextOffset == 150900" comment="GM_Scan4 (deepscan ships for specified ware)">
              <set_value name="$Valid" exact="1" comment="Valid text offset"/>
              <set_value name="$TextVsWares" exact="table[               { 150700 } = [ ware.energycells ],               { 150800 } = [ ware.ore ],               { 150900 } = [ ware.silicon ],                           ]"/>
              <set_value name="$TargetWare" exact="$TextVsWares.{$TextOffset}.random"/>
              <set_value name="$MissionLevel" exact="3" operation="add" comment="This might take a while."/>
              <set_value name="$ScanType" exact="1"/>
            </do_elseif>
            <do_elseif value="$TextOffset == 150600" comment="GM_Scan7 (ship with idcode)">
              <set_value name="$Valid" exact="1" comment="Valid text offset"/>
              <include_actions ref="md.GM_Scan.Scan__Enemy_Ship_ID_Code"/>
            </do_elseif>
          </do_if>
          <!--### ARGON VS HOLY ORDER ###-->
          <do_elseif value="$Page == 30211">
            <do_if value="$TextOffset == 150000" comment="GM_Scan1 (specified ship)">
              <set_value name="$Valid" exact="1" comment="Valid text offset"/>
              <include_actions ref="md.GM_Scan.Scan__High_Security_Enemy_Ship"/>
              <set_value name="$MissionLevel" exact="2" operation="add" comment="Ships can be annoying to scan."/>
            </do_if>
            <do_elseif value="$TextOffset == 150100" comment="GM_Scan2 (specified station)">
              <set_value name="$Valid" exact="1" comment="Valid text offset"/>
              <include_actions ref="md.GM_Scan.Scan__High_Security_Enemy_Station"/>
            </do_elseif>
            <do_elseif value="$TextOffset == 150200" comment="GM_Scan3 (specified module)">
              <set_value name="$Valid" exact="1" comment="Valid text offset"/>
              <include_actions ref="md.GM_Scan.Scan__High_Security_Enemy_Module"/>
            </do_elseif>
            <do_elseif value="$TextOffset == 150300 or $TextOffset == 150700 or $TextOffset == 150800" comment="GM_Scan4 (deepscan ships for specified ware)">
              <set_value name="$Valid" exact="1" comment="Valid text offset"/>
              <set_value name="$TextVsWares" exact="table[               { 150300 } = [ ware.spaceweed ],               { 150700 } = [ ware.water ],               { 150800 } = [ ware.hullparts ],             ]"/>
              <set_value name="$TargetWare" exact="$TextVsWares.{$TextOffset}.random"/>
              <set_value name="$MissionLevel" exact="3" operation="add" comment="This might take a while."/>
              <set_value name="$ScanType" exact="1"/>
            </do_elseif>
            <do_elseif value="$TextOffset == 150400" comment="GM_Scan5 (deepscan ships for specified item)">
              <set_value name="$Valid" exact="1" comment="Valid text offset"/>
              <set_value name="$TargetItem" exact="ware.inv_decryptionmodule"/>
              <set_value name="$MissionLevel" exact="6" operation="add" comment="This would take a very long time."/>
              <set_value name="$ScanType" exact="1"/>
            </do_elseif>
            <do_elseif value="$TextOffset == 150500" comment="GM_Scan6 (deepscan ships for specified person)">
              <set_value name="$Valid" exact="1" comment="Valid text offset"/>
              <include_actions ref="md.GM_Scan.Scan__Random_NPC"/>
            </do_elseif>
            <do_elseif value="$TextOffset == 150600" comment="GM_Scan7 (ship with idcode)">
              <set_value name="$Valid" exact="1" comment="Valid text offset"/>
              <include_actions ref="md.GM_Scan.Scan__Enemy_Ship_ID_Code"/>
            </do_elseif>
          </do_elseif>
          <!--### PARANID VS HOLY ORDER ###-->
          <do_elseif value="$Page == 30212">
            <do_if value="$TextOffset == 150000" comment="GM_Scan1 (specified ship)">
              <set_value name="$Valid" exact="1" comment="Valid text offset"/>
              <include_actions ref="md.GM_Scan.Scan__High_Security_Enemy_Ship"/>
              <set_value name="$MissionLevel" exact="2" operation="add" comment="Ships can be annoying to scan."/>
            </do_if>
            <do_elseif value="$TextOffset == 150100" comment="GM_Scan2 (specified station)">
              <set_value name="$Valid" exact="1" comment="Valid text offset"/>
              <include_actions ref="md.GM_Scan.Scan__High_Security_Enemy_Station"/>
            </do_elseif>
            <do_elseif value="$TextOffset == 150200" comment="GM_Scan3 (specified module)">
              <set_value name="$Valid" exact="1" comment="Valid text offset"/>
              <include_actions ref="md.GM_Scan.Scan__High_Security_Enemy_Module"/>
            </do_elseif>
            <do_elseif value="$TextOffset == 150700 or $TextOffset == 150800 or $TextOffset == 150900" comment="GM_Scan4 (deepscan ships for specified ware)">
              <set_value name="$Valid" exact="1" comment="Valid text offset"/>
              <set_value name="$TextVsWares" exact="table[               { 150700 } = [ ware.spaceweed ],               { 150800 } = [ ware.hullparts ],               { 150900 } = [ ware.superfluidcoolant ],             ]"/>
              <set_value name="$TargetWare" exact="$TextVsWares.{$TextOffset}.random"/>
              <set_value name="$MissionLevel" exact="3" operation="add" comment="This might take a while."/>
              <set_value name="$ScanType" exact="1"/>
            </do_elseif>
            <do_elseif value="$TextOffset == 150400" comment="GM_Scan5 (deepscan ships for specified item)">
              <set_value name="$Valid" exact="1" comment="Valid text offset"/>
              <set_value name="$TargetItem" exact="ware.inv_decryptionmodule"/>
              <set_value name="$MissionLevel" exact="6" operation="add" comment="This would take a very long time."/>
              <set_value name="$ScanType" exact="1"/>
            </do_elseif>
            <do_elseif value="$TextOffset == 150500" comment="GM_Scan6 (deepscan ships for specified person)">
              <set_value name="$Valid" exact="1" comment="Valid text offset"/>
              <include_actions ref="md.GM_Scan.Scan__Random_NPC"/>
            </do_elseif>
            <do_elseif value="$TextOffset == 150600" comment="GM_Scan7 (ship with idcode)">
              <set_value name="$Valid" exact="1" comment="Valid text offset"/>
              <include_actions ref="md.GM_Scan.Scan__Enemy_Ship_ID_Code"/>
            </do_elseif>
          </do_elseif>
          <!--### HOLY ORDER VS ARGON ###-->
          <do_elseif value="$Page == 30213">
            <do_if value="$TextOffset == 150000" comment="GM_Scan1 (specified ship)">
              <set_value name="$Valid" exact="1" comment="Valid text offset"/>
              <include_actions ref="md.GM_Scan.Scan__High_Security_Enemy_Ship"/>
              <set_value name="$MissionLevel" exact="2" operation="add" comment="Ships can be annoying to scan."/>
            </do_if>
            <do_elseif value="$TextOffset == 150100" comment="GM_Scan2 (specified station)">
              <set_value name="$Valid" exact="1" comment="Valid text offset"/>
              <include_actions ref="md.GM_Scan.Scan__High_Security_Enemy_Station"/>
            </do_elseif>
            <do_elseif value="$TextOffset == 150200" comment="GM_Scan3 (specified module)">
              <set_value name="$Valid" exact="1" comment="Valid text offset"/>
              <include_actions ref="md.GM_Scan.Scan__High_Security_Enemy_Module"/>
            </do_elseif>
            <do_elseif value="$TextOffset == 150300 or $TextOffset == 150700 ">
              <set_value name="$Valid" exact="1" comment="Valid text offset"/>
              <set_value name="$TextVsWares" exact="table[               { 150300 } = [ ware.spaceweed ],               { 150700 } = [ ware.silicon, ware.microchips, ware.smartchips, ware.siliconwafers ],             ]"/>
              <set_value name="$TargetWare" exact="$TextVsWares.{$TextOffset}.random"/>
              <set_value name="$MissionLevel" exact="3" operation="add" comment="This might take a while."/>
              <set_value name="$ScanType" exact="1"/>
            </do_elseif>
            <do_elseif value="$TextOffset == 150400" comment="GM_Scan5 (deepscan ships for specified item)">
              <set_value name="$Valid" exact="1" comment="Valid text offset"/>
              <set_value name="$TargetItem" exact="ware.inv_decryptionmodule"/>
              <set_value name="$MissionLevel" exact="6" operation="add" comment="This would take a very long time."/>
              <set_value name="$ScanType" exact="1"/>
            </do_elseif>
            <do_elseif value="$TextOffset == 150500" comment="GM_Scan6 (deepscan ships for specified person)">
              <set_value name="$Valid" exact="1" comment="Valid text offset"/>
              <include_actions ref="md.GM_Scan.Scan__Random_NPC"/>
            </do_elseif>
            <do_elseif value="$TextOffset == 150600" comment="GM_Scan7 (ship with idcode)">
              <set_value name="$Valid" exact="1" comment="Valid text offset"/>
              <include_actions ref="md.GM_Scan.Scan__Enemy_Ship_ID_Code"/>
            </do_elseif>
          </do_elseif>
          <!--### HOLY ORDER VS PARANID ###-->
          <do_elseif value="$Page == 30214">
            <do_if value="$TextOffset == 150000" comment="GM_Scan1 (specified ship)">
              <set_value name="$Valid" exact="1" comment="Valid text offset"/>
              <include_actions ref="md.GM_Scan.Scan__High_Security_Enemy_Ship"/>
              <set_value name="$MissionLevel" exact="2" operation="add" comment="Ships can be annoying to scan."/>
            </do_if>
            <do_elseif value="$TextOffset == 150100" comment="GM_Scan2 (specified station)">
              <set_value name="$Valid" exact="1" comment="Valid text offset"/>
              <include_actions ref="md.GM_Scan.Scan__High_Security_Enemy_Station"/>
            </do_elseif>
            <do_elseif value="$TextOffset == 150200" comment="GM_Scan3 (specified module)">
              <set_value name="$Valid" exact="1" comment="Valid text offset"/>
              <include_actions ref="md.GM_Scan.Scan__High_Security_Enemy_Module"/>
            </do_elseif>
            <do_elseif value="$TextOffset == 150300 or $TextOffset == 150700 or $TextOffset == 150800" comment="GM_Scan4 (deepscan ships for specified ware)">
              <set_value name="$Valid" exact="1" comment="Valid text offset"/>
              <set_value name="$TextVsWares" exact="table[               { 150300 } = [ ware.spaceweed, ware.majasnails ],               { 150700 } = [ ware.antimatterconverters ],               { 150800 } = [ ware.advancedcomposites ],             ]"/>
              <set_value name="$TargetWare" exact="$TextVsWares.{$TextOffset}.random"/>
              <set_value name="$MissionLevel" exact="3" operation="add" comment="This might take a while."/>
              <set_value name="$ScanType" exact="1"/>
            </do_elseif>
            <do_elseif value="$TextOffset == 150400" comment="GM_Scan5 (deepscan ships for specified item)">
              <set_value name="$Valid" exact="1" comment="Valid text offset"/>
              <set_value name="$TargetItem" exact="ware.inv_decryptionmodule"/>
              <set_value name="$MissionLevel" exact="6" operation="add" comment="This would take a very long time."/>
              <set_value name="$ScanType" exact="1"/>
            </do_elseif>
            <do_elseif value="$TextOffset == 150500" comment="GM_Scan6 (deepscan ships for specified person)">
              <set_value name="$Valid" exact="1" comment="Valid text offset"/>
              <include_actions ref="md.GM_Scan.Scan__Random_NPC"/>
            </do_elseif>
            <do_elseif value="$TextOffset == 150600" comment="GM_Scan7 (ship with idcode)">
              <set_value name="$Valid" exact="1" comment="Valid text offset"/>
              <include_actions ref="md.GM_Scan.Scan__Enemy_Ship_ID_Code"/>
            </do_elseif>
          </do_elseif>
          <!--### SPLIT VS ARGON ###-->
          <do_elseif value="$Page == 30215">

          <do_if value="$TextOffset == 150000" comment="GM_Scan1 (specified ship)"><set_value name="$Valid" exact="1" comment="Valid text offset"/><include_actions ref="md.GM_Scan.Scan__High_Security_Enemy_Ship"/><set_value name="$MissionLevel" exact="2" operation="add" comment="Ships can be annoying to scan."/></do_if><do_elseif value="$TextOffset == 150100" comment="GM_Scan2 (specified station)"><set_value name="$Valid" exact="1" comment="Valid text offset"/><include_actions ref="md.GM_Scan.Scan__High_Security_Enemy_Station"/></do_elseif><do_elseif value="$TextOffset == 150200" comment="GM_Scan3 (specified module)"><set_value name="$Valid" exact="1" comment="Valid text offset"/><include_actions ref="md.GM_Scan.Scan__High_Security_Enemy_Module"/></do_elseif><do_elseif value="$TextOffset == 150300"><set_value name="$Valid" exact="1" comment="Valid text offset"/><set_value name="$TextVsWares" exact="table[               { 150300 } = [ ware.spaceweed ],               { 150700 } = [ ware.silicon, ware.microchips, ware.smartchips, ware.siliconwafers ],             ]"/><set_value name="$TargetWare" exact="$TextVsWares.{$TextOffset}.random"/><set_value name="$MissionLevel" exact="3" operation="add" comment="This might take a while."/><set_value name="$ScanType" exact="1"/></do_elseif><do_elseif value="$TextOffset == 150400" comment="GM_Scan5 (deepscan ships for specified item)"><set_value name="$Valid" exact="1" comment="Valid text offset"/><set_value name="$TargetItem" exact="ware.inv_decryptionmodule"/><set_value name="$MissionLevel" exact="6" operation="add" comment="This would take a very long time."/><set_value name="$ScanType" exact="1"/></do_elseif><do_elseif value="$TextOffset == 150500" comment="GM_Scan6 (deepscan ships for specified person)"><set_value name="$Valid" exact="1" comment="Valid text offset"/><include_actions ref="md.GM_Scan.Scan__Random_NPC"/></do_elseif><do_elseif value="$TextOffset == 150600" comment="GM_Scan7 (ship with idcode)"><set_value name="$Valid" exact="1" comment="Valid text offset"/><include_actions ref="md.GM_Scan.Scan__Enemy_Ship_ID_Code"/></do_elseif><do_elseif value="$TextOffset == 150700 or $TextOffset == 150800 or $TextOffset == 150900" comment="GM_Scan4 (deepscan ships for specified ware)"><set_value name="$Valid" exact="1" comment="Valid text offset"/><set_value name="$TextVsWares" exact="table[               { 150700 } = [ ware.hullparts ],               { 150800 } = [ ware.ore ],               { 150900 } = [ ware.water ],                           ]"/><set_value name="$TargetWare" exact="$TextVsWares.{$TextOffset}.random"/><set_value name="$MissionLevel" exact="3" operation="add" comment="This might take a while."/><set_value name="$ScanType" exact="1"/></do_elseif></do_elseif>
          <!--### DLC 2 Setup ###-->
          <do_elseif value="$Page == 30216">

          <do_if value="$TextOffset == 150000" comment="GM_Scan1 (specified ship)"><set_value name="$Valid" exact="1" comment="Valid text offset"/><include_actions ref="md.GM_Scan.Scan__High_Security_Enemy_Ship"/><set_value name="$MissionLevel" exact="2" operation="add" comment="Ships can be annoying to scan."/></do_if><do_elseif value="$TextOffset == 150100" comment="GM_Scan2 (specified station)"><set_value name="$Valid" exact="1" comment="Valid text offset"/><include_actions ref="md.GM_Scan.Scan__High_Security_Enemy_Station"/></do_elseif><do_elseif value="$TextOffset == 150200" comment="GM_Scan3 (specified module)"><set_value name="$Valid" exact="1" comment="Valid text offset"/><include_actions ref="md.GM_Scan.Scan__High_Security_Enemy_Module"/></do_elseif><do_elseif value="$TextOffset == 150300"><set_value name="$Valid" exact="1" comment="Valid text offset"/><set_value name="$TextVsWares" exact="table[               { 150300 } = [ ware.spaceweed ],               { 150700 } = [ ware.silicon, ware.microchips, ware.smartchips, ware.siliconwafers ],             ]"/><set_value name="$TargetWare" exact="$TextVsWares.{$TextOffset}.random"/><set_value name="$MissionLevel" exact="3" operation="add" comment="This might take a while."/><set_value name="$ScanType" exact="1"/></do_elseif><do_elseif value="$TextOffset == 150400" comment="GM_Scan5 (deepscan ships for specified item)"><set_value name="$Valid" exact="1" comment="Valid text offset"/><set_value name="$TargetItem" exact="ware.inv_decryptionmodule"/><set_value name="$MissionLevel" exact="6" operation="add" comment="This would take a very long time."/><set_value name="$ScanType" exact="1"/></do_elseif><do_elseif value="$TextOffset == 150500" comment="GM_Scan6 (deepscan ships for specified person)"><set_value name="$Valid" exact="1" comment="Valid text offset"/><include_actions ref="md.GM_Scan.Scan__Random_NPC"/></do_elseif><do_elseif value="$TextOffset == 150600" comment="GM_Scan7 (ship with idcode)"><set_value name="$Valid" exact="1" comment="Valid text offset"/><include_actions ref="md.GM_Scan.Scan__Enemy_Ship_ID_Code"/></do_elseif><do_elseif value="$TextOffset == 150700 or $TextOffset == 150800 or $TextOffset == 150900" comment="GM_Scan4 (deepscan ships for specified ware)"><set_value name="$Valid" exact="1" comment="Valid text offset"/><set_value name="$TextVsWares" exact="table[               { 150700 } = [ ware.energycells ],               { 150800 } = [ ware.ore ],               { 150900 } = [ ware.silicon ],                           ]"/><set_value name="$TargetWare" exact="$TextVsWares.{$TextOffset}.random"/><set_value name="$MissionLevel" exact="3" operation="add" comment="This might take a while."/><set_value name="$ScanType" exact="1"/></do_elseif></do_elseif>
          <do_if value="$TargetShip or $TargetStation or $TargetModule or $TargetPerson or $ScanShip or $TargetItem or $TargetWare">
            <set_value name="$Valid" exact="2" comment="Valid mission variables"/>
          </do_if>
          <do_if value="$Valid == 0">
            <debug_text text="'Attempting to spawn a mission on ' + this + ' but the combination of Page: ' + $Page + ' and TextOffset: ' + $TextOffset + ' do not match any definitions [Owen]'" filter="error"/>
          </do_if>
          <do_elseif value="$Valid == 2">
            <break/>
          </do_elseif>
        </do_all>
        <do_if value="$Valid == 2">
          <do_if value="$FollowUp">
            <!--Followup missions use the namespace as the mission cue-->
            <set_value name="$MissionCue" exact="namespace"/>
          </do_if>
          <do_else>
            <set_value name="$MissionCue" exact="null"/>
          </do_else>
        </do_if>
        <do_else>
          <do_if value="$Valid == 1">
            <debug_text text="'Unable to find suitable variant variables for mission on ' + this + ' with combination of Page: ' + $Page + ' and TextOffsets: ' + $TextOffsets + '. [Owen]'" chance="$DebugChance"/>
          </do_if>
          <signal_cue cue="$Definition.$SpawnFailedCue"/>
          <cancel_cue cue="this"/>
        </do_else>
      </actions>
      <cues>
        <cue name="Scan__Standard_FollowUp_Manager" onfail="cancel">
          <conditions>
            <check_value value="$FollowUp"/>
          </conditions>
          <actions>
            <!--If this is going to be a followup mission, first, inform the mission thread manager of this submission so it can be displayed in the offer.-->
            <!--Currently means you need to find the mission name here, instead of relying on the GM itself finding it.-->
            <set_value name="$MissionName" exact="readtext.{$Page}.{$TextOffset + 1}"/>
            <set_value name="$MissionDescription" exact="readtext.{$Page}.{$TextOffset + 2}"/>
            <debug_text text="'Attempting to signal the mission thread that followup mission cue ' + $MissionCue + ' is ready to be added to the offer'" chance="$DebugChance"/>
            <set_value name="$MissionDataTable" exact="table[$Name = $MissionName, $Cue = $MissionCue, $WrapperCue = $MissionCue, $FollowUp = true]"/>
            <signal_cue_instantly cue="$Definition.$SpawnSuccessCue" param="$MissionDataTable"/>
          </actions>
          <cues>
            <cue name="Scan__Standard_FollowUp_Offer_Accepted">
              <conditions>
                <event_cue_signalled cue="$Definition.$OfferAcceptedCue"/>
                <check_value value="event.param == $MissionCue"/>
              </conditions>
              <actions>
                <!--We don't want to call the GM yet. Create the mission here and pass it into the GM when the previous mission ends
                TODO @Owen Move this to a library in the GM file?-->
                <create_mission cue="$MissionCue" missionthread="$Definition.$ThreadCue" name="$MissionName" description="$MissionDescription" faction="$Definition.$ThreadData.$Faction" type="missiontype.deliver">
                  <briefing>
                    <!--TODO @Owen Better objective?-->
                    <objective step="1" action="objective.scan"/>
                  </briefing>
                </create_mission>
              </actions>
            </cue>
            <cue name="Scan__Standard_Aborted">
              <conditions>
                <event_cue_signalled cue="$Definition.$ForceCleanupCue"/>
              </conditions>
              <actions>
                <cancel_cue cue="namespace"/>
              </actions>
            </cue>
            <!--namespace signalled to activate followup mission
            event.param = Station to supply-->
            <cue name="Scan__Standard_Activate_FollowUp">
              <conditions>
                <event_cue_signalled cue="namespace"/>
              </conditions>
              <actions>
                <!--Check that the correct parameters have been passed-->
                <do_if value="false">
                  <!--Currently no followup case for this type of mission-->
                  <signal_cue cue="Scan__Standard_Create_GM"/>
                  <cancel_cue cue="parent"/>
                </do_if>
                <do_else>
                  <assert value="false" text="namespace + ' was signalled to start a followup mission, but the passed parameter ' + event.param + ' was not what this mission was expecting. Ending mission.'"/>
                  <!--TODO @Owen what if there is another followup mission?-->
                  <signal_cue_instantly cue="$Definition.$EndedCue" param="namespace"/>
                  <cancel_cue cue="namespace"/>
                </do_else>
              </actions>
            </cue>
          </cues>
        </cue>
        <cue name="Scan__Standard_Not_FollowUp" onfail="cancel">
          <conditions>
            <check_value value="not $FollowUp"/>
          </conditions>
          <actions>
            <signal_cue cue="Scan__Standard_Create_GM"/>
          </actions>
        </cue>
        <cue name="Scan__Standard_Create_GM">
          <conditions>
            <event_cue_signalled/>
          </conditions>
          <cues>
            <!-- Trigger actual GM, passing the specified parameters -->
            <cue name="Scan__Standard_Ref" ref="md.GM_Scan.Start">
              <param name="Client" value="$Definition.$ThreadData.$Contact"/>
              <param name="MissionCue" value="$MissionCue"/>
              <param name="MissionThread" value="$Definition.$ThreadCue"/>
              <param name="ReportSignalCue" value="Scan__Standard_GM_Event"/>
              <param name="WithoutOffer" value="true"/>
              <param name="WithoutOfferWaitCue" value="if $FollowUp then null else $Definition.$OfferAcceptedCue"/>
              <param name="ForceCleanup" value="$Definition.$ForceCleanupCue"/>
              <param name="Page" value="$Page"/>
              <param name="TextOffset" value="$TextOffset"/>
              <param name="MissionLevel" value="$MissionLevel"/>
              <param name="Difficulty" value="$Difficulty"/>
              <param name="TargetShip" value="$TargetShip"/>
              <param name="TargetStation" value="$TargetStation"/>
              <param name="TargetModule" value="$TargetModule"/>
              <param name="TargetWare" value="$TargetWare"/>
              <param name="TargetItem" value="$TargetItem"/>
              <param name="TargetPersonName" value="$TargetPersonName"/>
              <param name="TargetIDCode" value="$TargetIDCode"/>
              <param name="ScanType" value="$ScanType"/>
              <param name="ScanPercentage" value="$ScanPercentage"/>
              <param name="ScanShip" value="$ScanShip"/>
              <param name="DebugChance" value="$DebugChance"/>
            </cue>
            <!--Signalled by GM when an event happens e.g. mission successfully generated or mission ended.
            Feedback values saved to the static of this cue: $FeedbackValue and $EndFeedbackValue-->
            <cue name="Scan__Standard_GM_Event" instantiate="true">
              <conditions>
                <event_cue_signalled/>
              </conditions>
              <actions>
                <include_actions ref="MM__Standard_GM_Event"/>
              </actions>
            </cue>
          </cues>
        </cue>
      </cues>
    </cue>
    <!--Variant Helper Libraries
    Helper libraries to be call from different threads but want to have the same basic variant rules
    If you want to have something custom for a faction e.g. if Vs Xenon, have twice as many enemies, either write your own variant within the cue itself, or modify variables after calling the library-->
    <library name="Passenger_Transport__To_Frontline">
      <actions>
        <set_value name="$TargetStation" exact="null"/>
        <set_value name="$PotentialTargetSpaces" exact="null"/>
        <do_if value="$Definition.$ThreadData.$WarFront?">
          <do_if value="$Definition.$ThreadData.$WarFront.$HostSectors.keys.count">
            <set_value name="$PotentialTargetSpaces" exact="$Definition.$ThreadData.$WarFront.$HostSectors.keys.list"/>
          </do_if>
          <do_elseif value="$Definition.$ThreadData.$WarFront.$ContestedSectors.count">
            <set_value name="$PotentialTargetSpaces" exact="$Definition.$ThreadData.$WarFront.$ContestedSectors.clone"/>
          </do_elseif>
        </do_if>
        <do_elseif value="$Definition.$ThreadData.$Area?">
          <set_value name="$PotentialTargetSpaces" exact="$Definition.$ThreadData.$Area.$EntryPointSectors.clone"/>
        </do_elseif>
        <do_while value="@$PotentialTargetSpaces.count and not $TargetStation">
          <!-- TODO: Would be nice if the target could be a ship, instead of a station -->
          <find_station_by_true_owner name="$TargetStation" space="$PotentialTargetSpaces.{$PotentialTargetSpaces.count}" faction="$Definition.$ThreadData.$Faction" multiple="false" comment="Station to deliver the passenger"/>
          <remove_value name="$PotentialTargetSpaces.{$PotentialTargetSpaces.count}"/>
        </do_while>
        <do_if value="$TargetStation">
          <find_cluster_in_range name="$SourceStationClusters" object="$TargetStation" mindistance="3" maxdistance="4" multiple="true"/>
          <find_sector name="$SourceStationSectors" space="$SourceStationClusters" multiple="true">
            <match_any>
              <match owner="$Definition.$ThreadData.$Faction"/>
              <match contestedby="$Definition.$ThreadData.$Faction"/>
            </match_any>
          </find_sector>
          <shuffle_list list="$SourceStationClusters"/>
          <do_all exact="$SourceStationSectors.count" counter="$i">
            <find_station_by_true_owner name="$SourceStation" space="$SourceStationSectors.{$i}" faction="$Definition.$ThreadData.$Faction" multiple="false" comment="Station to fetch the passenger"/>
            <do_if value="$SourceStation">
              <create_cue_actor cue="Passenger_Transport__Standard" name="$TargetPassenger">
                <select faction="$SourceStation.owner"/>
                <owner exact="$SourceStation.owner"/>
                <skills>
                  <skill type="management" min="6" max="15"/>
                  <skill type="morale" min="6" max="15"/>
                  <skill type="piloting" min="6" max="15"/>
                  <skill type="engineering" min="6" max="15"/>
                  <skill type="boarding" min="6" max="15"/>
                </skills>
              </create_cue_actor>
              <set_value name="$Valid" exact="2" comment="Valid mission variables"/>
            </do_if>
          </do_all>
        </do_if>
      </actions>
    </library>
    <cue name="Passenger_Transport__Standard" instantiate="true" namespace="this">
      <conditions>
        <event_cue_signalled/>
        <!--Signal the static cue to trigger a new instance of this mission.
        Signalling a running instance will trigger a followup mission to run its GM library. See XXX_Activate_FollowUp cue for parameters-->
      </conditions>
      <actions>
        <set_value name="$Definition" exact="event.param"/>
        <set_value name="$Page" exact="$Definition.$Page"/>
        <set_value name="$TextOffsets" exact="$Definition.$TextOffset.clone"/>
        <shuffle_list list="$TextOffsets"/>
        <set_value name="$FollowUp" exact="@$Definition.$FollowUp == true" comment="Does this mission follow directly after another, with parameters potentially passing between them. This changes how this mission is spawned and managed."/>
        <set_value name="$SuccessfullyGenerated" exact="false"/>
        <set_value name="$DebugChance" exact="$Definition.$ThreadData.$DebugChance"/>
        <set_value name="$Difficulty" exact="level.easy" comment="Transport to frontline involves a risk."/>
        <set_value name="$MissionLevel" exact="1"/>
        <assert value="not $FollowUp" text="'This mission does not currently have any parameters where it makes sense as a follow up mission. If there is, adjust the _Activate_FollowUp cue and remove this assert [Owen]'"/>
        <do_all exact="$TextOffsets.count" counter="$offset_i">
          <set_value name="$TextOffset" exact="$TextOffsets.{$offset_i}"/>
          <!--This mission is specific enough that it will only run if a matching text offset is found. If not, the offer will abort with an error.
          $Valid:
          0: Page/TextOffset not handled
          1: Correct Page/TextOffset but unable to setup mission
          2: Mission can attempt to be spawned -->
          <set_value name="$Valid" exact="0"/>
          <!--### ARGON VS XENON ###-->
          <do_if value="$Page == 30210">
            <do_if value="$TextOffset == 104000 or $TextOffset == 104100" comment="Transport specialist on Xenon to front">
              <set_value name="$Valid" exact="1" comment="Valid text offset"/>
              <include_actions ref="Passenger_Transport__To_Frontline"/>
            </do_if>
          </do_if>
          <!--### ARGON VS HOLY ORDER ###-->
          <do_elseif value="$Page == 30211">
            <do_if value="$TextOffset == 104000 or $TextOffset == 104100" comment="Transport specialist on Holy Order to front">
              <set_value name="$Valid" exact="1" comment="Valid text offset"/>
              <include_actions ref="Passenger_Transport__To_Frontline"/>
            </do_if>
          </do_elseif>
          <!--### PARANID VS HOLY ORDER ###-->
          <do_elseif value="$Page == 30212">
            <do_if value="$TextOffset == 104000 or $TextOffset == 104100" comment="Transport specialist on Holy Order to front">
              <set_value name="$Valid" exact="1" comment="Valid text offset"/>
              <include_actions ref="Passenger_Transport__To_Frontline"/>
            </do_if>
          </do_elseif>
          <!--### HOLY ORDER VS ARGON ###-->
          <do_elseif value="$Page == 30213">
            <do_if value="$TextOffset == 104000 or $TextOffset == 104100" comment="Transport specialist on Holy Order to front">
              <set_value name="$Valid" exact="1" comment="Valid text offset"/>
              <include_actions ref="Passenger_Transport__To_Frontline"/>
            </do_if>
          </do_elseif>
          <!--### HOLY ORDER VS PARANID ###-->
          <do_elseif value="$Page == 30214">
            <do_if value="$TextOffset == 104000 or $TextOffset == 104100" comment="Transport specialist on Holy Order to front">
              <set_value name="$Valid" exact="1" comment="Valid text offset"/>
              <include_actions ref="Passenger_Transport__To_Frontline"/>
            </do_if>
          </do_elseif>
          <!--### SPLIT VS ARGON ###-->
          <do_elseif value="$Page == 30215">

          <do_if value="$TextOffset == 104000 or $TextOffset == 104100" comment="Transport specialist on Argon to front"><set_value name="$Valid" exact="1" comment="Valid text offset"/><include_actions ref="Passenger_Transport__To_Frontline"/></do_if></do_elseif>
          <!--### DLC 2 Setup ###-->
          <do_elseif value="$Page == 30216">

          <do_if value="$TextOffset == 104000 or $TextOffset == 104100" comment="Transport specialist on Xenon to front"><set_value name="$Valid" exact="1" comment="Valid text offset"/><include_actions ref="Passenger_Transport__To_Frontline"/></do_if></do_elseif>
          <do_if value="$Valid == 0">
            <debug_text text="'Attempting to spawn a mission on ' + this + ' but the combination of Page: ' + $Page + ' and TextOffset: ' + $TextOffset + ' do not match any definitions [Owen]'" filter="error"/>
          </do_if>
          <do_elseif value="$Valid == 2">
            <break/>
          </do_elseif>
        </do_all>
        <do_if value="$Valid == 2">
          <do_if value="$FollowUp">
            <!--Followup missions use the namespace as the mission cue-->
            <set_value name="$MissionCue" exact="namespace"/>
          </do_if>
          <do_else>
            <set_value name="$MissionCue" exact="null"/>
          </do_else>
        </do_if>
        <do_else>
          <do_if value="$Valid == 1">
            <debug_text text="'Unable to find suitable variant variables for mission on ' + this + ' with combination of Page: ' + $Page + ' and TextOffsets: ' + $TextOffsets + '. [Owen]'" chance="$DebugChance"/>
          </do_if>
          <signal_cue cue="$Definition.$SpawnFailedCue"/>
          <cancel_cue cue="this"/>
        </do_else>
      </actions>
      <cues>
        <cue name="Passenger_Transport__Standard_FollowUp_Manager" onfail="cancel">
          <conditions>
            <check_value value="$FollowUp"/>
          </conditions>
          <actions>
            <!--If this is going to be a followup mission, first, inform the mission thread manager of this submission so it can be displayed in the offer.-->
            <!--Currently means you need to find the mission name here, instead of relying on the GM itself finding it.-->
            <set_value name="$MissionName" exact="readtext.{$Page}.{$TextOffset + 1}"/>
            <set_value name="$MissionDescription" exact="readtext.{$Page}.{$TextOffset + 2}"/>
            <debug_text text="'Attempting to signal the mission thread that followup mission cue ' + $MissionCue + ' is ready to be added to the offer'" chance="$DebugChance"/>
            <set_value name="$MissionDataTable" exact="table[$Name = $MissionName, $Cue = $MissionCue, $WrapperCue = $MissionCue, $FollowUp = true]"/>
            <signal_cue_instantly cue="$Definition.$SpawnSuccessCue" param="$MissionDataTable"/>
          </actions>
          <cues>
            <cue name="Passenger_Transport__Standard_FollowUp_Offer_Accepted">
              <conditions>
                <event_cue_signalled cue="$Definition.$OfferAcceptedCue"/>
                <check_value value="event.param == $MissionCue"/>
              </conditions>
              <actions>
                <!--We don't want to call the GM yet. Create the mission here and pass it into the GM when the previous mission ends
                TODO @Owen Move this to a library in the GM file?-->
                <create_mission cue="$MissionCue" missionthread="$Definition.$ThreadCue" name="$MissionName" description="$MissionDescription" faction="$Definition.$ThreadData.$Faction" type="missiontype.deliver">
                  <briefing>
                    <!--TODO @Owen Better objective?-->
                    <objective step="1" action="objective.transport"/>
                  </briefing>
                </create_mission>
              </actions>
            </cue>
            <cue name="Passenger_Transport__Standard_Aborted">
              <conditions>
                <event_cue_signalled cue="$Definition.$ForceCleanupCue"/>
              </conditions>
              <actions>
                <cancel_cue cue="namespace"/>
              </actions>
            </cue>
            <!--namespace signalled to activate followup mission
            event.param = Station to supply-->
            <cue name="Passenger_Transport__Standard_Activate_FollowUp">
              <conditions>
                <event_cue_signalled cue="namespace"/>
              </conditions>
              <actions>
                <!--Check that the correct parameters have been passed-->
                <do_if value="false">
                  <!--Currently no followup case for this type of mission-->
                  <signal_cue cue="Passenger_Transport__Standard_Create_GM"/>
                  <cancel_cue cue="parent"/>
                </do_if>
                <do_else>
                  <assert value="false" text="namespace + ' was signalled to start a followup mission, but the passed parameter ' + event.param + ' was not what this mission was expecting. Ending mission.'"/>
                  <!--TODO @Owen what if there is another followup mission?-->
                  <signal_cue_instantly cue="$Definition.$EndedCue" param="namespace"/>
                  <cancel_cue cue="namespace"/>
                </do_else>
              </actions>
            </cue>
          </cues>
        </cue>
        <cue name="Passenger_Transport__Standard_Not_FollowUp" onfail="cancel">
          <conditions>
            <check_value value="not $FollowUp"/>
          </conditions>
          <actions>
            <signal_cue cue="Passenger_Transport__Standard_Create_GM"/>
          </actions>
        </cue>
        <cue name="Passenger_Transport__Standard_Create_GM">
          <conditions>
            <event_cue_signalled/>
          </conditions>
          <cues>
            <!-- Trigger actual GM, passing the specified parameters -->
            <cue name="Passenger_Transport__Standard_Ref" ref="md.GM_Transport_Passengers.Start">
              <param name="Client" value="$Definition.$ThreadData.$Contact"/>
              <param name="MissionCue" value="$MissionCue"/>
              <param name="MissionThread" value="$Definition.$ThreadCue"/>
              <param name="ReportSignalCue" value="Passenger_Transport__Standard_GM_Event"/>
              <param name="WithoutOffer" value="true"/>
              <param name="WithoutOfferWaitCue" value="if $FollowUp then null else $Definition.$OfferAcceptedCue"/>
              <param name="ForceCleanup" value="$Definition.$ForceCleanupCue"/>
              <param name="Page" value="$Page"/>
              <param name="TextOffset" value="$TextOffset"/>
              <param name="MissionLevel" value="$MissionLevel"/>
              <param name="Difficulty" value="$Difficulty"/>
              <param name="ExistingActors" value="[$TargetPassenger]"/>
              <param name="UseClient" value="false"/>
              <param name="StartContainer" value="$SourceStation"/>
              <param name="TargetContainer" value="$TargetStation"/>
              <param name="TargetDockArea" value="null"/>
              <param name="DebugChance" value="$DebugChance"/>
            </cue>
            <!--Signalled by GM when an event happens e.g. mission successfully generated or mission ended.
            Feedback values saved to the static of this cue: $FeedbackValue and $EndFeedbackValue-->
            <cue name="Passenger_Transport__Standard_GM_Event" instantiate="true">
              <conditions>
                <event_cue_signalled/>
              </conditions>
              <actions>
                <include_actions ref="MM__Standard_GM_Event"/>
              </actions>
            </cue>
          </cues>
        </cue>
      </cues>
    </cue>
    <cue name="Sabotage__Standard" instantiate="true" namespace="this">
      <conditions>
        <event_cue_signalled/>
        <!--Signal the static cue to trigger a new instance of this mission.
        Signalling a running instance will trigger a followup mission to run its GM library. See XXX_Activate_FollowUp cue for parameters-->
      </conditions>
      <actions>
        <set_value name="$Definition" exact="event.param"/>
        <set_value name="$Page" exact="$Definition.$Page"/>
        <set_value name="$TextOffsets" exact="$Definition.$TextOffset.clone"/>
        <shuffle_list list="$TextOffsets"/>
        <set_value name="$FollowUp" exact="@$Definition.$FollowUp == true" comment="Does this mission follow directly after another, with parameters potentially passing between them. This changes how this mission is spawned and managed."/>
        <set_value name="$SuccessfullyGenerated" exact="false"/>
        <set_value name="$DebugChance" exact="$Definition.$ThreadData.$DebugChance"/>
        <set_value name="$Difficulty" exact="level.medium"/>
        <set_value name="$MissionLevel" exact="1" comment="Gets increased by Sabotage__Standard_Station_Lib and Sabotage__Standard_Ship_Lib."/>
        <assert value="not $FollowUp" text="'This mission does not currently have any parameters where it makes sense as a follow up mission. If there is, adjust the _Activate_FollowUp cue and remove this assert [Owen]'"/>
        <do_all exact="$TextOffsets.count" counter="$offset_i">
          <set_value name="$TextOffset" exact="$TextOffsets.{$offset_i}"/>
          <!--This mission is specific enough that it will only run if a matching text offset is found. If not, the offer will abort with an error.
          $Valid:
          0: Page/TextOffset not handled
          1: Correct Page/TextOffset but unable to setup mission
          2: Mission can attempt to be spawned -->
          <set_value name="$Valid" exact="0"/>
          <set_value name="$EnemyFaction" exact="$Definition.$ThreadData.$EnemyFaction"/>
          <!--### ARGON VS XENON ###-->
          <do_if value="$Page == 30210">
            <do_if value="$TextOffset == 14000" comment="sabotage station">
              <set_value name="$Valid" exact="1" comment="Valid text offset"/>
              <set_value name="$TargetClass" exact="[class.turret]"/>
              <include_actions ref="md.GM_Sabotage.Sabotage__Standard_Station_Lib"/>
            </do_if>
            <do_elseif value="$TextOffset == 14100" comment="sabotage ship">
              <set_value name="$Valid" exact="1" comment="Valid text offset"/>
              <set_value name="$TargetClass" exact="[class.engine, class.shieldgenerator]"/>
              <include_actions ref="md.GM_Sabotage.Sabotage__Standard_Ship_Lib"/>
            </do_elseif>
          </do_if>
          <!--### ARGON VS HOLY ORDER -->
          <do_elseif value="$Page == 30211">
            <do_if value="$TextOffset == 14000" comment="sabotage station">
              <set_value name="$Valid" exact="1" comment="Valid text offset"/>
              <set_value name="$TargetClass" exact="[class.turret]"/>
              <include_actions ref="md.GM_Sabotage.Sabotage__Standard_Station_Lib"/>
            </do_if>
            <do_elseif value="$TextOffset == 14100" comment="sabotage ship">
              <set_value name="$Valid" exact="1" comment="Valid text offset"/>
              <set_value name="$TargetClass" exact="[class.engine, class.shieldgenerator]"/>
              <include_actions ref="md.GM_Sabotage.Sabotage__Standard_Ship_Lib"/>
            </do_elseif>
          </do_elseif>
          <!--### PARANID VS HOLY ORDER ###-->
          <do_elseif value="$Page == 30212">
            <do_if value="$TextOffset == 14000" comment="sabotage station">
              <set_value name="$Valid" exact="1" comment="Valid text offset"/>
              <set_value name="$TargetClass" exact="[class.turret]"/>
              <include_actions ref="md.GM_Sabotage.Sabotage__Standard_Station_Lib"/>
            </do_if>
            <do_elseif value="$TextOffset == 14100" comment="sabotage ship">
              <set_value name="$Valid" exact="1" comment="Valid text offset"/>
              <set_value name="$TargetClass" exact="[class.engine, class.shieldgenerator]"/>
              <include_actions ref="md.GM_Sabotage.Sabotage__Standard_Ship_Lib"/>
            </do_elseif>
          </do_elseif>
          <!--### HOLY ORDER VS ARGON ###-->
          <do_elseif value="$Page == 30213">
            <do_if value="$TextOffset == 14000" comment="sabotage station">
              <set_value name="$Valid" exact="1" comment="Valid text offset"/>
              <set_value name="$TargetClass" exact="[class.turret]"/>
              <include_actions ref="md.GM_Sabotage.Sabotage__Standard_Station_Lib"/>
            </do_if>
            <do_elseif value="$TextOffset == 14100" comment="sabotage ship">
              <set_value name="$Valid" exact="1" comment="Valid text offset"/>
              <set_value name="$TargetClass" exact="[class.engine, class.shieldgenerator]"/>
              <include_actions ref="md.GM_Sabotage.Sabotage__Standard_Ship_Lib"/>
            </do_elseif>
          </do_elseif>
          <!--### HOLY ORDER VS PARANID ###-->
          <do_elseif value="$Page == 30214">
            <do_if value="$TextOffset == 14000" comment="sabotage station">
              <set_value name="$Valid" exact="1" comment="Valid text offset"/>
              <set_value name="$TargetClass" exact="[class.turret]"/>
              <include_actions ref="md.GM_Sabotage.Sabotage__Standard_Station_Lib"/>
            </do_if>
            <do_elseif value="$TextOffset == 14100" comment="sabotage ship">
              <set_value name="$Valid" exact="1" comment="Valid text offset"/>
              <set_value name="$TargetClass" exact="[class.engine, class.shieldgenerator]"/>
              <include_actions ref="md.GM_Sabotage.Sabotage__Standard_Ship_Lib"/>
            </do_elseif>
          </do_elseif>
          <!--### SPLIT VS ARGON ###-->
          <do_elseif value="$Page == 30215">

          <do_if value="$TextOffset == 14000" comment="sabotage station"><set_value name="$Valid" exact="1" comment="Valid text offset"/><set_value name="$TargetClass" exact="[class.turret]"/><include_actions ref="md.GM_Sabotage.Sabotage__Standard_Station_Lib"/></do_if><do_elseif value="$TextOffset == 14100" comment="sabotage ship"><set_value name="$Valid" exact="1" comment="Valid text offset"/><set_value name="$TargetClass" exact="[class.engine, class.shieldgenerator]"/><include_actions ref="md.GM_Sabotage.Sabotage__Standard_Ship_Lib"/></do_elseif></do_elseif>
          <!--### DLC 2 Setup ###-->
          <do_elseif value="$Page == 30216">

          <do_if value="$TextOffset == 14000" comment="sabotage station"><set_value name="$Valid" exact="1" comment="Valid text offset"/><set_value name="$TargetClass" exact="[class.turret]"/><include_actions ref="md.GM_Sabotage.Sabotage__Standard_Station_Lib"/></do_if><do_elseif value="$TextOffset == 14100" comment="sabotage ship"><set_value name="$Valid" exact="1" comment="Valid text offset"/><set_value name="$TargetClass" exact="[class.engine, class.shieldgenerator]"/><include_actions ref="md.GM_Sabotage.Sabotage__Standard_Ship_Lib"/></do_elseif></do_elseif>
          <do_if value="$TargetObject.exists and $TargetComponents.count">
            <set_value name="$Valid" exact="2" comment="Valid mission variables"/>
          </do_if>
          <do_if value="$Valid == 0">
            <debug_text text="'Attempting to spawn a mission on ' + this + ' but the combination of Page: ' + $Page + ' and TextOffset: ' + $TextOffset + ' do not match any definitions [Owen]'" filter="error"/>
          </do_if>
          <do_elseif value="$Valid == 2">
            <break/>
          </do_elseif>
        </do_all>
        <do_if value="$Valid == 2">
          <do_if value="$FollowUp">
            <!--Followup missions use the namespace as the mission cue-->
            <set_value name="$MissionCue" exact="namespace"/>
          </do_if>
          <do_else>
            <set_value name="$MissionCue" exact="null"/>
          </do_else>
        </do_if>
        <do_else>
          <do_if value="$Valid == 1">
            <debug_text text="'Unable to find suitable variant variables for mission on ' + this + ' with combination of Page: ' + $Page + ' and TextOffsets: ' + $TextOffsets + '. [Owen]'" chance="$DebugChance"/>
          </do_if>
          <signal_cue cue="$Definition.$SpawnFailedCue"/>
          <cancel_cue cue="this"/>
        </do_else>
      </actions>
      <cues>
        <cue name="Sabotage__Standard_FollowUp_Manager" onfail="cancel">
          <conditions>
            <check_value value="$FollowUp"/>
          </conditions>
          <actions>
            <!--If this is going to be a followup mission, first, inform the mission thread manager of this submission so it can be displayed in the offer.-->
            <!--Currently means you need to find the mission name here, instead of relying on the GM itself finding it.-->
            <set_value name="$MissionName" exact="readtext.{$Page}.{$TextOffset + 1}"/>
            <set_value name="$MissionDescription" exact="readtext.{$Page}.{$TextOffset + 2}"/>
            <debug_text text="'Attempting to signal the mission thread that followup mission cue ' + $MissionCue + ' is ready to be added to the offer'" chance="$DebugChance"/>
            <set_value name="$MissionDataTable" exact="table[$Name = $MissionName, $Cue = $MissionCue, $WrapperCue = $MissionCue, $FollowUp = true]"/>
            <signal_cue_instantly cue="$Definition.$SpawnSuccessCue" param="$MissionDataTable"/>
          </actions>
          <cues>
            <cue name="Sabotage__Standard_FollowUp_Offer_Accepted">
              <conditions>
                <event_cue_signalled cue="$Definition.$OfferAcceptedCue"/>
                <check_value value="event.param == $MissionCue"/>
              </conditions>
              <actions>
                <!--We don't want to call the GM yet. Create the mission here and pass it into the GM when the previous mission ends
                TODO @Owen Move this to a library in the GM file?-->
                <create_mission cue="$MissionCue" missionthread="$Definition.$ThreadCue" name="$MissionName" description="$MissionDescription" faction="$Definition.$ThreadData.$Faction" type="missiontype.deliver">
                  <briefing>
                    <!--TODO @Owen Better objective?-->
                    <objective step="1" action="objective.destroy"/>
                  </briefing>
                </create_mission>
              </actions>
            </cue>
            <cue name="Sabotage__Standard_Aborted">
              <conditions>
                <event_cue_signalled cue="$Definition.$ForceCleanupCue"/>
              </conditions>
              <actions>
                <cancel_cue cue="namespace"/>
              </actions>
            </cue>
            <!--namespace signalled to activate followup mission
            event.param = Station to supply-->
            <cue name="Sabotage__Standard_Activate_FollowUp">
              <conditions>
                <event_cue_signalled cue="namespace"/>
              </conditions>
              <actions>
                <!--Check that the correct parameters have been passed-->
                <do_if value="false">
                  <!--Currently no followup case for this type of mission-->
                  <signal_cue cue="Sabotage__Standard_Create_GM"/>
                  <cancel_cue cue="parent"/>
                </do_if>
                <do_else>
                  <assert value="false" text="namespace + ' was signalled to start a followup mission, but the passed parameter ' + event.param + ' was not what this mission was expecting. Ending mission.'"/>
                  <!--TODO @Owen what if there is another followup mission?-->
                  <signal_cue_instantly cue="$Definition.$EndedCue" param="namespace"/>
                  <cancel_cue cue="namespace"/>
                </do_else>
              </actions>
            </cue>
          </cues>
        </cue>
        <cue name="Sabotage__Standard_Not_FollowUp" onfail="cancel">
          <conditions>
            <check_value value="not $FollowUp"/>
          </conditions>
          <actions>
            <signal_cue cue="Sabotage__Standard_Create_GM"/>
          </actions>
        </cue>
        <cue name="Sabotage__Standard_Create_GM">
          <conditions>
            <event_cue_signalled/>
          </conditions>
          <actions>
          </actions>
          <cues>
            <cue name="Sabotage__Standard_ChangeOwner" comment="TODO: @Owen, Roger - For demo-purpose">
              <conditions>
                <event_cue_signalled cue="$Definition.$OfferAcceptedCue"/>
              </conditions>
              <actions>
                <set_owner object="$TargetObject" faction="faction.player"/>
              </actions>
            </cue>
            <cue name="Sabotage__Standard_Ref" ref="md.GM_Sabotage.Start">
              <param name="Client" value="$Definition.$ThreadData.$Contact"/>
              <param name="MissionCue" value="$MissionCue"/>
              <param name="MissionThread" value="$Definition.$ThreadCue"/>
              <param name="ReportSignalCue" value="Sabotage__Standard_GM_Event"/>
              <param name="WithoutOffer" value="true"/>
              <param name="WithoutOfferWaitCue" value="if $FollowUp then null else $Definition.$OfferAcceptedCue"/>
              <param name="ForceCleanup" value="$Definition.$ForceCleanupCue"/>
              <param name="Page" value="$Page"/>
              <param name="TextOffset" value="$TextOffset"/>
              <param name="MissionLevel" value="$MissionLevel"/>
              <param name="Difficulty" value="$Difficulty"/>
              <param name="EnemyFaction" value="$EnemyFaction"/>
              <param name="PrimaryTarget" value="$TargetObject"/>
              <param name="TargetComponents" value="$TargetComponents"/>
              <param name="DebugChance" value="$DebugChance"/>
            </cue>
            <!--Signalled by GM when an event happens e.g. mission successfully generated or mission ended.
            Feedback values saved to the static of this cue: $FeedbackValue and $EndFeedbackValue-->
            <cue name="Sabotage__Standard_GM_Event" instantiate="true">
              <conditions>
                <event_cue_signalled/>
              </conditions>
              <actions>
                <include_actions ref="MM__Standard_GM_Event"/>
              </actions>
            </cue>
          </cues>
        </cue>
      </cues>
    </cue>
    <!-- Find and GM_Destroy opponent Mines OR Lasertowers -->
    <cue name="Destroy_Objects__Clear_Explosives" instantiate="true" namespace="this">
      <conditions>
        <event_cue_signalled/>
        <!--Signal the static cue to trigger a new instance of this mission.
        Signalling a running instance will trigger a followup mission to run its GM library. See XXX_Activate_FollowUp cue for parameters-->
      </conditions>
      <actions>
        <set_value name="$Definition" exact="event.param"/>
        <set_value name="$Page" exact="$Definition.$Page"/>
        <set_value name="$TextOffsets" exact="$Definition.$TextOffset.clone"/>
        <shuffle_list list="$TextOffsets"/>
        <set_value name="$FollowUp" exact="@$Definition.$FollowUp == true" comment="Does this mission follow directly after another, with parameters potentially passing between them. This changes how this mission is spawned and managed."/>
        <set_value name="$SuccessfullyGenerated" exact="false"/>
        <set_value name="$DebugChance" exact="$Definition.$ThreadData.$DebugChance"/>
        <set_value name="$Difficulty" exact="level.easy"/>
        <set_value name="$MissionLevel" exact="1"/>
        <assert value="not $FollowUp" text="'This mission does not currently have any parameters where it makes sense as a follow up mission. If there is, adjust the _Activate_FollowUp cue and remove this assert [Owen]'"/>
        <!--This is an example of using a library to create a group of targets. If the targets are invalid by the time the sub-mission runs, the library could be run again.
          Could also be done for finding an existing object as a target-->
        <do_all exact="$TextOffsets.count" counter="$offset_i">
          <set_value name="$TextOffset" exact="$TextOffsets.{$offset_i}"/>
          <!--This mission is specific enough that it will only run if a matching text offset is found. If not, the offer will abort with an error.
          $Valid:
          0: Page/TextOffset not handled
          1: Correct Page/TextOffset but unable to setup mission
          2: Mission can attempt to be spawned -->
          <set_value name="$Valid" exact="0"/>
          <set_value name="$Sector" exact="null"/>
          <set_value name="$ExplosiveOwner" exact="null"/>
          <set_value name="$PotentialSectors" exact="[]"/>
          <!--### ARGON VS XENON ###-->
          <do_if value="$Page == 30210" comment="ARGON VS XENON">
            <!-- Clear Mines -->
            <do_if value="$TextOffset == 160300 or $TextOffset == 160400">
              <set_value name="$Valid" exact="1" comment="Valid text offset"/>
              <set_value name="$ExplosiveOwner" exact="faction.xenon"/>
            </do_if>
            <!-- Clear Lasertowers -->
            <do_if value="$TextOffset == 161000 or $TextOffset == 161100 or $TextOffset == 161200" comment="ATM this FactionLogic does not place laser towers">
              <set_value name="$Valid" exact="1" comment="Valid text offset"/>
              <set_value name="$ExplosiveOwner" exact="faction.xenon"/>
            </do_if>
          </do_if>
          <!--### ARGON VS HOLY ORDER###-->
          <do_elseif value="$Page == 30211" comment="ARGON VS HOLY ORDER">
            <!-- Clear Mines -->
            <do_if value="$TextOffset == 160000 or $TextOffset == 160100" comment="">
              <set_value name="$Valid" exact="1" comment="Valid text offset"/>
              <set_value name="$ExplosiveOwner" exact="faction.holyorder"/>
            </do_if>
            <!-- Clear Lasertowers -->
            <do_if value="$TextOffset == 161000 or $TextOffset == 161100" comment="">
              <set_value name="$Valid" exact="1" comment="Valid text offset"/>
              <set_value name="$ExplosiveOwner" exact="faction.holyorder"/>
            </do_if>
          </do_elseif>
          <!--### PARANID VS HOLY ORDER###-->
          <do_elseif value="$Page == 30212" comment="PARANID VS HOLY ORDER">
            <!-- Clear Mines -->
            <do_if value="$TextOffset == 160000 or $TextOffset == 160100" comment="">
              <set_value name="$Valid" exact="1" comment="Valid text offset"/>
              <set_value name="$ExplosiveOwner" exact="faction.holyorder"/>
            </do_if>
            <!-- Clear Lasertowers -->
            <do_if value="$TextOffset == 161000 or $TextOffset == 161100" comment="">
              <set_value name="$Valid" exact="1" comment="Valid text offset"/>
              <set_value name="$ExplosiveOwner" exact="faction.holyorder"/>
            </do_if>
          </do_elseif>
          <!--### HOLY ORDER VS ARGON ###-->
          <do_elseif value="$Page == 30213" comment="HOLY ORDER VS ARGON">
            <!-- Clear Mines -->
            <do_if value="$TextOffset == 160000 or $TextOffset == 160100 or $TextOffset == 160200">
              <set_value name="$Valid" exact="1" comment="Valid text offset"/>
              <set_value name="$ExplosiveOwner" exact="faction.argon"/>
            </do_if>
            <!-- Clear Lasertowers -->
            <do_if value="$TextOffset == 161000 or $TextOffset == 161100" comment="">
              <set_value name="$Valid" exact="1" comment="Valid text offset"/>
              <set_value name="$ExplosiveOwner" exact="faction.argon"/>
            </do_if>
          </do_elseif>
          <!--### HOLY ORDER VS PARANID ###-->
          <do_elseif value="$Page == 30214" comment="HOLY ORDER VS PARANID">
            <!-- Clear Mines -->
            <do_if value="$TextOffset == 160000 or $TextOffset == 160100 or $TextOffset == 160200">
              <set_value name="$Valid" exact="1" comment="Valid text offset"/>
              <set_value name="$ExplosiveOwner" exact="faction.paranid"/>
            </do_if>
            <!-- Clear Lasertowers -->
            <do_if value="$TextOffset == 161000 or $TextOffset == 161100 or $TextOffset == 161200">
              <set_value name="$Valid" exact="1" comment="Valid text offset"/>
              <set_value name="$ExplosiveOwner" exact="faction.paranid"/>
            </do_if>
          </do_elseif>
          <!--### SPLIT VS ARGON ###-->
          <do_elseif value="$Page == 30215">

          <!-- Clear Mines --><do_if value="$TextOffset == 160000 or $TextOffset == 160100"><set_value name="$Valid" exact="1" comment="Valid text offset"/><set_value name="$ExplosiveOwner" exact="faction.argon"/></do_if><!-- Clear Lasertowers --><do_if value="$TextOffset == 161000 or $TextOffset == 161100" comment=""><set_value name="$Valid" exact="1" comment="Valid text offset"/><set_value name="$ExplosiveOwner" exact="faction.argon"/></do_if></do_elseif>
          <!--### DLC2 ###-->
          <do_elseif value="$Page == 30216">

          <!-- Clear Mines --><do_if value="$TextOffset == 160000 or $TextOffset == 160100"><set_value name="$Valid" exact="1" comment="Valid text offset"/><set_value name="$ExplosiveOwner" exact="faction.xenon"/></do_if><!-- Clear Lasertowers --><do_if value="$TextOffset == 161000 or $TextOffset == 161100" comment=""><set_value name="$Valid" exact="1" comment="Valid text offset"/><set_value name="$ExplosiveOwner" exact="faction.xenon"/></do_if></do_elseif>
          <do_if value="not $PotentialSectors.count">
            <!--Look in the standard places-->
            <do_if value="$Definition.$ThreadData.$WarFront?">
              <append_list_elements name="$PotentialSectors" other="$Definition.$ThreadData.$WarFront.$HostSectors.keys.list"/>
              <append_list_elements name="$PotentialSectors" other="$Definition.$ThreadData.$WarFront.$ContestedSectors"/>
              <append_list_elements name="$PotentialSectors" other="$Definition.$ThreadData.$WarFront.$EnemySectors.keys.list"/>
            </do_if>
            <do_elseif value="$Definition.$ThreadData.$Area">
              <append_list_elements name="$PotentialSectors" other="$Definition.$ThreadData.$Area.$EnemySectors"/>
              <append_list_elements name="$PotentialSectors" other="$Definition.$ThreadData.$Area.$EntryPointSectors"/>
            </do_elseif>
            <shuffle_list list="$PotentialSectors"/>
          </do_if>
          <do_for_each name="$Sector" in="$PotentialSectors">
            <do_if value="$TextOffset == 160000 or $TextOffset == 160100 or $TextOffset == 160200 or $TextOffset == 160300 or $TextOffset == 160400" comment="Minefield">
              <include_actions ref="md.GM_Destroy_Objects.FindMinefieldOrRiggedAsteroids" comment="input: $Sector, $ExplosiveOwner output: $Explosives"/>
            </do_if>
            <do_elseif value="$TextOffset == 161000 or $TextOffset == 161100 or $TextOffset == 161200" comment="Lasertowers">
              <include_actions ref="md.GM_Destroy_Objects.FindLasertowers" comment="input: $Sector, $ExplosiveOwner output: $Explosives"/>
            </do_elseif>
            <do_if value="$Explosives.count">
              <set_value name="$MissionLevel" exact="($Explosives.count / 2)i" operation="add"/>
              <set_value name="$Valid" exact="2" comment="Valid mission variables"/>
              <break/>
            </do_if>
          </do_for_each>
          <do_if value="$Valid == 0">
            <debug_text text="'Attempting to spawn a mission on ' + this + ' but the combination of Page: ' + $Page + ' and TextOffset: ' + $TextOffset + ' do not match any definitions [Owen]'" filter="error"/>
          </do_if>
          <do_elseif value="$Valid == 2">
            <break/>
          </do_elseif>
        </do_all>
        <do_if value="$Valid == 2">
          <do_if value="$FollowUp">
            <!--Followup missions use the namespace as the mission cue-->
            <set_value name="$MissionCue" exact="namespace"/>
          </do_if>
          <do_else>
            <set_value name="$MissionCue" exact="null"/>
          </do_else>
        </do_if>
        <do_else>
          <do_if value="$Valid == 1">
            <debug_text text="'Unable to find suitable variant variables for mission on ' + this + ' with combination of Page: ' + $Page + ' and TextOffsets: ' + $TextOffsets + '. [Owen]'" chance="$DebugChance"/>
          </do_if>
          <signal_cue cue="$Definition.$SpawnFailedCue"/>
          <cancel_cue cue="this"/>
        </do_else>
      </actions>
      <cues>
        <cue name="Destroy_Objects__Clear_Explosives_FollowUp_Manager" onfail="cancel">
          <conditions>
            <check_value value="$FollowUp"/>
          </conditions>
          <actions>
            <!--If this is going to be a followup mission, first, inform the mission thread manager of this submission so it can be displayed in the offer.-->
            <!--Currently means you need to find the mission name here, instead of relying on the GM itself finding it.-->
            <set_value name="$MissionName" exact="readtext.{$Page}.{$TextOffset + 1}"/>
            <set_value name="$MissionDescription" exact="readtext.{$Page}.{$TextOffset + 2}"/>
            <debug_text text="'Attempting to signal the mission thread that followup mission cue ' + $MissionCue + ' is ready to be added to the offer'" chance="$DebugChance"/>
            <set_value name="$MissionDataTable" exact="table[$Name = $MissionName, $Cue = $MissionCue, $WrapperCue = $MissionCue, $FollowUp = true]"/>
            <signal_cue_instantly cue="$Definition.$SpawnSuccessCue" param="$MissionDataTable"/>
          </actions>
          <cues>
            <cue name="Destroy_Objects__Clear_Explosives_FollowUp_Offer_Accepted">
              <conditions>
                <event_cue_signalled cue="$Definition.$OfferAcceptedCue"/>
                <check_value value="event.param == $MissionCue"/>
              </conditions>
              <actions>
                <!--We don't want to call the GM yet. Create the mission here and pass it into the GM when the previous mission ends
                TODO @Owen Move this to a library in the GM file?-->
                <create_mission cue="$MissionCue" missionthread="$Definition.$ThreadCue" name="$MissionName" description="$MissionDescription" faction="$Definition.$ThreadData.$Faction" type="missiontype.deliver">
                  <briefing>
                    <!--TODO @Owen Better objective?-->
                    <objective step="1" action="objective.destroy"/>
                  </briefing>
                </create_mission>
              </actions>
            </cue>
            <cue name="Destroy_Objects__Clear_Explosives_Aborted">
              <conditions>
                <event_cue_signalled cue="$Definition.$ForceCleanupCue"/>
              </conditions>
              <actions>
                <cancel_cue cue="namespace"/>
              </actions>
            </cue>
            <!--namespace signalled to activate followup mission
            event.param = Station to supply-->
            <cue name="Destroy_Objects__Clear_Explosives_Activate_FollowUp">
              <conditions>
                <event_cue_signalled cue="namespace"/>
              </conditions>
              <actions>
                <!--Check that the correct parameters have been passed-->
                <do_if value="false">
                  <!--Currently no followup case for this type of mission-->
                  <signal_cue cue="Destroy_Objects__Clear_Explosives_Create_GM"/>
                  <cancel_cue cue="parent"/>
                </do_if>
                <do_else>
                  <assert value="false" text="namespace + ' was signalled to start a followup mission, but the passed parameter ' + event.param + ' was not what this mission was expecting. Ending mission.'"/>
                  <!--TODO @Owen what if there is another followup mission?-->
                  <signal_cue_instantly cue="$Definition.$EndedCue" param="namespace"/>
                  <cancel_cue cue="namespace"/>
                </do_else>
              </actions>
            </cue>
          </cues>
        </cue>
        <cue name="Destroy_Objects__Clear_Explosives_Not_FollowUp" onfail="cancel">
          <conditions>
            <check_value value="not $FollowUp"/>
          </conditions>
          <actions>
            <signal_cue cue="Destroy_Objects__Clear_Explosives_Create_GM"/>
          </actions>
        </cue>
        <cue name="Destroy_Objects__Clear_Explosives_Create_GM">
          <conditions>
            <event_cue_signalled/>
          </conditions>
          <cues>
            <!--event.param == result cue, result saved to event.param.$Targets-->
            <cue name="Destroy_Objects__Clear_Explosives__New_Targets" instantiate="true">
              <conditions>
                <event_cue_signalled/>
              </conditions>
              <actions>
                <do_if value="$FindTargetLib?">
                  <include_actions ref="$FindTargetLib" comment="input: $Sector, $ExplosiveOwner output: $Explosives"/>
                </do_if>
                <do_else>
                  <!-- backward compatibility -->
                  <do_if value="$TextOffset == 160000 or $TextOffset == 160100 or $TextOffset == 160200" comment="Minefield">
                    <include_actions ref="md.GM_Destroy_Objects.FindMinefieldOrRiggedAsteroids" comment="input: $Sector, $ExplosiveOwner output: $Explosives"/>
                  </do_if>
                  <do_elseif value="$TextOffset == 161000 or $TextOffset == 161100 or $TextOffset == 161200" comment="Lasertowers">
                    <include_actions ref="md.GM_Destroy_Objects.FindLasertowers" comment="input: $Sector, $ExplosiveOwner output: $Explosives"/>
                  </do_elseif>
                </do_else>
                <add_to_group groupname="event.param.$Targets" group="$Explosives"/>
                <debug_text text="'Finding new targets as the previous group was invalid. Found: ' + $Explosives.count" chance="$DebugChance"/>
              </actions>
            </cue>
            <!-- Trigger actual GM, passing the specified parameters -->
            <cue name="Destroy_Objects__Clear_Explosives_Ref" ref="md.GM_Destroy_Objects.Start">
              <param name="Client" value="$Definition.$ThreadData.$Contact"/>
              <param name="MissionCue" value="$MissionCue"/>
              <param name="MissionThread" value="$Definition.$ThreadCue"/>
              <param name="ReportSignalCue" value="Destroy_Objects__Clear_Explosives_GM_Event"/>
              <param name="WithoutOffer" value="true"/>
              <param name="WithoutOfferWaitCue" value="if $FollowUp then null else $Definition.$OfferAcceptedCue"/>
              <param name="ForceCleanup" value="$Definition.$ForceCleanupCue"/>
              <param name="Page" value="$Page"/>
              <param name="TextOffset" value="$TextOffset"/>
              <param name="MissionLevel" value="$MissionLevel"/>
              <param name="Difficulty" value="$Difficulty"/>
              <param name="DebugChance" value="$DebugChance"/>
              <param name="TargetSector" value="$Explosives.{1}.sector.knownname"/>
              <param name="Targets" value="$Explosives"/>
              <param name="TargetRequestCue" value="Destroy_Objects__Clear_Explosives__New_Targets"/>
            </cue>
            <!--Signalled by GM when an event happens e.g. mission successfully generated or mission ended.
            Feedback values saved to the static of this cue: $FeedbackValue and $EndFeedbackValue-->
            <cue name="Destroy_Objects__Clear_Explosives_GM_Event" instantiate="true">
              <conditions>
                <event_cue_signalled/>
              </conditions>
              <actions>
                <include_actions ref="MM__Standard_GM_Event"/>
              </actions>
            </cue>
          </cues>
        </cue>
      </cues>
    </cue>
    <library name="KillShip__Standard_Lib">
      <actions>
        <set_value name="$EnemyFaction" exact="$Definition.$ThreadData.$Faction"/>
        <!--get_ship_definition reference="$ShipReference" faction="$EnemyFaction" size="class.ship_s" tags="[tag.mission, tag.military]"/-->
        <find_ship name="$TargetShip" space="player.galaxy" masstraffic="false" class="[class.ship_s, class.ship_m]" owner="$EnemyFaction"/>
        <do_if value="$TargetShip">
          <add_to_group groupname="$Targets" object="$TargetShip"/>
          <!-- TODO: Set the ship behaviour, see <create_order> -->
          <set_value name="$Valid" exact="2" comment="all fine"/>
        </do_if>
        <do_else>
        </do_else>
      </actions>
    </library>
    <cue name="KillShip__Standard" instantiate="true" namespace="this">
      <conditions>
        <event_cue_signalled/>
        <!--Signal the static cue to trigger a new instance of this mission.
        Signalling a running instance will trigger a followup mission to run its GM library. See XXX_Activate_FollowUp cue for parameters-->
      </conditions>
      <actions>
        <set_value name="$Definition" exact="event.param"/>
        <set_value name="$Page" exact="$Definition.$Page"/>
        <set_value name="$TextOffsets" exact="$Definition.$TextOffset.clone"/>
        <shuffle_list list="$TextOffsets"/>
        <set_value name="$FollowUp" exact="@$Definition.$FollowUp == true" comment="Does this mission follow directly after another, with parameters potentially passing between them. This changes how this mission is spawned and managed."/>
        <set_value name="$SuccessfullyGenerated" exact="false"/>
        <set_value name="$DebugChance" exact="$Definition.$ThreadData.$DebugChance"/>
        <set_value name="$Difficulty" exact="level.medium"/>
        <set_value name="$MissionLevel" exact="1"/>
        <set_value name="$Valid" exact="0"/>
        <assert value="not $FollowUp" text="'This mission does not currently have any parameters where it makes sense as a follow up mission. If there is, adjust the _Activate_FollowUp cue and remove this assert [Owen]'"/>
        <create_group groupname="$Targets"/>
        <do_all exact="$TextOffsets.count" counter="$offset_i">
          <set_value name="$TextOffset" exact="$TextOffsets.{$offset_i}"/>
          <!--This mission is specific enough that it will only run if a matching text offset is found. If not, the offer will abort with an error.
          $Valid:
          0: Page/TextOffset not handled
          1: Correct Page/TextOffset but unable to setup mission
          2: Mission can attempt to be spawned -->
          <set_value name="$Valid" exact="0"/>
          <!--### ARGON VS XENON ###-->
          <do_if value="$Page == 30210">
            <do_if value="$TextOffset == 11000">
              <set_value name="$Valid" exact="1" comment="Valid text offset"/>
              <include_actions ref="KillShip__Standard_Lib"/>
            </do_if>
          </do_if>
          <!--### ARGON VS HOLY ORDER ###-->
          <do_elseif value="$Page == 30211">
            <do_if value="$TextOffset == 11000">
              <include_actions ref="KillShip__Standard_Lib"/>
            </do_if>
          </do_elseif>
          <!--### PARANID VS HOLY ORDER ###-->
          <do_elseif value="$Page == 30212">
            <do_if value="$TextOffset == 11000">
              <include_actions ref="KillShip__Standard_Lib"/>
            </do_if>
          </do_elseif>
          <!--### HOLY ORDER VS ARGON ###-->
          <do_elseif value="$Page == 30213">
            <do_if value="$TextOffset == 11000">
              <include_actions ref="KillShip__Standard_Lib"/>
            </do_if>
          </do_elseif>
          <!--### HOLY ORDER VS PARANID ###-->
          <do_elseif value="$Page == 30214">
            <do_if value="$TextOffset == 11000">
              <include_actions ref="KillShip__Standard_Lib"/>
            </do_if>
          </do_elseif>
          <!--### SPLIT VS ARGON ###-->
          <do_elseif value="$Page == 30215">

          <do_if value="$TextOffset == 11000"><include_actions ref="KillShip__Standard_Lib"/></do_if></do_elseif>
          <!--### DLC2 ###-->
          <do_elseif value="$Page == 30216">

          <do_if value="$TextOffset == 11000"><include_actions ref="KillShip__Standard_Lib"/></do_if></do_elseif>
          <do_if value="$Valid == 0">
            <debug_text text="'Attempting to spawn a mission on ' + this + ' but the combination of Page: ' + $Page + ' and TextOffset: ' + $TextOffset + ' do not match any definitions [Owen]'" filter="error"/>
          </do_if>
          <do_elseif value="$Valid == 2">
            <break/>
          </do_elseif>
        </do_all>
        <do_if value="$Valid == 2">
          <set_value name="$MissionLevel" exact="$Targets.count" operation="add"/>
          <do_if value="$FollowUp">
            <!--Followup missions use the namespace as the mission cue-->
            <set_value name="$MissionCue" exact="namespace"/>
          </do_if>
          <do_else>
            <set_value name="$MissionCue" exact="null"/>
          </do_else>
        </do_if>
        <do_else>
          <do_if value="$Valid == 1">
            <debug_text text="'Unable to find suitable variant variables for mission on ' + this + ' with combination of Page: ' + $Page + ' and TextOffsets: ' + $TextOffsets + '. [Owen]'" chance="$DebugChance"/>
          </do_if>
          <signal_cue cue="$Definition.$SpawnFailedCue"/>
          <cancel_cue cue="this"/>
        </do_else>
      </actions>
      <cues>
        <cue name="KillShip__Standard_FollowUp_Manager" onfail="cancel">
          <conditions>
            <check_value value="$FollowUp"/>
          </conditions>
          <actions>
            <!--If this is going to be a followup mission, first, inform the mission thread manager of this submission so it can be displayed in the offer.-->
            <!--Currently means you need to find the mission name here, instead of relying on the GM itself finding it.-->
            <set_value name="$MissionName" exact="readtext.{$Page}.{$TextOffset + 1}"/>
            <set_value name="$MissionDescription" exact="readtext.{$Page}.{$TextOffset + 2}"/>
            <debug_text text="'Attempting to signal the mission thread that followup mission cue ' + $MissionCue + ' is ready to be added to the offer'" chance="$DebugChance"/>
            <set_value name="$MissionDataTable" exact="table[$Name = $MissionName, $Cue = $MissionCue, $WrapperCue = $MissionCue, $FollowUp = true]"/>
            <signal_cue_instantly cue="$Definition.$SpawnSuccessCue" param="$MissionDataTable"/>
          </actions>
          <cues>
            <cue name="KillShip__Standard_FollowUp_Offer_Accepted">
              <conditions>
                <event_cue_signalled cue="$Definition.$OfferAcceptedCue"/>
                <check_value value="event.param == $MissionCue"/>
              </conditions>
              <actions>
                <!--We don't want to call the GM yet. Create the mission here and pass it into the GM when the previous mission ends
                TODO @Owen Move this to a library in the GM file?-->
                <create_mission cue="$MissionCue" missionthread="$Definition.$ThreadCue" name="$MissionName" description="$MissionDescription" faction="$Definition.$ThreadData.$Faction" type="missiontype.destroy">
                  <briefing>
                    <!--TODO @Owen Better objective?-->
                    <objective step="1" action="objective.destroy"/>
                  </briefing>
                </create_mission>
              </actions>
            </cue>
            <cue name="KillShip__Standard_Aborted">
              <conditions>
                <event_cue_signalled cue="$Definition.$ForceCleanupCue"/>
              </conditions>
              <actions>
                <cancel_cue cue="namespace"/>
              </actions>
            </cue>
            <!--namespace signalled to activate followup mission
            event.param = Station to supply-->
            <cue name="KillShip__Standard_Activate_FollowUp">
              <conditions>
                <event_cue_signalled cue="namespace"/>
              </conditions>
              <actions>
                <!--Check that the correct parameters have been passed-->
                <do_if value="false">
                  <!--Currently no followup case for this type of mission-->
                  <signal_cue cue="KillShip__Standard_Create_GM"/>
                  <cancel_cue cue="parent"/>
                </do_if>
                <do_else>
                  <assert value="false" text="namespace + ' was signalled to start a followup mission, but the passed parameter ' + event.param + ' was not what this mission was expecting. Ending mission.'"/>
                  <!--TODO @Owen what if there is another followup mission?-->
                  <signal_cue_instantly cue="$Definition.$EndedCue" param="namespace"/>
                  <cancel_cue cue="namespace"/>
                </do_else>
              </actions>
            </cue>
          </cues>
        </cue>
        <cue name="KillShip__Standard_Not_FollowUp" onfail="cancel">
          <conditions>
            <check_value value="not $FollowUp"/>
          </conditions>
          <actions>
            <signal_cue cue="KillShip__Standard_Create_GM"/>
          </actions>
        </cue>
        <cue name="KillShip__Standard_Create_GM">
          <conditions>
            <event_cue_signalled/>
          </conditions>
          <cues>
            <!-- Trigger actual GM, passing the specified parameters -->
            <cue name="KillShip__Standard_Ref" ref="md.GM_Destroy_Objects.Start">
              <param name="Client" value="$Definition.$ThreadData.$Contact"/>
              <param name="MissionCue" value="$MissionCue"/>
              <param name="MissionThread" value="$Definition.$ThreadCue"/>
              <param name="ReportSignalCue" value="KillShip__Standard_Event"/>
              <param name="WithoutOffer" value="true"/>
              <param name="WithoutOfferWaitCue" value="if $FollowUp then null else $Definition.$OfferAcceptedCue"/>
              <param name="ForceCleanup" value="$Definition.$ForceCleanupCue"/>
              <param name="Page" value="$Page"/>
              <param name="TextOffset" value="$TextOffset"/>
              <param name="MissionLevel" value="$MissionLevel"/>
              <param name="Difficulty" value="$Difficulty"/>
              <param name="TargetSector" value="$Explosives.{1}.sector.knownname"/>
              <param name="Targets" value="$Targets"/>
              <param name="DebugChance" value="$DebugChance"/>
            </cue>
            <!--Signalled by GM when an event happens e.g. mission successfully generated or mission ended.
            Feedback values saved to the static of this cue: $FeedbackValue and $EndFeedbackValue-->
            <cue name="KillShip__Standard_Event" instantiate="true">
              <conditions>
                <event_cue_signalled/>
              </conditions>
              <actions>
                <include_actions ref="MM__Standard_GM_Event"/>
              </actions>
            </cue>
          </cues>
        </cue>
      </cues>
    </cue>
    <!--Variant Helper Libraries
    Helper libraries to be call from different threads but want to have the same basic variant rules
    If you want to have something custom for a faction e.g. if Vs Xenon, have twice as many enemies, either write your own variant within the cue itself, or modify variables after calling the library-->
    <library name="Find_Resources__Allied_Space_1">
      <!--TODO @Owen @Roger - better list of resources?-->
      <!--Ore, Silicon, Hydrogen-->
      <actions>
        <set_value name="$Spaces" exact="[]"/>
        <do_if value="$Definition.$ThreadData.$WarFront?">
          <do_if value="$Definition.$ThreadData.$WarFront.$HostSectors.keys.count">
            <set_value name="$Spaces" exact="$Definition.$ThreadData.$WarFront.$HostSectors.keys.sorted"/>
            <shuffle_list list="$Spaces" chance="40"/>
          </do_if>
          <do_elseif value="$Definition.$ThreadData.$WarFront.$ContestedSectors.count">
            <set_value name="$Spaces" exact="$Definition.$ThreadData.$WarFront.$ContestedSectors.clone"/>
          </do_elseif>
        </do_if>
        <do_elseif value="$Definition.$ThreadData.$Area?">
          <set_value name="$Spaces" exact="$Definition.$ThreadData.$Area.$HostSectors.clone"/>
        </do_elseif>
        <do_if value="$Spaces.count">
          <set_value name="$ResourceTryList" exact="[ware.ore, ware.silicon, ware.hydrogen]"/>
          <do_all exact="$Spaces.count" counter="$i">
            <set_value name="$Space" exact="$Spaces.{$i}"/>
            <include_actions ref="md.GM_Find_Resources.Check_Space" comment="input: $MissionLevel, $ResourceTryList, $Space; output: $MissionLevel, $ResourceList, $ResourceYieldList, $Valid == 2"/>
            <!-- Check that at least something was found - abort otherwise-->
            <do_if value="$ResourceList.count == 0">
              <debug_text text="'No matching resources found, aborting'" chance="$DebugChance"/>
            </do_if>
            <do_else>
              <set_value name="$Difficulty" exact="level.veryeasy"/>
              <set_value name="$Valid" exact="2"/>
              <break/>
            </do_else>
          </do_all>
        </do_if>
      </actions>
    </library>
    <library name="Find_Resources__Enemy_Space_1">
      <!--TODO @Owen @Roger - better list of resources?-->
      <!--Ore, Silicon, Hydrogen-->
      <actions>
        <do_if value="$Definition.$ThreadData.$WarFront?">
          <set_value name="$Spaces" exact="$Definition.$ThreadData.$WarFront.$EnemySectors.keys.sorted"/>
          <shuffle_list list="$Spaces" chance="40"/>
        </do_if>
        <do_elseif value="$Definition.$ThreadData.$Area">
          <set_value name="$Spaces" exact="$Definition.$ThreadData.$Area.$EnemySectors.clone"/>
          <shuffle_list list="$Spaces"/>
        </do_elseif>
        <set_value name="$ResourceTryList" exact="[ware.ore, ware.silicon, ware.hydrogen]"/>
        <do_all exact="$Spaces.count" counter="$i">
          <set_value name="$Space" exact="$Spaces.{$i}"/>
          <include_actions ref="md.GM_Find_Resources.Check_Space" comment="input: $MissionLevel, $ResourceTryList, $Space; output: $MissionLevel, $ResourceList, $ResourceYieldList, $Valid == 2"/>
          <!-- Check that at least something was found - abort otherwise-->
          <do_if value="$ResourceList.count == 0">
            <debug_text text="'No matching resources found, aborting'" chance="$DebugChance"/>
          </do_if>
          <do_else>
            <set_value name="$Difficulty" exact="level.easy"/>
            <set_value name="$Valid" exact="2"/>
            <break/>
          </do_else>
        </do_all>
      </actions>
    </library>
    <cue name="Find_Resources__Standard" instantiate="true" namespace="this">
      <conditions>
        <event_cue_signalled/>
        <!--Signal the static cue to trigger a new instance of this mission.
        Signalling a running instance will trigger a followup mission to run its GM library. See XXX_Activate_FollowUp cue for parameters-->
      </conditions>
      <actions>
        <set_value name="$Definition" exact="event.param"/>
        <set_value name="$Page" exact="$Definition.$Page"/>
        <set_value name="$TextOffsets" exact="$Definition.$TextOffset.clone"/>
        <shuffle_list list="$TextOffsets"/>
        <set_value name="$FollowUp" exact="@$Definition.$FollowUp == true" comment="Does this mission follow directly after another, with parameters potentially passing between them. This changes how this mission is spawned and managed."/>
        <set_value name="$SuccessfullyGenerated" exact="false"/>
        <set_value name="$DebugChance" exact="$Definition.$ThreadData.$DebugChance"/>
        <set_value name="$Difficulty" exact="level.veryeasy" comment="Might be altered by Find_Resources__Allied_Space_1 and Find_Resources__Enemy_Space_1."/>
        <set_value name="$MissionLevel" exact="1"/>
        <assert value="not $FollowUp" text="'This mission does not currently have any parameters where it makes sense as a follow up mission. If there is, adjust the _Activate_FollowUp cue and remove this assert [Owen]'"/>
        <do_all exact="$TextOffsets.count" counter="$offset_i">
          <set_value name="$TextOffset" exact="$TextOffsets.{$offset_i}"/>
          <!--This mission is specific enough that it will only run if a matching text offset is found. If not, the offer will abort with an error.
          $Valid:
          0: Page/TextOffset not handled
          1: Correct Page/TextOffset but unable to setup mission
          2: Mission can attempt to be spawned -->
          <set_value name="$Valid" exact="0"/>
          <!--### ARGON VS XENON ###-->
          <do_if value="$Page == 30210">
            <!-- Setup what resources we suggest to look for depending on the mission-variation/text -->
            <do_if value="$TextOffset == 106000">
              <set_value name="$Valid" exact="1" comment="Valid text offset"/>
              <include_actions ref="Find_Resources__Allied_Space_1"/>
            </do_if>
            <do_elseif value="$TextOffset == 106100">
              <set_value name="$Valid" exact="1" comment="Valid text offset"/>
              <include_actions ref="Find_Resources__Enemy_Space_1"/>
            </do_elseif>
          </do_if>
          <!--### ARGON VS HOLY ORDER ###-->
          <do_elseif value="$Page == 30211">
            <do_if value="$TextOffset == 106000">
              <set_value name="$Valid" exact="1" comment="Valid text offset"/>
              <include_actions ref="Find_Resources__Allied_Space_1"/>
            </do_if>
            <do_elseif value="$TextOffset == 106100">
              <set_value name="$Valid" exact="1" comment="Valid text offset"/>
              <include_actions ref="Find_Resources__Enemy_Space_1"/>
            </do_elseif>
          </do_elseif>
          <!--### PARANID VS HOLY ORDER ###-->
          <do_elseif value="$Page == 30212">
            <do_if value="$TextOffset == 106000">
              <set_value name="$Valid" exact="1" comment="Valid text offset"/>
              <include_actions ref="Find_Resources__Allied_Space_1"/>
            </do_if>
            <do_elseif value="$TextOffset == 106100">
              <set_value name="$Valid" exact="1" comment="Valid text offset"/>
              <include_actions ref="Find_Resources__Enemy_Space_1"/>
            </do_elseif>
          </do_elseif>
          <!--### HOLY ORDER VS ARGON ###-->
          <do_elseif value="$Page == 30213">
            <do_if value="$TextOffset == 106000">
              <set_value name="$Valid" exact="1" comment="Valid text offset"/>
              <include_actions ref="Find_Resources__Allied_Space_1"/>
            </do_if>
            <do_elseif value="$TextOffset == 106100">
              <set_value name="$Valid" exact="1" comment="Valid text offset"/>
              <include_actions ref="Find_Resources__Enemy_Space_1"/>
            </do_elseif>
          </do_elseif>
          <!--### HOLY ORDER VS PARANID ###-->
          <do_elseif value="$Page == 30214">
            <do_if value="$TextOffset == 106000">
              <set_value name="$Valid" exact="1" comment="Valid text offset"/>
              <include_actions ref="Find_Resources__Allied_Space_1"/>
            </do_if>
            <do_elseif value="$TextOffset == 106100">
              <set_value name="$Valid" exact="1" comment="Valid text offset"/>
              <include_actions ref="Find_Resources__Enemy_Space_1"/>
            </do_elseif>
          </do_elseif>
          <!--### SPLIT VS ARGON ###-->
          <do_elseif value="$Page == 30215">

          <do_if value="$TextOffset == 106000"><set_value name="$Valid" exact="1" comment="Valid text offset"/><include_actions ref="Find_Resources__Allied_Space_1"/></do_if><do_elseif value="$TextOffset == 106100"><set_value name="$Valid" exact="1" comment="Valid text offset"/><include_actions ref="Find_Resources__Enemy_Space_1"/></do_elseif></do_elseif>
          <!--### DLC 2 Setup ###-->
          <do_elseif value="$Page == 30216">

          <do_if value="$TextOffset == 106000"><set_value name="$Valid" exact="1" comment="Valid text offset"/><include_actions ref="Find_Resources__Allied_Space_1"/></do_if><do_elseif value="$TextOffset == 106100"><set_value name="$Valid" exact="1" comment="Valid text offset"/><include_actions ref="Find_Resources__Enemy_Space_1"/></do_elseif></do_elseif>
          <do_if value="$Valid == 0">
            <debug_text text="'Attempting to spawn a mission on ' + this + ' but the combination of Page: ' + $Page + ' and TextOffset: ' + $TextOffset + ' do not match any definitions [Owen]'" filter="error"/>
          </do_if>
          <do_elseif value="$Valid == 2">
            <break/>
          </do_elseif>
        </do_all>
        <do_if value="$Valid == 2">
          <run_actions ref="md.LIB_Generic.SectorDifficultyBalance" result="$Difficulty">
            <param name="MissionTargetSector" value="$Space"/>
            <param name="Difficulty" value="$Difficulty"/>
          </run_actions>
          <do_if value="$FollowUp">
            <!--Followup missions use the namespace as the mission cue-->
            <set_value name="$MissionCue" exact="namespace"/>
          </do_if>
          <do_else>
            <set_value name="$MissionCue" exact="null"/>
          </do_else>
        </do_if>
        <do_else>
          <do_if value="$Valid == 1">
            <debug_text text="'Unable to find suitable variant variables for mission on ' + this + ' with combination of Page: ' + $Page + ' and TextOffsets: ' + $TextOffsets + '. [Owen]'" chance="$DebugChance"/>
          </do_if>
          <signal_cue cue="$Definition.$SpawnFailedCue"/>
          <cancel_cue cue="this"/>
        </do_else>
      </actions>
      <cues>
        <cue name="Find_Resources__Standard_FollowUp_Manager" onfail="cancel">
          <conditions>
            <check_value value="$FollowUp"/>
          </conditions>
          <actions>
            <!--If this is going to be a followup mission, first, inform the mission thread manager of this submission so it can be displayed in the offer.-->
            <!--Currently means you need to find the mission name here, instead of relying on the GM itself finding it.-->
            <set_value name="$MissionName" exact="readtext.{$Page}.{$TextOffset + 1}"/>
            <set_value name="$MissionDescription" exact="readtext.{$Page}.{$TextOffset + 2}"/>
            <debug_text text="'Attempting to signal the mission thread that followup mission cue ' + $MissionCue + ' is ready to be added to the offer'" chance="$DebugChance"/>
            <set_value name="$MissionDataTable" exact="table[$Name = $MissionName, $Cue = $MissionCue, $WrapperCue = $MissionCue, $FollowUp = true]"/>
            <signal_cue_instantly cue="$Definition.$SpawnSuccessCue" param="$MissionDataTable"/>
          </actions>
          <cues>
            <cue name="Find_Resources__Standard_FollowUp_Offer_Accepted">
              <conditions>
                <event_cue_signalled cue="$Definition.$OfferAcceptedCue"/>
                <check_value value="event.param == $MissionCue"/>
              </conditions>
              <actions>
                <!--We don't want to call the GM yet. Create the mission here and pass it into the GM when the previous mission ends
                TODO @Owen Move this to a library in the GM file?-->
                <create_mission cue="$MissionCue" missionthread="$Definition.$ThreadCue" name="$MissionName" description="$MissionDescription" faction="$Definition.$ThreadData.$Faction" type="missiontype.deliver">
                  <briefing>
                    <!--TODO @Owen Better objective?-->
                    <objective step="1" action="objective.find"/>
                  </briefing>
                </create_mission>
              </actions>
            </cue>
            <cue name="Find_Resources__Standard_Aborted">
              <conditions>
                <event_cue_signalled cue="$Definition.$ForceCleanupCue"/>
              </conditions>
              <actions>
                <cancel_cue cue="namespace"/>
              </actions>
            </cue>
            <!--namespace signalled to activate followup mission
            event.param = Station to supply-->
            <cue name="Find_Resources__Standard_Activate_FollowUp">
              <conditions>
                <event_cue_signalled cue="namespace"/>
              </conditions>
              <actions>
                <!--Check that the correct parameters have been passed-->
                <do_if value="false">
                  <!--Currently no followup case for this type of mission-->
                  <signal_cue cue="Find_Resources__Standard_Create_GM"/>
                  <cancel_cue cue="parent"/>
                </do_if>
                <do_else>
                  <assert value="false" text="namespace + ' was signalled to start a followup mission, but the passed parameter ' + event.param + ' was not what this mission was expecting. Ending mission.'"/>
                  <!--TODO @Owen what if there is another followup mission?-->
                  <signal_cue_instantly cue="$Definition.$EndedCue" param="namespace"/>
                  <cancel_cue cue="namespace"/>
                </do_else>
              </actions>
            </cue>
          </cues>
        </cue>
        <cue name="Find_Resources__Standard_Not_FollowUp" onfail="cancel">
          <conditions>
            <check_value value="not $FollowUp"/>
          </conditions>
          <actions>
            <signal_cue cue="Find_Resources__Standard_Create_GM"/>
          </actions>
        </cue>
        <cue name="Find_Resources__Standard_Create_GM">
          <conditions>
            <event_cue_signalled/>
          </conditions>
          <cues>
            <!-- Trigger actual GM, passing the specified parameters -->
            <cue name="Find_Resources__Standard_Ref" ref="md.GM_Find_Resources.Start">
              <param name="Client" value="$Definition.$ThreadData.$Contact"/>
              <param name="MissionCue" value="$MissionCue"/>
              <param name="MissionThread" value="$Definition.$ThreadCue"/>
              <param name="ReportSignalCue" value="Find_Resources__Standard_GM_Event" comment="tell GM to call this cue when done"/>
              <param name="WithoutOffer" value="true"/>
              <param name="WithoutOfferWaitCue" value="if $FollowUp then null else $Definition.$OfferAcceptedCue"/>
              <param name="ForceCleanup" value="$Definition.$ForceCleanupCue"/>
              <param name="Page" value="$Page"/>
              <param name="TextOffset" value="$TextOffset"/>
              <param name="MissionLevel" value="$MissionLevel"/>
              <param name="Difficulty" value="$Difficulty"/>
              <param name="FindArea" value="$Space"/>
              <param name="ResourceList" value="$ResourceList"/>
              <param name="ResourceYieldList" value="$ResourceYieldList"/>
              <param name="DebugChance" value="$DebugChance"/>
            </cue>
            <!--Signalled by GM when an event happens e.g. mission successfully generated or mission ended.
            Feedback values saved to the static of this cue: $FeedbackValue and $EndFeedbackValue-->
            <cue name="Find_Resources__Standard_GM_Event" instantiate="true">
              <conditions>
                <event_cue_signalled/>
              </conditions>
              <actions>
                <include_actions ref="MM__Standard_GM_Event"/>
              </actions>
            </cue>
          </cues>
        </cue>
      </cues>
    </cue>
    <!--Variant Helper Libraries
    Helper libraries to be call from different threads but want to have the same basic variant rules
    If you want to have something custom for a faction e.g. if Vs Xenon, have twice as many enemies, either write your own variant within the cue itself, or modify variables after calling the library-->
    <library name="RepairObject__Allied_Job_Ship">
      <actions>
        <create_group groupname="$TargetObjects"/>
        <set_value name="$DamagedShips" exact="[]"/>
        <set_value name="$PotentialLocations" exact="null"/>
        <do_if value="$Definition.$ThreadData.$WarFront?">
          <do_if value="$Definition.$ThreadData.$WarFront.$HostSectors.keys.count">
            <set_value name="$PotentialLocations" exact="$Definition.$ThreadData.$WarFront.$HostSectors.keys.sorted"/>
          </do_if>
          <do_elseif value="$Definition.$ThreadData.$WarFront.$ContestedSectors.count">
            <set_value name="$PotentialLocations" exact="$Definition.$ThreadData.$WarFront.$ContestedSectors.clone"/>
          </do_elseif>
        </do_if>
        <do_elseif value="$Definition.$ThreadData.$Area">
          <set_value name="$PotentialLocations" exact="$Definition.$ThreadData.$Area.$EnemySectors.clone"/>
          <append_list_elements name="$PotentialLocations" other="$Definition.$ThreadData.$Area.$EntryPointSectors"/>
          <shuffle_list list="$PotentialLocations"/>
        </do_elseif>
        <do_if value="$PotentialLocations">
          <do_while value="$PotentialLocations.count and not $DamagedShips.count">
            <do_any>
              <set_value name="$PotentialLocation" exact="$PotentialLocations.{1}" weight="50"/>
              <set_value name="$PotentialLocation" exact="$PotentialLocations.random" weight="20"/>
            </do_any>
            <!--<find_ship name="$TestDamageShips" commandeerable="true" primarypurpose="purpose.fight" owner="$Definition.$ThreadData.$Faction" space="$PotentialLocation" multiple="true"/>
            <do_all exact="$TestDamageShips.count" counter="$i">
              <set_object_hull object="$TestDamageShips.{$i}" min="87" max="88"/>
            </do_all>-->
            <!--Find a damaged ship which could be commandeered-->
            <find_ship_by_true_owner name="$PotentialDamagedShips" commandeerable="true" covered="false" primarypurpose="purpose.fight" faction="$Definition.$ThreadData.$Faction" space="$PotentialLocation" multiple="true">
              <match_hull max="89"/>
              <match_shield exact="100" comment="try to find ones not currently in battle (although that can change at any time)"/>
            </find_ship_by_true_owner>
            <do_if value="$PotentialDamagedShips.count">
              <set_value name="$DamagedShips" exact="$PotentialDamagedShips"/>
              <break/>
            </do_if>
            <do_else>
              <remove_from_list name="$PotentialLocations" exact="$PotentialLocation"/>
            </do_else>
          </do_while>
        </do_if>
        <do_if value="$DamagedShips.count">
          <set_value name="$MaxValue" exact="3"/>
          <do_if value="$DamagedShips.count lt 3">
            <set_value name="$MaxValue" exact="$DamagedShips.count"/>
          </do_if>
          <do_all min="1" max="$MaxValue" reverse="true">
            <set_value name="$RandomShip" exact="$DamagedShips.random"/>
            <remove_from_list name="$DamagedShips" exact="$RandomShip"/>
            <add_to_group groupname="$TargetObjects" object="$RandomShip"/>
            <set_value name="$RepairPercentage" exact="90"/>
            <do_if value="$RandomShip.isclass.ship_xl or $RandomShip.isclass.ship_l">
              <set_value name="$MissionLevel" operation="add" exact="6"/>
              <break/>
            </do_if>
          </do_all>
          <set_value name="$MissionLevel" operation="add" exact="$TargetObjects.count"/>
          <!--TODO @Owen select sub-components-->
          <do_if value="$TargetObjects.count">
            <set_value name="$Valid" exact="2" comment="Valid mission variables"/>
          </do_if>
        </do_if>
      </actions>
    </library>
    <cue name="RepairObject__Standard" instantiate="true" namespace="this">
      <conditions>
        <event_cue_signalled/>
        <!--Signal the static cue to trigger a new instance of this mission.
        Signalling a running instance will trigger a followup mission to run its GM library. See XXX_Activate_FollowUp cue for parameters-->
      </conditions>
      <actions>
        <set_value name="$Definition" exact="event.param"/>
        <set_value name="$Page" exact="$Definition.$Page"/>
        <set_value name="$TextOffsets" exact="$Definition.$TextOffset.clone"/>
        <shuffle_list list="$TextOffsets"/>
        <set_value name="$FollowUp" exact="@$Definition.$FollowUp == true" comment="Does this mission follow directly after another, with parameters potentially passing between them. This changes how this mission is spawned and managed."/>
        <set_value name="$SuccessfullyGenerated" exact="false"/>
        <set_value name="$DebugChance" exact="$Definition.$ThreadData.$DebugChance"/>
        <set_value name="$Difficulty" exact="level.easy" comment="There's probably a reason why the ship got damaged."/>
        <set_value name="$MissionLevel" exact="1"/>
        <assert value="not $FollowUp" text="'This mission does not currently have any parameters where it makes sense as a follow up mission. If there is, adjust the _Activate_FollowUp cue and remove this assert [Owen]'"/>
        <do_all exact="$TextOffsets.count" counter="$offset_i">
          <set_value name="$TextOffset" exact="$TextOffsets.{$offset_i}"/>
          <!--This mission is specific enough that it will only run if a matching text offset is found. If not, the offer will abort with an error.
          $Valid:
          0: Page/TextOffset not handled
          1: Correct Page/TextOffset but unable to setup mission
          2: Mission can attempt to be spawned -->
          <set_value name="$Valid" exact="0"/>
          <!--### ARGON VS XENON ###-->
          <do_if value="$Page == 30210">
            <do_if value="$TextOffset == 103000 or $TextOffset == 103100">
              <set_value name="$Valid" exact="1" comment="Valid text offset"/>
              <include_actions ref="RepairObject__Allied_Job_Ship"/>
            </do_if>
          </do_if>
          <!--### ARGON VS HOLY ORDER ###-->
          <do_elseif value="$Page == 30211">
            <do_if value="$TextOffset == 103000 or $TextOffset == 103100">
              <set_value name="$Valid" exact="1" comment="Valid text offset"/>
              <include_actions ref="RepairObject__Allied_Job_Ship"/>
            </do_if>
          </do_elseif>
          <!--### PARANID VS HOLY ORDER ###-->
          <do_elseif value="$Page == 30212">
            <do_if value="$TextOffset == 103000 or $TextOffset == 103100">
              <set_value name="$Valid" exact="1" comment="Valid text offset"/>
              <include_actions ref="RepairObject__Allied_Job_Ship"/>
            </do_if>
          </do_elseif>
          <!--### HOLY ORDER VS ARGON ###-->
          <do_elseif value="$Page == 30213">
            <do_if value="$TextOffset == 103000 or $TextOffset == 103100">
              <set_value name="$Valid" exact="1" comment="Valid text offset"/>
              <include_actions ref="RepairObject__Allied_Job_Ship"/>
            </do_if>
          </do_elseif>
          <!--### HOLY ORDER VS PARANID ###-->
          <do_elseif value="$Page == 30214">
            <do_if value="$TextOffset == 103000 or $TextOffset == 103100">
              <set_value name="$Valid" exact="1" comment="Valid text offset"/>
              <include_actions ref="RepairObject__Allied_Job_Ship"/>
            </do_if>
          </do_elseif>
          <!--### SPLIT VS ARGON ###-->
          <do_elseif value="$Page == 30215">

          <do_if value="$TextOffset == 103000 or $TextOffset == 103100"><set_value name="$Valid" exact="1" comment="Valid text offset"/><include_actions ref="RepairObject__Allied_Job_Ship"/></do_if></do_elseif>
          <!--### DLC 2 Setup ###-->
          <do_elseif value="$Page == 30216">

          <do_if value="$TextOffset == 103000 or $TextOffset == 103100"><set_value name="$Valid" exact="1" comment="Valid text offset"/><include_actions ref="RepairObject__Allied_Job_Ship"/></do_if></do_elseif>
          <do_if value="$Valid == 0">
            <debug_text text="'Attempting to spawn a mission on ' + this + ' but the combination of Page: ' + $Page + ' and TextOffset: ' + $TextOffset + ' do not match any definitions [Owen]'" filter="error"/>
          </do_if>
          <do_elseif value="$Valid == 2">
            <break/>
          </do_elseif>
        </do_all>
        <do_if value="$Valid == 2">
          <do_if value="$FollowUp">
            <!--Followup missions use the namespace as the mission cue-->
            <set_value name="$MissionCue" exact="namespace"/>
          </do_if>
          <do_else>
            <set_value name="$MissionCue" exact="null"/>
          </do_else>
        </do_if>
        <do_else>
          <do_if value="$Valid == 1">
            <debug_text text="'Unable to find suitable variant variables for mission on ' + this + ' with combination of Page: ' + $Page + ' and TextOffsets: ' + $TextOffsets + '. [Owen]'" chance="$DebugChance"/>
          </do_if>
          <signal_cue cue="$Definition.$SpawnFailedCue"/>
          <cancel_cue cue="this"/>
        </do_else>
      </actions>
      <cues>
        <cue name="RepairObject__Standard_FollowUp_Manager" onfail="cancel">
          <conditions>
            <check_value value="$FollowUp"/>
          </conditions>
          <actions>
            <!--If this is going to be a followup mission, first, inform the mission thread manager of this submission so it can be displayed in the offer.-->
            <!--Currently means you need to find the mission name here, instead of relying on the GM itself finding it.-->
            <set_value name="$MissionName" exact="readtext.{$Page}.{$TextOffset + 1}"/>
            <set_value name="$MissionDescription" exact="readtext.{$Page}.{$TextOffset + 2}"/>
            <debug_text text="'Attempting to signal the mission thread that followup mission cue ' + $MissionCue + ' is ready to be added to the offer'" chance="$DebugChance"/>
            <set_value name="$MissionDataTable" exact="table[$Name = $MissionName, $Cue = $MissionCue, $WrapperCue = $MissionCue, $FollowUp = true]"/>
            <signal_cue_instantly cue="$Definition.$SpawnSuccessCue" param="$MissionDataTable"/>
          </actions>
          <cues>
            <cue name="RepairObject__Standard_FollowUp_Offer_Accepted">
              <conditions>
                <event_cue_signalled cue="$Definition.$OfferAcceptedCue"/>
                <check_value value="event.param == $MissionCue"/>
              </conditions>
              <actions>
                <!--We don't want to call the GM yet. Create the mission here and pass it into the GM when the previous mission ends
                TODO @Owen Move this to a library in the GM file?-->
                <create_mission cue="$MissionCue" missionthread="$Definition.$ThreadCue" name="$MissionName" description="$MissionDescription" faction="$Definition.$ThreadData.$Faction" type="missiontype.repair">
                  <briefing>
                    <!--TODO @Owen Better objective?-->
                    <objective step="1" action="objective.repair"/>
                  </briefing>
                </create_mission>
              </actions>
            </cue>
            <cue name="RepairObject__Standard_Aborted">
              <conditions>
                <event_cue_signalled cue="$Definition.$ForceCleanupCue"/>
              </conditions>
              <actions>
                <cancel_cue cue="namespace"/>
              </actions>
            </cue>
            <!--namespace signalled to activate followup mission
            event.param = Station to supply-->
            <cue name="RepairObject__Standard_Activate_FollowUp">
              <conditions>
                <event_cue_signalled cue="namespace"/>
              </conditions>
              <actions>
                <!--Check that the correct parameters have been passed-->
                <do_if value="false">
                  <!--Currently no followup case for this type of mission-->
                  <signal_cue cue="RepairObject__Standard_Create_GM"/>
                  <cancel_cue cue="parent"/>
                </do_if>
                <do_else>
                  <assert value="false" text="namespace + ' was signalled to start a followup mission, but the passed parameter ' + event.param + ' was not what this mission was expecting. Ending mission.'"/>
                  <!--TODO @Owen what if there is another followup mission?-->
                  <signal_cue_instantly cue="$Definition.$EndedCue" param="namespace"/>
                  <cancel_cue cue="namespace"/>
                </do_else>
              </actions>
            </cue>
          </cues>
        </cue>
        <cue name="RepairObject__Standard_Not_FollowUp" onfail="cancel">
          <conditions>
            <check_value value="not $FollowUp"/>
          </conditions>
          <actions>
            <signal_cue cue="RepairObject__Standard_Create_GM"/>
          </actions>
        </cue>
        <cue name="RepairObject__Standard_Create_GM">
          <conditions>
            <event_cue_signalled/>
          </conditions>
          <cues>
            <cue name="RepairObject__Standard_Ref" ref="md.GM_RepairObject.Start">
              <param name="Client" value="$Definition.$ThreadData.$Contact"/>
              <param name="MissionCue" value="$MissionCue"/>
              <param name="MissionThread" value="$Definition.$ThreadCue"/>
              <param name="ReportSignalCue" value="RepairObject__Standard_GM_Event"/>
              <param name="WithoutOffer" value="true"/>
              <param name="WithoutOfferWaitCue" value="if $FollowUp then null else $Definition.$OfferAcceptedCue"/>
              <param name="ForceCleanup" value="$Definition.$ForceCleanupCue"/>
              <param name="Page" value="$Page"/>
              <param name="TextOffset" value="$TextOffset"/>
              <param name="MissionLevel" value="$MissionLevel"/>
              <param name="Difficulty" value="$Difficulty"/>
              <param name="Targets" value="$TargetObjects"/>
              <param name="RepairPercentage" value="$RepairPercentage"/>
              <param name="DebugChance" value="$DebugChance"/>
            </cue>
            <!--Signalled by GM when an event happens e.g. mission successfully generated or mission ended.
            Feedback values saved to the static of this cue: $FeedbackValue and $EndFeedbackValue-->
            <cue name="RepairObject__Standard_GM_Event" instantiate="true">
              <conditions>
                <event_cue_signalled/>
              </conditions>
              <actions>
                <do_if value="@static.$EndFeedbackValue" comment="Evaluate return-value of GM (success/failure)">
                  <debug_text text="'Mission ended. feedback' + static.$EndFeedbackValue" chance="$DebugChance"/>
                  <do_if value="$SuccessfullyGenerated">
                    <signal_cue_instantly cue="$Definition.$EndedCue" param="namespace"/>
                  </do_if>
                  <do_else>
                    <signal_cue_instantly cue="$Definition.$SpawnFailedCue"/>
                  </do_else>
                  <!-- handle EndFeedbackValue of the GM -->
                  <do_if value="static.$EndFeedbackValue.$ID" exact="'$MISSION_SUCCEEDED'" comment="see the $FeedbackValues table in the Generic Mission">
                    <do_if value="@$MissionDataTable.$NextMission">
                      <do_if value="false" comment="Forced failure as there are no valid NextMission cases defined for this mission. Replace with valid case if needed.">

                      </do_if>
                      <do_else>
                        <!--If there is a followup mission, signal it with whatever parameters it needs-->
                        <assert value="false" text="'Next mission ' + $MissionDataTable.$NextMission + ' is missing handling in ' + namespace + '. It should be explicitly signalled with whatever parameters it requires. [Owen]'"/>
                      </do_else>
                    </do_if>
                  </do_if>
                  <do_elseif value="static.$EndFeedbackValue.$ID" exact="'$MISSION_TIMEOUT'">
                  </do_elseif>
                </do_if>
                <do_elseif value="@static.$FeedbackValue">
                  <debug_text text="'Mission signalled with feedback' + static.$FeedbackValue" chance="$DebugChance"/>
                  <do_if value="static.$FeedbackValue.$ID == '$MISSION_GENERATED'">
                    <!--If a followup mission, no need to inform the Mission Thread Manager of the mission successfully being generated as $Definition.$SpawnSuccessCue was already called for this mission-->
                    <do_if value="not $FollowUp">
                      <set_value name="$MissionDataTable" exact="event.param.clone"/>
                      <set_value name="$MissionDataTable.$WrapperCue" exact="namespace"/>
                      <signal_cue_instantly cue="$Definition.$SpawnSuccessCue" param="$MissionDataTable"/>
                    </do_if>
                    <set_value name="$SuccessfullyGenerated" exact="true"/>
                  </do_if>
                </do_elseif>
              </actions>
              <cues>
                <cue name="RepairObject__Standard_GM_Event_Cleanup" onfail="cancel">
                  <conditions>
                    <check_value value="@static.$EndFeedbackValue"/>
                  </conditions>
                  <actions>
                    <!--Delayed cleanup to allow other sections to perform their actions-->
                    <cancel_cue cue="namespace"/>
                  </actions>
                </cue>
              </cues>
            </cue>
            <!--Specialised cue to handle the variant of damaged ships. Outside of the GM to reduce bloat.
            Ships will be commandeered, given an order to wait in a certain location. On the mission ending, it will be released.-->
            <cue name="RepairObject__Standard_Manage_Damaged_Ships">
              <conditions>
                <event_cue_signalled cue="RepairObject__Standard_GM_Event"/>
                <check_value value="$Page == 30211 and $TextOffset == 103000"/>
                <check_value value="not @RepairObject__Standard_GM_Event.$EndFeedbackValue" comment="GM has not ended"/>
                <check_value value="@RepairObject__Standard_GM_Event.$FeedbackValue and RepairObject__Standard_GM_Event.$FeedbackValue.$ID == '$mission_generated'" comment="GM has been successfully generated"/>
              </conditions>
              <actions>
                <create_group groupname="this.$Commandeered"/>
                <do_all exact="$TargetObjects.count" counter="$i">
                  <do_if value="$TargetObjects.{$i}.isclass.ship">
                    <assert value="$TargetObjects.{$i}.iscommandeerable" text="'Ship ' + $TargetObjects.{$i} + ' ' + $TargetObjects.{$i}.knownname + ' is not commandeerable and may wander off during the mission [Owen]'"/>
                    <do_if value="$TargetObjects.{$i}.iscommandeerable">
                      <debug_text text="'Commandeering ship ' + $TargetObjects.{$i} + ' ' + $TargetObjects.{$i}.knownname" chance="$DebugChance"/>
                      <commandeer_object object="$TargetObjects.{$i}"/>
                      <add_to_group groupname="this.$Commandeered" object="$TargetObjects.{$i}"/>
                      <cancel_all_orders object="$TargetObjects.{$i}"/>
                      <create_order id="'Wait'" object="$TargetObjects.{$i}" default="true">
                        <param name="debugchance" value="$DebugChance"/>
                      </create_order>
                    </do_if>
                  </do_if>
                </do_all>
              </actions>
              <cues>
                <cue name="RepairObject__Standard_Manage_Damaged_Ships_GM_Ended">
                  <conditions>
                    <event_cue_signalled cue="RepairObject__Standard_GM_Event"/>
                    <check_value value="@RepairObject__Standard_GM_Event.$EndFeedbackValue" comment="GM has ended"/>
                  </conditions>
                  <actions>
                    <debug_text text="'meh ' + RepairObject__Standard_GM_Event.$EndFeedbackValue"/>
                    <do_all exact="parent.$Commandeered.count" counter="$i">
                      <debug_text text="'Releasing commandeered ship ' + parent.$Commandeered.{$i} + ' ' + parent.$Commandeered.{$i}.knownname" chance="$DebugChance"/>
                      <release_commandeered_object object="parent.$Commandeered.{$i}"/>
                    </do_all>
                  </actions>
                </cue>
              </cues>
            </cue>
          </cues>
        </cue>
      </cues>
    </cue>
    <!--Variant Helper Libraries
    Helper libraries to be call from different threads but want to have the same basic variant rules
    If you want to have something custom for a faction e.g. if Vs Xenon, have twice as many enemies, either write your own variant within the cue itself, or modify variables after calling the library-->
    <library name="Assassinate__Enemy_S_M_Ship">
      <actions>
        <do_if value="$Definition.$ThreadData.$WarFront?">
          <do_if value="$Definition.$ThreadData.$WarFront.$EnemySectors.keys.count">
            <do_any>
              <set_value name="$Space" exact="$Definition.$ThreadData.$WarFront.$EnemySectors.keys.sorted.{1}"/>
              <set_value name="$Space" exact="$Definition.$ThreadData.$WarFront.$EnemySectors.keys.random"/>
            </do_any>
          </do_if>
          <do_elseif value="$Definition.$ThreadData.$WarFront.$ContestedSectors.count">
            <set_value name="$Space" exact="$Definition.$ThreadData.$WarFront.$ContestedSectors.random"/>
          </do_elseif>
          <do_else>
            <set_value name="$Space" exact="player.sector"/>
          </do_else>
        </do_if>
        <do_elseif value="$Definition.$ThreadData.$Area?">
          <do_if value="$Definition.$ThreadData.$Area.$EnemySectors.count">
            <set_value name="$Space" exact="$Definition.$ThreadData.$Area.$EnemySectors.random"/>
          </do_if>
        </do_elseif>
        <do_if value="$Space">
          <find_ship_by_true_owner name="$TargetShip" faction="$Definition.$ThreadData.$EnemyFaction" unit="false" class="[class.ship_s, class.ship_m]" covered="false" hascommander="false" space="$Space"/>
          <do_if value="$TargetShip">
            <do_if value="$TargetShip.isclass.ship_m">
              <set_value name="$MissionLevel" exact="4" operation="add"/>
            </do_if>
            <set_value name="$Valid" exact="2" comment="Valid mission variables"/>
          </do_if>
        </do_if>
        <remove_value name="$Space"/>
      </actions>
    </library>
    <!--Find a target not of the enemy faction. To make it easier on the player, try to select a target they already have poor relations with-->
    <library name="Assassinate__NonAlly_S_M_Ship">
      <actions>
        <set_value name="$AnchorSector" exact="null"/>
        <do_if value="$Definition.$ThreadData.$WarFront?">
          <do_if value="$Definition.$ThreadData.$WarFront.$EnemySectors.keys.count">
            <set_value name="$AnchorSector" exact="$Definition.$ThreadData.$WarFront.$EnemySectors.keys.random"/>
          </do_if>
          <do_elseif value="$Definition.$ThreadData.$WarFront.$ContestedSectors.count">
            <set_value name="$AnchorSector" exact="$Definition.$ThreadData.$WarFront.$ContestedSectors.random"/>
          </do_elseif>
        </do_if>
        <do_elseif value="$Definition.$ThreadData.$Area?">
          <do_if value="$Definition.$ThreadData.$Area.$EntryPointSectors.count">
            <set_value name="$AnchorSector" exact="$Definition.$ThreadData.$Area.$EntryPointSectors.random"/>
          </do_if>
        </do_elseif>
        <do_if value="not $AnchorSector">
          <set_value name="$AnchorSector" exact="player.sector"/>
        </do_if>
        <do_if value="$AnchorSector">
          <set_value name="$TargetShip" exact="null"/>
          <find_cluster_in_range name="$NearClusters" object="$AnchorSector" maxdistance="2" multiple="true"/>
          <shuffle_list list="$NearClusters"/>
          <do_for_each name="$NearCluster" in="$NearClusters">
            <find_ship name="$TargetShip" owner="[$Definition.$ThreadData.$Faction, $Definition.$ThreadData.$EnemyFaction, faction.player]" negateownerfilter="true" unit="false" class="[class.ship_s, class.ship_m]" covered="false" hascommander="false" space="$NearCluster">
              <match_relation_to faction="faction.player" relation="enemy"/>
              <match_relation_to faction="$Definition.$ThreadData.$Faction" comparison="not" relation="friend"/>
            </find_ship>
            <do_if value="$TargetShip">
              <break/>
            </do_if>
          </do_for_each>
          <do_if value="$TargetShip">
            <do_if value="$TargetShip.isclass.ship_m">
              <set_value name="$MissionLevel" exact="4" operation="add"/>
            </do_if>
            <set_value name="$Valid" exact="2" comment="Valid mission variables"/>
          </do_if>
        </do_if>
        <remove_value name="$AnchorSector"/>
        <remove_value name="$NearClusters"/>
      </actions>
    </library>
    <cue name="Assassinate__Standard" instantiate="true" namespace="this">
      <conditions>
        <event_cue_signalled/>
        <!--Signal the static cue to trigger a new instance of this mission.
        Signalling a running instance will trigger a followup mission to run its GM library. See XXX_Activate_FollowUp cue for parameters-->
      </conditions>
      <actions>
        <set_value name="$Definition" exact="event.param"/>
        <set_value name="$Page" exact="$Definition.$Page"/>
        <set_value name="$TextOffsets" exact="$Definition.$TextOffset.clone"/>
        <shuffle_list list="$TextOffsets"/>
        <set_value name="$FollowUp" exact="@$Definition.$FollowUp == true" comment="Does this mission follow directly after another, with parameters potentially passing between them. This changes how this mission is spawned and managed."/>
        <set_value name="$SuccessfullyGenerated" exact="false"/>
        <set_value name="$DebugChance" exact="$Definition.$ThreadData.$DebugChance"/>
        <set_value name="$Difficulty" exact="level.medium"/>
        <set_value name="$MissionLevel" exact="1" comment="Can be increased by library Assassinate__Enemy_S_M_Ship."/>
        <assert value="not $FollowUp" text="'This mission does not currently have any parameters where it makes sense as a follow up mission. If there is, adjust the _Activate_FollowUp cue and remove this assert [Owen]'"/>
        <do_all exact="$TextOffsets.count" counter="$offset_i">
          <set_value name="$TextOffset" exact="$TextOffsets.{$offset_i}"/>
          <!--This mission is specific enough that it will only run if a matching text offset is found. If not, the offer will abort with an error.
          $Valid:
          0: Page/TextOffset not handled
          1: Correct Page/TextOffset but unable to setup mission
          2: Mission can attempt to be spawned -->
          <set_value name="$Valid" exact="0"/>
          <!--### ARGON VS XENON ###-->
          <do_if value="$Page == 30210">
            <do_if value="$TextOffset == 107000 or $TextOffset == 107100">
              <set_value name="$Valid" exact="1" comment="Valid text offset"/>
              <include_actions ref="Assassinate__Enemy_S_M_Ship"/>
            </do_if>
            <do_elseif value="$TextOffset == 107200">
              <set_value name="$Valid" exact="1" comment="Valid text offset"/>
              <include_actions ref="Assassinate__NonAlly_S_M_Ship"/>
            </do_elseif>
          </do_if>
          <!--### ARGON VS HOLY ORDER ###-->
          <do_elseif value="$Page == 30211">
            <do_if value="$TextOffset == 107000 or $TextOffset == 107100">
              <set_value name="$Valid" exact="1" comment="Valid text offset"/>
              <include_actions ref="Assassinate__Enemy_S_M_Ship"/>
            </do_if>
            <do_elseif value="$TextOffset == 107200">
              <set_value name="$Valid" exact="1" comment="Valid text offset"/>
              <include_actions ref="Assassinate__NonAlly_S_M_Ship"/>
            </do_elseif>
          </do_elseif>
          <!--### PARANID VS HOLY ORDER ###-->
          <do_elseif value="$Page == 30212">
            <do_if value="$TextOffset == 107000 or $TextOffset == 107100">
              <set_value name="$Valid" exact="1" comment="Valid text offset"/>
              <include_actions ref="Assassinate__Enemy_S_M_Ship"/>
            </do_if>
            <do_elseif value="$TextOffset == 107200">
              <set_value name="$Valid" exact="1" comment="Valid text offset"/>
              <include_actions ref="Assassinate__NonAlly_S_M_Ship"/>
            </do_elseif>
          </do_elseif>
          <!--### HOLY ORDER VS ARGON ###-->
          <do_elseif value="$Page == 30213">
            <do_if value="$TextOffset == 107000 or $TextOffset == 107100">
              <set_value name="$Valid" exact="1" comment="Valid text offset"/>
              <include_actions ref="Assassinate__Enemy_S_M_Ship"/>
            </do_if>
            <do_elseif value="$TextOffset == 107200">
              <set_value name="$Valid" exact="1" comment="Valid text offset"/>
              <include_actions ref="Assassinate__NonAlly_S_M_Ship"/>
            </do_elseif>
          </do_elseif>
          <!--### HOLY ORDER VS PARANID ###-->
          <do_elseif value="$Page == 30214">
            <do_if value="$TextOffset == 107000 or $TextOffset == 107100">
              <set_value name="$Valid" exact="1" comment="Valid text offset"/>
              <include_actions ref="Assassinate__Enemy_S_M_Ship"/>
            </do_if>
            <do_elseif value="$TextOffset == 107200">
              <set_value name="$Valid" exact="1" comment="Valid text offset"/>
              <include_actions ref="Assassinate__NonAlly_S_M_Ship"/>
            </do_elseif>
          </do_elseif>
          <!--### SPLIT VS ARGON ###-->
          <do_elseif value="$Page == 30215">

          <do_if value="$TextOffset == 107000 or $TextOffset == 107100"><set_value name="$Valid" exact="1" comment="Valid text offset"/><include_actions ref="Assassinate__Enemy_S_M_Ship"/></do_if><do_elseif value="$TextOffset == 107200"><set_value name="$Valid" exact="1" comment="Valid text offset"/><include_actions ref="Assassinate__NonAlly_S_M_Ship"/></do_elseif></do_elseif>
          <!--### DLC 2 Setup ###-->
          <do_elseif value="$Page == 30216">

          <do_if value="$TextOffset == 107000 or $TextOffset == 107100"><set_value name="$Valid" exact="1" comment="Valid text offset"/><include_actions ref="Assassinate__Enemy_S_M_Ship"/></do_if><do_elseif value="$TextOffset == 107200"><set_value name="$Valid" exact="1" comment="Valid text offset"/><include_actions ref="Assassinate__NonAlly_S_M_Ship"/></do_elseif></do_elseif>
          <do_if value="$Valid == 0">
            <debug_text text="'Attempting to spawn a mission on ' + this + ' but the combination of Page: ' + $Page + ' and TextOffset: ' + $TextOffset + ' do not match any definitions [Owen]'" filter="error"/>
          </do_if>
          <do_elseif value="$Valid == 2">
            <break/>
          </do_elseif>
        </do_all>
        <do_if value="$Valid == 2">
          <do_if value="$FollowUp">
            <!--Followup missions use the namespace as the mission cue-->
            <set_value name="$MissionCue" exact="namespace"/>
          </do_if>
          <do_else>
            <set_value name="$MissionCue" exact="null"/>
          </do_else>
        </do_if>
        <do_else>
          <do_if value="$Valid == 1">
            <debug_text text="'Unable to find suitable variant variables for mission on ' + this + ' with combination of Page: ' + $Page + ' and TextOffsets: ' + $TextOffsets + '. [Owen]'" chance="$DebugChance"/>
          </do_if>
          <signal_cue cue="$Definition.$SpawnFailedCue"/>
          <cancel_cue cue="this"/>
        </do_else>
      </actions>
      <cues>
        <cue name="Assassinate__Standard_FollowUp_Manager" onfail="cancel">
          <conditions>
            <check_value value="$FollowUp"/>
          </conditions>
          <actions>
            <!--If this is going to be a followup mission, first, inform the mission thread manager of this submission so it can be displayed in the offer.-->
            <!--Currently means you need to find the mission name here, instead of relying on the GM itself finding it.-->
            <set_value name="$MissionName" exact="readtext.{$Page}.{$TextOffset + 1}"/>
            <set_value name="$MissionDescription" exact="readtext.{$Page}.{$TextOffset + 2}"/>
            <debug_text text="'Attempting to signal the mission thread that followup mission cue ' + $MissionCue + ' is ready to be added to the offer'" chance="$DebugChance"/>
            <set_value name="$MissionDataTable" exact="table[$Name = $MissionName, $Cue = $MissionCue, $WrapperCue = $MissionCue, $FollowUp = true]"/>
            <signal_cue_instantly cue="$Definition.$SpawnSuccessCue" param="$MissionDataTable"/>
          </actions>
          <cues>
            <cue name="Assassinate__Standard_FollowUp_Offer_Accepted">
              <conditions>
                <event_cue_signalled cue="$Definition.$OfferAcceptedCue"/>
                <check_value value="event.param == $MissionCue"/>
              </conditions>
              <actions>
                <!--We don't want to call the GM yet. Create the mission here and pass it into the GM when the previous mission ends
                TODO @Owen Move this to a library in the GM file?-->
                <create_mission cue="$MissionCue" missionthread="$Definition.$ThreadCue" name="$MissionName" description="$MissionDescription" faction="$Definition.$ThreadData.$Faction" type="missiontype.deliver">
                  <briefing>
                    <!--TODO @Owen Better objective?-->
                    <objective step="1" action="objective.find"/>
                  </briefing>
                </create_mission>
              </actions>
            </cue>
            <cue name="Assassinate__Standard_Aborted">
              <conditions>
                <event_cue_signalled cue="$Definition.$ForceCleanupCue"/>
              </conditions>
              <actions>
                <cancel_cue cue="namespace"/>
              </actions>
            </cue>
            <!--namespace signalled to activate followup mission
            event.param = Station to supply-->
            <cue name="Assassinate__Standard_Activate_FollowUp">
              <conditions>
                <event_cue_signalled cue="namespace"/>
              </conditions>
              <actions>
                <!--Check that the correct parameters have been passed-->
                <do_if value="false">
                  <!--Currently no followup case for this type of mission-->
                  <signal_cue cue="Assassinate__Standard_Create_GM"/>
                  <cancel_cue cue="parent"/>
                </do_if>
                <do_else>
                  <assert value="false" text="namespace + ' was signalled to start a followup mission, but the passed parameter ' + event.param + ' was not what this mission was expecting. Ending mission.'"/>
                  <!--TODO @Owen what if there is another followup mission?-->
                  <signal_cue_instantly cue="$Definition.$EndedCue" param="namespace"/>
                  <cancel_cue cue="namespace"/>
                </do_else>
              </actions>
            </cue>
          </cues>
        </cue>
        <cue name="Assassinate__Standard_Not_FollowUp" onfail="cancel">
          <conditions>
            <check_value value="not $FollowUp"/>
          </conditions>
          <actions>
            <signal_cue cue="Assassinate__Standard_Create_GM"/>
          </actions>
        </cue>
        <cue name="Assassinate__Standard_Create_GM">
          <conditions>
            <event_cue_signalled/>
          </conditions>
          <cues>
            <!-- Trigger actual GM, passing the specified parameters -->
            <cue name="Assassinate__Standard_Ref" ref="md.GM_Assassinate.Start">
              <param name="Client" value="$Definition.$ThreadData.$Contact"/>
              <param name="MissionCue" value="$MissionCue"/>
              <param name="MissionThread" value="$Definition.$ThreadCue"/>
              <param name="ReportSignalCue" value="Assassinate__Standard_GM_Event" comment="tell GM to call this cue when done"/>
              <param name="WithoutOffer" value="true"/>
              <param name="WithoutOfferWaitCue" value="if $FollowUp then null else $Definition.$OfferAcceptedCue"/>
              <param name="ForceCleanup" value="$Definition.$ForceCleanupCue"/>
              <param name="Page" value="$Page"/>
              <param name="TextOffset" value="$TextOffset"/>
              <param name="MissionLevel" value="$MissionLevel"/>
              <param name="Difficulty" value="$Difficulty"/>
              <param name="AssassinationTarget" value="$TargetShip.pilot"/>
              <param name="DebugChance" value="$DebugChance"/>
            </cue>
            <!--Signalled by GM when an event happens e.g. mission successfully generated or mission ended.
            Feedback values saved to the static of this cue: $FeedbackValue and $EndFeedbackValue-->
            <cue name="Assassinate__Standard_GM_Event" instantiate="true">
              <conditions>
                <event_cue_signalled/>
              </conditions>
              <actions>
                <include_actions ref="MM__Standard_GM_Event"/>
              </actions>
            </cue>
          </cues>
        </cue>
      </cues>
    </cue>
    <library name="Support_Invasion__Get_Invasion">
      <actions>
        <do_if value="$Definition.$ThreadData.$WarFront? and $Definition.$ThreadData.$WarFront.$HostInvasions.count">
          <shuffle_list list="$Definition.$ThreadData.$WarFront.$HostInvasions"/>
          <do_all exact="$Definition.$ThreadData.$WarFront.$HostInvasions.count" counter="$i">
            <do_if value="$Definition.$ThreadData.$WarFront.$HostInvasions.{$i}.exists">
              <set_value name="$InvasionCue" exact="$Definition.$ThreadData.$WarFront.$HostInvasions.{$i}"/>
              <set_value name="$Valid" exact="2" comment="Valid mission variables"/>
              <break/>
            </do_if>
          </do_all>
        </do_if>
      </actions>
    </library>
    <cue name="Support_Invasion__Standard" instantiate="true" namespace="this">
      <conditions>
        <event_cue_signalled/>
        <!--Signal the static cue to trigger a new instance of this mission.
        Signalling a running instance will trigger a followup mission to run its GM library. See XXX_Activate_FollowUp cue for parameters-->
      </conditions>
      <actions>
        <set_value name="$Definition" exact="event.param"/>
        <set_value name="$Page" exact="$Definition.$Page"/>
        <set_value name="$TextOffsets" exact="$Definition.$TextOffset.clone"/>
        <shuffle_list list="$TextOffsets"/>
        <set_value name="$FollowUp" exact="@$Definition.$FollowUp == true" comment="Does this mission follow directly after another, with parameters potentially passing between them. This changes how this mission is spawned and managed."/>
        <set_value name="$SuccessfullyGenerated" exact="false"/>
        <set_value name="$DebugChance" exact="$Definition.$ThreadData.$DebugChance"/>
        <set_value name="$Difficulty" exact="level.hard"/>
        <set_value name="$MissionLevel" exact="1"/>
        <assert value="not $FollowUp" text="'This mission does not currently have any parameters where it makes sense as a follow up mission. If there is, adjust the _Activate_FollowUp cue and remove this assert [Owen]'"/>
        <do_all exact="$TextOffsets.count" counter="$offset_i">
          <set_value name="$TextOffset" exact="$TextOffsets.{$offset_i}"/>
          <!--This mission is specific enough that it will only run if a matching text offset is found. If not, the offer will abort with an error.
          $Valid:
          0: Page/TextOffset not handled
          1: Correct Page/TextOffset but unable to setup mission
          2: Mission can attempt to be spawned -->
          <set_value name="$Valid" exact="0"/>
          <!--### ARGON VS XENON ###-->
          <do_if value="$Page == 30210">
            <do_if value="$TextOffset == 109000">
              <set_value name="$Valid" exact="1" comment="Valid text offset"/>
              <include_actions ref="Support_Invasion__Get_Invasion"/>
            </do_if>
          </do_if>
          <!--### ARGON VS HOLY ORDER ###-->
          <do_elseif value="$Page == 30211">
            <do_if value="$TextOffset == 109000">
              <set_value name="$Valid" exact="1" comment="Valid text offset"/>
              <include_actions ref="Support_Invasion__Get_Invasion"/>
            </do_if>
          </do_elseif>
          <!--### PARANID VS HOLY ORDER ###-->
          <do_elseif value="$Page == 30212">
            <do_if value="$TextOffset == 109000">
              <set_value name="$Valid" exact="1" comment="Valid text offset"/>
              <include_actions ref="Support_Invasion__Get_Invasion"/>
            </do_if>
          </do_elseif>
          <!--### HOLY ORDER VS ARGON ###-->
          <do_elseif value="$Page == 30213">
            <do_if value="$TextOffset == 109000">
              <set_value name="$Valid" exact="1" comment="Valid text offset"/>
              <include_actions ref="Support_Invasion__Get_Invasion"/>
            </do_if>
          </do_elseif>
          <!--### HOLY ORDER VS PARANID ###-->
          <do_elseif value="$Page == 30214">
            <do_if value="$TextOffset == 109000">
              <set_value name="$Valid" exact="1" comment="Valid text offset"/>
              <include_actions ref="Support_Invasion__Get_Invasion"/>
            </do_if>
          </do_elseif>
          <!--### SPLIT VS ARGON ###-->
          <do_elseif value="$Page == 30215">

          <do_if value="$TextOffset == 109000"><set_value name="$Valid" exact="1" comment="Valid text offset"/><include_actions ref="Support_Invasion__Get_Invasion"/></do_if></do_elseif>
          <!--### DLC 2 Setup ###-->
          <do_elseif value="$Page == 30216">

          <do_if value="$TextOffset == 109000"><set_value name="$Valid" exact="1" comment="Valid text offset"/><include_actions ref="Support_Invasion__Get_Invasion"/></do_if></do_elseif>
          <do_if value="$Valid == 0">
            <debug_text text="'Attempting to spawn a mission on ' + this + ' but the combination of Page: ' + $Page + ' and TextOffset: ' + $TextOffset + ' do not match any definitions [Owen]'" filter="error"/>
          </do_if>
          <do_elseif value="$Valid == 2">
            <break/>
          </do_elseif>
        </do_all>
        <do_if value="$Valid == 2">
          <do_if value="$FollowUp">
            <!--Followup missions use the namespace as the mission cue-->
            <set_value name="$MissionCue" exact="namespace"/>
          </do_if>
          <do_else>
            <set_value name="$MissionCue" exact="null"/>
          </do_else>
        </do_if>
        <do_else>
          <do_if value="$Valid == 1">
            <debug_text text="'Unable to find suitable variant variables for mission on ' + this + ' with combination of Page: ' + $Page + ' and TextOffsets: ' + $TextOffsets + '. [Owen]'" chance="$DebugChance"/>
          </do_if>
          <signal_cue cue="$Definition.$SpawnFailedCue"/>
          <cancel_cue cue="this"/>
        </do_else>
      </actions>
      <cues>
        <cue name="Support_Invasion__Standard_FollowUp_Manager" onfail="cancel">
          <conditions>
            <check_value value="$FollowUp"/>
          </conditions>
          <actions>
            <!--If this is going to be a followup mission, first, inform the mission thread manager of this submission so it can be displayed in the offer.-->
            <!--Currently means you need to find the mission name here, instead of relying on the GM itself finding it.-->
            <set_value name="$MissionName" exact="readtext.{$Page}.{$TextOffset + 1}"/>
            <set_value name="$MissionDescription" exact="readtext.{$Page}.{$TextOffset + 2}"/>
            <debug_text text="'Attempting to signal the mission thread that followup mission cue ' + $MissionCue + ' is ready to be added to the offer'" chance="$DebugChance"/>
            <set_value name="$MissionDataTable" exact="table[$Name = $MissionName, $Cue = $MissionCue, $WrapperCue = $MissionCue, $FollowUp = true]"/>
            <signal_cue_instantly cue="$Definition.$SpawnSuccessCue" param="$MissionDataTable"/>
          </actions>
          <cues>
            <cue name="Support_Invasion__Standard_FollowUp_Offer_Accepted">
              <conditions>
                <event_cue_signalled cue="$Definition.$OfferAcceptedCue"/>
                <check_value value="event.param == $MissionCue"/>
              </conditions>
              <actions>
                <!--We don't want to call the GM yet. Create the mission here and pass it into the GM when the previous mission ends
                TODO @Owen Move this to a library in the GM file?-->
                <create_mission cue="$MissionCue" missionthread="$Definition.$ThreadCue" name="$MissionName" description="$MissionDescription" faction="$Definition.$ThreadData.$Faction" type="missiontype.fight">
                  <briefing>
                    <!--TODO @Owen Better objective?-->
                    <objective step="1" action="objective.secure" object="$InvasionCue.$Target"/>
                  </briefing>
                </create_mission>
              </actions>
            </cue>
            <cue name="Support_Invasion__Standard_Aborted">
              <conditions>
                <event_cue_signalled cue="$Definition.$ForceCleanupCue"/>
              </conditions>
              <actions>
                <cancel_cue cue="namespace"/>
              </actions>
            </cue>
            <!--namespace signalled to activate followup mission
            event.param = Station to supply-->
            <cue name="Support_Invasion__Standard_Activate_FollowUp">
              <conditions>
                <event_cue_signalled cue="namespace"/>
              </conditions>
              <actions>
                <!--Check that the correct parameters have been passed-->
                <do_if value="false">
                  <!--Currently no followup case for this type of mission-->
                  <signal_cue cue="Support_Invasion__Standard_Create_GM"/>
                  <cancel_cue cue="parent"/>
                </do_if>
                <do_else>
                  <assert value="false" text="namespace + ' was signalled to start a followup mission, but the passed parameter ' + event.param + ' was not what this mission was expecting. Ending mission.'"/>
                  <!--TODO @Owen what if there is another followup mission?-->
                  <signal_cue_instantly cue="$Definition.$EndedCue" param="namespace"/>
                  <cancel_cue cue="namespace"/>
                </do_else>
              </actions>
            </cue>
          </cues>
        </cue>
        <cue name="Support_Invasion__Standard_Not_FollowUp" onfail="cancel">
          <conditions>
            <check_value value="not $FollowUp"/>
          </conditions>
          <actions>
            <signal_cue cue="Support_Invasion__Standard_Create_GM"/>
          </actions>
        </cue>
        <cue name="Support_Invasion__Standard_Create_GM">
          <conditions>
            <event_cue_signalled/>
          </conditions>
          <cues>
            <!-- Trigger actual GM, passing the specified parameters -->
            <cue name="Support_Invasion__Standard_Ref" ref="md.GM_Support_Invasion.Start">
              <param name="Client" value="$Definition.$ThreadData.$Contact"/>
              <param name="MissionCue" value="$MissionCue"/>
              <param name="MissionThread" value="$Definition.$ThreadCue"/>
              <param name="ReportSignalCue" value="Support_Invasion__Standard_GM_Event" comment="tell GM to call this cue when done"/>
              <param name="WithoutOffer" value="true"/>
              <param name="WithoutOfferWaitCue" value="if $FollowUp then null else $Definition.$OfferAcceptedCue"/>
              <param name="ForceCleanup" value="$Definition.$ForceCleanupCue"/>
              <param name="Page" value="$Page"/>
              <param name="TextOffset" value="$TextOffset"/>
              <param name="MissionLevel" value="$MissionLevel"/>
              <param name="Difficulty" value="$Difficulty"/>
              <param name="InvasionCue" value="$InvasionCue"/>
              <param name="DebugChance" value="$DebugChance"/>
            </cue>
            <!--Signalled by GM when an event happens e.g. mission successfully generated or mission ended.
            Feedback values saved to the static of this cue: $FeedbackValue and $EndFeedbackValue-->
            <cue name="Support_Invasion__Standard_GM_Event" instantiate="true">
              <conditions>
                <event_cue_signalled/>
              </conditions>
              <actions>
                <include_actions ref="MM__Standard_GM_Event"/>
              </actions>
            </cue>
          </cues>
        </cue>
      </cues>
    </cue>
  </cues>
</mdscript>
